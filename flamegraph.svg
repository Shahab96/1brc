<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="178053"><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (836 samples, 0.47%)</title><rect x="0.7936%" y="757" width="0.4695%" height="15" fill="rgb(227,0,7)" fg:x="1413" fg:w="836"/><text x="1.0436%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (836 samples, 0.47%)</title><rect x="0.7936%" y="741" width="0.4695%" height="15" fill="rgb(217,0,24)" fg:x="1413" fg:w="836"/><text x="1.0436%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (836 samples, 0.47%)</title><rect x="0.7936%" y="725" width="0.4695%" height="15" fill="rgb(221,193,54)" fg:x="1413" fg:w="836"/><text x="1.0436%" y="735.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3,259 samples, 1.83%)</title><rect x="0.0011%" y="773" width="1.8304%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="3259"/><text x="0.2511%" y="783.50">&lt;..</text></g><g><title>core::slice::memchr::memchr (1,012 samples, 0.57%)</title><rect x="1.2631%" y="757" width="0.5684%" height="15" fill="rgb(208,68,35)" fg:x="2249" fg:w="1012"/><text x="1.5131%" y="767.50"></text></g><g><title>__GI___libc_free (492 samples, 0.28%)</title><rect x="1.8315%" y="773" width="0.2763%" height="15" fill="rgb(232,128,0)" fg:x="3261" fg:w="492"/><text x="2.0815%" y="783.50"></text></g><g><title>__memcmp_evex_movbe (782 samples, 0.44%)</title><rect x="2.1089%" y="773" width="0.4392%" height="15" fill="rgb(207,160,47)" fg:x="3755" fg:w="782"/><text x="2.3589%" y="783.50"></text></g><g><title>_int_free (1,948 samples, 1.09%)</title><rect x="2.5481%" y="773" width="1.0941%" height="15" fill="rgb(228,23,34)" fg:x="4537" fg:w="1948"/><text x="2.7981%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,503 samples, 0.84%)</title><rect x="3.6422%" y="773" width="0.8441%" height="15" fill="rgb(218,30,26)" fg:x="6485" fg:w="1503"/><text x="3.8922%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,336 samples, 0.75%)</title><rect x="3.7360%" y="757" width="0.7503%" height="15" fill="rgb(220,122,19)" fg:x="6652" fg:w="1336"/><text x="3.9860%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1,336 samples, 0.75%)</title><rect x="3.7360%" y="741" width="0.7503%" height="15" fill="rgb(250,228,42)" fg:x="6652" fg:w="1336"/><text x="3.9860%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,336 samples, 0.75%)</title><rect x="3.7360%" y="725" width="0.7503%" height="15" fill="rgb(240,193,28)" fg:x="6652" fg:w="1336"/><text x="3.9860%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,336 samples, 0.75%)</title><rect x="3.7360%" y="709" width="0.7503%" height="15" fill="rgb(216,20,37)" fg:x="6652" fg:w="1336"/><text x="3.9860%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,336 samples, 0.75%)</title><rect x="3.7360%" y="693" width="0.7503%" height="15" fill="rgb(206,188,39)" fg:x="6652" fg:w="1336"/><text x="3.9860%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,336 samples, 0.75%)</title><rect x="3.7360%" y="677" width="0.7503%" height="15" fill="rgb(217,207,13)" fg:x="6652" fg:w="1336"/><text x="3.9860%" y="687.50"></text></g><g><title>core::hash::Hasher::write_u8 (468 samples, 0.26%)</title><rect x="4.2235%" y="661" width="0.2628%" height="15" fill="rgb(231,73,38)" fg:x="7520" fg:w="468"/><text x="4.4735%" y="671.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (390 samples, 0.22%)</title><rect x="4.4863%" y="773" width="0.2190%" height="15" fill="rgb(225,20,46)" fg:x="7988" fg:w="390"/><text x="4.7363%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (390 samples, 0.22%)</title><rect x="4.4863%" y="757" width="0.2190%" height="15" fill="rgb(210,31,41)" fg:x="7988" fg:w="390"/><text x="4.7363%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (390 samples, 0.22%)</title><rect x="4.4863%" y="741" width="0.2190%" height="15" fill="rgb(221,200,47)" fg:x="7988" fg:w="390"/><text x="4.7363%" y="751.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,465 samples, 0.82%)</title><rect x="4.7053%" y="773" width="0.8228%" height="15" fill="rgb(226,26,5)" fg:x="8378" fg:w="1465"/><text x="4.9553%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (444 samples, 0.25%)</title><rect x="6.0364%" y="757" width="0.2494%" height="15" fill="rgb(249,33,26)" fg:x="10748" fg:w="444"/><text x="6.2864%" y="767.50"></text></g><g><title>[anon] (11,742 samples, 6.59%)</title><rect x="0.0000%" y="789" width="6.5947%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="11742"/><text x="0.2500%" y="799.50">[anon]</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,899 samples, 1.07%)</title><rect x="5.5281%" y="773" width="1.0665%" height="15" fill="rgb(221,5,38)" fg:x="9843" fg:w="1899"/><text x="5.7781%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (550 samples, 0.31%)</title><rect x="6.2858%" y="757" width="0.3089%" height="15" fill="rgb(247,18,42)" fg:x="11192" fg:w="550"/><text x="6.5358%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (550 samples, 0.31%)</title><rect x="6.2858%" y="741" width="0.3089%" height="15" fill="rgb(241,131,45)" fg:x="11192" fg:w="550"/><text x="6.5358%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (550 samples, 0.31%)</title><rect x="6.2858%" y="725" width="0.3089%" height="15" fill="rgb(249,31,29)" fg:x="11192" fg:w="550"/><text x="6.5358%" y="735.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (550 samples, 0.31%)</title><rect x="6.2858%" y="709" width="0.3089%" height="15" fill="rgb(225,111,53)" fg:x="11192" fg:w="550"/><text x="6.5358%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (550 samples, 0.31%)</title><rect x="6.2858%" y="693" width="0.3089%" height="15" fill="rgb(238,160,17)" fg:x="11192" fg:w="550"/><text x="6.5358%" y="703.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (550 samples, 0.31%)</title><rect x="6.2858%" y="677" width="0.3089%" height="15" fill="rgb(214,148,48)" fg:x="11192" fg:w="550"/><text x="6.5358%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (550 samples, 0.31%)</title><rect x="6.2858%" y="661" width="0.3089%" height="15" fill="rgb(232,36,49)" fg:x="11192" fg:w="550"/><text x="6.5358%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (550 samples, 0.31%)</title><rect x="6.2858%" y="645" width="0.3089%" height="15" fill="rgb(209,103,24)" fg:x="11192" fg:w="550"/><text x="6.5358%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,745 samples, 0.98%)</title><rect x="7.2754%" y="773" width="0.9800%" height="15" fill="rgb(229,88,8)" fg:x="12954" fg:w="1745"/><text x="7.5254%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (517 samples, 0.29%)</title><rect x="10.2166%" y="757" width="0.2904%" height="15" fill="rgb(213,181,19)" fg:x="18191" fg:w="517"/><text x="10.4666%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (517 samples, 0.29%)</title><rect x="10.2166%" y="741" width="0.2904%" height="15" fill="rgb(254,191,54)" fg:x="18191" fg:w="517"/><text x="10.4666%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (517 samples, 0.29%)</title><rect x="10.2166%" y="725" width="0.2904%" height="15" fill="rgb(241,83,37)" fg:x="18191" fg:w="517"/><text x="10.4666%" y="735.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,152 samples, 2.33%)</title><rect x="8.2554%" y="773" width="2.3319%" height="15" fill="rgb(233,36,39)" fg:x="14699" fg:w="4152"/><text x="8.5054%" y="783.50">&lt;..</text></g><g><title>core::slice::memchr::memchr (143 samples, 0.08%)</title><rect x="10.5070%" y="757" width="0.0803%" height="15" fill="rgb(226,3,54)" fg:x="18708" fg:w="143"/><text x="10.7570%" y="767.50"></text></g><g><title>[unknown] (86 samples, 0.05%)</title><rect x="10.5873%" y="773" width="0.0483%" height="15" fill="rgb(245,192,40)" fg:x="18851" fg:w="86"/><text x="10.8373%" y="783.50"></text></g><g><title>[unknown] (86 samples, 0.05%)</title><rect x="10.5873%" y="757" width="0.0483%" height="15" fill="rgb(238,167,29)" fg:x="18851" fg:w="86"/><text x="10.8373%" y="767.50"></text></g><g><title>[unknown] (83 samples, 0.05%)</title><rect x="10.5890%" y="741" width="0.0466%" height="15" fill="rgb(232,182,51)" fg:x="18854" fg:w="83"/><text x="10.8390%" y="751.50"></text></g><g><title>[unknown] (82 samples, 0.05%)</title><rect x="10.5895%" y="725" width="0.0461%" height="15" fill="rgb(231,60,39)" fg:x="18855" fg:w="82"/><text x="10.8395%" y="735.50"></text></g><g><title>[unknown] (80 samples, 0.04%)</title><rect x="10.5907%" y="709" width="0.0449%" height="15" fill="rgb(208,69,12)" fg:x="18857" fg:w="80"/><text x="10.8407%" y="719.50"></text></g><g><title>[unknown] (77 samples, 0.04%)</title><rect x="10.5924%" y="693" width="0.0432%" height="15" fill="rgb(235,93,37)" fg:x="18860" fg:w="77"/><text x="10.8424%" y="703.50"></text></g><g><title>[unknown] (76 samples, 0.04%)</title><rect x="10.5929%" y="677" width="0.0427%" height="15" fill="rgb(213,116,39)" fg:x="18861" fg:w="76"/><text x="10.8429%" y="687.50"></text></g><g><title>[unknown] (76 samples, 0.04%)</title><rect x="10.5929%" y="661" width="0.0427%" height="15" fill="rgb(222,207,29)" fg:x="18861" fg:w="76"/><text x="10.8429%" y="671.50"></text></g><g><title>__GI___libc_free (1,065 samples, 0.60%)</title><rect x="10.6356%" y="773" width="0.5981%" height="15" fill="rgb(206,96,30)" fg:x="18937" fg:w="1065"/><text x="10.8856%" y="783.50"></text></g><g><title>__GI___libc_malloc (956 samples, 0.54%)</title><rect x="11.2337%" y="773" width="0.5369%" height="15" fill="rgb(218,138,4)" fg:x="20002" fg:w="956"/><text x="11.4837%" y="783.50"></text></g><g><title>__memcmp_evex_movbe (340 samples, 0.19%)</title><rect x="11.7707%" y="773" width="0.1910%" height="15" fill="rgb(250,191,14)" fg:x="20958" fg:w="340"/><text x="12.0207%" y="783.50"></text></g><g><title>__memcpy_evex_unaligned_erms (475 samples, 0.27%)</title><rect x="11.9616%" y="773" width="0.2668%" height="15" fill="rgb(239,60,40)" fg:x="21298" fg:w="475"/><text x="12.2116%" y="783.50"></text></g><g><title>__round (493 samples, 0.28%)</title><rect x="12.2284%" y="773" width="0.2769%" height="15" fill="rgb(206,27,48)" fg:x="21773" fg:w="493"/><text x="12.4784%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (451 samples, 0.25%)</title><rect x="12.5053%" y="773" width="0.2533%" height="15" fill="rgb(225,35,8)" fg:x="22266" fg:w="451"/><text x="12.7553%" y="783.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3,246 samples, 1.82%)</title><rect x="12.7586%" y="773" width="1.8231%" height="15" fill="rgb(250,213,24)" fg:x="22717" fg:w="3246"/><text x="13.0086%" y="783.50">c..</text></g><g><title>core::num::dec2flt::dec2flt (885 samples, 0.50%)</title><rect x="14.0846%" y="757" width="0.4970%" height="15" fill="rgb(247,123,22)" fg:x="25078" fg:w="885"/><text x="14.3346%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1,894 samples, 1.06%)</title><rect x="14.5816%" y="773" width="1.0637%" height="15" fill="rgb(231,138,38)" fg:x="25963" fg:w="1894"/><text x="14.8316%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (501 samples, 0.28%)</title><rect x="15.3640%" y="757" width="0.2814%" height="15" fill="rgb(231,145,46)" fg:x="27356" fg:w="501"/><text x="15.6140%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (501 samples, 0.28%)</title><rect x="15.3640%" y="741" width="0.2814%" height="15" fill="rgb(251,118,11)" fg:x="27356" fg:w="501"/><text x="15.6140%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,036 samples, 0.58%)</title><rect x="15.6453%" y="773" width="0.5818%" height="15" fill="rgb(217,147,25)" fg:x="27857" fg:w="1036"/><text x="15.8953%" y="783.50"></text></g><g><title>[unknown] (17,153 samples, 9.63%)</title><rect x="6.5947%" y="789" width="9.6336%" height="15" fill="rgb(247,81,37)" fg:x="11742" fg:w="17153"/><text x="6.8447%" y="799.50">[unknown]</text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (533 samples, 0.30%)</title><rect x="18.9365%" y="469" width="0.2993%" height="15" fill="rgb(209,12,38)" fg:x="33717" fg:w="533"/><text x="19.1865%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (533 samples, 0.30%)</title><rect x="18.9365%" y="453" width="0.2993%" height="15" fill="rgb(227,1,9)" fg:x="33717" fg:w="533"/><text x="19.1865%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (533 samples, 0.30%)</title><rect x="18.9365%" y="437" width="0.2993%" height="15" fill="rgb(248,47,43)" fg:x="33717" fg:w="533"/><text x="19.1865%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,403 samples, 1.91%)</title><rect x="19.2358%" y="469" width="1.9112%" height="15" fill="rgb(221,10,30)" fg:x="34250" fg:w="3403"/><text x="19.4858%" y="479.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3,403 samples, 1.91%)</title><rect x="19.2358%" y="453" width="1.9112%" height="15" fill="rgb(210,229,1)" fg:x="34250" fg:w="3403"/><text x="19.4858%" y="463.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,403 samples, 1.91%)</title><rect x="19.2358%" y="437" width="1.9112%" height="15" fill="rgb(222,148,37)" fg:x="34250" fg:w="3403"/><text x="19.4858%" y="447.50">&lt;..</text></g><g><title>__memcmp_evex_movbe (3,335 samples, 1.87%)</title><rect x="19.2740%" y="421" width="1.8730%" height="15" fill="rgb(234,67,33)" fg:x="34318" fg:w="3335"/><text x="19.5240%" y="431.50">_..</text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="21.1353%" y="405" width="0.0118%" height="15" fill="rgb(247,98,35)" fg:x="37632" fg:w="21"/><text x="21.3853%" y="415.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="21.1353%" y="389" width="0.0118%" height="15" fill="rgb(247,138,52)" fg:x="37632" fg:w="21"/><text x="21.3853%" y="399.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="21.1353%" y="373" width="0.0118%" height="15" fill="rgb(213,79,30)" fg:x="37632" fg:w="21"/><text x="21.3853%" y="383.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="21.1353%" y="357" width="0.0118%" height="15" fill="rgb(246,177,23)" fg:x="37632" fg:w="21"/><text x="21.3853%" y="367.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="21.1353%" y="341" width="0.0118%" height="15" fill="rgb(230,62,27)" fg:x="37632" fg:w="21"/><text x="21.3853%" y="351.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="21.1353%" y="325" width="0.0118%" height="15" fill="rgb(216,154,8)" fg:x="37632" fg:w="21"/><text x="21.3853%" y="335.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="21.1353%" y="309" width="0.0118%" height="15" fill="rgb(244,35,45)" fg:x="37632" fg:w="21"/><text x="21.3853%" y="319.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="21.1358%" y="293" width="0.0112%" height="15" fill="rgb(251,115,12)" fg:x="37633" fg:w="20"/><text x="21.3858%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,406 samples, 0.79%)</title><rect x="21.1471%" y="469" width="0.7897%" height="15" fill="rgb(240,54,50)" fg:x="37653" fg:w="1406"/><text x="21.3971%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,406 samples, 0.79%)</title><rect x="21.1471%" y="453" width="0.7897%" height="15" fill="rgb(233,84,52)" fg:x="37653" fg:w="1406"/><text x="21.3971%" y="463.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="23.7407%" y="437" width="0.0146%" height="15" fill="rgb(207,117,47)" fg:x="42271" fg:w="26"/><text x="23.9907%" y="447.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="23.7407%" y="421" width="0.0146%" height="15" fill="rgb(249,43,39)" fg:x="42271" fg:w="26"/><text x="23.9907%" y="431.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="23.7407%" y="405" width="0.0146%" height="15" fill="rgb(209,38,44)" fg:x="42271" fg:w="26"/><text x="23.9907%" y="415.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="23.7407%" y="389" width="0.0146%" height="15" fill="rgb(236,212,23)" fg:x="42271" fg:w="26"/><text x="23.9907%" y="399.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="23.7407%" y="373" width="0.0146%" height="15" fill="rgb(242,79,21)" fg:x="42271" fg:w="26"/><text x="23.9907%" y="383.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="23.7407%" y="357" width="0.0146%" height="15" fill="rgb(211,96,35)" fg:x="42271" fg:w="26"/><text x="23.9907%" y="367.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="23.7407%" y="341" width="0.0146%" height="15" fill="rgb(253,215,40)" fg:x="42271" fg:w="26"/><text x="23.9907%" y="351.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="23.7412%" y="325" width="0.0140%" height="15" fill="rgb(211,81,21)" fg:x="42272" fg:w="25"/><text x="23.9912%" y="335.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="23.7418%" y="309" width="0.0135%" height="15" fill="rgb(208,190,38)" fg:x="42273" fg:w="24"/><text x="23.9918%" y="319.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="23.7429%" y="293" width="0.0124%" height="15" fill="rgb(235,213,38)" fg:x="42275" fg:w="22"/><text x="23.9929%" y="303.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="23.7441%" y="277" width="0.0112%" height="15" fill="rgb(237,122,38)" fg:x="42277" fg:w="20"/><text x="23.9941%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (474 samples, 0.27%)</title><rect x="23.7553%" y="437" width="0.2662%" height="15" fill="rgb(244,218,35)" fg:x="42297" fg:w="474"/><text x="24.0053%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (438 samples, 0.25%)</title><rect x="24.0215%" y="437" width="0.2460%" height="15" fill="rgb(240,68,47)" fg:x="42771" fg:w="438"/><text x="24.2715%" y="447.50"></text></g><g><title>core::ptr::align_offset (438 samples, 0.25%)</title><rect x="24.0215%" y="421" width="0.2460%" height="15" fill="rgb(210,16,53)" fg:x="42771" fg:w="438"/><text x="24.2715%" y="431.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (905 samples, 0.51%)</title><rect x="24.2675%" y="437" width="0.5083%" height="15" fill="rgb(235,124,12)" fg:x="43209" fg:w="905"/><text x="24.5175%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (111 samples, 0.06%)</title><rect x="24.7134%" y="421" width="0.0623%" height="15" fill="rgb(224,169,11)" fg:x="44003" fg:w="111"/><text x="24.9634%" y="431.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (22,370 samples, 12.56%)</title><rect x="16.8360%" y="485" width="12.5637%" height="15" fill="rgb(250,166,2)" fg:x="29977" fg:w="22370"/><text x="17.0860%" y="495.50">&lt;core::str::pattern..</text></g><g><title>core::slice::memchr::memchr (13,288 samples, 7.46%)</title><rect x="21.9367%" y="469" width="7.4629%" height="15" fill="rgb(242,216,29)" fg:x="39059" fg:w="13288"/><text x="22.1867%" y="479.50">core::slic..</text></g><g><title>core::slice::memchr::memchr_aligned (12,760 samples, 7.17%)</title><rect x="22.2333%" y="453" width="7.1664%" height="15" fill="rgb(230,116,27)" fg:x="39587" fg:w="12760"/><text x="22.4833%" y="463.50">core::slic..</text></g><g><title>core::slice::memchr::memchr_naive (8,231 samples, 4.62%)</title><rect x="24.7769%" y="437" width="4.6228%" height="15" fill="rgb(228,99,48)" fg:x="44116" fg:w="8231"/><text x="25.0269%" y="447.50">core:..</text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="29.3896%" y="421" width="0.0101%" height="15" fill="rgb(253,11,6)" fg:x="52329" fg:w="18"/><text x="29.6396%" y="431.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="29.3896%" y="405" width="0.0101%" height="15" fill="rgb(247,143,39)" fg:x="52329" fg:w="18"/><text x="29.6396%" y="415.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="29.3896%" y="389" width="0.0101%" height="15" fill="rgb(236,97,10)" fg:x="52329" fg:w="18"/><text x="29.6396%" y="399.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="29.3896%" y="373" width="0.0101%" height="15" fill="rgb(233,208,19)" fg:x="52329" fg:w="18"/><text x="29.6396%" y="383.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="29.3896%" y="357" width="0.0101%" height="15" fill="rgb(216,164,2)" fg:x="52329" fg:w="18"/><text x="29.6396%" y="367.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="29.3896%" y="341" width="0.0101%" height="15" fill="rgb(220,129,5)" fg:x="52329" fg:w="18"/><text x="29.6396%" y="351.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="29.3896%" y="325" width="0.0101%" height="15" fill="rgb(242,17,10)" fg:x="52329" fg:w="18"/><text x="29.6396%" y="335.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (23,998 samples, 13.48%)</title><rect x="16.2300%" y="517" width="13.4780%" height="15" fill="rgb(242,107,0)" fg:x="28898" fg:w="23998"/><text x="16.4800%" y="527.50">&lt;core::str::iter::Sp..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (23,998 samples, 13.48%)</title><rect x="16.2300%" y="501" width="13.4780%" height="15" fill="rgb(251,28,31)" fg:x="28898" fg:w="23998"/><text x="16.4800%" y="511.50">core::str::iter::Spl..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (546 samples, 0.31%)</title><rect x="29.4014%" y="485" width="0.3067%" height="15" fill="rgb(233,223,10)" fg:x="52350" fg:w="546"/><text x="29.6514%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (546 samples, 0.31%)</title><rect x="29.4014%" y="469" width="0.3067%" height="15" fill="rgb(215,21,27)" fg:x="52350" fg:w="546"/><text x="29.6514%" y="479.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (538 samples, 0.30%)</title><rect x="30.5353%" y="405" width="0.3022%" height="15" fill="rgb(232,23,21)" fg:x="54369" fg:w="538"/><text x="30.7853%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (538 samples, 0.30%)</title><rect x="30.5353%" y="389" width="0.3022%" height="15" fill="rgb(244,5,23)" fg:x="54369" fg:w="538"/><text x="30.7853%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (77 samples, 0.04%)</title><rect x="30.7942%" y="373" width="0.0432%" height="15" fill="rgb(226,81,46)" fg:x="54830" fg:w="77"/><text x="31.0442%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (77 samples, 0.04%)</title><rect x="30.7942%" y="357" width="0.0432%" height="15" fill="rgb(247,70,30)" fg:x="54830" fg:w="77"/><text x="31.0442%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (77 samples, 0.04%)</title><rect x="30.7942%" y="341" width="0.0432%" height="15" fill="rgb(212,68,19)" fg:x="54830" fg:w="77"/><text x="31.0442%" y="351.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (26,011 samples, 14.61%)</title><rect x="16.2300%" y="549" width="14.6086%" height="15" fill="rgb(240,187,13)" fg:x="28898" fg:w="26011"/><text x="16.4800%" y="559.50">&lt;core::str::iter::Line..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26,011 samples, 14.61%)</title><rect x="16.2300%" y="533" width="14.6086%" height="15" fill="rgb(223,113,26)" fg:x="28898" fg:w="26011"/><text x="16.4800%" y="543.50">&lt;core::iter::adapters:..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,013 samples, 1.13%)</title><rect x="29.7080%" y="517" width="1.1306%" height="15" fill="rgb(206,192,2)" fg:x="52896" fg:w="2013"/><text x="29.9580%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,013 samples, 1.13%)</title><rect x="29.7080%" y="501" width="1.1306%" height="15" fill="rgb(241,108,4)" fg:x="52896" fg:w="2013"/><text x="29.9580%" y="511.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (2,013 samples, 1.13%)</title><rect x="29.7080%" y="485" width="1.1306%" height="15" fill="rgb(247,173,49)" fg:x="52896" fg:w="2013"/><text x="29.9580%" y="495.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (2,013 samples, 1.13%)</title><rect x="29.7080%" y="469" width="1.1306%" height="15" fill="rgb(224,114,35)" fg:x="52896" fg:w="2013"/><text x="29.9580%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1,993 samples, 1.12%)</title><rect x="29.7192%" y="453" width="1.1193%" height="15" fill="rgb(245,159,27)" fg:x="52916" fg:w="1993"/><text x="29.9692%" y="463.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (1,993 samples, 1.12%)</title><rect x="29.7192%" y="437" width="1.1193%" height="15" fill="rgb(245,172,44)" fg:x="52916" fg:w="1993"/><text x="29.9692%" y="447.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1,993 samples, 1.12%)</title><rect x="29.7192%" y="421" width="1.1193%" height="15" fill="rgb(236,23,11)" fg:x="52916" fg:w="1993"/><text x="29.9692%" y="431.50"></text></g><g><title>checked_request2size (606 samples, 0.34%)</title><rect x="33.5468%" y="277" width="0.3403%" height="15" fill="rgb(205,117,38)" fg:x="59731" fg:w="606"/><text x="33.7968%" y="287.50"></text></g><g><title>__GI___libc_malloc (4,350 samples, 2.44%)</title><rect x="32.2825%" y="293" width="2.4431%" height="15" fill="rgb(237,72,25)" fg:x="57480" fg:w="4350"/><text x="32.5325%" y="303.50">__..</text></g><g><title>tcache_get (1,493 samples, 0.84%)</title><rect x="33.8871%" y="277" width="0.8385%" height="15" fill="rgb(244,70,9)" fg:x="60337" fg:w="1493"/><text x="34.1371%" y="287.50"></text></g><g><title>__rdl_alloc (842 samples, 0.47%)</title><rect x="34.7256%" y="293" width="0.4729%" height="15" fill="rgb(217,125,39)" fg:x="61830" fg:w="842"/><text x="34.9756%" y="303.50"></text></g><g><title>__rust_alloc (511 samples, 0.29%)</title><rect x="35.1985%" y="293" width="0.2870%" height="15" fill="rgb(235,36,10)" fg:x="62672" fg:w="511"/><text x="35.4485%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,152 samples, 3.46%)</title><rect x="32.2814%" y="341" width="3.4552%" height="15" fill="rgb(251,123,47)" fg:x="57478" fg:w="6152"/><text x="32.5314%" y="351.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (6,152 samples, 3.46%)</title><rect x="32.2814%" y="325" width="3.4552%" height="15" fill="rgb(221,13,13)" fg:x="57478" fg:w="6152"/><text x="32.5314%" y="335.50">all..</text></g><g><title>alloc::alloc::alloc (6,152 samples, 3.46%)</title><rect x="32.2814%" y="309" width="3.4552%" height="15" fill="rgb(238,131,9)" fg:x="57478" fg:w="6152"/><text x="32.5314%" y="319.50">all..</text></g><g><title>core::ptr::read_volatile (447 samples, 0.25%)</title><rect x="35.4855%" y="293" width="0.2510%" height="15" fill="rgb(211,50,8)" fg:x="63183" fg:w="447"/><text x="35.7355%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,611 samples, 3.71%)</title><rect x="32.0253%" y="389" width="3.7129%" height="15" fill="rgb(245,182,24)" fg:x="57022" fg:w="6611"/><text x="32.2753%" y="399.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,611 samples, 3.71%)</title><rect x="32.0253%" y="373" width="3.7129%" height="15" fill="rgb(242,14,37)" fg:x="57022" fg:w="6611"/><text x="32.2753%" y="383.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6,611 samples, 3.71%)</title><rect x="32.0253%" y="357" width="3.7129%" height="15" fill="rgb(246,228,12)" fg:x="57022" fg:w="6611"/><text x="32.2753%" y="367.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8,090 samples, 4.54%)</title><rect x="32.0253%" y="405" width="4.5436%" height="15" fill="rgb(213,55,15)" fg:x="57022" fg:w="8090"/><text x="32.2753%" y="415.50">&lt;T as..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,479 samples, 0.83%)</title><rect x="35.7382%" y="389" width="0.8307%" height="15" fill="rgb(209,9,3)" fg:x="63633" fg:w="1479"/><text x="35.9882%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,479 samples, 0.83%)</title><rect x="35.7382%" y="373" width="0.8307%" height="15" fill="rgb(230,59,30)" fg:x="63633" fg:w="1479"/><text x="35.9882%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1,477 samples, 0.83%)</title><rect x="35.7394%" y="357" width="0.8295%" height="15" fill="rgb(209,121,21)" fg:x="63635" fg:w="1477"/><text x="35.9894%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8,553 samples, 4.80%)</title><rect x="31.7658%" y="469" width="4.8036%" height="15" fill="rgb(220,109,13)" fg:x="56560" fg:w="8553"/><text x="32.0158%" y="479.50">alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8,553 samples, 4.80%)</title><rect x="31.7658%" y="453" width="4.8036%" height="15" fill="rgb(232,18,1)" fg:x="56560" fg:w="8553"/><text x="32.0158%" y="463.50">alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,553 samples, 4.80%)</title><rect x="31.7658%" y="437" width="4.8036%" height="15" fill="rgb(215,41,42)" fg:x="56560" fg:w="8553"/><text x="32.0158%" y="447.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (8,553 samples, 4.80%)</title><rect x="31.7658%" y="421" width="4.8036%" height="15" fill="rgb(224,123,36)" fg:x="56560" fg:w="8553"/><text x="32.0158%" y="431.50">alloc:..</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (9,004 samples, 5.06%)</title><rect x="31.7658%" y="517" width="5.0569%" height="15" fill="rgb(240,125,3)" fg:x="56560" fg:w="9004"/><text x="32.0158%" y="527.50">&lt;str a..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (9,004 samples, 5.06%)</title><rect x="31.7658%" y="501" width="5.0569%" height="15" fill="rgb(205,98,50)" fg:x="56560" fg:w="9004"/><text x="32.0158%" y="511.50">&lt;alloc..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9,004 samples, 5.06%)</title><rect x="31.7658%" y="485" width="5.0569%" height="15" fill="rgb(205,185,37)" fg:x="56560" fg:w="9004"/><text x="32.0158%" y="495.50">alloc:..</text></g><g><title>alloc::string::String::from_utf8_unchecked (451 samples, 0.25%)</title><rect x="36.5694%" y="469" width="0.2533%" height="15" fill="rgb(238,207,15)" fg:x="65113" fg:w="451"/><text x="36.8194%" y="479.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (1,051 samples, 0.59%)</title><rect x="36.8256%" y="517" width="0.5903%" height="15" fill="rgb(213,199,42)" fg:x="65569" fg:w="1051"/><text x="37.0756%" y="527.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (1,064 samples, 0.60%)</title><rect x="37.4158%" y="517" width="0.5976%" height="15" fill="rgb(235,201,11)" fg:x="66620" fg:w="1064"/><text x="37.6658%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (551 samples, 0.31%)</title><rect x="38.0134%" y="517" width="0.3095%" height="15" fill="rgb(207,46,11)" fg:x="67684" fg:w="551"/><text x="38.2634%" y="527.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (555 samples, 0.31%)</title><rect x="38.3318%" y="485" width="0.3117%" height="15" fill="rgb(241,35,35)" fg:x="68251" fg:w="555"/><text x="38.5818%" y="495.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="38.6267%" y="469" width="0.0168%" height="15" fill="rgb(243,32,47)" fg:x="68776" fg:w="30"/><text x="38.8767%" y="479.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="38.6278%" y="453" width="0.0157%" height="15" fill="rgb(247,202,23)" fg:x="68778" fg:w="28"/><text x="38.8778%" y="463.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="38.6278%" y="437" width="0.0157%" height="15" fill="rgb(219,102,11)" fg:x="68778" fg:w="28"/><text x="38.8778%" y="447.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="38.6278%" y="421" width="0.0157%" height="15" fill="rgb(243,110,44)" fg:x="68778" fg:w="28"/><text x="38.8778%" y="431.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="38.6278%" y="405" width="0.0157%" height="15" fill="rgb(222,74,54)" fg:x="68778" fg:w="28"/><text x="38.8778%" y="415.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="38.6289%" y="389" width="0.0146%" height="15" fill="rgb(216,99,12)" fg:x="68780" fg:w="26"/><text x="38.8789%" y="399.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="38.6295%" y="373" width="0.0140%" height="15" fill="rgb(226,22,26)" fg:x="68781" fg:w="25"/><text x="38.8795%" y="383.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="38.6301%" y="357" width="0.0135%" height="15" fill="rgb(217,163,10)" fg:x="68782" fg:w="24"/><text x="38.8801%" y="367.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="38.6306%" y="341" width="0.0129%" height="15" fill="rgb(213,25,53)" fg:x="68783" fg:w="23"/><text x="38.8806%" y="351.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="38.6312%" y="325" width="0.0124%" height="15" fill="rgb(252,105,26)" fg:x="68784" fg:w="22"/><text x="38.8812%" y="335.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="38.6312%" y="309" width="0.0124%" height="15" fill="rgb(220,39,43)" fg:x="68784" fg:w="22"/><text x="38.8812%" y="319.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="38.6334%" y="293" width="0.0101%" height="15" fill="rgb(229,68,48)" fg:x="68788" fg:w="18"/><text x="38.8834%" y="303.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (1,323 samples, 0.74%)</title><rect x="40.0302%" y="453" width="0.7430%" height="15" fill="rgb(252,8,32)" fg:x="71275" fg:w="1323"/><text x="40.2802%" y="463.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (1,704 samples, 0.96%)</title><rect x="40.7733%" y="453" width="0.9570%" height="15" fill="rgb(223,20,43)" fg:x="72598" fg:w="1704"/><text x="41.0233%" y="463.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (482 samples, 0.27%)</title><rect x="41.7314%" y="453" width="0.2707%" height="15" fill="rgb(229,81,49)" fg:x="74304" fg:w="482"/><text x="41.9814%" y="463.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (4,402 samples, 2.47%)</title><rect x="39.5337%" y="469" width="2.4723%" height="15" fill="rgb(236,28,36)" fg:x="70391" fg:w="4402"/><text x="39.7837%" y="479.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_number (1,342 samples, 0.75%)</title><rect x="42.5491%" y="453" width="0.7537%" height="15" fill="rgb(249,185,26)" fg:x="75760" fg:w="1342"/><text x="42.7991%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (453 samples, 0.25%)</title><rect x="47.1640%" y="405" width="0.2544%" height="15" fill="rgb(249,174,33)" fg:x="83977" fg:w="453"/><text x="47.4140%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (476 samples, 0.27%)</title><rect x="47.4218%" y="389" width="0.2673%" height="15" fill="rgb(233,201,37)" fg:x="84436" fg:w="476"/><text x="47.6718%" y="399.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (4,977 samples, 2.80%)</title><rect x="45.1135%" y="421" width="2.7952%" height="15" fill="rgb(221,78,26)" fg:x="80326" fg:w="4977"/><text x="45.3635%" y="431.50">&lt;[..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (873 samples, 0.49%)</title><rect x="47.4185%" y="405" width="0.4903%" height="15" fill="rgb(250,127,30)" fg:x="84430" fg:w="873"/><text x="47.6685%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (391 samples, 0.22%)</title><rect x="47.6892%" y="389" width="0.2196%" height="15" fill="rgb(230,49,44)" fg:x="84912" fg:w="391"/><text x="47.9392%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (6,333 samples, 3.56%)</title><rect x="44.3677%" y="437" width="3.5568%" height="15" fill="rgb(229,67,23)" fg:x="78998" fg:w="6333"/><text x="44.6177%" y="447.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (24 samples, 0.01%)</title><rect x="47.9110%" y="421" width="0.0135%" height="15" fill="rgb(249,83,47)" fg:x="85307" fg:w="24"/><text x="48.1610%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (17,100 samples, 9.60%)</title><rect x="38.3229%" y="517" width="9.6039%" height="15" fill="rgb(215,43,3)" fg:x="68235" fg:w="17100"/><text x="38.5729%" y="527.50">core::str::&lt;im..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (17,096 samples, 9.60%)</title><rect x="38.3251%" y="501" width="9.6016%" height="15" fill="rgb(238,154,13)" fg:x="68239" fg:w="17096"/><text x="38.5751%" y="511.50">core::num::dec..</text></g><g><title>core::num::dec2flt::dec2flt (16,529 samples, 9.28%)</title><rect x="38.6435%" y="485" width="9.2832%" height="15" fill="rgb(219,56,2)" fg:x="68806" fg:w="16529"/><text x="38.8935%" y="495.50">core::num::de..</text></g><g><title>core::num::dec2flt::parse::parse_number (10,542 samples, 5.92%)</title><rect x="42.0060%" y="469" width="5.9207%" height="15" fill="rgb(233,0,4)" fg:x="74793" fg:w="10542"/><text x="42.2560%" y="479.50">core::nu..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (8,233 samples, 4.62%)</title><rect x="43.3028%" y="453" width="4.6239%" height="15" fill="rgb(235,30,7)" fg:x="77102" fg:w="8233"/><text x="43.5528%" y="463.50">core:..</text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,045 samples, 0.59%)</title><rect x="47.9425%" y="501" width="0.5869%" height="15" fill="rgb(250,79,13)" fg:x="85363" fg:w="1045"/><text x="48.1925%" y="511.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (106 samples, 0.06%)</title><rect x="48.5294%" y="501" width="0.0595%" height="15" fill="rgb(211,146,34)" fg:x="86408" fg:w="106"/><text x="48.7794%" y="511.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="50.4238%" y="485" width="0.0146%" height="15" fill="rgb(228,22,38)" fg:x="89781" fg:w="26"/><text x="50.6738%" y="495.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="50.4243%" y="469" width="0.0140%" height="15" fill="rgb(235,168,5)" fg:x="89782" fg:w="25"/><text x="50.6743%" y="479.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="50.4243%" y="453" width="0.0140%" height="15" fill="rgb(221,155,16)" fg:x="89782" fg:w="25"/><text x="50.6743%" y="463.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="50.4243%" y="437" width="0.0140%" height="15" fill="rgb(215,215,53)" fg:x="89782" fg:w="25"/><text x="50.6743%" y="447.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="50.4243%" y="421" width="0.0140%" height="15" fill="rgb(223,4,10)" fg:x="89782" fg:w="25"/><text x="50.6743%" y="431.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="50.4243%" y="405" width="0.0140%" height="15" fill="rgb(234,103,6)" fg:x="89782" fg:w="25"/><text x="50.6743%" y="415.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="50.4243%" y="389" width="0.0140%" height="15" fill="rgb(227,97,0)" fg:x="89782" fg:w="25"/><text x="50.6743%" y="399.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="50.4249%" y="373" width="0.0135%" height="15" fill="rgb(234,150,53)" fg:x="89783" fg:w="24"/><text x="50.6749%" y="383.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="50.4249%" y="357" width="0.0135%" height="15" fill="rgb(228,201,54)" fg:x="89783" fg:w="24"/><text x="50.6749%" y="367.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="50.4249%" y="341" width="0.0135%" height="15" fill="rgb(222,22,37)" fg:x="89783" fg:w="24"/><text x="50.6749%" y="351.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="50.4249%" y="325" width="0.0135%" height="15" fill="rgb(237,53,32)" fg:x="89783" fg:w="24"/><text x="50.6749%" y="335.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="50.4249%" y="309" width="0.0135%" height="15" fill="rgb(233,25,53)" fg:x="89783" fg:w="24"/><text x="50.6749%" y="319.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="50.4254%" y="293" width="0.0129%" height="15" fill="rgb(210,40,34)" fg:x="89784" fg:w="23"/><text x="50.6754%" y="303.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="50.4260%" y="277" width="0.0124%" height="15" fill="rgb(241,220,44)" fg:x="89785" fg:w="22"/><text x="50.6760%" y="287.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (480 samples, 0.27%)</title><rect x="50.4384%" y="485" width="0.2696%" height="15" fill="rgb(235,28,35)" fg:x="89807" fg:w="480"/><text x="50.6884%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (480 samples, 0.27%)</title><rect x="50.4384%" y="469" width="0.2696%" height="15" fill="rgb(210,56,17)" fg:x="89807" fg:w="480"/><text x="50.6884%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (480 samples, 0.27%)</title><rect x="50.4384%" y="453" width="0.2696%" height="15" fill="rgb(224,130,29)" fg:x="89807" fg:w="480"/><text x="50.6884%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,050 samples, 2.27%)</title><rect x="50.7079%" y="485" width="2.2746%" height="15" fill="rgb(235,212,8)" fg:x="90287" fg:w="4050"/><text x="50.9579%" y="495.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4,050 samples, 2.27%)</title><rect x="50.7079%" y="469" width="2.2746%" height="15" fill="rgb(223,33,50)" fg:x="90287" fg:w="4050"/><text x="50.9579%" y="479.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,050 samples, 2.27%)</title><rect x="50.7079%" y="453" width="2.2746%" height="15" fill="rgb(219,149,13)" fg:x="90287" fg:w="4050"/><text x="50.9579%" y="463.50">&lt;..</text></g><g><title>__memcmp_evex_movbe (3,737 samples, 2.10%)</title><rect x="50.8837%" y="437" width="2.0988%" height="15" fill="rgb(250,156,29)" fg:x="90600" fg:w="3737"/><text x="51.1337%" y="447.50">_..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (975 samples, 0.55%)</title><rect x="52.9825%" y="485" width="0.5476%" height="15" fill="rgb(216,193,19)" fg:x="94337" fg:w="975"/><text x="53.2325%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (975 samples, 0.55%)</title><rect x="52.9825%" y="469" width="0.5476%" height="15" fill="rgb(216,135,14)" fg:x="94337" fg:w="975"/><text x="53.2325%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (37 samples, 0.02%)</title><rect x="53.7756%" y="453" width="0.0208%" height="15" fill="rgb(241,47,5)" fg:x="95749" fg:w="37"/><text x="54.0256%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (65 samples, 0.04%)</title><rect x="53.7963%" y="453" width="0.0365%" height="15" fill="rgb(233,42,35)" fg:x="95786" fg:w="65"/><text x="54.0463%" y="463.50"></text></g><g><title>core::ptr::align_offset (65 samples, 0.04%)</title><rect x="53.7963%" y="437" width="0.0365%" height="15" fill="rgb(231,13,6)" fg:x="95786" fg:w="65"/><text x="54.0463%" y="447.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (57 samples, 0.03%)</title><rect x="53.8328%" y="453" width="0.0320%" height="15" fill="rgb(207,181,40)" fg:x="95851" fg:w="57"/><text x="54.0828%" y="463.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2,162 samples, 1.21%)</title><rect x="53.5796%" y="469" width="1.2142%" height="15" fill="rgb(254,173,49)" fg:x="95400" fg:w="2162"/><text x="53.8296%" y="479.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,651 samples, 0.93%)</title><rect x="53.8665%" y="453" width="0.9273%" height="15" fill="rgb(221,1,38)" fg:x="95911" fg:w="1651"/><text x="54.1165%" y="463.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (15,700 samples, 8.82%)</title><rect x="48.5889%" y="501" width="8.8176%" height="15" fill="rgb(206,124,46)" fg:x="86514" fg:w="15700"/><text x="48.8389%" y="511.50">&lt;core::str::..</text></g><g><title>core::slice::memchr::memchr (6,902 samples, 3.88%)</title><rect x="53.5301%" y="485" width="3.8764%" height="15" fill="rgb(249,21,11)" fg:x="95312" fg:w="6902"/><text x="53.7801%" y="495.50">core..</text></g><g><title>core::slice::memchr::memchr_naive (4,652 samples, 2.61%)</title><rect x="54.7938%" y="469" width="2.6127%" height="15" fill="rgb(222,201,40)" fg:x="97562" fg:w="4652"/><text x="55.0438%" y="479.50">co..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (16,886 samples, 9.48%)</title><rect x="47.9267%" y="517" width="9.4837%" height="15" fill="rgb(235,61,29)" fg:x="85335" fg:w="16886"/><text x="48.1767%" y="527.50">core::str::&lt;im..</text></g><g><title>one_brc::process_lines (455 samples, 0.26%)</title><rect x="57.4104%" y="517" width="0.2555%" height="15" fill="rgb(219,207,3)" fg:x="102221" fg:w="455"/><text x="57.6604%" y="527.50"></text></g><g><title>one_brc::round_towards_positive (3,800 samples, 2.13%)</title><rect x="57.6660%" y="517" width="2.1342%" height="15" fill="rgb(222,56,46)" fg:x="102676" fg:w="3800"/><text x="57.9160%" y="527.50">o..</text></g><g><title>std::f64::&lt;impl f64&gt;::round (2,154 samples, 1.21%)</title><rect x="58.5904%" y="501" width="1.2098%" height="15" fill="rgb(239,76,54)" fg:x="104322" fg:w="2154"/><text x="58.8404%" y="511.50"></text></g><g><title>__round (2,154 samples, 1.21%)</title><rect x="58.5904%" y="485" width="1.2098%" height="15" fill="rgb(231,124,27)" fg:x="104322" fg:w="2154"/><text x="58.8404%" y="495.50"></text></g><g><title>_int_free (6,202 samples, 3.48%)</title><rect x="60.9116%" y="325" width="3.4832%" height="15" fill="rgb(249,195,6)" fg:x="108455" fg:w="6202"/><text x="61.1616%" y="335.50">_in..</text></g><g><title>tcache_put (958 samples, 0.54%)</title><rect x="63.8568%" y="309" width="0.5380%" height="15" fill="rgb(237,174,47)" fg:x="113699" fg:w="958"/><text x="64.1068%" y="319.50"></text></g><g><title>__GI___libc_free (9,079 samples, 5.10%)</title><rect x="60.1096%" y="341" width="5.0990%" height="15" fill="rgb(206,201,31)" fg:x="107027" fg:w="9079"/><text x="60.3596%" y="351.50">__GI__..</text></g><g><title>arena_for_chunk (1,449 samples, 0.81%)</title><rect x="64.3949%" y="325" width="0.8138%" height="15" fill="rgb(231,57,52)" fg:x="114657" fg:w="1449"/><text x="64.6449%" y="335.50"></text></g><g><title>arena_for_chunk (930 samples, 0.52%)</title><rect x="64.6864%" y="309" width="0.5223%" height="15" fill="rgb(248,177,22)" fg:x="115176" fg:w="930"/><text x="64.9364%" y="319.50"></text></g><g><title>heap_for_ptr (504 samples, 0.28%)</title><rect x="64.9256%" y="293" width="0.2831%" height="15" fill="rgb(215,211,37)" fg:x="115602" fg:w="504"/><text x="65.1756%" y="303.50"></text></g><g><title>__rdl_dealloc (593 samples, 0.33%)</title><rect x="65.2087%" y="341" width="0.3330%" height="15" fill="rgb(241,128,51)" fg:x="116106" fg:w="593"/><text x="65.4587%" y="351.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (10,662 samples, 5.99%)</title><rect x="59.8002%" y="501" width="5.9881%" height="15" fill="rgb(227,165,31)" fg:x="106476" fg:w="10662"/><text x="60.0502%" y="511.50">std::col..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (10,662 samples, 5.99%)</title><rect x="59.8002%" y="485" width="5.9881%" height="15" fill="rgb(228,167,24)" fg:x="106476" fg:w="10662"/><text x="60.0502%" y="495.50">hashbrow..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,one_brc::Measurement&gt;&gt; (10,662 samples, 5.99%)</title><rect x="59.8002%" y="469" width="5.9881%" height="15" fill="rgb(228,143,12)" fg:x="106476" fg:w="10662"/><text x="60.0502%" y="479.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (10,662 samples, 5.99%)</title><rect x="59.8002%" y="453" width="5.9881%" height="15" fill="rgb(249,149,8)" fg:x="106476" fg:w="10662"/><text x="60.0502%" y="463.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (10,641 samples, 5.98%)</title><rect x="59.8120%" y="437" width="5.9763%" height="15" fill="rgb(243,35,44)" fg:x="106497" fg:w="10641"/><text x="60.0620%" y="447.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (10,641 samples, 5.98%)</title><rect x="59.8120%" y="421" width="5.9763%" height="15" fill="rgb(246,89,9)" fg:x="106497" fg:w="10641"/><text x="60.0620%" y="431.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (10,641 samples, 5.98%)</title><rect x="59.8120%" y="405" width="5.9763%" height="15" fill="rgb(233,213,13)" fg:x="106497" fg:w="10641"/><text x="60.0620%" y="415.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,641 samples, 5.98%)</title><rect x="59.8120%" y="389" width="5.9763%" height="15" fill="rgb(233,141,41)" fg:x="106497" fg:w="10641"/><text x="60.0620%" y="399.50">&lt;alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10,641 samples, 5.98%)</title><rect x="59.8120%" y="373" width="5.9763%" height="15" fill="rgb(239,167,4)" fg:x="106497" fg:w="10641"/><text x="60.0620%" y="383.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (10,641 samples, 5.98%)</title><rect x="59.8120%" y="357" width="5.9763%" height="15" fill="rgb(209,217,16)" fg:x="106497" fg:w="10641"/><text x="60.0620%" y="367.50">alloc::a..</text></g><g><title>__rust_dealloc (439 samples, 0.25%)</title><rect x="65.5417%" y="341" width="0.2466%" height="15" fill="rgb(219,88,35)" fg:x="116699" fg:w="439"/><text x="65.7917%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (10,664 samples, 5.99%)</title><rect x="59.8002%" y="517" width="5.9892%" height="15" fill="rgb(220,193,23)" fg:x="106476" fg:w="10664"/><text x="60.0502%" y="527.50">std::col..</text></g><g><title>core::hash::BuildHasher::hash_one (127 samples, 0.07%)</title><rect x="68.1303%" y="389" width="0.0713%" height="15" fill="rgb(230,90,52)" fg:x="121308" fg:w="127"/><text x="68.3803%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (671 samples, 0.38%)</title><rect x="68.2016%" y="389" width="0.3769%" height="15" fill="rgb(252,106,19)" fg:x="121435" fg:w="671"/><text x="68.4516%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,690 samples, 0.95%)</title><rect x="67.8837%" y="405" width="0.9492%" height="15" fill="rgb(206,74,20)" fg:x="120869" fg:w="1690"/><text x="68.1337%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (453 samples, 0.25%)</title><rect x="68.5785%" y="389" width="0.2544%" height="15" fill="rgb(230,138,44)" fg:x="122106" fg:w="453"/><text x="68.8285%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,996 samples, 1.12%)</title><rect x="69.3490%" y="389" width="1.1210%" height="15" fill="rgb(235,182,43)" fg:x="123478" fg:w="1996"/><text x="69.5990%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,318 samples, 2.43%)</title><rect x="68.8329%" y="405" width="2.4251%" height="15" fill="rgb(242,16,51)" fg:x="122559" fg:w="4318"/><text x="69.0829%" y="415.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,403 samples, 0.79%)</title><rect x="70.4700%" y="389" width="0.7880%" height="15" fill="rgb(248,9,4)" fg:x="125474" fg:w="1403"/><text x="70.7200%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7,311 samples, 4.11%)</title><rect x="67.1530%" y="421" width="4.1061%" height="15" fill="rgb(210,31,22)" fg:x="119568" fg:w="7311"/><text x="67.4030%" y="431.50">&lt;cor..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7,321 samples, 4.11%)</title><rect x="67.1530%" y="453" width="4.1117%" height="15" fill="rgb(239,54,39)" fg:x="119568" fg:w="7321"/><text x="67.4030%" y="463.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7,321 samples, 4.11%)</title><rect x="67.1530%" y="437" width="4.1117%" height="15" fill="rgb(230,99,41)" fg:x="119568" fg:w="7321"/><text x="67.4030%" y="447.50">&lt;cor..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (885 samples, 0.50%)</title><rect x="71.2647%" y="453" width="0.4970%" height="15" fill="rgb(253,106,12)" fg:x="126889" fg:w="885"/><text x="71.5147%" y="463.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (442 samples, 0.25%)</title><rect x="71.5135%" y="437" width="0.2482%" height="15" fill="rgb(213,46,41)" fg:x="127332" fg:w="442"/><text x="71.7635%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (442 samples, 0.25%)</title><rect x="71.5135%" y="421" width="0.2482%" height="15" fill="rgb(215,133,35)" fg:x="127332" fg:w="442"/><text x="71.7635%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (442 samples, 0.25%)</title><rect x="71.5135%" y="405" width="0.2482%" height="15" fill="rgb(213,28,5)" fg:x="127332" fg:w="442"/><text x="71.7635%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (524 samples, 0.29%)</title><rect x="73.4961%" y="341" width="0.2943%" height="15" fill="rgb(215,77,49)" fg:x="130862" fg:w="524"/><text x="73.7461%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (320 samples, 0.18%)</title><rect x="74.0527%" y="325" width="0.1797%" height="15" fill="rgb(248,100,22)" fg:x="131853" fg:w="320"/><text x="74.3027%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,047 samples, 0.59%)</title><rect x="73.7904%" y="341" width="0.5880%" height="15" fill="rgb(208,67,9)" fg:x="131386" fg:w="1047"/><text x="74.0404%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (260 samples, 0.15%)</title><rect x="74.2324%" y="325" width="0.1460%" height="15" fill="rgb(219,133,21)" fg:x="132173" fg:w="260"/><text x="74.4824%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.01%)</title><rect x="75.6073%" y="325" width="0.0129%" height="15" fill="rgb(246,46,29)" fg:x="134621" fg:w="23"/><text x="75.8573%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (2,251 samples, 1.26%)</title><rect x="74.3801%" y="341" width="1.2642%" height="15" fill="rgb(246,185,52)" fg:x="132436" fg:w="2251"/><text x="74.6301%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.02%)</title><rect x="75.6224%" y="325" width="0.0219%" height="15" fill="rgb(252,136,11)" fg:x="134648" fg:w="39"/><text x="75.8724%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,472 samples, 3.63%)</title><rect x="72.0145%" y="357" width="3.6349%" height="15" fill="rgb(219,138,53)" fg:x="128224" fg:w="6472"/><text x="72.2645%" y="367.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (84 samples, 0.05%)</title><rect x="77.0203%" y="325" width="0.0472%" height="15" fill="rgb(211,51,23)" fg:x="137137" fg:w="84"/><text x="77.2703%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (149 samples, 0.08%)</title><rect x="77.1102%" y="309" width="0.0837%" height="15" fill="rgb(247,221,28)" fg:x="137297" fg:w="149"/><text x="77.3602%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (361 samples, 0.20%)</title><rect x="77.0675%" y="325" width="0.2027%" height="15" fill="rgb(251,222,45)" fg:x="137221" fg:w="361"/><text x="77.3175%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (136 samples, 0.08%)</title><rect x="77.1939%" y="309" width="0.0764%" height="15" fill="rgb(217,162,53)" fg:x="137446" fg:w="136"/><text x="77.4439%" y="319.50"></text></g><g><title>core::cmp::min (437 samples, 0.25%)</title><rect x="77.2764%" y="325" width="0.2454%" height="15" fill="rgb(229,93,14)" fg:x="137593" fg:w="437"/><text x="77.5264%" y="335.50"></text></g><g><title>core::cmp::Ord::min (437 samples, 0.25%)</title><rect x="77.2764%" y="309" width="0.2454%" height="15" fill="rgb(209,67,49)" fg:x="137593" fg:w="437"/><text x="77.5264%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (437 samples, 0.25%)</title><rect x="77.2764%" y="293" width="0.2454%" height="15" fill="rgb(213,87,29)" fg:x="137593" fg:w="437"/><text x="77.5264%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,138 samples, 2.89%)</title><rect x="75.9442%" y="341" width="2.8857%" height="15" fill="rgb(205,151,52)" fg:x="135221" fg:w="5138"/><text x="76.1942%" y="351.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (2,329 samples, 1.31%)</title><rect x="77.5219%" y="325" width="1.3080%" height="15" fill="rgb(253,215,39)" fg:x="138030" fg:w="2329"/><text x="77.7719%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (21,267 samples, 11.94%)</title><rect x="66.8863%" y="485" width="11.9442%" height="15" fill="rgb(221,220,41)" fg:x="119093" fg:w="21267"/><text x="67.1363%" y="495.50">hashbrown::map::ma..</text></g><g><title>core::hash::BuildHasher::hash_one (21,267 samples, 11.94%)</title><rect x="66.8863%" y="469" width="11.9442%" height="15" fill="rgb(218,133,21)" fg:x="119093" fg:w="21267"/><text x="67.1363%" y="479.50">core::hash::BuildH..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12,581 samples, 7.07%)</title><rect x="71.7646%" y="453" width="7.0659%" height="15" fill="rgb(221,193,43)" fg:x="127779" fg:w="12581"/><text x="72.0146%" y="463.50">core::has..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (12,146 samples, 6.82%)</title><rect x="72.0089%" y="437" width="6.8216%" height="15" fill="rgb(240,128,52)" fg:x="128214" fg:w="12146"/><text x="72.2589%" y="447.50">&lt;alloc::s..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (12,146 samples, 6.82%)</title><rect x="72.0089%" y="421" width="6.8216%" height="15" fill="rgb(253,114,12)" fg:x="128214" fg:w="12146"/><text x="72.2589%" y="431.50">core::has..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (12,146 samples, 6.82%)</title><rect x="72.0089%" y="405" width="6.8216%" height="15" fill="rgb(215,223,47)" fg:x="128214" fg:w="12146"/><text x="72.2589%" y="415.50">&lt;std::has..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (12,146 samples, 6.82%)</title><rect x="72.0089%" y="389" width="6.8216%" height="15" fill="rgb(248,225,23)" fg:x="128214" fg:w="12146"/><text x="72.2589%" y="399.50">&lt;core::ha..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (12,146 samples, 6.82%)</title><rect x="72.0089%" y="373" width="6.8216%" height="15" fill="rgb(250,108,0)" fg:x="128214" fg:w="12146"/><text x="72.2589%" y="383.50">&lt;core::ha..</text></g><g><title>core::hash::Hasher::write_u8 (5,663 samples, 3.18%)</title><rect x="75.6499%" y="357" width="3.1805%" height="15" fill="rgb(228,208,7)" fg:x="134697" fg:w="5663"/><text x="75.8999%" y="367.50">cor..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (606 samples, 0.34%)</title><rect x="79.3629%" y="453" width="0.3403%" height="15" fill="rgb(244,45,10)" fg:x="141308" fg:w="606"/><text x="79.6129%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (218 samples, 0.12%)</title><rect x="79.5808%" y="437" width="0.1224%" height="15" fill="rgb(207,125,25)" fg:x="141696" fg:w="218"/><text x="79.8308%" y="447.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="79.9571%" y="437" width="0.0174%" height="15" fill="rgb(210,195,18)" fg:x="142366" fg:w="31"/><text x="80.2071%" y="447.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="79.9571%" y="421" width="0.0174%" height="15" fill="rgb(249,80,12)" fg:x="142366" fg:w="31"/><text x="80.2071%" y="431.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="79.9571%" y="405" width="0.0174%" height="15" fill="rgb(221,65,9)" fg:x="142366" fg:w="31"/><text x="80.2071%" y="415.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="79.9571%" y="389" width="0.0174%" height="15" fill="rgb(235,49,36)" fg:x="142366" fg:w="31"/><text x="80.2071%" y="399.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="79.9577%" y="373" width="0.0168%" height="15" fill="rgb(225,32,20)" fg:x="142367" fg:w="30"/><text x="80.2077%" y="383.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="79.9582%" y="357" width="0.0163%" height="15" fill="rgb(215,141,46)" fg:x="142368" fg:w="29"/><text x="80.2082%" y="367.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="79.9582%" y="341" width="0.0163%" height="15" fill="rgb(250,160,47)" fg:x="142368" fg:w="29"/><text x="80.2082%" y="351.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="79.9582%" y="325" width="0.0163%" height="15" fill="rgb(216,222,40)" fg:x="142368" fg:w="29"/><text x="80.2082%" y="335.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="79.9582%" y="309" width="0.0163%" height="15" fill="rgb(234,217,39)" fg:x="142368" fg:w="29"/><text x="80.2082%" y="319.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="79.9582%" y="293" width="0.0163%" height="15" fill="rgb(207,178,40)" fg:x="142368" fg:w="29"/><text x="80.2082%" y="303.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="79.9593%" y="277" width="0.0152%" height="15" fill="rgb(221,136,13)" fg:x="142370" fg:w="27"/><text x="80.2093%" y="287.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="79.9610%" y="261" width="0.0135%" height="15" fill="rgb(249,199,10)" fg:x="142373" fg:w="24"/><text x="80.2110%" y="271.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="79.9610%" y="245" width="0.0135%" height="15" fill="rgb(249,222,13)" fg:x="142373" fg:w="24"/><text x="80.2110%" y="255.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="79.9616%" y="229" width="0.0129%" height="15" fill="rgb(244,185,38)" fg:x="142374" fg:w="23"/><text x="80.2116%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,278 samples, 0.72%)</title><rect x="79.9745%" y="437" width="0.7178%" height="15" fill="rgb(236,202,9)" fg:x="142397" fg:w="1278"/><text x="80.2245%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,278 samples, 0.72%)</title><rect x="79.9745%" y="421" width="0.7178%" height="15" fill="rgb(250,229,37)" fg:x="142397" fg:w="1278"/><text x="80.2245%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,278 samples, 0.72%)</title><rect x="79.9745%" y="405" width="0.7178%" height="15" fill="rgb(206,174,23)" fg:x="142397" fg:w="1278"/><text x="80.2245%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (893 samples, 0.50%)</title><rect x="80.1907%" y="389" width="0.5015%" height="15" fill="rgb(211,33,43)" fg:x="142782" fg:w="893"/><text x="80.4407%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (13,863 samples, 7.79%)</title><rect x="79.7055%" y="453" width="7.7859%" height="15" fill="rgb(245,58,50)" fg:x="141918" fg:w="13863"/><text x="79.9555%" y="463.50">hashbrown::..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (12,106 samples, 6.80%)</title><rect x="80.6923%" y="437" width="6.7991%" height="15" fill="rgb(244,68,36)" fg:x="143675" fg:w="12106"/><text x="80.9423%" y="447.50">hashbrown..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (12,106 samples, 6.80%)</title><rect x="80.6923%" y="421" width="6.7991%" height="15" fill="rgb(232,229,15)" fg:x="143675" fg:w="12106"/><text x="80.9423%" y="431.50">&lt;alloc::s..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (12,106 samples, 6.80%)</title><rect x="80.6923%" y="405" width="6.7991%" height="15" fill="rgb(254,30,23)" fg:x="143675" fg:w="12106"/><text x="80.9423%" y="415.50">alloc::ve..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (12,106 samples, 6.80%)</title><rect x="80.6923%" y="389" width="6.7991%" height="15" fill="rgb(235,160,14)" fg:x="143675" fg:w="12106"/><text x="80.9423%" y="399.50">core::sli..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12,106 samples, 6.80%)</title><rect x="80.6923%" y="373" width="6.7991%" height="15" fill="rgb(212,155,44)" fg:x="143675" fg:w="12106"/><text x="80.9423%" y="383.50">&lt;[A] as c..</text></g><g><title>__memcmp_evex_movbe (5,752 samples, 3.23%)</title><rect x="84.2609%" y="357" width="3.2305%" height="15" fill="rgb(226,2,50)" fg:x="150029" fg:w="5752"/><text x="84.5109%" y="367.50">__m..</text></g><g><title>hashbrown::raw::h2 (1,227 samples, 0.69%)</title><rect x="87.4914%" y="453" width="0.6891%" height="15" fill="rgb(234,177,6)" fg:x="155781" fg:w="1227"/><text x="87.7414%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,182 samples, 0.66%)</title><rect x="88.1805%" y="421" width="0.6638%" height="15" fill="rgb(217,24,9)" fg:x="157008" fg:w="1182"/><text x="88.4305%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,471 samples, 0.83%)</title><rect x="88.1805%" y="453" width="0.8262%" height="15" fill="rgb(220,13,46)" fg:x="157008" fg:w="1471"/><text x="88.4305%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,471 samples, 0.83%)</title><rect x="88.1805%" y="437" width="0.8262%" height="15" fill="rgb(239,221,27)" fg:x="157008" fg:w="1471"/><text x="88.4305%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (289 samples, 0.16%)</title><rect x="88.8443%" y="421" width="0.1623%" height="15" fill="rgb(222,198,25)" fg:x="158190" fg:w="289"/><text x="89.0943%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (979 samples, 0.55%)</title><rect x="89.0066%" y="453" width="0.5498%" height="15" fill="rgb(211,99,13)" fg:x="158479" fg:w="979"/><text x="89.2566%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (979 samples, 0.55%)</title><rect x="89.0066%" y="437" width="0.5498%" height="15" fill="rgb(232,111,31)" fg:x="158479" fg:w="979"/><text x="89.2566%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (19,137 samples, 10.75%)</title><rect x="79.0686%" y="469" width="10.7479%" height="15" fill="rgb(245,82,37)" fg:x="140784" fg:w="19137"/><text x="79.3186%" y="479.50">hashbrown::raw::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (463 samples, 0.26%)</title><rect x="89.5565%" y="453" width="0.2600%" height="15" fill="rgb(227,149,46)" fg:x="159458" fg:w="463"/><text x="89.8065%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (43,042 samples, 24.17%)</title><rect x="65.7905%" y="501" width="24.1737%" height="15" fill="rgb(218,36,50)" fg:x="117142" fg:w="43042"/><text x="66.0405%" y="511.50">hashbrown::rustc_entry::&lt;impl hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (19,824 samples, 11.13%)</title><rect x="78.8305%" y="485" width="11.1338%" height="15" fill="rgb(226,80,48)" fg:x="140360" fg:w="19824"/><text x="79.0805%" y="495.50">hashbrown::raw::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (263 samples, 0.15%)</title><rect x="89.8165%" y="469" width="0.1477%" height="15" fill="rgb(238,224,15)" fg:x="159921" fg:w="263"/><text x="90.0665%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (132,632 samples, 74.49%)</title><rect x="16.2300%" y="581" width="74.4902%" height="15" fill="rgb(241,136,10)" fg:x="28898" fg:w="132632"/><text x="16.4800%" y="591.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (132,632 samples, 74.49%)</title><rect x="16.2300%" y="565" width="74.4902%" height="15" fill="rgb(208,32,45)" fg:x="28898" fg:w="132632"/><text x="16.4800%" y="575.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (106,621 samples, 59.88%)</title><rect x="30.8386%" y="549" width="59.8816%" height="15" fill="rgb(207,135,9)" fg:x="54909" fg:w="106621"/><text x="31.0886%" y="559.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>one_brc::process_lines::_{{closure}} (106,620 samples, 59.88%)</title><rect x="30.8391%" y="533" width="59.8810%" height="15" fill="rgb(206,86,44)" fg:x="54910" fg:w="106620"/><text x="31.0891%" y="543.50">one_brc::process_lines::_{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (44,390 samples, 24.93%)</title><rect x="65.7894%" y="517" width="24.9308%" height="15" fill="rgb(245,177,15)" fg:x="117140" fg:w="44390"/><text x="66.0394%" y="527.50">std::collections::hash::map::HashMap&lt;K,V..</text></g><g><title>std::collections::hash::map::map_entry (1,346 samples, 0.76%)</title><rect x="89.9642%" y="501" width="0.7560%" height="15" fill="rgb(206,64,50)" fg:x="160184" fg:w="1346"/><text x="90.2142%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (857 samples, 0.48%)</title><rect x="90.7202%" y="581" width="0.4813%" height="15" fill="rgb(234,36,40)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (857 samples, 0.48%)</title><rect x="90.7202%" y="565" width="0.4813%" height="15" fill="rgb(213,64,8)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (857 samples, 0.48%)</title><rect x="90.7202%" y="549" width="0.4813%" height="15" fill="rgb(210,75,36)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (857 samples, 0.48%)</title><rect x="90.7202%" y="533" width="0.4813%" height="15" fill="rgb(229,88,21)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (857 samples, 0.48%)</title><rect x="90.7202%" y="517" width="0.4813%" height="15" fill="rgb(252,204,47)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (857 samples, 0.48%)</title><rect x="90.7202%" y="501" width="0.4813%" height="15" fill="rgb(208,77,27)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="511.50"></text></g><g><title>__GI___libc_free (857 samples, 0.48%)</title><rect x="90.7202%" y="485" width="0.4813%" height="15" fill="rgb(221,76,26)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="495.50"></text></g><g><title>__GI___munmap (857 samples, 0.48%)</title><rect x="90.7202%" y="469" width="0.4813%" height="15" fill="rgb(225,139,18)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="479.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="453" width="0.4813%" height="15" fill="rgb(230,137,11)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="463.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="437" width="0.4813%" height="15" fill="rgb(212,28,1)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="447.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="421" width="0.4813%" height="15" fill="rgb(248,164,17)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="431.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="405" width="0.4813%" height="15" fill="rgb(222,171,42)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="415.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="389" width="0.4813%" height="15" fill="rgb(243,84,45)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="399.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="373" width="0.4813%" height="15" fill="rgb(252,49,23)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="383.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="357" width="0.4813%" height="15" fill="rgb(215,19,7)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="367.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="341" width="0.4813%" height="15" fill="rgb(238,81,41)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="351.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="325" width="0.4813%" height="15" fill="rgb(210,199,37)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="335.50"></text></g><g><title>[unknown] (857 samples, 0.48%)</title><rect x="90.7202%" y="309" width="0.4813%" height="15" fill="rgb(244,192,49)" fg:x="161530" fg:w="857"/><text x="90.9702%" y="319.50"></text></g><g><title>[unknown] (854 samples, 0.48%)</title><rect x="90.7219%" y="293" width="0.4796%" height="15" fill="rgb(226,211,11)" fg:x="161533" fg:w="854"/><text x="90.9719%" y="303.50"></text></g><g><title>[unknown] (853 samples, 0.48%)</title><rect x="90.7224%" y="277" width="0.4791%" height="15" fill="rgb(236,162,54)" fg:x="161534" fg:w="853"/><text x="90.9724%" y="287.50"></text></g><g><title>[unknown] (677 samples, 0.38%)</title><rect x="90.8213%" y="261" width="0.3802%" height="15" fill="rgb(220,229,9)" fg:x="161710" fg:w="677"/><text x="91.0713%" y="271.50"></text></g><g><title>[unknown] (625 samples, 0.35%)</title><rect x="90.8505%" y="245" width="0.3510%" height="15" fill="rgb(250,87,22)" fg:x="161762" fg:w="625"/><text x="91.1005%" y="255.50"></text></g><g><title>[unknown] (602 samples, 0.34%)</title><rect x="90.8634%" y="229" width="0.3381%" height="15" fill="rgb(239,43,17)" fg:x="161785" fg:w="602"/><text x="91.1134%" y="239.50"></text></g><g><title>[unknown] (537 samples, 0.30%)</title><rect x="90.8999%" y="213" width="0.3016%" height="15" fill="rgb(231,177,25)" fg:x="161850" fg:w="537"/><text x="91.1499%" y="223.50"></text></g><g><title>[unknown] (454 samples, 0.25%)</title><rect x="90.9465%" y="197" width="0.2550%" height="15" fill="rgb(219,179,1)" fg:x="161933" fg:w="454"/><text x="91.1965%" y="207.50"></text></g><g><title>[unknown] (321 samples, 0.18%)</title><rect x="91.0212%" y="181" width="0.1803%" height="15" fill="rgb(238,219,53)" fg:x="162066" fg:w="321"/><text x="91.2712%" y="191.50"></text></g><g><title>[unknown] (210 samples, 0.12%)</title><rect x="91.0836%" y="165" width="0.1179%" height="15" fill="rgb(232,167,36)" fg:x="162177" fg:w="210"/><text x="91.3336%" y="175.50"></text></g><g><title>[unknown] (165 samples, 0.09%)</title><rect x="91.1088%" y="149" width="0.0927%" height="15" fill="rgb(244,19,51)" fg:x="162222" fg:w="165"/><text x="91.3588%" y="159.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="91.1908%" y="133" width="0.0107%" height="15" fill="rgb(224,6,22)" fg:x="162368" fg:w="19"/><text x="91.4408%" y="143.50"></text></g><g><title>std::panic::catch_unwind (133,491 samples, 74.97%)</title><rect x="16.2300%" y="709" width="74.9726%" height="15" fill="rgb(224,145,5)" fg:x="28898" fg:w="133491"/><text x="16.4800%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (133,491 samples, 74.97%)</title><rect x="16.2300%" y="693" width="74.9726%" height="15" fill="rgb(234,130,49)" fg:x="28898" fg:w="133491"/><text x="16.4800%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (133,491 samples, 74.97%)</title><rect x="16.2300%" y="677" width="74.9726%" height="15" fill="rgb(254,6,2)" fg:x="28898" fg:w="133491"/><text x="16.4800%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (133,491 samples, 74.97%)</title><rect x="16.2300%" y="661" width="74.9726%" height="15" fill="rgb(208,96,46)" fg:x="28898" fg:w="133491"/><text x="16.4800%" y="671.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (133,491 samples, 74.97%)</title><rect x="16.2300%" y="645" width="74.9726%" height="15" fill="rgb(239,3,39)" fg:x="28898" fg:w="133491"/><text x="16.4800%" y="655.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (133,491 samples, 74.97%)</title><rect x="16.2300%" y="629" width="74.9726%" height="15" fill="rgb(233,210,1)" fg:x="28898" fg:w="133491"/><text x="16.4800%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (133,491 samples, 74.97%)</title><rect x="16.2300%" y="613" width="74.9726%" height="15" fill="rgb(244,137,37)" fg:x="28898" fg:w="133491"/><text x="16.4800%" y="623.50">one_brc::main::_{{closure}}::_{{closure}}</text></g><g><title>one_brc::process_lines (133,491 samples, 74.97%)</title><rect x="16.2300%" y="597" width="74.9726%" height="15" fill="rgb(240,136,2)" fg:x="28898" fg:w="133491"/><text x="16.4800%" y="607.50">one_brc::process_lines</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (133,496 samples, 74.98%)</title><rect x="16.2300%" y="741" width="74.9754%" height="15" fill="rgb(239,18,37)" fg:x="28898" fg:w="133496"/><text x="16.4800%" y="751.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (133,496 samples, 74.98%)</title><rect x="16.2300%" y="725" width="74.9754%" height="15" fill="rgb(218,185,22)" fg:x="28898" fg:w="133496"/><text x="16.4800%" y="735.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>__clone3 (133,502 samples, 74.98%)</title><rect x="16.2283%" y="789" width="74.9788%" height="15" fill="rgb(225,218,4)" fg:x="28895" fg:w="133502"/><text x="16.4783%" y="799.50">__clone3</text></g><g><title>start_thread (133,501 samples, 74.98%)</title><rect x="16.2289%" y="773" width="74.9782%" height="15" fill="rgb(230,182,32)" fg:x="28896" fg:w="133501"/><text x="16.4789%" y="783.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (133,500 samples, 74.98%)</title><rect x="16.2294%" y="757" width="74.9777%" height="15" fill="rgb(242,56,43)" fg:x="28897" fg:w="133500"/><text x="16.4794%" y="767.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (265 samples, 0.15%)</title><rect x="91.2071%" y="469" width="0.1488%" height="15" fill="rgb(233,99,24)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (265 samples, 0.15%)</title><rect x="91.2071%" y="453" width="0.1488%" height="15" fill="rgb(234,209,42)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (265 samples, 0.15%)</title><rect x="91.2071%" y="437" width="0.1488%" height="15" fill="rgb(227,7,12)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="447.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (265 samples, 0.15%)</title><rect x="91.2071%" y="421" width="0.1488%" height="15" fill="rgb(245,203,43)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="431.50"></text></g><g><title>__GI___libc_read (265 samples, 0.15%)</title><rect x="91.2071%" y="405" width="0.1488%" height="15" fill="rgb(238,205,33)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="415.50"></text></g><g><title>[unknown] (265 samples, 0.15%)</title><rect x="91.2071%" y="389" width="0.1488%" height="15" fill="rgb(231,56,7)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="399.50"></text></g><g><title>[unknown] (265 samples, 0.15%)</title><rect x="91.2071%" y="373" width="0.1488%" height="15" fill="rgb(244,186,29)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="383.50"></text></g><g><title>[unknown] (265 samples, 0.15%)</title><rect x="91.2071%" y="357" width="0.1488%" height="15" fill="rgb(234,111,31)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="367.50"></text></g><g><title>[unknown] (265 samples, 0.15%)</title><rect x="91.2071%" y="341" width="0.1488%" height="15" fill="rgb(241,149,10)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="351.50"></text></g><g><title>[unknown] (265 samples, 0.15%)</title><rect x="91.2071%" y="325" width="0.1488%" height="15" fill="rgb(249,206,44)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="335.50"></text></g><g><title>[unknown] (265 samples, 0.15%)</title><rect x="91.2071%" y="309" width="0.1488%" height="15" fill="rgb(251,153,30)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="319.50"></text></g><g><title>[unknown] (265 samples, 0.15%)</title><rect x="91.2071%" y="293" width="0.1488%" height="15" fill="rgb(239,152,38)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="303.50"></text></g><g><title>[unknown] (265 samples, 0.15%)</title><rect x="91.2071%" y="277" width="0.1488%" height="15" fill="rgb(249,139,47)" fg:x="162397" fg:w="265"/><text x="91.4571%" y="287.50"></text></g><g><title>[unknown] (263 samples, 0.15%)</title><rect x="91.2082%" y="261" width="0.1477%" height="15" fill="rgb(244,64,35)" fg:x="162399" fg:w="263"/><text x="91.4582%" y="271.50"></text></g><g><title>[unknown] (262 samples, 0.15%)</title><rect x="91.2088%" y="245" width="0.1471%" height="15" fill="rgb(216,46,15)" fg:x="162400" fg:w="262"/><text x="91.4588%" y="255.50"></text></g><g><title>[unknown] (245 samples, 0.14%)</title><rect x="91.2183%" y="229" width="0.1376%" height="15" fill="rgb(250,74,19)" fg:x="162417" fg:w="245"/><text x="91.4683%" y="239.50"></text></g><g><title>[unknown] (113 samples, 0.06%)</title><rect x="91.2925%" y="213" width="0.0635%" height="15" fill="rgb(249,42,33)" fg:x="162549" fg:w="113"/><text x="91.5425%" y="223.50"></text></g><g><title>[unknown] (113 samples, 0.06%)</title><rect x="91.2925%" y="197" width="0.0635%" height="15" fill="rgb(242,149,17)" fg:x="162549" fg:w="113"/><text x="91.5425%" y="207.50"></text></g><g><title>[unknown] (112 samples, 0.06%)</title><rect x="91.2930%" y="181" width="0.0629%" height="15" fill="rgb(244,29,21)" fg:x="162550" fg:w="112"/><text x="91.5430%" y="191.50"></text></g><g><title>[unknown] (110 samples, 0.06%)</title><rect x="91.2942%" y="165" width="0.0618%" height="15" fill="rgb(220,130,37)" fg:x="162552" fg:w="110"/><text x="91.5442%" y="175.50"></text></g><g><title>[unknown] (108 samples, 0.06%)</title><rect x="91.2953%" y="149" width="0.0607%" height="15" fill="rgb(211,67,2)" fg:x="162554" fg:w="108"/><text x="91.5453%" y="159.50"></text></g><g><title>[unknown] (107 samples, 0.06%)</title><rect x="91.2959%" y="133" width="0.0601%" height="15" fill="rgb(235,68,52)" fg:x="162555" fg:w="107"/><text x="91.5459%" y="143.50"></text></g><g><title>[unknown] (103 samples, 0.06%)</title><rect x="91.2981%" y="117" width="0.0578%" height="15" fill="rgb(246,142,3)" fg:x="162559" fg:w="103"/><text x="91.5481%" y="127.50"></text></g><g><title>[unknown] (96 samples, 0.05%)</title><rect x="91.3020%" y="101" width="0.0539%" height="15" fill="rgb(241,25,7)" fg:x="162566" fg:w="96"/><text x="91.5520%" y="111.50"></text></g><g><title>[unknown] (85 samples, 0.05%)</title><rect x="91.3082%" y="85" width="0.0477%" height="15" fill="rgb(242,119,39)" fg:x="162577" fg:w="85"/><text x="91.5582%" y="95.50"></text></g><g><title>[unknown] (54 samples, 0.03%)</title><rect x="91.3256%" y="69" width="0.0303%" height="15" fill="rgb(241,98,45)" fg:x="162608" fg:w="54"/><text x="91.5756%" y="79.50"></text></g><g><title>[unknown] (35 samples, 0.02%)</title><rect x="91.3363%" y="53" width="0.0197%" height="15" fill="rgb(254,28,30)" fg:x="162627" fg:w="35"/><text x="91.5863%" y="63.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="91.3436%" y="37" width="0.0124%" height="15" fill="rgb(241,142,54)" fg:x="162640" fg:w="22"/><text x="91.5936%" y="47.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (79 samples, 0.04%)</title><rect x="92.9162%" y="421" width="0.0444%" height="15" fill="rgb(222,85,15)" fg:x="165440" fg:w="79"/><text x="93.1662%" y="431.50"></text></g><g><title>alloc::string::String::from_utf8 (2,968 samples, 1.67%)</title><rect x="91.3559%" y="469" width="1.6669%" height="15" fill="rgb(210,85,47)" fg:x="162662" fg:w="2968"/><text x="91.6059%" y="479.50"></text></g><g><title>core::str::converts::from_utf8 (2,968 samples, 1.67%)</title><rect x="91.3559%" y="453" width="1.6669%" height="15" fill="rgb(224,206,25)" fg:x="162662" fg:w="2968"/><text x="91.6059%" y="463.50"></text></g><g><title>core::str::validations::run_utf8_validation (2,968 samples, 1.67%)</title><rect x="91.3559%" y="437" width="1.6669%" height="15" fill="rgb(243,201,19)" fg:x="162662" fg:w="2968"/><text x="91.6059%" y="447.50"></text></g><g><title>core::str::validations::utf8_char_width (111 samples, 0.06%)</title><rect x="92.9605%" y="421" width="0.0623%" height="15" fill="rgb(236,59,4)" fg:x="165519" fg:w="111"/><text x="93.2105%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6,304 samples, 3.54%)</title><rect x="93.0229%" y="469" width="3.5405%" height="15" fill="rgb(254,179,45)" fg:x="165630" fg:w="6304"/><text x="93.2729%" y="479.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6,304 samples, 3.54%)</title><rect x="93.0229%" y="453" width="3.5405%" height="15" fill="rgb(226,14,10)" fg:x="165630" fg:w="6304"/><text x="93.2729%" y="463.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6,304 samples, 3.54%)</title><rect x="93.0229%" y="437" width="3.5405%" height="15" fill="rgb(244,27,41)" fg:x="165630" fg:w="6304"/><text x="93.2729%" y="447.50">allo..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6,304 samples, 3.54%)</title><rect x="93.0229%" y="421" width="3.5405%" height="15" fill="rgb(235,35,32)" fg:x="165630" fg:w="6304"/><text x="93.2729%" y="431.50">core..</text></g><g><title>__memcpy_evex_unaligned_erms (6,304 samples, 3.54%)</title><rect x="93.0229%" y="405" width="3.5405%" height="15" fill="rgb(218,68,31)" fg:x="165630" fg:w="6304"/><text x="93.2729%" y="415.50">__me..</text></g><g><title>[unknown] (4,295 samples, 2.41%)</title><rect x="94.1512%" y="389" width="2.4122%" height="15" fill="rgb(207,120,37)" fg:x="167639" fg:w="4295"/><text x="94.4012%" y="399.50">[u..</text></g><g><title>[unknown] (3,822 samples, 2.15%)</title><rect x="94.4168%" y="373" width="2.1466%" height="15" fill="rgb(227,98,0)" fg:x="168112" fg:w="3822"/><text x="94.6668%" y="383.50">[..</text></g><g><title>[unknown] (3,792 samples, 2.13%)</title><rect x="94.4337%" y="357" width="2.1297%" height="15" fill="rgb(207,7,3)" fg:x="168142" fg:w="3792"/><text x="94.6837%" y="367.50">[..</text></g><g><title>[unknown] (3,693 samples, 2.07%)</title><rect x="94.4893%" y="341" width="2.0741%" height="15" fill="rgb(206,98,19)" fg:x="168241" fg:w="3693"/><text x="94.7393%" y="351.50">[..</text></g><g><title>[unknown] (3,478 samples, 1.95%)</title><rect x="94.6100%" y="325" width="1.9534%" height="15" fill="rgb(217,5,26)" fg:x="168456" fg:w="3478"/><text x="94.8600%" y="335.50">[..</text></g><g><title>[unknown] (3,191 samples, 1.79%)</title><rect x="94.7712%" y="309" width="1.7922%" height="15" fill="rgb(235,190,38)" fg:x="168743" fg:w="3191"/><text x="95.0212%" y="319.50">[..</text></g><g><title>[unknown] (3,037 samples, 1.71%)</title><rect x="94.8577%" y="293" width="1.7057%" height="15" fill="rgb(247,86,24)" fg:x="168897" fg:w="3037"/><text x="95.1077%" y="303.50"></text></g><g><title>[unknown] (2,886 samples, 1.62%)</title><rect x="94.9425%" y="277" width="1.6209%" height="15" fill="rgb(205,101,16)" fg:x="169048" fg:w="2886"/><text x="95.1925%" y="287.50"></text></g><g><title>[unknown] (2,510 samples, 1.41%)</title><rect x="95.1537%" y="261" width="1.4097%" height="15" fill="rgb(246,168,33)" fg:x="169424" fg:w="2510"/><text x="95.4037%" y="271.50"></text></g><g><title>[unknown] (1,810 samples, 1.02%)</title><rect x="95.5468%" y="245" width="1.0166%" height="15" fill="rgb(231,114,1)" fg:x="170124" fg:w="1810"/><text x="95.7968%" y="255.50"></text></g><g><title>[unknown] (1,394 samples, 0.78%)</title><rect x="95.7805%" y="229" width="0.7829%" height="15" fill="rgb(207,184,53)" fg:x="170540" fg:w="1394"/><text x="96.0305%" y="239.50"></text></g><g><title>[unknown] (1,065 samples, 0.60%)</title><rect x="95.9652%" y="213" width="0.5981%" height="15" fill="rgb(224,95,51)" fg:x="170869" fg:w="1065"/><text x="96.2152%" y="223.50"></text></g><g><title>[unknown] (283 samples, 0.16%)</title><rect x="96.4044%" y="197" width="0.1589%" height="15" fill="rgb(212,188,45)" fg:x="171651" fg:w="283"/><text x="96.6544%" y="207.50"></text></g><g><title>[unknown] (225 samples, 0.13%)</title><rect x="96.4370%" y="181" width="0.1264%" height="15" fill="rgb(223,154,38)" fg:x="171709" fg:w="225"/><text x="96.6870%" y="191.50"></text></g><g><title>[unknown] (37 samples, 0.02%)</title><rect x="96.5426%" y="165" width="0.0208%" height="15" fill="rgb(251,22,52)" fg:x="171897" fg:w="37"/><text x="96.7926%" y="175.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="96.5482%" y="149" width="0.0152%" height="15" fill="rgb(229,209,22)" fg:x="171907" fg:w="27"/><text x="96.7982%" y="159.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="96.5482%" y="133" width="0.0152%" height="15" fill="rgb(234,138,34)" fg:x="171907" fg:w="27"/><text x="96.7982%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9,542 samples, 5.36%)</title><rect x="91.2071%" y="645" width="5.3591%" height="15" fill="rgb(212,95,11)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="655.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (9,542 samples, 5.36%)</title><rect x="91.2071%" y="629" width="5.3591%" height="15" fill="rgb(240,179,47)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="639.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9,542 samples, 5.36%)</title><rect x="91.2071%" y="613" width="5.3591%" height="15" fill="rgb(240,163,11)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="623.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9,542 samples, 5.36%)</title><rect x="91.2071%" y="597" width="5.3591%" height="15" fill="rgb(236,37,12)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="607.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9,542 samples, 5.36%)</title><rect x="91.2071%" y="581" width="5.3591%" height="15" fill="rgb(232,164,16)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="591.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (9,542 samples, 5.36%)</title><rect x="91.2071%" y="565" width="5.3591%" height="15" fill="rgb(244,205,15)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="575.50">alloc::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9,542 samples, 5.36%)</title><rect x="91.2071%" y="549" width="5.3591%" height="15" fill="rgb(223,117,47)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="559.50">core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,542 samples, 5.36%)</title><rect x="91.2071%" y="533" width="5.3591%" height="15" fill="rgb(244,107,35)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="543.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (9,542 samples, 5.36%)</title><rect x="91.2071%" y="517" width="5.3591%" height="15" fill="rgb(205,140,8)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="527.50">core::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (9,542 samples, 5.36%)</title><rect x="91.2071%" y="501" width="5.3591%" height="15" fill="rgb(228,84,46)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="511.50">core::i..</text></g><g><title>one_brc::main::_{{closure}} (9,542 samples, 5.36%)</title><rect x="91.2071%" y="485" width="5.3591%" height="15" fill="rgb(254,188,9)" fg:x="162397" fg:w="9542"/><text x="91.4571%" y="495.50">one_brc..</text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;&gt; (53 samples, 0.03%)</title><rect x="96.5668%" y="645" width="0.0298%" height="15" fill="rgb(206,112,54)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufreader::buffer::Buffer&gt; (53 samples, 0.03%)</title><rect x="96.5668%" y="629" width="0.0298%" height="15" fill="rgb(216,84,49)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::mem::maybe_uninit::MaybeUninit&lt;u8&gt;]&gt;&gt; (53 samples, 0.03%)</title><rect x="96.5668%" y="613" width="0.0298%" height="15" fill="rgb(214,194,35)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.03%)</title><rect x="96.5668%" y="597" width="0.0298%" height="15" fill="rgb(249,28,3)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 0.03%)</title><rect x="96.5668%" y="581" width="0.0298%" height="15" fill="rgb(222,56,52)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (53 samples, 0.03%)</title><rect x="96.5668%" y="565" width="0.0298%" height="15" fill="rgb(245,217,50)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="575.50"></text></g><g><title>__GI___libc_free (53 samples, 0.03%)</title><rect x="96.5668%" y="549" width="0.0298%" height="15" fill="rgb(213,201,24)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="559.50"></text></g><g><title>__GI___munmap (53 samples, 0.03%)</title><rect x="96.5668%" y="533" width="0.0298%" height="15" fill="rgb(248,116,28)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="543.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="517" width="0.0298%" height="15" fill="rgb(219,72,43)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="527.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="501" width="0.0298%" height="15" fill="rgb(209,138,14)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="511.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="485" width="0.0298%" height="15" fill="rgb(222,18,33)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="495.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="469" width="0.0298%" height="15" fill="rgb(213,199,7)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="479.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="453" width="0.0298%" height="15" fill="rgb(250,110,10)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="463.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="437" width="0.0298%" height="15" fill="rgb(248,123,6)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="447.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="421" width="0.0298%" height="15" fill="rgb(206,91,31)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="431.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="405" width="0.0298%" height="15" fill="rgb(211,154,13)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="415.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="389" width="0.0298%" height="15" fill="rgb(225,148,7)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="399.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="373" width="0.0298%" height="15" fill="rgb(220,160,43)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="383.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="357" width="0.0298%" height="15" fill="rgb(213,52,39)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="367.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="96.5668%" y="341" width="0.0298%" height="15" fill="rgb(243,137,7)" fg:x="171940" fg:w="53"/><text x="96.8168%" y="351.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="96.5774%" y="325" width="0.0191%" height="15" fill="rgb(230,79,13)" fg:x="171959" fg:w="34"/><text x="96.8274%" y="335.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="96.5802%" y="309" width="0.0163%" height="15" fill="rgb(247,105,23)" fg:x="171964" fg:w="29"/><text x="96.8302%" y="319.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="96.5808%" y="293" width="0.0157%" height="15" fill="rgb(223,179,41)" fg:x="171965" fg:w="28"/><text x="96.8308%" y="303.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="96.5830%" y="277" width="0.0135%" height="15" fill="rgb(218,9,34)" fg:x="171969" fg:w="24"/><text x="96.8330%" y="287.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="96.5853%" y="261" width="0.0112%" height="15" fill="rgb(222,106,8)" fg:x="171973" fg:w="20"/><text x="96.8353%" y="271.50"></text></g><g><title>_start (9,612 samples, 5.40%)</title><rect x="91.2071%" y="789" width="5.3984%" height="15" fill="rgb(211,220,0)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="799.50">_start</text></g><g><title>__libc_start_main_impl (9,612 samples, 5.40%)</title><rect x="91.2071%" y="773" width="5.3984%" height="15" fill="rgb(229,52,16)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="783.50">__libc_..</text></g><g><title>__libc_start_call_main (9,612 samples, 5.40%)</title><rect x="91.2071%" y="757" width="5.3984%" height="15" fill="rgb(212,155,18)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="767.50">__libc_..</text></g><g><title>main (9,612 samples, 5.40%)</title><rect x="91.2071%" y="741" width="5.3984%" height="15" fill="rgb(242,21,14)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (9,612 samples, 5.40%)</title><rect x="91.2071%" y="725" width="5.3984%" height="15" fill="rgb(222,19,48)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="735.50">std::rt..</text></g><g><title>std::rt::lang_start::_{{closure}} (9,612 samples, 5.40%)</title><rect x="91.2071%" y="709" width="5.3984%" height="15" fill="rgb(232,45,27)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="719.50">std::rt..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,612 samples, 5.40%)</title><rect x="91.2071%" y="693" width="5.3984%" height="15" fill="rgb(249,103,42)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="703.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once (9,612 samples, 5.40%)</title><rect x="91.2071%" y="677" width="5.3984%" height="15" fill="rgb(246,81,33)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="687.50">core::o..</text></g><g><title>one_brc::main (9,612 samples, 5.40%)</title><rect x="91.2071%" y="661" width="5.3984%" height="15" fill="rgb(252,33,42)" fg:x="162397" fg:w="9612"/><text x="91.4571%" y="671.50">one_brc..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (553 samples, 0.31%)</title><rect x="96.6055%" y="741" width="0.3106%" height="15" fill="rgb(209,212,41)" fg:x="172009" fg:w="553"/><text x="96.8555%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (553 samples, 0.31%)</title><rect x="96.6055%" y="725" width="0.3106%" height="15" fill="rgb(207,154,6)" fg:x="172009" fg:w="553"/><text x="96.8555%" y="735.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (553 samples, 0.31%)</title><rect x="96.6055%" y="709" width="0.3106%" height="15" fill="rgb(223,64,47)" fg:x="172009" fg:w="553"/><text x="96.8555%" y="719.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (553 samples, 0.31%)</title><rect x="96.6055%" y="693" width="0.3106%" height="15" fill="rgb(211,161,38)" fg:x="172009" fg:w="553"/><text x="96.8555%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (994 samples, 0.56%)</title><rect x="96.9161%" y="581" width="0.5583%" height="15" fill="rgb(219,138,40)" fg:x="172562" fg:w="994"/><text x="97.1661%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (994 samples, 0.56%)</title><rect x="96.9161%" y="565" width="0.5583%" height="15" fill="rgb(241,228,46)" fg:x="172562" fg:w="994"/><text x="97.1661%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (994 samples, 0.56%)</title><rect x="96.9161%" y="549" width="0.5583%" height="15" fill="rgb(223,209,38)" fg:x="172562" fg:w="994"/><text x="97.1661%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (994 samples, 0.56%)</title><rect x="96.9161%" y="533" width="0.5583%" height="15" fill="rgb(236,164,45)" fg:x="172562" fg:w="994"/><text x="97.1661%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (994 samples, 0.56%)</title><rect x="96.9161%" y="517" width="0.5583%" height="15" fill="rgb(231,15,5)" fg:x="172562" fg:w="994"/><text x="97.1661%" y="527.50"></text></g><g><title>alloc::alloc::alloc (994 samples, 0.56%)</title><rect x="96.9161%" y="501" width="0.5583%" height="15" fill="rgb(252,35,15)" fg:x="172562" fg:w="994"/><text x="97.1661%" y="511.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1,984 samples, 1.11%)</title><rect x="96.9161%" y="709" width="1.1143%" height="15" fill="rgb(248,181,18)" fg:x="172562" fg:w="1984"/><text x="97.1661%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1,984 samples, 1.11%)</title><rect x="96.9161%" y="693" width="1.1143%" height="15" fill="rgb(233,39,42)" fg:x="172562" fg:w="1984"/><text x="97.1661%" y="703.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1,984 samples, 1.11%)</title><rect x="96.9161%" y="677" width="1.1143%" height="15" fill="rgb(238,110,33)" fg:x="172562" fg:w="1984"/><text x="97.1661%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,984 samples, 1.11%)</title><rect x="96.9161%" y="661" width="1.1143%" height="15" fill="rgb(233,195,10)" fg:x="172562" fg:w="1984"/><text x="97.1661%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,984 samples, 1.11%)</title><rect x="96.9161%" y="645" width="1.1143%" height="15" fill="rgb(254,105,3)" fg:x="172562" fg:w="1984"/><text x="97.1661%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,984 samples, 1.11%)</title><rect x="96.9161%" y="629" width="1.1143%" height="15" fill="rgb(221,225,9)" fg:x="172562" fg:w="1984"/><text x="97.1661%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1,984 samples, 1.11%)</title><rect x="96.9161%" y="613" width="1.1143%" height="15" fill="rgb(224,227,45)" fg:x="172562" fg:w="1984"/><text x="97.1661%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,984 samples, 1.11%)</title><rect x="96.9161%" y="597" width="1.1143%" height="15" fill="rgb(229,198,43)" fg:x="172562" fg:w="1984"/><text x="97.1661%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (990 samples, 0.56%)</title><rect x="97.4743%" y="581" width="0.5560%" height="15" fill="rgb(206,209,35)" fg:x="173556" fg:w="990"/><text x="97.7243%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (990 samples, 0.56%)</title><rect x="97.4743%" y="565" width="0.5560%" height="15" fill="rgb(245,195,53)" fg:x="173556" fg:w="990"/><text x="97.7243%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (732 samples, 0.41%)</title><rect x="98.0304%" y="709" width="0.4111%" height="15" fill="rgb(240,92,26)" fg:x="174546" fg:w="732"/><text x="98.2804%" y="719.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (567 samples, 0.32%)</title><rect x="98.4415%" y="709" width="0.3184%" height="15" fill="rgb(207,40,23)" fg:x="175278" fg:w="567"/><text x="98.6915%" y="719.50"></text></g><g><title>one_brc::round_towards_positive (574 samples, 0.32%)</title><rect x="98.7599%" y="709" width="0.3224%" height="15" fill="rgb(223,111,35)" fg:x="175845" fg:w="574"/><text x="99.0099%" y="719.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (574 samples, 0.32%)</title><rect x="98.7599%" y="693" width="0.3224%" height="15" fill="rgb(229,147,28)" fg:x="175845" fg:w="574"/><text x="99.0099%" y="703.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (818 samples, 0.46%)</title><rect x="99.0823%" y="709" width="0.4594%" height="15" fill="rgb(211,29,28)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="719.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (818 samples, 0.46%)</title><rect x="99.0823%" y="693" width="0.4594%" height="15" fill="rgb(228,72,33)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="703.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (818 samples, 0.46%)</title><rect x="99.0823%" y="677" width="0.4594%" height="15" fill="rgb(205,214,31)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,one_brc::Measurement&gt;&gt; (818 samples, 0.46%)</title><rect x="99.0823%" y="661" width="0.4594%" height="15" fill="rgb(224,111,15)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (818 samples, 0.46%)</title><rect x="99.0823%" y="645" width="0.4594%" height="15" fill="rgb(253,21,26)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (818 samples, 0.46%)</title><rect x="99.0823%" y="629" width="0.4594%" height="15" fill="rgb(245,139,43)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (818 samples, 0.46%)</title><rect x="99.0823%" y="613" width="0.4594%" height="15" fill="rgb(252,170,7)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (818 samples, 0.46%)</title><rect x="99.0823%" y="597" width="0.4594%" height="15" fill="rgb(231,118,14)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (818 samples, 0.46%)</title><rect x="99.0823%" y="581" width="0.4594%" height="15" fill="rgb(238,83,0)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (818 samples, 0.46%)</title><rect x="99.0823%" y="565" width="0.4594%" height="15" fill="rgb(221,39,39)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (818 samples, 0.46%)</title><rect x="99.0823%" y="549" width="0.4594%" height="15" fill="rgb(222,119,46)" fg:x="176419" fg:w="818"/><text x="99.3323%" y="559.50"></text></g><g><title>one-brc (178,048 samples, 100.00%)</title><rect x="0.0000%" y="805" width="99.9972%" height="15" fill="rgb(222,165,49)" fg:x="0" fg:w="178048"/><text x="0.2500%" y="815.50">one-brc</text></g><g><title>one_brc::process_lines (6,039 samples, 3.39%)</title><rect x="96.6055%" y="789" width="3.3917%" height="15" fill="rgb(219,113,52)" fg:x="172009" fg:w="6039"/><text x="96.8555%" y="799.50">one..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,039 samples, 3.39%)</title><rect x="96.6055%" y="773" width="3.3917%" height="15" fill="rgb(214,7,15)" fg:x="172009" fg:w="6039"/><text x="96.8555%" y="783.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,039 samples, 3.39%)</title><rect x="96.6055%" y="757" width="3.3917%" height="15" fill="rgb(235,32,4)" fg:x="172009" fg:w="6039"/><text x="96.8555%" y="767.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,486 samples, 3.08%)</title><rect x="96.9161%" y="741" width="3.0811%" height="15" fill="rgb(238,90,54)" fg:x="172562" fg:w="5486"/><text x="97.1661%" y="751.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (5,486 samples, 3.08%)</title><rect x="96.9161%" y="725" width="3.0811%" height="15" fill="rgb(213,208,19)" fg:x="172562" fg:w="5486"/><text x="97.1661%" y="735.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (811 samples, 0.46%)</title><rect x="99.5417%" y="709" width="0.4555%" height="15" fill="rgb(233,156,4)" fg:x="177237" fg:w="811"/><text x="99.7917%" y="719.50"></text></g><g><title>all (178,053 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(207,194,5)" fg:x="0" fg:w="178053"/><text x="0.2500%" y="831.50"></text></g></svg></svg>