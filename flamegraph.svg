<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="27802"><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (9 samples, 0.03%)</title><rect x="0.0000%" y="725" width="0.0324%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="735.50"></text></g><g><title>[anon] (18 samples, 0.06%)</title><rect x="0.0000%" y="741" width="0.0647%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="18"/><text x="0.2500%" y="751.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (9 samples, 0.03%)</title><rect x="0.0324%" y="725" width="0.0324%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="9"/><text x="0.2824%" y="735.50"></text></g><g><title>core::num::dec2flt::dec2flt (9 samples, 0.03%)</title><rect x="0.0324%" y="709" width="0.0324%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="9"/><text x="0.2824%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (9 samples, 0.03%)</title><rect x="0.0324%" y="693" width="0.0324%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="9"/><text x="0.2824%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.05%)</title><rect x="0.0755%" y="725" width="0.0540%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="15"/><text x="0.3255%" y="735.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (29 samples, 0.10%)</title><rect x="0.1295%" y="725" width="0.1043%" height="15" fill="rgb(207,160,47)" fg:x="36" fg:w="29"/><text x="0.3795%" y="735.50"></text></g><g><title>[unknown] (88 samples, 0.32%)</title><rect x="0.2374%" y="725" width="0.3165%" height="15" fill="rgb(228,23,34)" fg:x="66" fg:w="88"/><text x="0.4874%" y="735.50"></text></g><g><title>[unknown] (88 samples, 0.32%)</title><rect x="0.2374%" y="709" width="0.3165%" height="15" fill="rgb(218,30,26)" fg:x="66" fg:w="88"/><text x="0.4874%" y="719.50"></text></g><g><title>[unknown] (88 samples, 0.32%)</title><rect x="0.2374%" y="693" width="0.3165%" height="15" fill="rgb(220,122,19)" fg:x="66" fg:w="88"/><text x="0.4874%" y="703.50"></text></g><g><title>[unknown] (88 samples, 0.32%)</title><rect x="0.2374%" y="677" width="0.3165%" height="15" fill="rgb(250,228,42)" fg:x="66" fg:w="88"/><text x="0.4874%" y="687.50"></text></g><g><title>[unknown] (87 samples, 0.31%)</title><rect x="0.2410%" y="661" width="0.3129%" height="15" fill="rgb(240,193,28)" fg:x="67" fg:w="87"/><text x="0.4910%" y="671.50"></text></g><g><title>[unknown] (86 samples, 0.31%)</title><rect x="0.2446%" y="645" width="0.3093%" height="15" fill="rgb(216,20,37)" fg:x="68" fg:w="86"/><text x="0.4946%" y="655.50"></text></g><g><title>[unknown] (85 samples, 0.31%)</title><rect x="0.2482%" y="629" width="0.3057%" height="15" fill="rgb(206,188,39)" fg:x="69" fg:w="85"/><text x="0.4982%" y="639.50"></text></g><g><title>[unknown] (85 samples, 0.31%)</title><rect x="0.2482%" y="613" width="0.3057%" height="15" fill="rgb(217,207,13)" fg:x="69" fg:w="85"/><text x="0.4982%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="0.5359%" y="597" width="0.0180%" height="15" fill="rgb(231,73,38)" fg:x="149" fg:w="5"/><text x="0.7859%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="0.5431%" y="581" width="0.0108%" height="15" fill="rgb(225,20,46)" fg:x="151" fg:w="3"/><text x="0.7931%" y="591.50"></text></g><g><title>__memcmp_evex_movbe (6 samples, 0.02%)</title><rect x="0.5539%" y="725" width="0.0216%" height="15" fill="rgb(210,31,41)" fg:x="154" fg:w="6"/><text x="0.8039%" y="735.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (34 samples, 0.12%)</title><rect x="0.5755%" y="725" width="0.1223%" height="15" fill="rgb(221,200,47)" fg:x="160" fg:w="34"/><text x="0.8255%" y="735.50"></text></g><g><title>core::num::dec2flt::dec2flt (7 samples, 0.03%)</title><rect x="0.6726%" y="709" width="0.0252%" height="15" fill="rgb(226,26,5)" fg:x="187" fg:w="7"/><text x="0.9226%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (7 samples, 0.03%)</title><rect x="0.6726%" y="693" width="0.0252%" height="15" fill="rgb(249,33,26)" fg:x="187" fg:w="7"/><text x="0.9226%" y="703.50"></text></g><g><title>[unknown] (227 samples, 0.82%)</title><rect x="0.0647%" y="741" width="0.8165%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="227"/><text x="0.3147%" y="751.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (51 samples, 0.18%)</title><rect x="0.6978%" y="725" width="0.1834%" height="15" fill="rgb(221,5,38)" fg:x="194" fg:w="51"/><text x="0.9478%" y="735.50"></text></g><g><title>[unknown] (12 samples, 0.04%)</title><rect x="0.8920%" y="533" width="0.0432%" height="15" fill="rgb(247,18,42)" fg:x="248" fg:w="12"/><text x="1.1420%" y="543.50"></text></g><g><title>[unknown] (12 samples, 0.04%)</title><rect x="0.8920%" y="517" width="0.0432%" height="15" fill="rgb(241,131,45)" fg:x="248" fg:w="12"/><text x="1.1420%" y="527.50"></text></g><g><title>[unknown] (12 samples, 0.04%)</title><rect x="0.8920%" y="501" width="0.0432%" height="15" fill="rgb(249,31,29)" fg:x="248" fg:w="12"/><text x="1.1420%" y="511.50"></text></g><g><title>[unknown] (12 samples, 0.04%)</title><rect x="0.8920%" y="485" width="0.0432%" height="15" fill="rgb(225,111,53)" fg:x="248" fg:w="12"/><text x="1.1420%" y="495.50"></text></g><g><title>[unknown] (12 samples, 0.04%)</title><rect x="0.8920%" y="469" width="0.0432%" height="15" fill="rgb(238,160,17)" fg:x="248" fg:w="12"/><text x="1.1420%" y="479.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="453" width="0.0396%" height="15" fill="rgb(214,148,48)" fg:x="249" fg:w="11"/><text x="1.1456%" y="463.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="437" width="0.0396%" height="15" fill="rgb(232,36,49)" fg:x="249" fg:w="11"/><text x="1.1456%" y="447.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="421" width="0.0396%" height="15" fill="rgb(209,103,24)" fg:x="249" fg:w="11"/><text x="1.1456%" y="431.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="405" width="0.0396%" height="15" fill="rgb(229,88,8)" fg:x="249" fg:w="11"/><text x="1.1456%" y="415.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="389" width="0.0396%" height="15" fill="rgb(213,181,19)" fg:x="249" fg:w="11"/><text x="1.1456%" y="399.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="373" width="0.0396%" height="15" fill="rgb(254,191,54)" fg:x="249" fg:w="11"/><text x="1.1456%" y="383.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="357" width="0.0396%" height="15" fill="rgb(241,83,37)" fg:x="249" fg:w="11"/><text x="1.1456%" y="367.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="341" width="0.0396%" height="15" fill="rgb(233,36,39)" fg:x="249" fg:w="11"/><text x="1.1456%" y="351.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="0.8956%" y="325" width="0.0396%" height="15" fill="rgb(226,3,54)" fg:x="249" fg:w="11"/><text x="1.1456%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="0.8992%" y="309" width="0.0360%" height="15" fill="rgb(245,192,40)" fg:x="250" fg:w="10"/><text x="1.1492%" y="319.50"></text></g><g><title>__pthread_getattr_np (14 samples, 0.05%)</title><rect x="0.8920%" y="677" width="0.0504%" height="15" fill="rgb(238,167,29)" fg:x="248" fg:w="14"/><text x="1.1420%" y="687.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.05%)</title><rect x="0.8920%" y="661" width="0.0504%" height="15" fill="rgb(232,182,51)" fg:x="248" fg:w="14"/><text x="1.1420%" y="671.50"></text></g><g><title>tcache_init (14 samples, 0.05%)</title><rect x="0.8920%" y="645" width="0.0504%" height="15" fill="rgb(231,60,39)" fg:x="248" fg:w="14"/><text x="1.1420%" y="655.50"></text></g><g><title>tcache_init (14 samples, 0.05%)</title><rect x="0.8920%" y="629" width="0.0504%" height="15" fill="rgb(208,69,12)" fg:x="248" fg:w="14"/><text x="1.1420%" y="639.50"></text></g><g><title>arena_get2 (14 samples, 0.05%)</title><rect x="0.8920%" y="613" width="0.0504%" height="15" fill="rgb(235,93,37)" fg:x="248" fg:w="14"/><text x="1.1420%" y="623.50"></text></g><g><title>arena_get2 (14 samples, 0.05%)</title><rect x="0.8920%" y="597" width="0.0504%" height="15" fill="rgb(213,116,39)" fg:x="248" fg:w="14"/><text x="1.1420%" y="607.50"></text></g><g><title>_int_new_arena (14 samples, 0.05%)</title><rect x="0.8920%" y="581" width="0.0504%" height="15" fill="rgb(222,207,29)" fg:x="248" fg:w="14"/><text x="1.1420%" y="591.50"></text></g><g><title>new_heap (14 samples, 0.05%)</title><rect x="0.8920%" y="565" width="0.0504%" height="15" fill="rgb(206,96,30)" fg:x="248" fg:w="14"/><text x="1.1420%" y="575.50"></text></g><g><title>alloc_new_heap (14 samples, 0.05%)</title><rect x="0.8920%" y="549" width="0.0504%" height="15" fill="rgb(218,138,4)" fg:x="248" fg:w="14"/><text x="1.1420%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (197 samples, 0.71%)</title><rect x="3.8127%" y="661" width="0.7086%" height="15" fill="rgb(250,191,14)" fg:x="1060" fg:w="197"/><text x="4.0627%" y="671.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (390 samples, 1.40%)</title><rect x="4.5213%" y="661" width="1.4028%" height="15" fill="rgb(239,60,40)" fg:x="1257" fg:w="390"/><text x="4.7713%" y="671.50"></text></g><g><title>__memcmp_evex_movbe (68 samples, 0.24%)</title><rect x="5.6794%" y="645" width="0.2446%" height="15" fill="rgb(206,27,48)" fg:x="1579" fg:w="68"/><text x="5.9294%" y="655.50"></text></g><g><title>[unknown] (27 samples, 0.10%)</title><rect x="5.9240%" y="661" width="0.0971%" height="15" fill="rgb(225,35,8)" fg:x="1647" fg:w="27"/><text x="6.1740%" y="671.50"></text></g><g><title>[unknown] (26 samples, 0.09%)</title><rect x="5.9276%" y="645" width="0.0935%" height="15" fill="rgb(250,213,24)" fg:x="1648" fg:w="26"/><text x="6.1776%" y="655.50"></text></g><g><title>[unknown] (26 samples, 0.09%)</title><rect x="5.9276%" y="629" width="0.0935%" height="15" fill="rgb(247,123,22)" fg:x="1648" fg:w="26"/><text x="6.1776%" y="639.50"></text></g><g><title>[unknown] (26 samples, 0.09%)</title><rect x="5.9276%" y="613" width="0.0935%" height="15" fill="rgb(231,138,38)" fg:x="1648" fg:w="26"/><text x="6.1776%" y="623.50"></text></g><g><title>[unknown] (25 samples, 0.09%)</title><rect x="5.9312%" y="597" width="0.0899%" height="15" fill="rgb(231,145,46)" fg:x="1649" fg:w="25"/><text x="6.1812%" y="607.50"></text></g><g><title>[unknown] (24 samples, 0.09%)</title><rect x="5.9348%" y="581" width="0.0863%" height="15" fill="rgb(251,118,11)" fg:x="1650" fg:w="24"/><text x="6.1848%" y="591.50"></text></g><g><title>[unknown] (24 samples, 0.09%)</title><rect x="5.9348%" y="565" width="0.0863%" height="15" fill="rgb(217,147,25)" fg:x="1650" fg:w="24"/><text x="6.1848%" y="575.50"></text></g><g><title>[unknown] (22 samples, 0.08%)</title><rect x="5.9420%" y="549" width="0.0791%" height="15" fill="rgb(247,81,37)" fg:x="1652" fg:w="22"/><text x="6.1920%" y="559.50"></text></g><g><title>[unknown] (22 samples, 0.08%)</title><rect x="5.9420%" y="533" width="0.0791%" height="15" fill="rgb(209,12,38)" fg:x="1652" fg:w="22"/><text x="6.1920%" y="543.50"></text></g><g><title>[unknown] (22 samples, 0.08%)</title><rect x="5.9420%" y="517" width="0.0791%" height="15" fill="rgb(227,1,9)" fg:x="1652" fg:w="22"/><text x="6.1920%" y="527.50"></text></g><g><title>[unknown] (21 samples, 0.08%)</title><rect x="5.9456%" y="501" width="0.0755%" height="15" fill="rgb(248,47,43)" fg:x="1653" fg:w="21"/><text x="6.1956%" y="511.50"></text></g><g><title>[unknown] (21 samples, 0.08%)</title><rect x="5.9456%" y="485" width="0.0755%" height="15" fill="rgb(221,10,30)" fg:x="1653" fg:w="21"/><text x="6.1956%" y="495.50"></text></g><g><title>[unknown] (18 samples, 0.06%)</title><rect x="5.9564%" y="469" width="0.0647%" height="15" fill="rgb(210,229,1)" fg:x="1656" fg:w="18"/><text x="6.2064%" y="479.50"></text></g><g><title>[unknown] (18 samples, 0.06%)</title><rect x="5.9564%" y="453" width="0.0647%" height="15" fill="rgb(222,148,37)" fg:x="1656" fg:w="18"/><text x="6.2064%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="6.0032%" y="437" width="0.0180%" height="15" fill="rgb(234,67,33)" fg:x="1669" fg:w="5"/><text x="6.2532%" y="447.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.10%)</title><rect x="6.0211%" y="661" width="0.1043%" height="15" fill="rgb(247,98,35)" fg:x="1674" fg:w="29"/><text x="6.2711%" y="671.50"></text></g><g><title>_int_malloc (29 samples, 0.10%)</title><rect x="6.0211%" y="645" width="0.1043%" height="15" fill="rgb(247,138,52)" fg:x="1674" fg:w="29"/><text x="6.2711%" y="655.50"></text></g><g><title>sysmalloc (29 samples, 0.10%)</title><rect x="6.0211%" y="629" width="0.1043%" height="15" fill="rgb(213,79,30)" fg:x="1674" fg:w="29"/><text x="6.2711%" y="639.50"></text></g><g><title>sysmalloc_mmap (29 samples, 0.10%)</title><rect x="6.0211%" y="613" width="0.1043%" height="15" fill="rgb(246,177,23)" fg:x="1674" fg:w="29"/><text x="6.2711%" y="623.50"></text></g><g><title>__GI___mmap64 (27 samples, 0.10%)</title><rect x="6.0283%" y="597" width="0.0971%" height="15" fill="rgb(230,62,27)" fg:x="1676" fg:w="27"/><text x="6.2783%" y="607.50"></text></g><g><title>__GI___mmap64 (27 samples, 0.10%)</title><rect x="6.0283%" y="581" width="0.0971%" height="15" fill="rgb(216,154,8)" fg:x="1676" fg:w="27"/><text x="6.2783%" y="591.50"></text></g><g><title>[unknown] (27 samples, 0.10%)</title><rect x="6.0283%" y="565" width="0.0971%" height="15" fill="rgb(244,35,45)" fg:x="1676" fg:w="27"/><text x="6.2783%" y="575.50"></text></g><g><title>[unknown] (27 samples, 0.10%)</title><rect x="6.0283%" y="549" width="0.0971%" height="15" fill="rgb(251,115,12)" fg:x="1676" fg:w="27"/><text x="6.2783%" y="559.50"></text></g><g><title>[unknown] (27 samples, 0.10%)</title><rect x="6.0283%" y="533" width="0.0971%" height="15" fill="rgb(240,54,50)" fg:x="1676" fg:w="27"/><text x="6.2783%" y="543.50"></text></g><g><title>[unknown] (27 samples, 0.10%)</title><rect x="6.0283%" y="517" width="0.0971%" height="15" fill="rgb(233,84,52)" fg:x="1676" fg:w="27"/><text x="6.2783%" y="527.50"></text></g><g><title>[unknown] (27 samples, 0.10%)</title><rect x="6.0283%" y="501" width="0.0971%" height="15" fill="rgb(207,117,47)" fg:x="1676" fg:w="27"/><text x="6.2783%" y="511.50"></text></g><g><title>[unknown] (26 samples, 0.09%)</title><rect x="6.0319%" y="485" width="0.0935%" height="15" fill="rgb(249,43,39)" fg:x="1677" fg:w="26"/><text x="6.2819%" y="495.50"></text></g><g><title>[unknown] (25 samples, 0.09%)</title><rect x="6.0355%" y="469" width="0.0899%" height="15" fill="rgb(209,38,44)" fg:x="1678" fg:w="25"/><text x="6.2855%" y="479.50"></text></g><g><title>[unknown] (25 samples, 0.09%)</title><rect x="6.0355%" y="453" width="0.0899%" height="15" fill="rgb(236,212,23)" fg:x="1678" fg:w="25"/><text x="6.2855%" y="463.50"></text></g><g><title>[unknown] (24 samples, 0.09%)</title><rect x="6.0391%" y="437" width="0.0863%" height="15" fill="rgb(242,79,21)" fg:x="1679" fg:w="24"/><text x="6.2891%" y="447.50"></text></g><g><title>[unknown] (23 samples, 0.08%)</title><rect x="6.0427%" y="421" width="0.0827%" height="15" fill="rgb(211,96,35)" fg:x="1680" fg:w="23"/><text x="6.2927%" y="431.50"></text></g><g><title>[unknown] (23 samples, 0.08%)</title><rect x="6.0427%" y="405" width="0.0827%" height="15" fill="rgb(253,215,40)" fg:x="1680" fg:w="23"/><text x="6.2927%" y="415.50"></text></g><g><title>[unknown] (21 samples, 0.08%)</title><rect x="6.0499%" y="389" width="0.0755%" height="15" fill="rgb(211,81,21)" fg:x="1682" fg:w="21"/><text x="6.2999%" y="399.50"></text></g><g><title>[unknown] (21 samples, 0.08%)</title><rect x="6.0499%" y="373" width="0.0755%" height="15" fill="rgb(208,190,38)" fg:x="1682" fg:w="21"/><text x="6.2999%" y="383.50"></text></g><g><title>[unknown] (21 samples, 0.08%)</title><rect x="6.0499%" y="357" width="0.0755%" height="15" fill="rgb(235,213,38)" fg:x="1682" fg:w="21"/><text x="6.2999%" y="367.50"></text></g><g><title>[unknown] (21 samples, 0.08%)</title><rect x="6.0499%" y="341" width="0.0755%" height="15" fill="rgb(237,122,38)" fg:x="1682" fg:w="21"/><text x="6.2999%" y="351.50"></text></g><g><title>[unknown] (20 samples, 0.07%)</title><rect x="6.0535%" y="325" width="0.0719%" height="15" fill="rgb(244,218,35)" fg:x="1683" fg:w="20"/><text x="6.3035%" y="335.50"></text></g><g><title>__GI___libc_read (25,753 samples, 92.63%)</title><rect x="6.1255%" y="661" width="92.6300%" height="15" fill="rgb(240,68,47)" fg:x="1703" fg:w="25753"/><text x="6.3755%" y="671.50">__GI___libc_read</text></g><g><title>__GI___libc_read (25,753 samples, 92.63%)</title><rect x="6.1255%" y="645" width="92.6300%" height="15" fill="rgb(210,16,53)" fg:x="1703" fg:w="25753"/><text x="6.3755%" y="655.50">__GI___libc_read</text></g><g><title>[unknown] (25,753 samples, 92.63%)</title><rect x="6.1255%" y="629" width="92.6300%" height="15" fill="rgb(235,124,12)" fg:x="1703" fg:w="25753"/><text x="6.3755%" y="639.50">[unknown]</text></g><g><title>[unknown] (25,748 samples, 92.61%)</title><rect x="6.1434%" y="613" width="92.6120%" height="15" fill="rgb(224,169,11)" fg:x="1708" fg:w="25748"/><text x="6.3934%" y="623.50">[unknown]</text></g><g><title>[unknown] (25,748 samples, 92.61%)</title><rect x="6.1434%" y="597" width="92.6120%" height="15" fill="rgb(250,166,2)" fg:x="1708" fg:w="25748"/><text x="6.3934%" y="607.50">[unknown]</text></g><g><title>[unknown] (25,748 samples, 92.61%)</title><rect x="6.1434%" y="581" width="92.6120%" height="15" fill="rgb(242,216,29)" fg:x="1708" fg:w="25748"/><text x="6.3934%" y="591.50">[unknown]</text></g><g><title>[unknown] (25,748 samples, 92.61%)</title><rect x="6.1434%" y="565" width="92.6120%" height="15" fill="rgb(230,116,27)" fg:x="1708" fg:w="25748"/><text x="6.3934%" y="575.50">[unknown]</text></g><g><title>[unknown] (25,748 samples, 92.61%)</title><rect x="6.1434%" y="549" width="92.6120%" height="15" fill="rgb(228,99,48)" fg:x="1708" fg:w="25748"/><text x="6.3934%" y="559.50">[unknown]</text></g><g><title>[unknown] (25,748 samples, 92.61%)</title><rect x="6.1434%" y="533" width="92.6120%" height="15" fill="rgb(253,11,6)" fg:x="1708" fg:w="25748"/><text x="6.3934%" y="543.50">[unknown]</text></g><g><title>[unknown] (25,748 samples, 92.61%)</title><rect x="6.1434%" y="517" width="92.6120%" height="15" fill="rgb(247,143,39)" fg:x="1708" fg:w="25748"/><text x="6.3934%" y="527.50">[unknown]</text></g><g><title>[unknown] (25,584 samples, 92.02%)</title><rect x="6.7333%" y="501" width="92.0222%" height="15" fill="rgb(236,97,10)" fg:x="1872" fg:w="25584"/><text x="6.9833%" y="511.50">[unknown]</text></g><g><title>[unknown] (25,534 samples, 91.84%)</title><rect x="6.9132%" y="485" width="91.8423%" height="15" fill="rgb(233,208,19)" fg:x="1922" fg:w="25534"/><text x="7.1632%" y="495.50">[unknown]</text></g><g><title>[unknown] (24,965 samples, 89.80%)</title><rect x="8.9598%" y="469" width="89.7957%" height="15" fill="rgb(216,164,2)" fg:x="2491" fg:w="24965"/><text x="9.2098%" y="479.50">[unknown]</text></g><g><title>[unknown] (11,781 samples, 42.37%)</title><rect x="56.3808%" y="453" width="42.3746%" height="15" fill="rgb(220,129,5)" fg:x="15675" fg:w="11781"/><text x="56.6308%" y="463.50">[unknown]</text></g><g><title>[unknown] (11,758 samples, 42.29%)</title><rect x="56.4636%" y="437" width="42.2919%" height="15" fill="rgb(242,17,10)" fg:x="15698" fg:w="11758"/><text x="56.7136%" y="447.50">[unknown]</text></g><g><title>[unknown] (11,537 samples, 41.50%)</title><rect x="57.2585%" y="421" width="41.4970%" height="15" fill="rgb(242,107,0)" fg:x="15919" fg:w="11537"/><text x="57.5085%" y="431.50">[unknown]</text></g><g><title>[unknown] (11,427 samples, 41.10%)</title><rect x="57.6541%" y="405" width="41.1014%" height="15" fill="rgb(251,28,31)" fg:x="16029" fg:w="11427"/><text x="57.9041%" y="415.50">[unknown]</text></g><g><title>[unknown] (10,601 samples, 38.13%)</title><rect x="60.6251%" y="389" width="38.1304%" height="15" fill="rgb(233,223,10)" fg:x="16855" fg:w="10601"/><text x="60.8751%" y="399.50">[unknown]</text></g><g><title>[unknown] (10,170 samples, 36.58%)</title><rect x="62.1754%" y="373" width="36.5801%" height="15" fill="rgb(215,21,27)" fg:x="17286" fg:w="10170"/><text x="62.4254%" y="383.50">[unknown]</text></g><g><title>[unknown] (10,008 samples, 36.00%)</title><rect x="62.7581%" y="357" width="35.9974%" height="15" fill="rgb(232,23,21)" fg:x="17448" fg:w="10008"/><text x="63.0081%" y="367.50">[unknown]</text></g><g><title>[unknown] (9,489 samples, 34.13%)</title><rect x="64.6248%" y="341" width="34.1306%" height="15" fill="rgb(244,5,23)" fg:x="17967" fg:w="9489"/><text x="64.8748%" y="351.50">[unknown]</text></g><g><title>[unknown] (8,826 samples, 31.75%)</title><rect x="67.0096%" y="325" width="31.7459%" height="15" fill="rgb(226,81,46)" fg:x="18630" fg:w="8826"/><text x="67.2596%" y="335.50">[unknown]</text></g><g><title>[unknown] (7,588 samples, 27.29%)</title><rect x="71.4625%" y="309" width="27.2930%" height="15" fill="rgb(247,70,30)" fg:x="19868" fg:w="7588"/><text x="71.7125%" y="319.50">[unknown]</text></g><g><title>[unknown] (5,855 samples, 21.06%)</title><rect x="77.6958%" y="293" width="21.0596%" height="15" fill="rgb(212,68,19)" fg:x="21601" fg:w="5855"/><text x="77.9458%" y="303.50">[unknown]</text></g><g><title>[unknown] (5,239 samples, 18.84%)</title><rect x="79.9115%" y="277" width="18.8440%" height="15" fill="rgb(240,187,13)" fg:x="22217" fg:w="5239"/><text x="80.1615%" y="287.50">[unknown]</text></g><g><title>[unknown] (1,611 samples, 5.79%)</title><rect x="92.9609%" y="261" width="5.7945%" height="15" fill="rgb(223,113,26)" fg:x="25845" fg:w="1611"/><text x="93.2109%" y="271.50">[unknow..</text></g><g><title>[unknown] (1,482 samples, 5.33%)</title><rect x="93.4249%" y="245" width="5.3306%" height="15" fill="rgb(206,192,2)" fg:x="25974" fg:w="1482"/><text x="93.6749%" y="255.50">[unknow..</text></g><g><title>[unknown] (749 samples, 2.69%)</title><rect x="96.0614%" y="229" width="2.6941%" height="15" fill="rgb(241,108,4)" fg:x="26707" fg:w="749"/><text x="96.3114%" y="239.50">[u..</text></g><g><title>[unknown] (593 samples, 2.13%)</title><rect x="96.6225%" y="213" width="2.1329%" height="15" fill="rgb(247,173,49)" fg:x="26863" fg:w="593"/><text x="96.8725%" y="223.50">[..</text></g><g><title>[unknown] (585 samples, 2.10%)</title><rect x="96.6513%" y="197" width="2.1042%" height="15" fill="rgb(224,114,35)" fg:x="26871" fg:w="585"/><text x="96.9013%" y="207.50">[..</text></g><g><title>[unknown] (107 samples, 0.38%)</title><rect x="98.3706%" y="181" width="0.3849%" height="15" fill="rgb(245,159,27)" fg:x="27349" fg:w="107"/><text x="98.6206%" y="191.50"></text></g><g><title>[unknown] (41 samples, 0.15%)</title><rect x="98.6080%" y="165" width="0.1475%" height="15" fill="rgb(245,172,44)" fg:x="27415" fg:w="41"/><text x="98.8580%" y="175.50"></text></g><g><title>[unknown] (35 samples, 0.13%)</title><rect x="98.6296%" y="149" width="0.1259%" height="15" fill="rgb(236,23,11)" fg:x="27421" fg:w="35"/><text x="98.8796%" y="159.50"></text></g><g><title>[unknown] (26 samples, 0.09%)</title><rect x="98.6620%" y="133" width="0.0935%" height="15" fill="rgb(205,117,38)" fg:x="27430" fg:w="26"/><text x="98.9120%" y="143.50"></text></g><g><title>[unknown] (21 samples, 0.08%)</title><rect x="98.6800%" y="117" width="0.0755%" height="15" fill="rgb(237,72,25)" fg:x="27435" fg:w="21"/><text x="98.9300%" y="127.50"></text></g><g><title>[unknown] (18 samples, 0.06%)</title><rect x="98.6907%" y="101" width="0.0647%" height="15" fill="rgb(244,70,9)" fg:x="27438" fg:w="18"/><text x="98.9407%" y="111.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="98.7267%" y="85" width="0.0288%" height="15" fill="rgb(217,125,39)" fg:x="27448" fg:w="8"/><text x="98.9767%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="98.7339%" y="69" width="0.0216%" height="15" fill="rgb(235,36,10)" fg:x="27450" fg:w="6"/><text x="98.9839%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="98.7447%" y="53" width="0.0108%" height="15" fill="rgb(251,123,47)" fg:x="27453" fg:w="3"/><text x="98.9947%" y="63.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="98.7447%" y="37" width="0.0108%" height="15" fill="rgb(221,13,13)" fg:x="27453" fg:w="3"/><text x="98.9947%" y="47.50"></text></g><g><title>__memcmp_evex_movbe (122 samples, 0.44%)</title><rect x="98.7555%" y="661" width="0.4388%" height="15" fill="rgb(238,131,9)" fg:x="27456" fg:w="122"/><text x="99.0055%" y="671.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (4 samples, 0.01%)</title><rect x="99.1979%" y="645" width="0.0144%" height="15" fill="rgb(211,50,8)" fg:x="27579" fg:w="4"/><text x="99.4479%" y="655.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (16 samples, 0.06%)</title><rect x="99.3921%" y="613" width="0.0575%" height="15" fill="rgb(245,182,24)" fg:x="27633" fg:w="16"/><text x="99.6421%" y="623.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (36 samples, 0.13%)</title><rect x="99.3382%" y="629" width="0.1295%" height="15" fill="rgb(242,14,37)" fg:x="27618" fg:w="36"/><text x="99.5882%" y="639.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (5 samples, 0.02%)</title><rect x="99.4497%" y="613" width="0.0180%" height="15" fill="rgb(246,228,12)" fg:x="27649" fg:w="5"/><text x="99.6997%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11 samples, 0.04%)</title><rect x="99.7410%" y="549" width="0.0396%" height="15" fill="rgb(213,55,15)" fg:x="27730" fg:w="11"/><text x="99.9910%" y="559.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (48 samples, 0.17%)</title><rect x="99.6367%" y="581" width="0.1726%" height="15" fill="rgb(209,9,3)" fg:x="27701" fg:w="48"/><text x="99.8867%" y="591.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (19 samples, 0.07%)</title><rect x="99.7410%" y="565" width="0.0683%" height="15" fill="rgb(230,59,30)" fg:x="27730" fg:w="19"/><text x="99.9910%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (8 samples, 0.03%)</title><rect x="99.7806%" y="549" width="0.0288%" height="15" fill="rgb(209,121,21)" fg:x="27741" fg:w="8"/><text x="100.0306%" y="559.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (64 samples, 0.23%)</title><rect x="99.6079%" y="597" width="0.2302%" height="15" fill="rgb(220,109,13)" fg:x="27693" fg:w="64"/><text x="99.8579%" y="607.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (8 samples, 0.03%)</title><rect x="99.8094%" y="581" width="0.0288%" height="15" fill="rgb(232,18,1)" fg:x="27749" fg:w="8"/><text x="100.0594%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (184 samples, 0.66%)</title><rect x="99.1979%" y="661" width="0.6618%" height="15" fill="rgb(215,41,42)" fg:x="27579" fg:w="184"/><text x="99.4479%" y="671.50"></text></g><g><title>core::num::dec2flt::dec2flt (180 samples, 0.65%)</title><rect x="99.2123%" y="645" width="0.6474%" height="15" fill="rgb(224,123,36)" fg:x="27583" fg:w="180"/><text x="99.4623%" y="655.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (109 samples, 0.39%)</title><rect x="99.4677%" y="629" width="0.3921%" height="15" fill="rgb(240,125,3)" fg:x="27654" fg:w="109"/><text x="99.7177%" y="639.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (102 samples, 0.37%)</title><rect x="99.4928%" y="613" width="0.3669%" height="15" fill="rgb(205,98,50)" fg:x="27661" fg:w="102"/><text x="99.7428%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (6 samples, 0.02%)</title><rect x="99.8381%" y="597" width="0.0216%" height="15" fill="rgb(205,185,37)" fg:x="27757" fg:w="6"/><text x="100.0881%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (27,523 samples, 99.00%)</title><rect x="0.8920%" y="693" width="98.9965%" height="15" fill="rgb(238,207,15)" fg:x="248" fg:w="27523"/><text x="1.1420%" y="703.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27,509 samples, 98.95%)</title><rect x="0.9424%" y="677" width="98.9461%" height="15" fill="rgb(213,199,42)" fg:x="262" fg:w="27509"/><text x="1.1924%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::io::stdio::_print (8 samples, 0.03%)</title><rect x="99.8597%" y="661" width="0.0288%" height="15" fill="rgb(235,201,11)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="671.50"></text></g><g><title>core::fmt::write (8 samples, 0.03%)</title><rect x="99.8597%" y="645" width="0.0288%" height="15" fill="rgb(207,46,11)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="655.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.03%)</title><rect x="99.8597%" y="629" width="0.0288%" height="15" fill="rgb(241,35,35)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (8 samples, 0.03%)</title><rect x="99.8597%" y="613" width="0.0288%" height="15" fill="rgb(243,32,47)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="623.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (8 samples, 0.03%)</title><rect x="99.8597%" y="597" width="0.0288%" height="15" fill="rgb(247,202,23)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="607.50"></text></g><g><title>__GI___libc_write (8 samples, 0.03%)</title><rect x="99.8597%" y="581" width="0.0288%" height="15" fill="rgb(219,102,11)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="591.50"></text></g><g><title>__GI___libc_write (8 samples, 0.03%)</title><rect x="99.8597%" y="565" width="0.0288%" height="15" fill="rgb(243,110,44)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="575.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="99.8597%" y="549" width="0.0288%" height="15" fill="rgb(222,74,54)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="559.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="99.8597%" y="533" width="0.0288%" height="15" fill="rgb(216,99,12)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="543.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="99.8597%" y="517" width="0.0288%" height="15" fill="rgb(226,22,26)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="527.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="99.8597%" y="501" width="0.0288%" height="15" fill="rgb(217,163,10)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="99.8597%" y="485" width="0.0288%" height="15" fill="rgb(213,25,53)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="495.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="99.8597%" y="469" width="0.0288%" height="15" fill="rgb(252,105,26)" fg:x="27763" fg:w="8"/><text x="100.1097%" y="479.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.8633%" y="453" width="0.0252%" height="15" fill="rgb(220,39,43)" fg:x="27764" fg:w="7"/><text x="100.1133%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.8633%" y="437" width="0.0252%" height="15" fill="rgb(229,68,48)" fg:x="27764" fg:w="7"/><text x="100.1133%" y="447.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.8633%" y="421" width="0.0252%" height="15" fill="rgb(252,8,32)" fg:x="27764" fg:w="7"/><text x="100.1133%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.8633%" y="405" width="0.0252%" height="15" fill="rgb(223,20,43)" fg:x="27764" fg:w="7"/><text x="100.1133%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.8633%" y="389" width="0.0252%" height="15" fill="rgb(229,81,49)" fg:x="27764" fg:w="7"/><text x="100.1133%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.8633%" y="373" width="0.0252%" height="15" fill="rgb(236,28,36)" fg:x="27764" fg:w="7"/><text x="100.1133%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.8633%" y="357" width="0.0252%" height="15" fill="rgb(249,185,26)" fg:x="27764" fg:w="7"/><text x="100.1133%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.8633%" y="341" width="0.0252%" height="15" fill="rgb(249,174,33)" fg:x="27764" fg:w="7"/><text x="100.1133%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.8669%" y="325" width="0.0216%" height="15" fill="rgb(233,201,37)" fg:x="27765" fg:w="6"/><text x="100.1169%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.8669%" y="309" width="0.0216%" height="15" fill="rgb(221,78,26)" fg:x="27765" fg:w="6"/><text x="100.1169%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.8669%" y="293" width="0.0216%" height="15" fill="rgb(250,127,30)" fg:x="27765" fg:w="6"/><text x="100.1169%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.8669%" y="277" width="0.0216%" height="15" fill="rgb(230,49,44)" fg:x="27765" fg:w="6"/><text x="100.1169%" y="287.50"></text></g><g><title>__GI___mmap64 (11 samples, 0.04%)</title><rect x="99.8885%" y="677" width="0.0396%" height="15" fill="rgb(229,67,23)" fg:x="27771" fg:w="11"/><text x="100.1385%" y="687.50"></text></g><g><title>__GI___mmap64 (11 samples, 0.04%)</title><rect x="99.8885%" y="661" width="0.0396%" height="15" fill="rgb(249,83,47)" fg:x="27771" fg:w="11"/><text x="100.1385%" y="671.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="99.8885%" y="645" width="0.0396%" height="15" fill="rgb(215,43,3)" fg:x="27771" fg:w="11"/><text x="100.1385%" y="655.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="99.8885%" y="629" width="0.0396%" height="15" fill="rgb(238,154,13)" fg:x="27771" fg:w="11"/><text x="100.1385%" y="639.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="99.8885%" y="613" width="0.0396%" height="15" fill="rgb(219,56,2)" fg:x="27771" fg:w="11"/><text x="100.1385%" y="623.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="99.8885%" y="597" width="0.0396%" height="15" fill="rgb(233,0,4)" fg:x="27771" fg:w="11"/><text x="100.1385%" y="607.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="99.8885%" y="581" width="0.0396%" height="15" fill="rgb(235,30,7)" fg:x="27771" fg:w="11"/><text x="100.1385%" y="591.50"></text></g><g><title>[unknown] (11 samples, 0.04%)</title><rect x="99.8885%" y="565" width="0.0396%" height="15" fill="rgb(250,79,13)" fg:x="27771" fg:w="11"/><text x="100.1385%" y="575.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="99.8921%" y="549" width="0.0360%" height="15" fill="rgb(211,146,34)" fg:x="27772" fg:w="10"/><text x="100.1421%" y="559.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="99.8921%" y="533" width="0.0360%" height="15" fill="rgb(228,22,38)" fg:x="27772" fg:w="10"/><text x="100.1421%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.9029%" y="517" width="0.0252%" height="15" fill="rgb(235,168,5)" fg:x="27775" fg:w="7"/><text x="100.1529%" y="527.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.9029%" y="501" width="0.0252%" height="15" fill="rgb(221,155,16)" fg:x="27775" fg:w="7"/><text x="100.1529%" y="511.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="99.9029%" y="485" width="0.0252%" height="15" fill="rgb(215,215,53)" fg:x="27775" fg:w="7"/><text x="100.1529%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9101%" y="469" width="0.0180%" height="15" fill="rgb(223,4,10)" fg:x="27777" fg:w="5"/><text x="100.1601%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9101%" y="453" width="0.0180%" height="15" fill="rgb(234,103,6)" fg:x="27777" fg:w="5"/><text x="100.1601%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9101%" y="437" width="0.0180%" height="15" fill="rgb(227,97,0)" fg:x="27777" fg:w="5"/><text x="100.1601%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9101%" y="421" width="0.0180%" height="15" fill="rgb(234,150,53)" fg:x="27777" fg:w="5"/><text x="100.1601%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9101%" y="405" width="0.0180%" height="15" fill="rgb(228,201,54)" fg:x="27777" fg:w="5"/><text x="100.1601%" y="415.50"></text></g><g><title>__clone3 (27,539 samples, 99.05%)</title><rect x="0.8812%" y="741" width="99.0540%" height="15" fill="rgb(222,22,37)" fg:x="245" fg:w="27539"/><text x="1.1312%" y="751.50">__clone3</text></g><g><title>start_thread (27,537 samples, 99.05%)</title><rect x="0.8884%" y="725" width="99.0468%" height="15" fill="rgb(237,53,32)" fg:x="247" fg:w="27537"/><text x="1.1384%" y="735.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (27,536 samples, 99.04%)</title><rect x="0.8920%" y="709" width="99.0432%" height="15" fill="rgb(233,25,53)" fg:x="248" fg:w="27536"/><text x="1.1420%" y="719.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (13 samples, 0.05%)</title><rect x="99.8885%" y="693" width="0.0468%" height="15" fill="rgb(210,40,34)" fg:x="27771" fg:w="13"/><text x="100.1385%" y="703.50"></text></g><g><title>__memcmp_evex_movbe (6 samples, 0.02%)</title><rect x="99.9353%" y="741" width="0.0216%" height="15" fill="rgb(241,220,44)" fg:x="27784" fg:w="6"/><text x="100.1853%" y="751.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="613" width="0.0216%" height="15" fill="rgb(235,28,35)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="597" width="0.0216%" height="15" fill="rgb(210,56,17)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="581" width="0.0216%" height="15" fill="rgb(224,130,29)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="565" width="0.0216%" height="15" fill="rgb(235,212,8)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="549" width="0.0216%" height="15" fill="rgb(223,33,50)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="533" width="0.0216%" height="15" fill="rgb(219,149,13)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="517" width="0.0216%" height="15" fill="rgb(250,156,29)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="501" width="0.0216%" height="15" fill="rgb(216,193,19)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9568%" y="485" width="0.0216%" height="15" fill="rgb(216,135,14)" fg:x="27790" fg:w="6"/><text x="100.2068%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9604%" y="469" width="0.0180%" height="15" fill="rgb(241,47,5)" fg:x="27791" fg:w="5"/><text x="100.2104%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9604%" y="453" width="0.0180%" height="15" fill="rgb(233,42,35)" fg:x="27791" fg:w="5"/><text x="100.2104%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9604%" y="437" width="0.0180%" height="15" fill="rgb(231,13,6)" fg:x="27791" fg:w="5"/><text x="100.2104%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9604%" y="421" width="0.0180%" height="15" fill="rgb(207,181,40)" fg:x="27791" fg:w="5"/><text x="100.2104%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9604%" y="405" width="0.0180%" height="15" fill="rgb(254,173,49)" fg:x="27791" fg:w="5"/><text x="100.2104%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9604%" y="389" width="0.0180%" height="15" fill="rgb(221,1,38)" fg:x="27791" fg:w="5"/><text x="100.2104%" y="399.50"></text></g><g><title>one-brc (27,797 samples, 99.98%)</title><rect x="0.0000%" y="757" width="99.9820%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="27797"/><text x="0.2500%" y="767.50">one-brc</text></g><g><title>_start (7 samples, 0.03%)</title><rect x="99.9568%" y="741" width="0.0252%" height="15" fill="rgb(249,21,11)" fg:x="27790" fg:w="7"/><text x="100.2068%" y="751.50"></text></g><g><title>__libc_start_main_impl (7 samples, 0.03%)</title><rect x="99.9568%" y="725" width="0.0252%" height="15" fill="rgb(222,201,40)" fg:x="27790" fg:w="7"/><text x="100.2068%" y="735.50"></text></g><g><title>__libc_start_call_main (7 samples, 0.03%)</title><rect x="99.9568%" y="709" width="0.0252%" height="15" fill="rgb(235,61,29)" fg:x="27790" fg:w="7"/><text x="100.2068%" y="719.50"></text></g><g><title>main (7 samples, 0.03%)</title><rect x="99.9568%" y="693" width="0.0252%" height="15" fill="rgb(219,207,3)" fg:x="27790" fg:w="7"/><text x="100.2068%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.03%)</title><rect x="99.9568%" y="677" width="0.0252%" height="15" fill="rgb(222,56,46)" fg:x="27790" fg:w="7"/><text x="100.2068%" y="687.50"></text></g><g><title>one_brc::main (7 samples, 0.03%)</title><rect x="99.9568%" y="661" width="0.0252%" height="15" fill="rgb(239,76,54)" fg:x="27790" fg:w="7"/><text x="100.2068%" y="671.50"></text></g><g><title>__pthread_create_2_1 (7 samples, 0.03%)</title><rect x="99.9568%" y="645" width="0.0252%" height="15" fill="rgb(231,124,27)" fg:x="27790" fg:w="7"/><text x="100.2068%" y="655.50"></text></g><g><title>allocate_stack (7 samples, 0.03%)</title><rect x="99.9568%" y="629" width="0.0252%" height="15" fill="rgb(249,195,6)" fg:x="27790" fg:w="7"/><text x="100.2068%" y="639.50"></text></g><g><title>all (27,802 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="27802"/><text x="0.2500%" y="783.50"></text></g><g><title>perf-exec (5 samples, 0.02%)</title><rect x="99.9820%" y="757" width="0.0180%" height="15" fill="rgb(206,201,31)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="741" width="0.0180%" height="15" fill="rgb(231,57,52)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="725" width="0.0180%" height="15" fill="rgb(248,177,22)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="709" width="0.0180%" height="15" fill="rgb(215,211,37)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="693" width="0.0180%" height="15" fill="rgb(241,128,51)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="677" width="0.0180%" height="15" fill="rgb(227,165,31)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="661" width="0.0180%" height="15" fill="rgb(228,167,24)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="645" width="0.0180%" height="15" fill="rgb(228,143,12)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="629" width="0.0180%" height="15" fill="rgb(249,149,8)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="613" width="0.0180%" height="15" fill="rgb(243,35,44)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="597" width="0.0180%" height="15" fill="rgb(246,89,9)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="581" width="0.0180%" height="15" fill="rgb(233,213,13)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="565" width="0.0180%" height="15" fill="rgb(233,141,41)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="549" width="0.0180%" height="15" fill="rgb(239,167,4)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="533" width="0.0180%" height="15" fill="rgb(209,217,16)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="517" width="0.0180%" height="15" fill="rgb(219,88,35)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="501" width="0.0180%" height="15" fill="rgb(220,193,23)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9820%" y="485" width="0.0180%" height="15" fill="rgb(230,90,52)" fg:x="27797" fg:w="5"/><text x="100.2320%" y="495.50"></text></g></svg></svg>