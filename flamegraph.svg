<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="700940"><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (133 samples, 0.02%)</title><rect x="0.0123%" y="693" width="0.0190%" height="15" fill="rgb(227,0,7)" fg:x="86" fg:w="133"/><text x="0.2623%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (133 samples, 0.02%)</title><rect x="0.0123%" y="677" width="0.0190%" height="15" fill="rgb(217,0,24)" fg:x="86" fg:w="133"/><text x="0.2623%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (293 samples, 0.04%)</title><rect x="0.0000%" y="773" width="0.0418%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="293"/><text x="0.2500%" y="783.50"></text></g><g><title>alloc::string::String::push_str (207 samples, 0.03%)</title><rect x="0.0123%" y="757" width="0.0295%" height="15" fill="rgb(248,212,6)" fg:x="86" fg:w="207"/><text x="0.2623%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (207 samples, 0.03%)</title><rect x="0.0123%" y="741" width="0.0295%" height="15" fill="rgb(208,68,35)" fg:x="86" fg:w="207"/><text x="0.2623%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (207 samples, 0.03%)</title><rect x="0.0123%" y="725" width="0.0295%" height="15" fill="rgb(232,128,0)" fg:x="86" fg:w="207"/><text x="0.2623%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (207 samples, 0.03%)</title><rect x="0.0123%" y="709" width="0.0295%" height="15" fill="rgb(207,160,47)" fg:x="86" fg:w="207"/><text x="0.2623%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 0.01%)</title><rect x="0.0312%" y="693" width="0.0106%" height="15" fill="rgb(228,23,34)" fg:x="219" fg:w="74"/><text x="0.2812%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (590 samples, 0.08%)</title><rect x="0.0418%" y="773" width="0.0842%" height="15" fill="rgb(218,30,26)" fg:x="293" fg:w="590"/><text x="0.2918%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,416 samples, 0.34%)</title><rect x="0.5421%" y="757" width="0.3447%" height="15" fill="rgb(220,122,19)" fg:x="3800" fg:w="2416"/><text x="0.7921%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2,416 samples, 0.34%)</title><rect x="0.5421%" y="741" width="0.3447%" height="15" fill="rgb(250,228,42)" fg:x="3800" fg:w="2416"/><text x="0.7921%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,416 samples, 0.34%)</title><rect x="0.5421%" y="725" width="0.3447%" height="15" fill="rgb(240,193,28)" fg:x="3800" fg:w="2416"/><text x="0.7921%" y="735.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (7,100 samples, 1.01%)</title><rect x="0.1260%" y="773" width="1.0129%" height="15" fill="rgb(216,20,37)" fg:x="883" fg:w="7100"/><text x="0.3760%" y="783.50"></text></g><g><title>core::slice::memchr::memchr (1,767 samples, 0.25%)</title><rect x="0.8868%" y="757" width="0.2521%" height="15" fill="rgb(206,188,39)" fg:x="6216" fg:w="1767"/><text x="1.1368%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,454 samples, 0.21%)</title><rect x="1.3736%" y="677" width="0.2074%" height="15" fill="rgb(217,207,13)" fg:x="9628" fg:w="1454"/><text x="1.6236%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,454 samples, 0.21%)</title><rect x="1.3736%" y="661" width="0.2074%" height="15" fill="rgb(231,73,38)" fg:x="9628" fg:w="1454"/><text x="1.6236%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4,929 samples, 0.70%)</title><rect x="1.1389%" y="757" width="0.7032%" height="15" fill="rgb(225,20,46)" fg:x="7983" fg:w="4929"/><text x="1.3889%" y="767.50"></text></g><g><title>alloc::string::String::push_str (3,284 samples, 0.47%)</title><rect x="1.3736%" y="741" width="0.4685%" height="15" fill="rgb(210,31,41)" fg:x="9628" fg:w="3284"/><text x="1.6236%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,284 samples, 0.47%)</title><rect x="1.3736%" y="725" width="0.4685%" height="15" fill="rgb(221,200,47)" fg:x="9628" fg:w="3284"/><text x="1.6236%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,284 samples, 0.47%)</title><rect x="1.3736%" y="709" width="0.4685%" height="15" fill="rgb(226,26,5)" fg:x="9628" fg:w="3284"/><text x="1.6236%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,284 samples, 0.47%)</title><rect x="1.3736%" y="693" width="0.4685%" height="15" fill="rgb(249,33,26)" fg:x="9628" fg:w="3284"/><text x="1.6236%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,830 samples, 0.26%)</title><rect x="1.5810%" y="677" width="0.2611%" height="15" fill="rgb(235,183,28)" fg:x="11082" fg:w="1830"/><text x="1.8310%" y="687.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1,556 samples, 0.22%)</title><rect x="1.8421%" y="757" width="0.2220%" height="15" fill="rgb(221,5,38)" fg:x="12912" fg:w="1556"/><text x="2.0921%" y="767.50"></text></g><g><title>[one-brc] (8,204 samples, 1.17%)</title><rect x="1.1389%" y="773" width="1.1704%" height="15" fill="rgb(247,18,42)" fg:x="7983" fg:w="8204"/><text x="1.3889%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,719 samples, 0.25%)</title><rect x="2.0641%" y="757" width="0.2452%" height="15" fill="rgb(241,131,45)" fg:x="14468" fg:w="1719"/><text x="2.3141%" y="767.50"></text></g><g><title>__GI___libc_free (867 samples, 0.12%)</title><rect x="2.3093%" y="773" width="0.1237%" height="15" fill="rgb(249,31,29)" fg:x="16187" fg:w="867"/><text x="2.5593%" y="783.50"></text></g><g><title>__GI___libc_malloc (212 samples, 0.03%)</title><rect x="2.4330%" y="773" width="0.0302%" height="15" fill="rgb(225,111,53)" fg:x="17054" fg:w="212"/><text x="2.6830%" y="783.50"></text></g><g><title>__memcmp_evex_movbe (1,094 samples, 0.16%)</title><rect x="2.4633%" y="773" width="0.1561%" height="15" fill="rgb(238,160,17)" fg:x="17266" fg:w="1094"/><text x="2.7133%" y="783.50"></text></g><g><title>__memcpy_evex_unaligned_erms (587 samples, 0.08%)</title><rect x="2.6193%" y="773" width="0.0837%" height="15" fill="rgb(214,148,48)" fg:x="18360" fg:w="587"/><text x="2.8693%" y="783.50"></text></g><g><title>__memset_evex_unaligned_erms (120 samples, 0.02%)</title><rect x="2.7031%" y="773" width="0.0171%" height="15" fill="rgb(232,36,49)" fg:x="18947" fg:w="120"/><text x="2.9531%" y="783.50"></text></g><g><title>_int_free (1,141 samples, 0.16%)</title><rect x="2.7202%" y="773" width="0.1628%" height="15" fill="rgb(209,103,24)" fg:x="19067" fg:w="1141"/><text x="2.9702%" y="783.50"></text></g><g><title>alloc::fmt::format::format_inner (2,074 samples, 0.30%)</title><rect x="2.8830%" y="773" width="0.2959%" height="15" fill="rgb(229,88,8)" fg:x="20208" fg:w="2074"/><text x="3.1330%" y="783.50"></text></g><g><title>core::fmt::Write::write_fmt (970 samples, 0.14%)</title><rect x="3.0405%" y="757" width="0.1384%" height="15" fill="rgb(213,181,19)" fg:x="21312" fg:w="970"/><text x="3.2905%" y="767.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (970 samples, 0.14%)</title><rect x="3.0405%" y="741" width="0.1384%" height="15" fill="rgb(254,191,54)" fg:x="21312" fg:w="970"/><text x="3.2905%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,366 samples, 0.19%)</title><rect x="3.1789%" y="773" width="0.1949%" height="15" fill="rgb(241,83,37)" fg:x="22282" fg:w="1366"/><text x="3.4289%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,220 samples, 0.17%)</title><rect x="3.1997%" y="757" width="0.1741%" height="15" fill="rgb(233,36,39)" fg:x="22428" fg:w="1220"/><text x="3.4497%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (322 samples, 0.05%)</title><rect x="3.3278%" y="741" width="0.0459%" height="15" fill="rgb(226,3,54)" fg:x="23326" fg:w="322"/><text x="3.5778%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (322 samples, 0.05%)</title><rect x="3.3278%" y="725" width="0.0459%" height="15" fill="rgb(245,192,40)" fg:x="23326" fg:w="322"/><text x="3.5778%" y="735.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (7,348 samples, 1.05%)</title><rect x="3.3750%" y="773" width="1.0483%" height="15" fill="rgb(238,167,29)" fg:x="23657" fg:w="7348"/><text x="3.6250%" y="783.50"></text></g><g><title>core::num::flt2dec::to_exact_fixed_str (2,813 samples, 0.40%)</title><rect x="4.0220%" y="757" width="0.4013%" height="15" fill="rgb(232,182,51)" fg:x="28192" fg:w="2813"/><text x="4.2720%" y="767.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,052 samples, 0.29%)</title><rect x="4.1306%" y="741" width="0.2927%" height="15" fill="rgb(231,60,39)" fg:x="28953" fg:w="2052"/><text x="4.3806%" y="751.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (2,052 samples, 0.29%)</title><rect x="4.1306%" y="725" width="0.2927%" height="15" fill="rgb(208,69,12)" fg:x="28953" fg:w="2052"/><text x="4.3806%" y="735.50"></text></g><g><title>core::fmt::Formatter::new (862 samples, 0.12%)</title><rect x="4.7936%" y="757" width="0.1230%" height="15" fill="rgb(235,93,37)" fg:x="33600" fg:w="862"/><text x="5.0436%" y="767.50"></text></g><g><title>core::fmt::write (4,635 samples, 0.66%)</title><rect x="4.4233%" y="773" width="0.6613%" height="15" fill="rgb(213,116,39)" fg:x="31005" fg:w="4635"/><text x="4.6733%" y="783.50"></text></g><g><title>core::fmt::run (1,178 samples, 0.17%)</title><rect x="4.9165%" y="757" width="0.1681%" height="15" fill="rgb(222,207,29)" fg:x="34462" fg:w="1178"/><text x="5.1665%" y="767.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1,178 samples, 0.17%)</title><rect x="4.9165%" y="741" width="0.1681%" height="15" fill="rgb(206,96,30)" fg:x="34462" fg:w="1178"/><text x="5.1665%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,700 samples, 0.39%)</title><rect x="5.0846%" y="773" width="0.3852%" height="15" fill="rgb(218,138,4)" fg:x="35640" fg:w="2700"/><text x="5.3346%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,525 samples, 0.36%)</title><rect x="5.1096%" y="757" width="0.3602%" height="15" fill="rgb(250,191,14)" fg:x="35815" fg:w="2525"/><text x="5.3596%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,525 samples, 0.36%)</title><rect x="5.1096%" y="741" width="0.3602%" height="15" fill="rgb(239,60,40)" fg:x="35815" fg:w="2525"/><text x="5.3596%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,525 samples, 0.36%)</title><rect x="5.1096%" y="725" width="0.3602%" height="15" fill="rgb(206,27,48)" fg:x="35815" fg:w="2525"/><text x="5.3596%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,525 samples, 0.36%)</title><rect x="5.1096%" y="709" width="0.3602%" height="15" fill="rgb(225,35,8)" fg:x="35815" fg:w="2525"/><text x="5.3596%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,525 samples, 0.36%)</title><rect x="5.1096%" y="693" width="0.3602%" height="15" fill="rgb(250,213,24)" fg:x="35815" fg:w="2525"/><text x="5.3596%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,525 samples, 0.36%)</title><rect x="5.1096%" y="677" width="0.3602%" height="15" fill="rgb(247,123,22)" fg:x="35815" fg:w="2525"/><text x="5.3596%" y="687.50"></text></g><g><title>core::hash::Hasher::write_u8 (905 samples, 0.13%)</title><rect x="5.3407%" y="661" width="0.1291%" height="15" fill="rgb(231,138,38)" fg:x="37435" fg:w="905"/><text x="5.5907%" y="671.50"></text></g><g><title>core::num::bignum::Big32x40::mul_pow2 (1,627 samples, 0.23%)</title><rect x="5.4698%" y="773" width="0.2321%" height="15" fill="rgb(231,145,46)" fg:x="38340" fg:w="1627"/><text x="5.7198%" y="783.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (7,076 samples, 1.01%)</title><rect x="5.7019%" y="773" width="1.0095%" height="15" fill="rgb(251,118,11)" fg:x="39967" fg:w="7076"/><text x="5.9519%" y="783.50"></text></g><g><title>core::num::dec2flt::dec2flt (7,076 samples, 1.01%)</title><rect x="5.7019%" y="757" width="1.0095%" height="15" fill="rgb(217,147,25)" fg:x="39967" fg:w="7076"/><text x="5.9519%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (2,007 samples, 0.29%)</title><rect x="6.7114%" y="773" width="0.2863%" height="15" fill="rgb(247,81,37)" fg:x="47043" fg:w="2007"/><text x="6.9614%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (2,007 samples, 0.29%)</title><rect x="6.7114%" y="757" width="0.2863%" height="15" fill="rgb(209,12,38)" fg:x="47043" fg:w="2007"/><text x="6.9614%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (2,007 samples, 0.29%)</title><rect x="6.7114%" y="741" width="0.2863%" height="15" fill="rgb(227,1,9)" fg:x="47043" fg:w="2007"/><text x="6.9614%" y="751.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::mul_pow10 (543 samples, 0.08%)</title><rect x="7.0039%" y="773" width="0.0775%" height="15" fill="rgb(248,47,43)" fg:x="49093" fg:w="543"/><text x="7.2539%" y="783.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2,935 samples, 0.42%)</title><rect x="7.0856%" y="773" width="0.4187%" height="15" fill="rgb(221,10,30)" fg:x="49666" fg:w="2935"/><text x="7.3356%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (769 samples, 0.11%)</title><rect x="7.7032%" y="757" width="0.1097%" height="15" fill="rgb(210,229,1)" fg:x="53995" fg:w="769"/><text x="7.9532%" y="767.50"></text></g><g><title>[anon] (55,887 samples, 7.97%)</title><rect x="0.0000%" y="789" width="7.9732%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="55887"/><text x="0.2500%" y="799.50">[anon]</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3,286 samples, 0.47%)</title><rect x="7.5044%" y="773" width="0.4688%" height="15" fill="rgb(234,67,33)" fg:x="52601" fg:w="3286"/><text x="7.7544%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,123 samples, 0.16%)</title><rect x="7.8129%" y="757" width="0.1602%" height="15" fill="rgb(247,98,35)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,123 samples, 0.16%)</title><rect x="7.8129%" y="741" width="0.1602%" height="15" fill="rgb(247,138,52)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,123 samples, 0.16%)</title><rect x="7.8129%" y="725" width="0.1602%" height="15" fill="rgb(213,79,30)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="735.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1,123 samples, 0.16%)</title><rect x="7.8129%" y="709" width="0.1602%" height="15" fill="rgb(246,177,23)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,123 samples, 0.16%)</title><rect x="7.8129%" y="693" width="0.1602%" height="15" fill="rgb(230,62,27)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="703.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,123 samples, 0.16%)</title><rect x="7.8129%" y="677" width="0.1602%" height="15" fill="rgb(216,154,8)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,123 samples, 0.16%)</title><rect x="7.8129%" y="661" width="0.1602%" height="15" fill="rgb(244,35,45)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,123 samples, 0.16%)</title><rect x="7.8129%" y="645" width="0.1602%" height="15" fill="rgb(251,115,12)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,123 samples, 0.16%)</title><rect x="7.8129%" y="629" width="0.1602%" height="15" fill="rgb(240,54,50)" fg:x="54764" fg:w="1123"/><text x="8.0629%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,752 samples, 0.25%)</title><rect x="7.9761%" y="757" width="0.2500%" height="15" fill="rgb(233,84,52)" fg:x="55908" fg:w="1752"/><text x="8.2261%" y="767.50"></text></g><g><title>alloc::string::String::push_str (882 samples, 0.13%)</title><rect x="8.1003%" y="741" width="0.1258%" height="15" fill="rgb(207,117,47)" fg:x="56778" fg:w="882"/><text x="8.3503%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (882 samples, 0.13%)</title><rect x="8.1003%" y="725" width="0.1258%" height="15" fill="rgb(249,43,39)" fg:x="56778" fg:w="882"/><text x="8.3503%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (882 samples, 0.13%)</title><rect x="8.1003%" y="709" width="0.1258%" height="15" fill="rgb(209,38,44)" fg:x="56778" fg:w="882"/><text x="8.3503%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (882 samples, 0.13%)</title><rect x="8.1003%" y="693" width="0.1258%" height="15" fill="rgb(236,212,23)" fg:x="56778" fg:w="882"/><text x="8.3503%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (840 samples, 0.12%)</title><rect x="8.1063%" y="677" width="0.1198%" height="15" fill="rgb(242,79,21)" fg:x="56820" fg:w="840"/><text x="8.3563%" y="687.50"></text></g><g><title>__memcpy_evex_unaligned_erms (662 samples, 0.09%)</title><rect x="8.2261%" y="757" width="0.0944%" height="15" fill="rgb(211,96,35)" fg:x="57660" fg:w="662"/><text x="8.4761%" y="767.50"></text></g><g><title>[one-brc] (2,456 samples, 0.35%)</title><rect x="7.9761%" y="773" width="0.3504%" height="15" fill="rgb(253,215,40)" fg:x="55908" fg:w="2456"/><text x="8.2261%" y="783.50"></text></g><g><title>[one-brc] (2,478 samples, 0.35%)</title><rect x="7.9732%" y="789" width="0.3535%" height="15" fill="rgb(211,81,21)" fg:x="55887" fg:w="2478"/><text x="8.2232%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8,161 samples, 1.16%)</title><rect x="8.3352%" y="773" width="1.1643%" height="15" fill="rgb(208,190,38)" fg:x="58425" fg:w="8161"/><text x="8.5852%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,150 samples, 0.31%)</title><rect x="9.4995%" y="773" width="0.3067%" height="15" fill="rgb(235,213,38)" fg:x="66586" fg:w="2150"/><text x="9.7495%" y="783.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,999 samples, 0.71%)</title><rect x="9.8063%" y="773" width="0.7132%" height="15" fill="rgb(237,122,38)" fg:x="68736" fg:w="4999"/><text x="10.0563%" y="783.50"></text></g><g><title>[unknown] (758 samples, 0.11%)</title><rect x="10.5222%" y="773" width="0.1081%" height="15" fill="rgb(244,218,35)" fg:x="73754" fg:w="758"/><text x="10.7722%" y="783.50"></text></g><g><title>[unknown] (758 samples, 0.11%)</title><rect x="10.5222%" y="757" width="0.1081%" height="15" fill="rgb(240,68,47)" fg:x="73754" fg:w="758"/><text x="10.7722%" y="767.50"></text></g><g><title>[unknown] (758 samples, 0.11%)</title><rect x="10.5222%" y="741" width="0.1081%" height="15" fill="rgb(210,16,53)" fg:x="73754" fg:w="758"/><text x="10.7722%" y="751.50"></text></g><g><title>[unknown] (756 samples, 0.11%)</title><rect x="10.5224%" y="725" width="0.1079%" height="15" fill="rgb(235,124,12)" fg:x="73756" fg:w="756"/><text x="10.7724%" y="735.50"></text></g><g><title>[unknown] (754 samples, 0.11%)</title><rect x="10.5227%" y="709" width="0.1076%" height="15" fill="rgb(224,169,11)" fg:x="73758" fg:w="754"/><text x="10.7727%" y="719.50"></text></g><g><title>[unknown] (752 samples, 0.11%)</title><rect x="10.5230%" y="693" width="0.1073%" height="15" fill="rgb(250,166,2)" fg:x="73760" fg:w="752"/><text x="10.7730%" y="703.50"></text></g><g><title>[unknown] (752 samples, 0.11%)</title><rect x="10.5230%" y="677" width="0.1073%" height="15" fill="rgb(242,216,29)" fg:x="73760" fg:w="752"/><text x="10.7730%" y="687.50"></text></g><g><title>[unknown] (751 samples, 0.11%)</title><rect x="10.5232%" y="661" width="0.1071%" height="15" fill="rgb(230,116,27)" fg:x="73761" fg:w="751"/><text x="10.7732%" y="671.50"></text></g><g><title>[unknown] (675 samples, 0.10%)</title><rect x="10.5340%" y="645" width="0.0963%" height="15" fill="rgb(228,99,48)" fg:x="73837" fg:w="675"/><text x="10.7840%" y="655.50"></text></g><g><title>[unknown] (674 samples, 0.10%)</title><rect x="10.5341%" y="629" width="0.0962%" height="15" fill="rgb(253,11,6)" fg:x="73838" fg:w="674"/><text x="10.7841%" y="639.50"></text></g><g><title>[unknown] (674 samples, 0.10%)</title><rect x="10.5341%" y="613" width="0.0962%" height="15" fill="rgb(247,143,39)" fg:x="73838" fg:w="674"/><text x="10.7841%" y="623.50"></text></g><g><title>[unknown] (673 samples, 0.10%)</title><rect x="10.5343%" y="597" width="0.0960%" height="15" fill="rgb(236,97,10)" fg:x="73839" fg:w="673"/><text x="10.7843%" y="607.50"></text></g><g><title>[unknown] (672 samples, 0.10%)</title><rect x="10.5344%" y="581" width="0.0959%" height="15" fill="rgb(233,208,19)" fg:x="73840" fg:w="672"/><text x="10.7844%" y="591.50"></text></g><g><title>[unknown] (569 samples, 0.08%)</title><rect x="10.5491%" y="565" width="0.0812%" height="15" fill="rgb(216,164,2)" fg:x="73943" fg:w="569"/><text x="10.7991%" y="575.50"></text></g><g><title>[unknown] (516 samples, 0.07%)</title><rect x="10.5567%" y="549" width="0.0736%" height="15" fill="rgb(220,129,5)" fg:x="73996" fg:w="516"/><text x="10.8067%" y="559.50"></text></g><g><title>[unknown] (495 samples, 0.07%)</title><rect x="10.5597%" y="533" width="0.0706%" height="15" fill="rgb(242,17,10)" fg:x="74017" fg:w="495"/><text x="10.8097%" y="543.50"></text></g><g><title>[unknown] (463 samples, 0.07%)</title><rect x="10.5642%" y="517" width="0.0661%" height="15" fill="rgb(242,107,0)" fg:x="74049" fg:w="463"/><text x="10.8142%" y="527.50"></text></g><g><title>[unknown] (361 samples, 0.05%)</title><rect x="10.5788%" y="501" width="0.0515%" height="15" fill="rgb(251,28,31)" fg:x="74151" fg:w="361"/><text x="10.8288%" y="511.50"></text></g><g><title>[unknown] (242 samples, 0.03%)</title><rect x="10.5958%" y="485" width="0.0345%" height="15" fill="rgb(233,223,10)" fg:x="74270" fg:w="242"/><text x="10.8458%" y="495.50"></text></g><g><title>[unknown] (158 samples, 0.02%)</title><rect x="10.6078%" y="469" width="0.0225%" height="15" fill="rgb(215,21,27)" fg:x="74354" fg:w="158"/><text x="10.8578%" y="479.50"></text></g><g><title>[unknown] (109 samples, 0.02%)</title><rect x="10.6147%" y="453" width="0.0156%" height="15" fill="rgb(232,23,21)" fg:x="74403" fg:w="109"/><text x="10.8647%" y="463.50"></text></g><g><title>__GI___libc_free (1,338 samples, 0.19%)</title><rect x="10.6303%" y="773" width="0.1909%" height="15" fill="rgb(244,5,23)" fg:x="74512" fg:w="1338"/><text x="10.8803%" y="783.50"></text></g><g><title>__GI___libc_malloc (2,075 samples, 0.30%)</title><rect x="10.8212%" y="773" width="0.2960%" height="15" fill="rgb(226,81,46)" fg:x="75850" fg:w="2075"/><text x="11.0712%" y="783.50"></text></g><g><title>__memcmp_evex_movbe (475 samples, 0.07%)</title><rect x="11.1172%" y="773" width="0.0678%" height="15" fill="rgb(247,70,30)" fg:x="77925" fg:w="475"/><text x="11.3672%" y="783.50"></text></g><g><title>__roundf (610 samples, 0.09%)</title><rect x="11.1850%" y="773" width="0.0870%" height="15" fill="rgb(212,68,19)" fg:x="78400" fg:w="610"/><text x="11.4350%" y="783.50"></text></g><g><title>_int_free (2,550 samples, 0.36%)</title><rect x="11.2721%" y="773" width="0.3638%" height="15" fill="rgb(240,187,13)" fg:x="79011" fg:w="2550"/><text x="11.5221%" y="783.50"></text></g><g><title>alloc::fmt::format::format_inner (2,280 samples, 0.33%)</title><rect x="11.6359%" y="773" width="0.3253%" height="15" fill="rgb(223,113,26)" fg:x="81561" fg:w="2280"/><text x="11.8859%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (599 samples, 0.09%)</title><rect x="11.9612%" y="773" width="0.0855%" height="15" fill="rgb(206,192,2)" fg:x="83841" fg:w="599"/><text x="12.2112%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (599 samples, 0.09%)</title><rect x="11.9612%" y="757" width="0.0855%" height="15" fill="rgb(241,108,4)" fg:x="83841" fg:w="599"/><text x="12.2112%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (599 samples, 0.09%)</title><rect x="11.9612%" y="741" width="0.0855%" height="15" fill="rgb(247,173,49)" fg:x="83841" fg:w="599"/><text x="12.2112%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (599 samples, 0.09%)</title><rect x="11.9612%" y="725" width="0.0855%" height="15" fill="rgb(224,114,35)" fg:x="83841" fg:w="599"/><text x="12.2112%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,705 samples, 0.39%)</title><rect x="12.0467%" y="773" width="0.3859%" height="15" fill="rgb(245,159,27)" fg:x="84440" fg:w="2705"/><text x="12.2967%" y="783.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (4,006 samples, 0.57%)</title><rect x="12.4326%" y="773" width="0.5715%" height="15" fill="rgb(245,172,44)" fg:x="87145" fg:w="4006"/><text x="12.6826%" y="783.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (7,918 samples, 1.13%)</title><rect x="13.0041%" y="773" width="1.1296%" height="15" fill="rgb(236,23,11)" fg:x="91151" fg:w="7918"/><text x="13.2541%" y="783.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts::write_bytes (3,831 samples, 0.55%)</title><rect x="13.5872%" y="757" width="0.5466%" height="15" fill="rgb(205,117,38)" fg:x="95238" fg:w="3831"/><text x="13.8372%" y="767.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (748 samples, 0.11%)</title><rect x="14.1337%" y="773" width="0.1067%" height="15" fill="rgb(237,72,25)" fg:x="99069" fg:w="748"/><text x="14.3837%" y="783.50"></text></g><g><title>core::fmt::write (751 samples, 0.11%)</title><rect x="14.2404%" y="773" width="0.1071%" height="15" fill="rgb(244,70,9)" fg:x="99817" fg:w="751"/><text x="14.4904%" y="783.50"></text></g><g><title>core::fmt::Formatter::new (751 samples, 0.11%)</title><rect x="14.2404%" y="757" width="0.1071%" height="15" fill="rgb(217,125,39)" fg:x="99817" fg:w="751"/><text x="14.4904%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,642 samples, 0.23%)</title><rect x="14.3476%" y="773" width="0.2343%" height="15" fill="rgb(235,36,10)" fg:x="100568" fg:w="1642"/><text x="14.5976%" y="783.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (2,980 samples, 0.43%)</title><rect x="14.7395%" y="757" width="0.4251%" height="15" fill="rgb(251,123,47)" fg:x="103315" fg:w="2980"/><text x="14.9895%" y="767.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (4,109 samples, 0.59%)</title><rect x="14.5818%" y="773" width="0.5862%" height="15" fill="rgb(221,13,13)" fg:x="102210" fg:w="4109"/><text x="14.8318%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (6,408 samples, 0.91%)</title><rect x="15.1681%" y="773" width="0.9142%" height="15" fill="rgb(238,131,9)" fg:x="106319" fg:w="6408"/><text x="15.4181%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (1,255 samples, 0.18%)</title><rect x="15.9032%" y="757" width="0.1790%" height="15" fill="rgb(211,50,8)" fg:x="111472" fg:w="1255"/><text x="16.1532%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (1,255 samples, 0.18%)</title><rect x="15.9032%" y="741" width="0.1790%" height="15" fill="rgb(245,182,24)" fg:x="111472" fg:w="1255"/><text x="16.1532%" y="751.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (1,259 samples, 0.18%)</title><rect x="16.0823%" y="773" width="0.1796%" height="15" fill="rgb(242,14,37)" fg:x="112727" fg:w="1259"/><text x="16.3323%" y="783.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (3,452 samples, 0.49%)</title><rect x="16.2619%" y="773" width="0.4925%" height="15" fill="rgb(246,228,12)" fg:x="113986" fg:w="3452"/><text x="16.5119%" y="783.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::clone::Clone&gt;::clone (902 samples, 0.13%)</title><rect x="16.6257%" y="757" width="0.1287%" height="15" fill="rgb(213,55,15)" fg:x="116536" fg:w="902"/><text x="16.8757%" y="767.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (6,230 samples, 0.89%)</title><rect x="16.7544%" y="773" width="0.8888%" height="15" fill="rgb(209,9,3)" fg:x="117438" fg:w="6230"/><text x="17.0044%" y="783.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (3,108 samples, 0.44%)</title><rect x="17.6432%" y="773" width="0.4434%" height="15" fill="rgb(230,59,30)" fg:x="123668" fg:w="3108"/><text x="17.8932%" y="783.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,577 samples, 0.37%)</title><rect x="18.0866%" y="773" width="0.3676%" height="15" fill="rgb(209,121,21)" fg:x="126776" fg:w="2577"/><text x="18.3366%" y="783.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,024 samples, 0.15%)</title><rect x="18.4542%" y="725" width="0.1461%" height="15" fill="rgb(220,109,13)" fg:x="129353" fg:w="1024"/><text x="18.7042%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,024 samples, 0.15%)</title><rect x="18.4542%" y="709" width="0.1461%" height="15" fill="rgb(232,18,1)" fg:x="129353" fg:w="1024"/><text x="18.7042%" y="719.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,024 samples, 0.15%)</title><rect x="18.4542%" y="693" width="0.1461%" height="15" fill="rgb(215,41,42)" fg:x="129353" fg:w="1024"/><text x="18.7042%" y="703.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,024 samples, 0.15%)</title><rect x="18.4542%" y="677" width="0.1461%" height="15" fill="rgb(224,123,36)" fg:x="129353" fg:w="1024"/><text x="18.7042%" y="687.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,304 samples, 0.19%)</title><rect x="18.6003%" y="693" width="0.1860%" height="15" fill="rgb(240,125,3)" fg:x="130377" fg:w="1304"/><text x="18.8503%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,530 samples, 0.22%)</title><rect x="18.7863%" y="693" width="0.2183%" height="15" fill="rgb(205,98,50)" fg:x="131681" fg:w="1530"/><text x="19.0363%" y="703.50"></text></g><g><title>alloc::fmt::format (1,067 samples, 0.15%)</title><rect x="19.0046%" y="677" width="0.1522%" height="15" fill="rgb(205,185,37)" fg:x="133211" fg:w="1067"/><text x="19.2546%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1,067 samples, 0.15%)</title><rect x="19.0046%" y="661" width="0.1522%" height="15" fill="rgb(238,207,15)" fg:x="133211" fg:w="1067"/><text x="19.2546%" y="671.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (1,067 samples, 0.15%)</title><rect x="19.0046%" y="645" width="0.1522%" height="15" fill="rgb(213,199,42)" fg:x="133211" fg:w="1067"/><text x="19.2546%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,983 samples, 0.28%)</title><rect x="19.1568%" y="677" width="0.2829%" height="15" fill="rgb(235,201,11)" fg:x="134278" fg:w="1983"/><text x="19.4068%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,983 samples, 0.28%)</title><rect x="19.1568%" y="661" width="0.2829%" height="15" fill="rgb(207,46,11)" fg:x="134278" fg:w="1983"/><text x="19.4068%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,983 samples, 0.28%)</title><rect x="19.1568%" y="645" width="0.2829%" height="15" fill="rgb(241,35,35)" fg:x="134278" fg:w="1983"/><text x="19.4068%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,983 samples, 0.28%)</title><rect x="19.1568%" y="629" width="0.2829%" height="15" fill="rgb(243,32,47)" fg:x="134278" fg:w="1983"/><text x="19.4068%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,983 samples, 0.28%)</title><rect x="19.1568%" y="613" width="0.2829%" height="15" fill="rgb(247,202,23)" fg:x="134278" fg:w="1983"/><text x="19.4068%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (1,983 samples, 0.28%)</title><rect x="19.1568%" y="597" width="0.2829%" height="15" fill="rgb(219,102,11)" fg:x="134278" fg:w="1983"/><text x="19.4068%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (741 samples, 0.11%)</title><rect x="19.4398%" y="677" width="0.1057%" height="15" fill="rgb(243,110,44)" fg:x="136261" fg:w="741"/><text x="19.6898%" y="687.50"></text></g><g><title>one_brc::round_towards_positive (5,048 samples, 0.72%)</title><rect x="19.0046%" y="693" width="0.7202%" height="15" fill="rgb(222,74,54)" fg:x="133211" fg:w="5048"/><text x="19.2546%" y="703.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::round (1,257 samples, 0.18%)</title><rect x="19.5455%" y="677" width="0.1793%" height="15" fill="rgb(216,99,12)" fg:x="137002" fg:w="1257"/><text x="19.7955%" y="687.50"></text></g><g><title>[unknown] (81,068 samples, 11.57%)</title><rect x="8.3267%" y="789" width="11.5656%" height="15" fill="rgb(226,22,26)" fg:x="58365" fg:w="81068"/><text x="8.5767%" y="799.50">[unknown]</text></g><g><title>one_brc::process_lines (10,080 samples, 1.44%)</title><rect x="18.4542%" y="773" width="1.4381%" height="15" fill="rgb(217,163,10)" fg:x="129353" fg:w="10080"/><text x="18.7042%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10,080 samples, 1.44%)</title><rect x="18.4542%" y="757" width="1.4381%" height="15" fill="rgb(213,25,53)" fg:x="129353" fg:w="10080"/><text x="18.7042%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10,080 samples, 1.44%)</title><rect x="18.4542%" y="741" width="1.4381%" height="15" fill="rgb(252,105,26)" fg:x="129353" fg:w="10080"/><text x="18.7042%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9,056 samples, 1.29%)</title><rect x="18.6003%" y="725" width="1.2920%" height="15" fill="rgb(220,39,43)" fg:x="130377" fg:w="9056"/><text x="18.8503%" y="735.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (9,056 samples, 1.29%)</title><rect x="18.6003%" y="709" width="1.2920%" height="15" fill="rgb(229,68,48)" fg:x="130377" fg:w="9056"/><text x="18.8503%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,174 samples, 0.17%)</title><rect x="19.7248%" y="693" width="0.1675%" height="15" fill="rgb(252,8,32)" fg:x="138259" fg:w="1174"/><text x="19.9748%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (795 samples, 0.11%)</title><rect x="21.1954%" y="469" width="0.1134%" height="15" fill="rgb(223,20,43)" fg:x="148567" fg:w="795"/><text x="21.4454%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (795 samples, 0.11%)</title><rect x="21.1954%" y="453" width="0.1134%" height="15" fill="rgb(229,81,49)" fg:x="148567" fg:w="795"/><text x="21.4454%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (795 samples, 0.11%)</title><rect x="21.1954%" y="437" width="0.1134%" height="15" fill="rgb(236,28,36)" fg:x="148567" fg:w="795"/><text x="21.4454%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,976 samples, 0.85%)</title><rect x="21.3088%" y="469" width="0.8526%" height="15" fill="rgb(249,185,26)" fg:x="149362" fg:w="5976"/><text x="21.5588%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5,976 samples, 0.85%)</title><rect x="21.3088%" y="453" width="0.8526%" height="15" fill="rgb(249,174,33)" fg:x="149362" fg:w="5976"/><text x="21.5588%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5,976 samples, 0.85%)</title><rect x="21.3088%" y="437" width="0.8526%" height="15" fill="rgb(233,201,37)" fg:x="149362" fg:w="5976"/><text x="21.5588%" y="447.50"></text></g><g><title>__memcmp_evex_movbe (5,711 samples, 0.81%)</title><rect x="21.3466%" y="421" width="0.8148%" height="15" fill="rgb(221,78,26)" fg:x="149627" fg:w="5711"/><text x="21.5966%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,616 samples, 0.23%)</title><rect x="22.1614%" y="469" width="0.2305%" height="15" fill="rgb(250,127,30)" fg:x="155338" fg:w="1616"/><text x="22.4114%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,616 samples, 0.23%)</title><rect x="22.1614%" y="453" width="0.2305%" height="15" fill="rgb(230,49,44)" fg:x="155338" fg:w="1616"/><text x="22.4114%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (874 samples, 0.12%)</title><rect x="23.3501%" y="437" width="0.1247%" height="15" fill="rgb(229,67,23)" fg:x="163670" fg:w="874"/><text x="23.6001%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (768 samples, 0.11%)</title><rect x="23.4748%" y="437" width="0.1096%" height="15" fill="rgb(249,83,47)" fg:x="164544" fg:w="768"/><text x="23.7248%" y="447.50"></text></g><g><title>core::ptr::align_offset (768 samples, 0.11%)</title><rect x="23.4748%" y="421" width="0.1096%" height="15" fill="rgb(215,43,3)" fg:x="164544" fg:w="768"/><text x="23.7248%" y="431.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,758 samples, 0.25%)</title><rect x="23.5843%" y="437" width="0.2508%" height="15" fill="rgb(238,154,13)" fg:x="165312" fg:w="1758"/><text x="23.8343%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (197 samples, 0.03%)</title><rect x="23.8070%" y="421" width="0.0281%" height="15" fill="rgb(219,56,2)" fg:x="166873" fg:w="197"/><text x="24.0570%" y="431.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (40,663 samples, 5.80%)</title><rect x="20.1932%" y="485" width="5.8012%" height="15" fill="rgb(233,0,4)" fg:x="141542" fg:w="40663"/><text x="20.4432%" y="495.50">&lt;core::..</text></g><g><title>core::slice::memchr::memchr (25,251 samples, 3.60%)</title><rect x="22.3919%" y="469" width="3.6024%" height="15" fill="rgb(235,30,7)" fg:x="156954" fg:w="25251"/><text x="22.6419%" y="479.50">core..</text></g><g><title>core::slice::memchr::memchr_aligned (24,339 samples, 3.47%)</title><rect x="22.5220%" y="453" width="3.4723%" height="15" fill="rgb(250,79,13)" fg:x="157866" fg:w="24339"/><text x="22.7720%" y="463.50">cor..</text></g><g><title>core::slice::memchr::memchr_naive (15,133 samples, 2.16%)</title><rect x="23.8354%" y="437" width="2.1590%" height="15" fill="rgb(211,146,34)" fg:x="167072" fg:w="15133"/><text x="24.0854%" y="447.50">c..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (43,611 samples, 6.22%)</title><rect x="19.8990%" y="517" width="6.2218%" height="15" fill="rgb(228,22,38)" fg:x="139480" fg:w="43611"/><text x="20.1490%" y="527.50">&lt;core::s..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (43,611 samples, 6.22%)</title><rect x="19.8990%" y="501" width="6.2218%" height="15" fill="rgb(235,168,5)" fg:x="139480" fg:w="43611"/><text x="20.1490%" y="511.50">core::st..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (885 samples, 0.13%)</title><rect x="25.9945%" y="485" width="0.1263%" height="15" fill="rgb(221,155,16)" fg:x="182206" fg:w="885"/><text x="26.2445%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (885 samples, 0.13%)</title><rect x="25.9945%" y="469" width="0.1263%" height="15" fill="rgb(215,215,53)" fg:x="182206" fg:w="885"/><text x="26.2445%" y="479.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (46,550 samples, 6.64%)</title><rect x="19.8990%" y="549" width="6.6411%" height="15" fill="rgb(223,4,10)" fg:x="139480" fg:w="46550"/><text x="20.1490%" y="559.50">&lt;core::st..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46,550 samples, 6.64%)</title><rect x="19.8990%" y="533" width="6.6411%" height="15" fill="rgb(234,103,6)" fg:x="139480" fg:w="46550"/><text x="20.1490%" y="543.50">&lt;core::it..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,939 samples, 0.42%)</title><rect x="26.1208%" y="517" width="0.4193%" height="15" fill="rgb(227,97,0)" fg:x="183091" fg:w="2939"/><text x="26.3708%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,939 samples, 0.42%)</title><rect x="26.1208%" y="501" width="0.4193%" height="15" fill="rgb(234,150,53)" fg:x="183091" fg:w="2939"/><text x="26.3708%" y="511.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (2,939 samples, 0.42%)</title><rect x="26.1208%" y="485" width="0.4193%" height="15" fill="rgb(228,201,54)" fg:x="183091" fg:w="2939"/><text x="26.3708%" y="495.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (2,939 samples, 0.42%)</title><rect x="26.1208%" y="469" width="0.4193%" height="15" fill="rgb(222,22,37)" fg:x="183091" fg:w="2939"/><text x="26.3708%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1,294 samples, 0.18%)</title><rect x="26.3555%" y="453" width="0.1846%" height="15" fill="rgb(237,53,32)" fg:x="184736" fg:w="1294"/><text x="26.6055%" y="463.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (1,294 samples, 0.18%)</title><rect x="26.3555%" y="437" width="0.1846%" height="15" fill="rgb(233,25,53)" fg:x="184736" fg:w="1294"/><text x="26.6055%" y="447.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1,294 samples, 0.18%)</title><rect x="26.3555%" y="421" width="0.1846%" height="15" fill="rgb(210,40,34)" fg:x="184736" fg:w="1294"/><text x="26.6055%" y="431.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,294 samples, 0.18%)</title><rect x="26.3555%" y="405" width="0.1846%" height="15" fill="rgb(241,220,44)" fg:x="184736" fg:w="1294"/><text x="26.6055%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,294 samples, 0.18%)</title><rect x="26.3555%" y="389" width="0.1846%" height="15" fill="rgb(235,28,35)" fg:x="184736" fg:w="1294"/><text x="26.6055%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (102 samples, 0.01%)</title><rect x="26.5255%" y="373" width="0.0146%" height="15" fill="rgb(210,56,17)" fg:x="185928" fg:w="102"/><text x="26.7755%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (102 samples, 0.01%)</title><rect x="26.5255%" y="357" width="0.0146%" height="15" fill="rgb(224,130,29)" fg:x="185928" fg:w="102"/><text x="26.7755%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (102 samples, 0.01%)</title><rect x="26.5255%" y="341" width="0.0146%" height="15" fill="rgb(235,212,8)" fg:x="185928" fg:w="102"/><text x="26.7755%" y="351.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (1,823 samples, 0.26%)</title><rect x="26.9882%" y="517" width="0.2601%" height="15" fill="rgb(223,33,50)" fg:x="189171" fg:w="1823"/><text x="27.2382%" y="527.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (1,309 samples, 0.19%)</title><rect x="27.2483%" y="517" width="0.1867%" height="15" fill="rgb(219,149,13)" fg:x="190994" fg:w="1309"/><text x="27.4983%" y="527.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (1,119 samples, 0.16%)</title><rect x="27.5322%" y="485" width="0.1596%" height="15" fill="rgb(250,156,29)" fg:x="192984" fg:w="1119"/><text x="27.7822%" y="495.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (1,041 samples, 0.15%)</title><rect x="28.2464%" y="469" width="0.1485%" height="15" fill="rgb(216,193,19)" fg:x="197990" fg:w="1041"/><text x="28.4964%" y="479.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (84 samples, 0.01%)</title><rect x="28.5925%" y="453" width="0.0120%" height="15" fill="rgb(216,135,14)" fg:x="200416" fg:w="84"/><text x="28.8425%" y="463.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (5,044 samples, 0.72%)</title><rect x="28.6062%" y="453" width="0.7196%" height="15" fill="rgb(241,47,5)" fg:x="200512" fg:w="5044"/><text x="28.8562%" y="463.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (7,289 samples, 1.04%)</title><rect x="28.3949%" y="469" width="1.0399%" height="15" fill="rgb(233,42,35)" fg:x="199031" fg:w="7289"/><text x="28.6449%" y="479.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (761 samples, 0.11%)</title><rect x="29.3262%" y="453" width="0.1086%" height="15" fill="rgb(231,13,6)" fg:x="205559" fg:w="761"/><text x="29.5762%" y="463.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (3,237 samples, 0.46%)</title><rect x="29.7346%" y="453" width="0.4618%" height="15" fill="rgb(207,181,40)" fg:x="208422" fg:w="3237"/><text x="29.9846%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (903 samples, 0.13%)</title><rect x="31.8736%" y="405" width="0.1288%" height="15" fill="rgb(254,173,49)" fg:x="223415" fg:w="903"/><text x="32.1236%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (763 samples, 0.11%)</title><rect x="32.0083%" y="389" width="0.1089%" height="15" fill="rgb(221,1,38)" fg:x="224359" fg:w="763"/><text x="32.2583%" y="399.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (8,921 samples, 1.27%)</title><rect x="30.9429%" y="421" width="1.2727%" height="15" fill="rgb(206,124,46)" fg:x="216891" fg:w="8921"/><text x="31.1929%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (1,494 samples, 0.21%)</title><rect x="32.0025%" y="405" width="0.2131%" height="15" fill="rgb(249,21,11)" fg:x="224318" fg:w="1494"/><text x="32.2525%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (690 samples, 0.10%)</title><rect x="32.1172%" y="389" width="0.0984%" height="15" fill="rgb(222,201,40)" fg:x="225122" fg:w="690"/><text x="32.3672%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (11,352 samples, 1.62%)</title><rect x="30.6380%" y="437" width="1.6195%" height="15" fill="rgb(235,61,29)" fg:x="214754" fg:w="11352"/><text x="30.8880%" y="447.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (289 samples, 0.04%)</title><rect x="32.2163%" y="421" width="0.0412%" height="15" fill="rgb(219,207,3)" fg:x="225817" fg:w="289"/><text x="32.4663%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (19,850 samples, 2.83%)</title><rect x="29.4348%" y="469" width="2.8319%" height="15" fill="rgb(222,56,46)" fg:x="206320" fg:w="19850"/><text x="29.6848%" y="479.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (14,511 samples, 2.07%)</title><rect x="30.1965%" y="453" width="2.0702%" height="15" fill="rgb(239,76,54)" fg:x="211659" fg:w="14511"/><text x="30.4465%" y="463.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::parse (33,863 samples, 4.83%)</title><rect x="27.4357%" y="517" width="4.8311%" height="15" fill="rgb(231,124,27)" fg:x="192308" fg:w="33863"/><text x="27.6857%" y="527.50">core::..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (33,199 samples, 4.74%)</title><rect x="27.5305%" y="501" width="4.7364%" height="15" fill="rgb(249,195,6)" fg:x="192972" fg:w="33199"/><text x="27.7805%" y="511.50">core::..</text></g><g><title>core::num::dec2flt::dec2flt (32,068 samples, 4.57%)</title><rect x="27.6918%" y="485" width="4.5750%" height="15" fill="rgb(237,174,47)" fg:x="194103" fg:w="32068"/><text x="27.9418%" y="495.50">core:..</text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,465 samples, 0.21%)</title><rect x="32.3762%" y="501" width="0.2090%" height="15" fill="rgb(206,201,31)" fg:x="226938" fg:w="1465"/><text x="32.6262%" y="511.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (280 samples, 0.04%)</title><rect x="32.5852%" y="501" width="0.0399%" height="15" fill="rgb(231,57,52)" fg:x="228403" fg:w="280"/><text x="32.8352%" y="511.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (796 samples, 0.11%)</title><rect x="33.5070%" y="485" width="0.1136%" height="15" fill="rgb(248,177,22)" fg:x="234864" fg:w="796"/><text x="33.7570%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (796 samples, 0.11%)</title><rect x="33.5070%" y="469" width="0.1136%" height="15" fill="rgb(215,211,37)" fg:x="234864" fg:w="796"/><text x="33.7570%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (796 samples, 0.11%)</title><rect x="33.5070%" y="453" width="0.1136%" height="15" fill="rgb(241,128,51)" fg:x="234864" fg:w="796"/><text x="33.7570%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,413 samples, 0.63%)</title><rect x="33.6206%" y="485" width="0.6296%" height="15" fill="rgb(227,165,31)" fg:x="235660" fg:w="4413"/><text x="33.8706%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4,413 samples, 0.63%)</title><rect x="33.6206%" y="469" width="0.6296%" height="15" fill="rgb(228,167,24)" fg:x="235660" fg:w="4413"/><text x="33.8706%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,413 samples, 0.63%)</title><rect x="33.6206%" y="453" width="0.6296%" height="15" fill="rgb(228,143,12)" fg:x="235660" fg:w="4413"/><text x="33.8706%" y="463.50"></text></g><g><title>__memcmp_evex_movbe (4,233 samples, 0.60%)</title><rect x="33.6462%" y="437" width="0.6039%" height="15" fill="rgb(249,149,8)" fg:x="235840" fg:w="4233"/><text x="33.8962%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,895 samples, 0.27%)</title><rect x="34.2501%" y="485" width="0.2704%" height="15" fill="rgb(243,35,44)" fg:x="240073" fg:w="1895"/><text x="34.5001%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,895 samples, 0.27%)</title><rect x="34.2501%" y="469" width="0.2704%" height="15" fill="rgb(246,89,9)" fg:x="240073" fg:w="1895"/><text x="34.5001%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (124 samples, 0.02%)</title><rect x="34.6796%" y="453" width="0.0177%" height="15" fill="rgb(233,213,13)" fg:x="243083" fg:w="124"/><text x="34.9296%" y="463.50"></text></g><g><title>core::ptr::align_offset (124 samples, 0.02%)</title><rect x="34.6796%" y="437" width="0.0177%" height="15" fill="rgb(233,141,41)" fg:x="243083" fg:w="124"/><text x="34.9296%" y="447.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (94 samples, 0.01%)</title><rect x="34.6973%" y="453" width="0.0134%" height="15" fill="rgb(239,167,4)" fg:x="243207" fg:w="94"/><text x="34.9473%" y="463.50"></text></g><g><title>core::slice::memchr::memchr_aligned (4,019 samples, 0.57%)</title><rect x="34.5489%" y="469" width="0.5734%" height="15" fill="rgb(209,217,16)" fg:x="242167" fg:w="4019"/><text x="34.7989%" y="479.50"></text></g><g><title>core::slice::memchr::memchr_naive (2,884 samples, 0.41%)</title><rect x="34.7108%" y="453" width="0.4114%" height="15" fill="rgb(219,88,35)" fg:x="243302" fg:w="2884"/><text x="34.9608%" y="463.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (26,339 samples, 3.76%)</title><rect x="32.6252%" y="501" width="3.7577%" height="15" fill="rgb(220,193,23)" fg:x="228683" fg:w="26339"/><text x="32.8752%" y="511.50">&lt;cor..</text></g><g><title>core::slice::memchr::memchr (13,054 samples, 1.86%)</title><rect x="34.5205%" y="485" width="1.8624%" height="15" fill="rgb(230,90,52)" fg:x="241968" fg:w="13054"/><text x="34.7705%" y="495.50">c..</text></g><g><title>core::slice::memchr::memchr_naive (8,836 samples, 1.26%)</title><rect x="35.1223%" y="469" width="1.2606%" height="15" fill="rgb(252,106,19)" fg:x="246186" fg:w="8836"/><text x="35.3723%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (28,905 samples, 4.12%)</title><rect x="32.2668%" y="517" width="4.1237%" height="15" fill="rgb(206,74,20)" fg:x="226171" fg:w="28905"/><text x="32.5168%" y="527.50">core..</text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (304 samples, 0.04%)</title><rect x="37.5504%" y="501" width="0.0434%" height="15" fill="rgb(230,138,44)" fg:x="263206" fg:w="304"/><text x="37.8004%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (304 samples, 0.04%)</title><rect x="37.5504%" y="485" width="0.0434%" height="15" fill="rgb(235,182,43)" fg:x="263206" fg:w="304"/><text x="37.8004%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (294 samples, 0.04%)</title><rect x="37.5519%" y="469" width="0.0419%" height="15" fill="rgb(242,16,51)" fg:x="263216" fg:w="294"/><text x="37.8019%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (294 samples, 0.04%)</title><rect x="37.5519%" y="453" width="0.0419%" height="15" fill="rgb(248,9,4)" fg:x="263216" fg:w="294"/><text x="37.8019%" y="463.50"></text></g><g><title>alloc::string::String::with_capacity (913 samples, 0.13%)</title><rect x="37.8780%" y="437" width="0.1303%" height="15" fill="rgb(210,31,22)" fg:x="265502" fg:w="913"/><text x="38.1280%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,549 samples, 0.36%)</title><rect x="38.3475%" y="373" width="0.3637%" height="15" fill="rgb(239,54,39)" fg:x="268793" fg:w="2549"/><text x="38.5975%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,110 samples, 0.16%)</title><rect x="38.5528%" y="357" width="0.1584%" height="15" fill="rgb(230,99,41)" fg:x="270232" fg:w="1110"/><text x="38.8028%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (1,110 samples, 0.16%)</title><rect x="38.5528%" y="341" width="0.1584%" height="15" fill="rgb(253,106,12)" fg:x="270232" fg:w="1110"/><text x="38.8028%" y="351.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (6,676 samples, 0.95%)</title><rect x="38.0082%" y="437" width="0.9524%" height="15" fill="rgb(213,46,41)" fg:x="266415" fg:w="6676"/><text x="38.2582%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (4,298 samples, 0.61%)</title><rect x="38.3475%" y="421" width="0.6132%" height="15" fill="rgb(215,133,35)" fg:x="268793" fg:w="4298"/><text x="38.5975%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (4,298 samples, 0.61%)</title><rect x="38.3475%" y="405" width="0.6132%" height="15" fill="rgb(213,28,5)" fg:x="268793" fg:w="4298"/><text x="38.5975%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,298 samples, 0.61%)</title><rect x="38.3475%" y="389" width="0.6132%" height="15" fill="rgb(215,77,49)" fg:x="268793" fg:w="4298"/><text x="38.5975%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1,749 samples, 0.25%)</title><rect x="38.7112%" y="373" width="0.2495%" height="15" fill="rgb(248,100,22)" fg:x="271342" fg:w="1749"/><text x="38.9612%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (572 samples, 0.08%)</title><rect x="39.9787%" y="357" width="0.0816%" height="15" fill="rgb(208,67,9)" fg:x="280227" fg:w="572"/><text x="40.2287%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,265 samples, 0.32%)</title><rect x="39.7374%" y="373" width="0.3231%" height="15" fill="rgb(219,133,21)" fg:x="278535" fg:w="2265"/><text x="39.9874%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,485 samples, 0.35%)</title><rect x="39.7374%" y="389" width="0.3545%" height="15" fill="rgb(246,46,29)" fg:x="278535" fg:w="2485"/><text x="39.9874%" y="399.50"></text></g><g><title>core::fmt::write (220 samples, 0.03%)</title><rect x="40.0605%" y="373" width="0.0314%" height="15" fill="rgb(246,185,52)" fg:x="280800" fg:w="220"/><text x="40.3105%" y="383.50"></text></g><g><title>core::fmt::Formatter::new (1,186 samples, 0.17%)</title><rect x="40.0946%" y="389" width="0.1692%" height="15" fill="rgb(252,136,11)" fg:x="281039" fg:w="1186"/><text x="40.3446%" y="399.50"></text></g><g><title>core::fmt::getcount (2,182 samples, 0.31%)</title><rect x="40.8955%" y="373" width="0.3113%" height="15" fill="rgb(219,138,53)" fg:x="286653" fg:w="2182"/><text x="41.1455%" y="383.50"></text></g><g><title>core::fmt::write (748 samples, 0.11%)</title><rect x="41.1001%" y="357" width="0.1067%" height="15" fill="rgb(211,51,23)" fg:x="288087" fg:w="748"/><text x="41.3501%" y="367.50"></text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f32&gt;::fmt (2,752 samples, 0.39%)</title><rect x="41.2075%" y="357" width="0.3926%" height="15" fill="rgb(247,221,28)" fg:x="288840" fg:w="2752"/><text x="41.4575%" y="367.50"></text></g><g><title>core::fmt::float::float_to_decimal_display (1,979 samples, 0.28%)</title><rect x="41.3178%" y="341" width="0.2823%" height="15" fill="rgb(251,222,45)" fg:x="289613" fg:w="1979"/><text x="41.5678%" y="351.50"></text></g><g><title>core::fmt::Formatter::sign_plus (502 samples, 0.07%)</title><rect x="41.5285%" y="325" width="0.0716%" height="15" fill="rgb(217,162,53)" fg:x="291090" fg:w="502"/><text x="41.7785%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (2,214 samples, 0.32%)</title><rect x="41.6150%" y="341" width="0.3159%" height="15" fill="rgb(229,93,14)" fg:x="291696" fg:w="2214"/><text x="41.8650%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (78 samples, 0.01%)</title><rect x="43.0994%" y="213" width="0.0111%" height="15" fill="rgb(209,67,49)" fg:x="302101" fg:w="78"/><text x="43.3494%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (93 samples, 0.01%)</title><rect x="43.1312%" y="181" width="0.0133%" height="15" fill="rgb(213,87,29)" fg:x="302324" fg:w="93"/><text x="43.3812%" y="191.50"></text></g><g><title>__GI___libc_malloc (985 samples, 0.14%)</title><rect x="43.1970%" y="165" width="0.1405%" height="15" fill="rgb(205,151,52)" fg:x="302785" fg:w="985"/><text x="43.4470%" y="175.50"></text></g><g><title>tcache_get (331 samples, 0.05%)</title><rect x="43.2903%" y="149" width="0.0472%" height="15" fill="rgb(253,215,39)" fg:x="303439" fg:w="331"/><text x="43.5403%" y="159.50"></text></g><g><title>__rdl_alloc (149 samples, 0.02%)</title><rect x="43.3375%" y="165" width="0.0213%" height="15" fill="rgb(221,220,41)" fg:x="303770" fg:w="149"/><text x="43.5875%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,595 samples, 0.23%)</title><rect x="43.1462%" y="181" width="0.2276%" height="15" fill="rgb(218,133,21)" fg:x="302429" fg:w="1595"/><text x="43.3962%" y="191.50"></text></g><g><title>core::cmp::max (112 samples, 0.02%)</title><rect x="43.3819%" y="181" width="0.0160%" height="15" fill="rgb(221,193,43)" fg:x="304081" fg:w="112"/><text x="43.6319%" y="191.50"></text></g><g><title>core::cmp::Ord::max (112 samples, 0.02%)</title><rect x="43.3819%" y="165" width="0.0160%" height="15" fill="rgb(240,128,52)" fg:x="304081" fg:w="112"/><text x="43.6319%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (112 samples, 0.02%)</title><rect x="43.3819%" y="149" width="0.0160%" height="15" fill="rgb(253,114,12)" fg:x="304081" fg:w="112"/><text x="43.6319%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,028 samples, 0.29%)</title><rect x="43.1105%" y="197" width="0.2893%" height="15" fill="rgb(215,223,47)" fg:x="302179" fg:w="2028"/><text x="43.3605%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,181 samples, 0.31%)</title><rect x="43.0890%" y="245" width="0.3112%" height="15" fill="rgb(248,225,23)" fg:x="302028" fg:w="2181"/><text x="43.3390%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,176 samples, 0.31%)</title><rect x="43.0897%" y="229" width="0.3104%" height="15" fill="rgb(250,108,0)" fg:x="302033" fg:w="2176"/><text x="43.3397%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,030 samples, 0.29%)</title><rect x="43.1105%" y="213" width="0.2896%" height="15" fill="rgb(228,208,7)" fg:x="302179" fg:w="2030"/><text x="43.3605%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,582 samples, 0.37%)</title><rect x="43.0717%" y="325" width="0.3684%" height="15" fill="rgb(244,45,10)" fg:x="301907" fg:w="2582"/><text x="43.3217%" y="335.50"></text></g><g><title>alloc::string::String::push_str (2,540 samples, 0.36%)</title><rect x="43.0777%" y="309" width="0.3624%" height="15" fill="rgb(207,125,25)" fg:x="301949" fg:w="2540"/><text x="43.3277%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2,540 samples, 0.36%)</title><rect x="43.0777%" y="293" width="0.3624%" height="15" fill="rgb(210,195,18)" fg:x="301949" fg:w="2540"/><text x="43.3277%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,540 samples, 0.36%)</title><rect x="43.0777%" y="277" width="0.3624%" height="15" fill="rgb(249,80,12)" fg:x="301949" fg:w="2540"/><text x="43.3277%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,537 samples, 0.36%)</title><rect x="43.0782%" y="261" width="0.3619%" height="15" fill="rgb(221,65,9)" fg:x="301952" fg:w="2537"/><text x="43.3282%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (280 samples, 0.04%)</title><rect x="43.4001%" y="245" width="0.0399%" height="15" fill="rgb(235,49,36)" fg:x="304209" fg:w="280"/><text x="43.6501%" y="255.50"></text></g><g><title>__memcpy_evex_unaligned_erms (235 samples, 0.03%)</title><rect x="43.4066%" y="229" width="0.0335%" height="15" fill="rgb(225,32,20)" fg:x="304254" fg:w="235"/><text x="43.6566%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,888 samples, 0.41%)</title><rect x="43.4401%" y="325" width="0.4120%" height="15" fill="rgb(215,141,46)" fg:x="304489" fg:w="2888"/><text x="43.6901%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,921 samples, 0.27%)</title><rect x="43.5781%" y="309" width="0.2741%" height="15" fill="rgb(250,160,47)" fg:x="305456" fg:w="1921"/><text x="43.8281%" y="319.50"></text></g><g><title>[unknown] (71 samples, 0.01%)</title><rect x="43.8521%" y="325" width="0.0101%" height="15" fill="rgb(216,222,40)" fg:x="307377" fg:w="71"/><text x="44.1021%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (274 samples, 0.04%)</title><rect x="44.4660%" y="245" width="0.0391%" height="15" fill="rgb(234,217,39)" fg:x="311680" fg:w="274"/><text x="44.7160%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (666 samples, 0.10%)</title><rect x="44.6773%" y="229" width="0.0950%" height="15" fill="rgb(207,178,40)" fg:x="313161" fg:w="666"/><text x="44.9273%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (505 samples, 0.07%)</title><rect x="45.1331%" y="181" width="0.0720%" height="15" fill="rgb(221,136,13)" fg:x="316356" fg:w="505"/><text x="45.3831%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2,471 samples, 0.35%)</title><rect x="44.8857%" y="197" width="0.3525%" height="15" fill="rgb(249,199,10)" fg:x="314622" fg:w="2471"/><text x="45.1357%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (232 samples, 0.03%)</title><rect x="45.2052%" y="181" width="0.0331%" height="15" fill="rgb(249,222,13)" fg:x="316861" fg:w="232"/><text x="45.4552%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (244 samples, 0.03%)</title><rect x="45.4915%" y="165" width="0.0348%" height="15" fill="rgb(244,185,38)" fg:x="318868" fg:w="244"/><text x="45.7415%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (836 samples, 0.12%)</title><rect x="45.5266%" y="165" width="0.1193%" height="15" fill="rgb(236,202,9)" fg:x="319114" fg:w="836"/><text x="45.7766%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (104 samples, 0.01%)</title><rect x="45.6458%" y="165" width="0.0148%" height="15" fill="rgb(250,229,37)" fg:x="319950" fg:w="104"/><text x="45.8958%" y="175.50"></text></g><g><title>checked_request2size (548 samples, 0.08%)</title><rect x="47.3661%" y="133" width="0.0782%" height="15" fill="rgb(206,174,23)" fg:x="332008" fg:w="548"/><text x="47.6161%" y="143.50"></text></g><g><title>__GI___libc_malloc (12,150 samples, 1.73%)</title><rect x="46.3007%" y="149" width="1.7334%" height="15" fill="rgb(211,33,43)" fg:x="324540" fg:w="12150"/><text x="46.5507%" y="159.50"></text></g><g><title>tcache_get (4,134 samples, 0.59%)</title><rect x="47.4443%" y="133" width="0.5898%" height="15" fill="rgb(245,58,50)" fg:x="332556" fg:w="4134"/><text x="47.6943%" y="143.50"></text></g><g><title>__rdl_alloc (1,986 samples, 0.28%)</title><rect x="48.0341%" y="149" width="0.2833%" height="15" fill="rgb(244,68,36)" fg:x="336690" fg:w="1986"/><text x="48.2841%" y="159.50"></text></g><g><title>__rust_alloc (672 samples, 0.10%)</title><rect x="48.3174%" y="149" width="0.0959%" height="15" fill="rgb(232,229,15)" fg:x="338676" fg:w="672"/><text x="48.5674%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (19,846 samples, 2.83%)</title><rect x="45.6607%" y="165" width="2.8313%" height="15" fill="rgb(254,30,23)" fg:x="320054" fg:w="19846"/><text x="45.9107%" y="175.50">al..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (552 samples, 0.08%)</title><rect x="48.4133%" y="149" width="0.0788%" height="15" fill="rgb(235,160,14)" fg:x="339348" fg:w="552"/><text x="48.6633%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array (795 samples, 0.11%)</title><rect x="48.4920%" y="165" width="0.1134%" height="15" fill="rgb(212,155,44)" fg:x="339900" fg:w="795"/><text x="48.7420%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (795 samples, 0.11%)</title><rect x="48.4920%" y="149" width="0.1134%" height="15" fill="rgb(226,2,50)" fg:x="339900" fg:w="795"/><text x="48.7420%" y="159.50"></text></g><g><title>core::cmp::max (1,195 samples, 0.17%)</title><rect x="48.6054%" y="165" width="0.1705%" height="15" fill="rgb(234,177,6)" fg:x="340695" fg:w="1195"/><text x="48.8554%" y="175.50"></text></g><g><title>core::cmp::Ord::max (1,195 samples, 0.17%)</title><rect x="48.6054%" y="149" width="0.1705%" height="15" fill="rgb(217,24,9)" fg:x="340695" fg:w="1195"/><text x="48.8554%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,195 samples, 0.17%)</title><rect x="48.6054%" y="133" width="0.1705%" height="15" fill="rgb(220,13,46)" fg:x="340695" fg:w="1195"/><text x="48.8554%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24,886 samples, 3.55%)</title><rect x="45.2387%" y="181" width="3.5504%" height="15" fill="rgb(239,221,27)" fg:x="317096" fg:w="24886"/><text x="45.4887%" y="191.50">allo..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (92 samples, 0.01%)</title><rect x="48.7759%" y="165" width="0.0131%" height="15" fill="rgb(222,198,25)" fg:x="341890" fg:w="92"/><text x="49.0259%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (92 samples, 0.01%)</title><rect x="48.7759%" y="149" width="0.0131%" height="15" fill="rgb(211,99,13)" fg:x="341890" fg:w="92"/><text x="49.0259%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28,186 samples, 4.02%)</title><rect x="44.7723%" y="229" width="4.0212%" height="15" fill="rgb(232,111,31)" fg:x="313827" fg:w="28186"/><text x="45.0223%" y="239.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28,101 samples, 4.01%)</title><rect x="44.7844%" y="213" width="4.0090%" height="15" fill="rgb(245,82,37)" fg:x="313912" fg:w="28101"/><text x="45.0344%" y="223.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24,920 samples, 3.56%)</title><rect x="45.2383%" y="197" width="3.5552%" height="15" fill="rgb(227,149,46)" fg:x="317093" fg:w="24920"/><text x="45.4883%" y="207.50">allo..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11,918 samples, 1.70%)</title><rect x="48.7935%" y="229" width="1.7003%" height="15" fill="rgb(218,36,50)" fg:x="342013" fg:w="11918"/><text x="49.0435%" y="239.50"></text></g><g><title>__memcpy_evex_unaligned_erms (10,100 samples, 1.44%)</title><rect x="49.0528%" y="213" width="1.4409%" height="15" fill="rgb(226,80,48)" fg:x="343831" fg:w="10100"/><text x="49.3028%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (44,365 samples, 6.33%)</title><rect x="44.1704%" y="309" width="6.3294%" height="15" fill="rgb(238,224,15)" fg:x="309608" fg:w="44365"/><text x="44.4204%" y="319.50">&lt;alloc::..</text></g><g><title>alloc::string::String::push_str (42,293 samples, 6.03%)</title><rect x="44.4660%" y="293" width="6.0338%" height="15" fill="rgb(241,136,10)" fg:x="311680" fg:w="42293"/><text x="44.7160%" y="303.50">alloc::s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (42,293 samples, 6.03%)</title><rect x="44.4660%" y="277" width="6.0338%" height="15" fill="rgb(208,32,45)" fg:x="311680" fg:w="42293"/><text x="44.7160%" y="287.50">alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (42,293 samples, 6.03%)</title><rect x="44.4660%" y="261" width="6.0338%" height="15" fill="rgb(207,135,9)" fg:x="311680" fg:w="42293"/><text x="44.7160%" y="271.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (42,019 samples, 5.99%)</title><rect x="44.5051%" y="245" width="5.9947%" height="15" fill="rgb(206,86,44)" fg:x="311954" fg:w="42019"/><text x="44.7551%" y="255.50">alloc::v..</text></g><g><title>core::fmt::Formatter::write_formatted_parts (60,066 samples, 8.57%)</title><rect x="41.9308%" y="341" width="8.5693%" height="15" fill="rgb(245,177,15)" fg:x="293910" fg:w="60066"/><text x="42.1808%" y="351.50">core::fmt::F..</text></g><g><title>core::fmt::Formatter::write_formatted_parts::write_bytes (46,528 samples, 6.64%)</title><rect x="43.8622%" y="325" width="6.6379%" height="15" fill="rgb(206,64,50)" fg:x="307448" fg:w="46528"/><text x="44.1122%" y="335.50">core::fmt..</text></g><g><title>core::fmt::float::float_to_decimal_common_exact (6,371 samples, 0.91%)</title><rect x="50.5002%" y="341" width="0.9089%" height="15" fill="rgb(234,36,40)" fg:x="353976" fg:w="6371"/><text x="50.7502%" y="351.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (483 samples, 0.07%)</title><rect x="52.7416%" y="325" width="0.0689%" height="15" fill="rgb(213,64,8)" fg:x="369687" fg:w="483"/><text x="52.9916%" y="335.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::is_infinite (89 samples, 0.01%)</title><rect x="53.4398%" y="277" width="0.0127%" height="15" fill="rgb(210,75,36)" fg:x="374581" fg:w="89"/><text x="53.6898%" y="287.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::is_nan (111 samples, 0.02%)</title><rect x="53.4525%" y="277" width="0.0158%" height="15" fill="rgb(229,88,21)" fg:x="374670" fg:w="111"/><text x="53.7025%" y="287.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::classify (1,812 samples, 0.26%)</title><rect x="53.3130%" y="309" width="0.2585%" height="15" fill="rgb(252,204,47)" fg:x="373692" fg:w="1812"/><text x="53.5630%" y="319.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::classify (1,812 samples, 0.26%)</title><rect x="53.3130%" y="293" width="0.2585%" height="15" fill="rgb(208,77,27)" fg:x="373692" fg:w="1812"/><text x="53.5630%" y="303.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::partial_classify (723 samples, 0.10%)</title><rect x="53.4683%" y="277" width="0.1031%" height="15" fill="rgb(221,76,26)" fg:x="374781" fg:w="723"/><text x="53.7183%" y="287.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::integer_decode (2,271 samples, 0.32%)</title><rect x="53.5715%" y="309" width="0.3240%" height="15" fill="rgb(225,139,18)" fg:x="375504" fg:w="2271"/><text x="53.8215%" y="319.50"></text></g><g><title>core::num::flt2dec::decoder::decode (7,611 samples, 1.09%)</title><rect x="52.8105%" y="325" width="1.0858%" height="15" fill="rgb(230,137,11)" fg:x="370170" fg:w="7611"/><text x="53.0605%" y="335.50"></text></g><g><title>core::num::flt2dec::determine_sign (3,011 samples, 0.43%)</title><rect x="53.8963%" y="325" width="0.4296%" height="15" fill="rgb(212,28,1)" fg:x="377781" fg:w="3011"/><text x="54.1463%" y="335.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (7,818 samples, 1.12%)</title><rect x="54.3259%" y="325" width="1.1154%" height="15" fill="rgb(248,164,17)" fg:x="380792" fg:w="7818"/><text x="54.5759%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (387 samples, 0.06%)</title><rect x="55.3861%" y="309" width="0.0552%" height="15" fill="rgb(222,171,42)" fg:x="388223" fg:w="387"/><text x="55.6361%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (387 samples, 0.06%)</title><rect x="55.3861%" y="293" width="0.0552%" height="15" fill="rgb(243,84,45)" fg:x="388223" fg:w="387"/><text x="55.6361%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (387 samples, 0.06%)</title><rect x="55.3861%" y="277" width="0.0552%" height="15" fill="rgb(252,49,23)" fg:x="388223" fg:w="387"/><text x="55.6361%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (387 samples, 0.06%)</title><rect x="55.3861%" y="261" width="0.0552%" height="15" fill="rgb(215,19,7)" fg:x="388223" fg:w="387"/><text x="55.6361%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (337 samples, 0.05%)</title><rect x="55.3932%" y="245" width="0.0481%" height="15" fill="rgb(238,81,41)" fg:x="388273" fg:w="337"/><text x="55.6432%" y="255.50"></text></g><g><title>core::num::flt2dec::estimate_max_buf_len (1,029 samples, 0.15%)</title><rect x="55.4413%" y="325" width="0.1468%" height="15" fill="rgb(210,199,37)" fg:x="388610" fg:w="1029"/><text x="55.6913%" y="335.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::clone::Clone&gt;::clone (8,124 samples, 1.16%)</title><rect x="57.0169%" y="277" width="1.1590%" height="15" fill="rgb(244,192,49)" fg:x="399654" fg:w="8124"/><text x="57.2669%" y="287.50"></text></g><g><title>__memcpy_evex_unaligned_erms (7,061 samples, 1.01%)</title><rect x="57.1685%" y="261" width="1.0074%" height="15" fill="rgb(226,211,11)" fg:x="400717" fg:w="7061"/><text x="57.4185%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 0.01%)</title><rect x="58.2282%" y="101" width="0.0127%" height="15" fill="rgb(236,162,54)" fg:x="408145" fg:w="89"/><text x="58.4782%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (89 samples, 0.01%)</title><rect x="58.2282%" y="85" width="0.0127%" height="15" fill="rgb(220,229,9)" fg:x="408145" fg:w="89"/><text x="58.4782%" y="95.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (89 samples, 0.01%)</title><rect x="58.2282%" y="69" width="0.0127%" height="15" fill="rgb(250,87,22)" fg:x="408145" fg:w="89"/><text x="58.4782%" y="79.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::cmp::Ord&gt;::cmp (665 samples, 0.09%)</title><rect x="58.1759%" y="277" width="0.0949%" height="15" fill="rgb(239,43,17)" fg:x="407778" fg:w="665"/><text x="58.4259%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (593 samples, 0.08%)</title><rect x="58.1862%" y="261" width="0.0846%" height="15" fill="rgb(231,177,25)" fg:x="407850" fg:w="593"/><text x="58.4362%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (593 samples, 0.08%)</title><rect x="58.1862%" y="245" width="0.0846%" height="15" fill="rgb(219,179,1)" fg:x="407850" fg:w="593"/><text x="58.4362%" y="255.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (593 samples, 0.08%)</title><rect x="58.1862%" y="229" width="0.0846%" height="15" fill="rgb(238,219,53)" fg:x="407850" fg:w="593"/><text x="58.4362%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (593 samples, 0.08%)</title><rect x="58.1862%" y="213" width="0.0846%" height="15" fill="rgb(232,167,36)" fg:x="407850" fg:w="593"/><text x="58.4362%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (593 samples, 0.08%)</title><rect x="58.1862%" y="197" width="0.0846%" height="15" fill="rgb(244,19,51)" fg:x="407850" fg:w="593"/><text x="58.4362%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::try_rfold (593 samples, 0.08%)</title><rect x="58.1862%" y="181" width="0.0846%" height="15" fill="rgb(224,6,22)" fg:x="407850" fg:w="593"/><text x="58.4362%" y="191.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (593 samples, 0.08%)</title><rect x="58.1862%" y="165" width="0.0846%" height="15" fill="rgb(224,145,5)" fg:x="407850" fg:w="593"/><text x="58.4362%" y="175.50"></text></g><g><title>core::iter::adapters::cloned::clone_try_fold::_{{closure}} (498 samples, 0.07%)</title><rect x="58.1997%" y="149" width="0.0710%" height="15" fill="rgb(234,130,49)" fg:x="407945" fg:w="498"/><text x="58.4497%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (498 samples, 0.07%)</title><rect x="58.1997%" y="133" width="0.0710%" height="15" fill="rgb(254,6,2)" fg:x="407945" fg:w="498"/><text x="58.4497%" y="143.50"></text></g><g><title>core::iter::traits::iterator::iter_compare::compare::_{{closure}} (498 samples, 0.07%)</title><rect x="58.1997%" y="117" width="0.0710%" height="15" fill="rgb(208,96,46)" fg:x="407945" fg:w="498"/><text x="58.4497%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by::compare::_{{closure}} (209 samples, 0.03%)</title><rect x="58.2409%" y="101" width="0.0298%" height="15" fill="rgb(239,3,39)" fg:x="408234" fg:w="209"/><text x="58.4909%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::_{{closure}} (209 samples, 0.03%)</title><rect x="58.2409%" y="85" width="0.0298%" height="15" fill="rgb(233,210,1)" fg:x="408234" fg:w="209"/><text x="58.4909%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (209 samples, 0.03%)</title><rect x="58.2409%" y="69" width="0.0298%" height="15" fill="rgb(244,137,37)" fg:x="408234" fg:w="209"/><text x="58.4909%" y="79.50"></text></g><g><title>__memset_evex_unaligned_erms (398 samples, 0.06%)</title><rect x="58.2783%" y="277" width="0.0568%" height="15" fill="rgb(240,136,2)" fg:x="408496" fg:w="398"/><text x="58.5283%" y="287.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (487 samples, 0.07%)</title><rect x="58.5458%" y="229" width="0.0695%" height="15" fill="rgb(239,18,37)" fg:x="410371" fg:w="487"/><text x="58.7958%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (487 samples, 0.07%)</title><rect x="58.5458%" y="213" width="0.0695%" height="15" fill="rgb(218,185,22)" fg:x="410371" fg:w="487"/><text x="58.7958%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (487 samples, 0.07%)</title><rect x="58.5458%" y="197" width="0.0695%" height="15" fill="rgb(225,218,4)" fg:x="410371" fg:w="487"/><text x="58.7958%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (487 samples, 0.07%)</title><rect x="58.5458%" y="181" width="0.0695%" height="15" fill="rgb(230,182,32)" fg:x="410371" fg:w="487"/><text x="58.7958%" y="191.50"></text></g><g><title>core::cmp::max (2,131 samples, 0.30%)</title><rect x="58.6153%" y="229" width="0.3040%" height="15" fill="rgb(242,56,43)" fg:x="410858" fg:w="2131"/><text x="58.8653%" y="239.50"></text></g><g><title>core::cmp::Ord::max (2,131 samples, 0.30%)</title><rect x="58.6153%" y="213" width="0.3040%" height="15" fill="rgb(233,99,24)" fg:x="410858" fg:w="2131"/><text x="58.8653%" y="223.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (2,131 samples, 0.30%)</title><rect x="58.6153%" y="197" width="0.3040%" height="15" fill="rgb(234,209,42)" fg:x="410858" fg:w="2131"/><text x="58.8653%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (153 samples, 0.02%)</title><rect x="58.9193%" y="181" width="0.0218%" height="15" fill="rgb(227,7,12)" fg:x="412989" fg:w="153"/><text x="59.1693%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (153 samples, 0.02%)</title><rect x="58.9193%" y="165" width="0.0218%" height="15" fill="rgb(245,203,43)" fg:x="412989" fg:w="153"/><text x="59.1693%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (153 samples, 0.02%)</title><rect x="58.9193%" y="149" width="0.0218%" height="15" fill="rgb(238,205,33)" fg:x="412989" fg:w="153"/><text x="59.1693%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2,228 samples, 0.32%)</title><rect x="59.0076%" y="117" width="0.3179%" height="15" fill="rgb(231,56,7)" fg:x="413608" fg:w="2228"/><text x="59.2576%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,174 samples, 0.17%)</title><rect x="59.1580%" y="101" width="0.1675%" height="15" fill="rgb(244,186,29)" fg:x="414662" fg:w="1174"/><text x="59.4080%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,950 samples, 0.28%)</title><rect x="59.3967%" y="69" width="0.2782%" height="15" fill="rgb(234,111,31)" fg:x="416335" fg:w="1950"/><text x="59.6467%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1,950 samples, 0.28%)</title><rect x="59.3967%" y="53" width="0.2782%" height="15" fill="rgb(241,149,10)" fg:x="416335" fg:w="1950"/><text x="59.6467%" y="63.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (1,950 samples, 0.28%)</title><rect x="59.3967%" y="37" width="0.2782%" height="15" fill="rgb(249,206,44)" fg:x="416335" fg:w="1950"/><text x="59.6467%" y="47.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::cmp::PartialOrd&gt;::partial_cmp (12,829 samples, 1.83%)</title><rect x="58.5458%" y="261" width="1.8303%" height="15" fill="rgb(251,153,30)" fg:x="410371" fg:w="12829"/><text x="58.7958%" y="271.50">&lt;..</text></g><g><title>&lt;core::num::bignum::Big32x40 as core::cmp::Ord&gt;::cmp (12,829 samples, 1.83%)</title><rect x="58.5458%" y="245" width="1.8303%" height="15" fill="rgb(239,152,38)" fg:x="410371" fg:w="12829"/><text x="58.7958%" y="255.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::cmp (10,211 samples, 1.46%)</title><rect x="58.9193%" y="229" width="1.4568%" height="15" fill="rgb(249,139,47)" fg:x="412989" fg:w="10211"/><text x="59.1693%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (10,211 samples, 1.46%)</title><rect x="58.9193%" y="213" width="1.4568%" height="15" fill="rgb(244,64,35)" fg:x="412989" fg:w="10211"/><text x="59.1693%" y="223.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (10,211 samples, 1.46%)</title><rect x="58.9193%" y="197" width="1.4568%" height="15" fill="rgb(216,46,15)" fg:x="412989" fg:w="10211"/><text x="59.1693%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (10,058 samples, 1.43%)</title><rect x="58.9411%" y="181" width="1.4349%" height="15" fill="rgb(250,74,19)" fg:x="413142" fg:w="10058"/><text x="59.1911%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10,058 samples, 1.43%)</title><rect x="58.9411%" y="165" width="1.4349%" height="15" fill="rgb(249,42,33)" fg:x="413142" fg:w="10058"/><text x="59.1911%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::try_rfold (10,058 samples, 1.43%)</title><rect x="58.9411%" y="149" width="1.4349%" height="15" fill="rgb(242,149,17)" fg:x="413142" fg:w="10058"/><text x="59.1911%" y="159.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (10,058 samples, 1.43%)</title><rect x="58.9411%" y="133" width="1.4349%" height="15" fill="rgb(244,29,21)" fg:x="413142" fg:w="10058"/><text x="59.1911%" y="143.50"></text></g><g><title>core::iter::adapters::cloned::clone_try_fold::_{{closure}} (7,362 samples, 1.05%)</title><rect x="59.3258%" y="117" width="1.0503%" height="15" fill="rgb(220,130,37)" fg:x="415838" fg:w="7362"/><text x="59.5758%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (7,362 samples, 1.05%)</title><rect x="59.3258%" y="101" width="1.0503%" height="15" fill="rgb(211,67,2)" fg:x="415838" fg:w="7362"/><text x="59.5758%" y="111.50"></text></g><g><title>core::iter::traits::iterator::iter_compare::compare::_{{closure}} (7,362 samples, 1.05%)</title><rect x="59.3258%" y="85" width="1.0503%" height="15" fill="rgb(235,68,52)" fg:x="415838" fg:w="7362"/><text x="59.5758%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by::compare::_{{closure}} (4,906 samples, 0.70%)</title><rect x="59.6761%" y="69" width="0.6999%" height="15" fill="rgb(246,142,3)" fg:x="418294" fg:w="4906"/><text x="59.9261%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::_{{closure}} (4,047 samples, 0.58%)</title><rect x="59.7987%" y="53" width="0.5774%" height="15" fill="rgb(241,25,7)" fg:x="419153" fg:w="4047"/><text x="60.0487%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (4,047 samples, 0.58%)</title><rect x="59.7987%" y="37" width="0.5774%" height="15" fill="rgb(242,119,39)" fg:x="419153" fg:w="4047"/><text x="60.0487%" y="47.50"></text></g><g><title>core::cmp::PartialOrd::ge (14,308 samples, 2.04%)</title><rect x="58.3351%" y="277" width="2.0413%" height="15" fill="rgb(241,98,45)" fg:x="408894" fg:w="14308"/><text x="58.5851%" y="287.50">c..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (279 samples, 0.04%)</title><rect x="60.3764%" y="277" width="0.0398%" height="15" fill="rgb(254,28,30)" fg:x="423202" fg:w="279"/><text x="60.6264%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (279 samples, 0.04%)</title><rect x="60.3764%" y="261" width="0.0398%" height="15" fill="rgb(241,142,54)" fg:x="423202" fg:w="279"/><text x="60.6264%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (155 samples, 0.02%)</title><rect x="60.4162%" y="277" width="0.0221%" height="15" fill="rgb(222,85,15)" fg:x="423481" fg:w="155"/><text x="60.6662%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (155 samples, 0.02%)</title><rect x="60.4162%" y="261" width="0.0221%" height="15" fill="rgb(210,85,47)" fg:x="423481" fg:w="155"/><text x="60.6662%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (265 samples, 0.04%)</title><rect x="60.5008%" y="261" width="0.0378%" height="15" fill="rgb(224,206,25)" fg:x="424074" fg:w="265"/><text x="60.7508%" y="271.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (260 samples, 0.04%)</title><rect x="60.5015%" y="245" width="0.0371%" height="15" fill="rgb(243,201,19)" fg:x="424079" fg:w="260"/><text x="60.7515%" y="255.50"></text></g><g><title>core::cmp::max (134 samples, 0.02%)</title><rect x="60.5391%" y="261" width="0.0191%" height="15" fill="rgb(236,59,4)" fg:x="424343" fg:w="134"/><text x="60.7891%" y="271.50"></text></g><g><title>core::cmp::Ord::max (134 samples, 0.02%)</title><rect x="60.5391%" y="245" width="0.0191%" height="15" fill="rgb(254,179,45)" fg:x="424343" fg:w="134"/><text x="60.7891%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (134 samples, 0.02%)</title><rect x="60.5391%" y="229" width="0.0191%" height="15" fill="rgb(226,14,10)" fg:x="424343" fg:w="134"/><text x="60.7891%" y="239.50"></text></g><g><title>core::num::bignum::Big32x40::add (1,137 samples, 0.16%)</title><rect x="60.4448%" y="277" width="0.1622%" height="15" fill="rgb(244,27,41)" fg:x="423682" fg:w="1137"/><text x="60.6948%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::carrying_add (342 samples, 0.05%)</title><rect x="60.5583%" y="261" width="0.0488%" height="15" fill="rgb(235,35,32)" fg:x="424477" fg:w="342"/><text x="60.8083%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::overflowing_add (210 samples, 0.03%)</title><rect x="60.5771%" y="245" width="0.0300%" height="15" fill="rgb(218,68,31)" fg:x="424609" fg:w="210"/><text x="60.8271%" y="255.50"></text></g><g><title>core::num::bignum::Big32x40::from_small (1,158 samples, 0.17%)</title><rect x="60.6070%" y="277" width="0.1652%" height="15" fill="rgb(207,120,37)" fg:x="424819" fg:w="1158"/><text x="60.8570%" y="287.50"></text></g><g><title>core::num::bignum::Big32x40::from_u64 (1,259 samples, 0.18%)</title><rect x="60.7722%" y="277" width="0.1796%" height="15" fill="rgb(227,98,0)" fg:x="425977" fg:w="1259"/><text x="61.0222%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (247 samples, 0.04%)</title><rect x="61.0854%" y="245" width="0.0352%" height="15" fill="rgb(207,7,3)" fg:x="428172" fg:w="247"/><text x="61.3354%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (190 samples, 0.03%)</title><rect x="61.0935%" y="229" width="0.0271%" height="15" fill="rgb(206,98,19)" fg:x="428229" fg:w="190"/><text x="61.3435%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (1,599 samples, 0.23%)</title><rect x="60.9519%" y="261" width="0.2281%" height="15" fill="rgb(217,5,26)" fg:x="427236" fg:w="1599"/><text x="61.2019%" y="271.50"></text></g><g><title>core::num::bignum::Big32x40::is_zero::_{{closure}} (413 samples, 0.06%)</title><rect x="61.1211%" y="245" width="0.0589%" height="15" fill="rgb(235,190,38)" fg:x="428422" fg:w="413"/><text x="61.3711%" y="255.50"></text></g><g><title>core::num::bignum::Big32x40::is_zero (1,820 samples, 0.26%)</title><rect x="60.9519%" y="277" width="0.2597%" height="15" fill="rgb(247,86,24)" fg:x="427236" fg:w="1820"/><text x="61.2019%" y="287.50"></text></g><g><title>core::num::bignum::Big32x40::digits (221 samples, 0.03%)</title><rect x="61.1800%" y="261" width="0.0315%" height="15" fill="rgb(205,101,16)" fg:x="428835" fg:w="221"/><text x="61.4300%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (933 samples, 0.13%)</title><rect x="62.5034%" y="261" width="0.1331%" height="15" fill="rgb(246,168,33)" fg:x="438111" fg:w="933"/><text x="62.7534%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (933 samples, 0.13%)</title><rect x="62.5034%" y="245" width="0.1331%" height="15" fill="rgb(231,114,1)" fg:x="438111" fg:w="933"/><text x="62.7534%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (933 samples, 0.13%)</title><rect x="62.5034%" y="229" width="0.1331%" height="15" fill="rgb(207,184,53)" fg:x="438111" fg:w="933"/><text x="62.7534%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (115 samples, 0.02%)</title><rect x="62.6201%" y="213" width="0.0164%" height="15" fill="rgb(224,95,51)" fg:x="438929" fg:w="115"/><text x="62.8701%" y="223.50"></text></g><g><title>core::num::bignum::Big32x40::mul_pow2 (10,618 samples, 1.51%)</title><rect x="61.2115%" y="277" width="1.5148%" height="15" fill="rgb(212,188,45)" fg:x="429056" fg:w="10618"/><text x="61.4615%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (591 samples, 0.08%)</title><rect x="62.6420%" y="261" width="0.0843%" height="15" fill="rgb(223,154,38)" fg:x="439083" fg:w="591"/><text x="62.8920%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (591 samples, 0.08%)</title><rect x="62.6420%" y="245" width="0.0843%" height="15" fill="rgb(251,22,52)" fg:x="439083" fg:w="591"/><text x="62.8920%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (487 samples, 0.07%)</title><rect x="62.9790%" y="261" width="0.0695%" height="15" fill="rgb(229,209,22)" fg:x="441445" fg:w="487"/><text x="63.2290%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (126 samples, 0.02%)</title><rect x="63.0305%" y="245" width="0.0180%" height="15" fill="rgb(234,138,34)" fg:x="441806" fg:w="126"/><text x="63.2805%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_add (155 samples, 0.02%)</title><rect x="63.0636%" y="245" width="0.0221%" height="15" fill="rgb(212,95,11)" fg:x="442038" fg:w="155"/><text x="63.3136%" y="255.50"></text></g><g><title>core::num::bignum::Big32x40::mul_small (2,802 samples, 0.40%)</title><rect x="62.7263%" y="277" width="0.3997%" height="15" fill="rgb(240,179,47)" fg:x="439674" fg:w="2802"/><text x="62.9763%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::carrying_mul (499 samples, 0.07%)</title><rect x="63.0549%" y="261" width="0.0712%" height="15" fill="rgb(240,163,11)" fg:x="441977" fg:w="499"/><text x="63.3049%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_mul (283 samples, 0.04%)</title><rect x="63.0857%" y="245" width="0.0404%" height="15" fill="rgb(236,37,12)" fg:x="442193" fg:w="283"/><text x="63.3357%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,475 samples, 0.35%)</title><rect x="63.3750%" y="261" width="0.3531%" height="15" fill="rgb(232,164,16)" fg:x="444221" fg:w="2475"/><text x="63.6250%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2,475 samples, 0.35%)</title><rect x="63.3750%" y="245" width="0.3531%" height="15" fill="rgb(244,205,15)" fg:x="444221" fg:w="2475"/><text x="63.6250%" y="255.50"></text></g><g><title>core::num::bignum::Big32x40::sub (5,802 samples, 0.83%)</title><rect x="63.1261%" y="277" width="0.8277%" height="15" fill="rgb(223,117,47)" fg:x="442476" fg:w="5802"/><text x="63.3761%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::carrying_add (1,579 samples, 0.23%)</title><rect x="63.7286%" y="261" width="0.2253%" height="15" fill="rgb(244,107,35)" fg:x="446699" fg:w="1579"/><text x="63.9786%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::overflowing_add (1,304 samples, 0.19%)</title><rect x="63.7678%" y="245" width="0.1860%" height="15" fill="rgb(205,140,8)" fg:x="446974" fg:w="1304"/><text x="64.0178%" y="255.50"></text></g><g><title>core::num::flt2dec::estimator::estimate_scaling_factor (777 samples, 0.11%)</title><rect x="63.9538%" y="277" width="0.1109%" height="15" fill="rgb(228,84,46)" fg:x="448278" fg:w="777"/><text x="64.2038%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (370 samples, 0.05%)</title><rect x="64.0119%" y="261" width="0.0528%" height="15" fill="rgb(254,188,9)" fg:x="448685" fg:w="370"/><text x="64.2619%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (109 samples, 0.02%)</title><rect x="64.3691%" y="213" width="0.0156%" height="15" fill="rgb(206,112,54)" fg:x="451189" fg:w="109"/><text x="64.6191%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,001 samples, 0.14%)</title><rect x="64.2420%" y="245" width="0.1428%" height="15" fill="rgb(216,84,49)" fg:x="450298" fg:w="1001"/><text x="64.4920%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1,001 samples, 0.14%)</title><rect x="64.2420%" y="229" width="0.1428%" height="15" fill="rgb(214,194,35)" fg:x="450298" fg:w="1001"/><text x="64.4920%" y="239.50"></text></g><g><title>&lt;u32 as core::num::bignum::FullOps&gt;::full_div_rem (3,718 samples, 0.53%)</title><rect x="64.3848%" y="245" width="0.5304%" height="15" fill="rgb(249,28,3)" fg:x="451299" fg:w="3718"/><text x="64.6348%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::div_2pow10 (6,246 samples, 0.89%)</title><rect x="64.0647%" y="277" width="0.8911%" height="15" fill="rgb(222,56,52)" fg:x="449055" fg:w="6246"/><text x="64.3147%" y="287.50"></text></g><g><title>core::num::bignum::Big32x40::div_rem_small (5,958 samples, 0.85%)</title><rect x="64.1058%" y="261" width="0.8500%" height="15" fill="rgb(245,217,50)" fg:x="449343" fg:w="5958"/><text x="64.3558%" y="271.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (282 samples, 0.04%)</title><rect x="64.9155%" y="245" width="0.0402%" height="15" fill="rgb(213,201,24)" fg:x="455019" fg:w="282"/><text x="65.1655%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (282 samples, 0.04%)</title><rect x="64.9155%" y="229" width="0.0402%" height="15" fill="rgb(248,116,28)" fg:x="455019" fg:w="282"/><text x="65.1655%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (282 samples, 0.04%)</title><rect x="64.9155%" y="213" width="0.0402%" height="15" fill="rgb(219,72,43)" fg:x="455019" fg:w="282"/><text x="65.1655%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (282 samples, 0.04%)</title><rect x="64.9155%" y="197" width="0.0402%" height="15" fill="rgb(209,138,14)" fg:x="455019" fg:w="282"/><text x="65.1655%" y="207.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (158 samples, 0.02%)</title><rect x="64.9558%" y="277" width="0.0225%" height="15" fill="rgb(222,18,33)" fg:x="455301" fg:w="158"/><text x="65.2058%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_add (71 samples, 0.01%)</title><rect x="65.1925%" y="229" width="0.0101%" height="15" fill="rgb(213,199,7)" fg:x="456960" fg:w="71"/><text x="65.4425%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::carrying_mul (159 samples, 0.02%)</title><rect x="65.1828%" y="245" width="0.0227%" height="15" fill="rgb(250,110,10)" fg:x="456892" fg:w="159"/><text x="65.4328%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::mul_pow10 (2,408 samples, 0.34%)</title><rect x="64.9783%" y="277" width="0.3435%" height="15" fill="rgb(248,123,6)" fg:x="455459" fg:w="2408"/><text x="65.2283%" y="287.50"></text></g><g><title>core::num::bignum::Big32x40::mul_small (1,681 samples, 0.24%)</title><rect x="65.0820%" y="261" width="0.2398%" height="15" fill="rgb(206,91,31)" fg:x="456186" fg:w="1681"/><text x="65.3320%" y="271.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::mul_pow10 (816 samples, 0.12%)</title><rect x="65.2054%" y="245" width="0.1164%" height="15" fill="rgb(211,154,13)" fg:x="457051" fg:w="816"/><text x="65.4554%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (64,949 samples, 9.27%)</title><rect x="56.0679%" y="293" width="9.2660%" height="15" fill="rgb(225,148,7)" fg:x="393002" fg:w="64949"/><text x="56.3179%" y="303.50">core::num::fl..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (82 samples, 0.01%)</title><rect x="65.3221%" y="277" width="0.0117%" height="15" fill="rgb(220,160,43)" fg:x="457869" fg:w="82"/><text x="65.5721%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (82 samples, 0.01%)</title><rect x="65.3221%" y="261" width="0.0117%" height="15" fill="rgb(213,52,39)" fg:x="457869" fg:w="82"/><text x="65.5721%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (72 samples, 0.01%)</title><rect x="65.3236%" y="245" width="0.0103%" height="15" fill="rgb(243,137,7)" fg:x="457879" fg:w="72"/><text x="65.5736%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (72 samples, 0.01%)</title><rect x="65.3236%" y="229" width="0.0103%" height="15" fill="rgb(230,79,13)" fg:x="457879" fg:w="72"/><text x="65.5736%" y="239.50"></text></g><g><title>[unknown] (112 samples, 0.02%)</title><rect x="69.7392%" y="277" width="0.0160%" height="15" fill="rgb(247,105,23)" fg:x="488830" fg:w="112"/><text x="69.9892%" y="287.50"></text></g><g><title>[unknown] (110 samples, 0.02%)</title><rect x="69.7395%" y="261" width="0.0157%" height="15" fill="rgb(223,179,41)" fg:x="488832" fg:w="110"/><text x="69.9895%" y="271.50"></text></g><g><title>[unknown] (109 samples, 0.02%)</title><rect x="69.7396%" y="245" width="0.0156%" height="15" fill="rgb(218,9,34)" fg:x="488833" fg:w="109"/><text x="69.9896%" y="255.50"></text></g><g><title>[unknown] (107 samples, 0.02%)</title><rect x="69.7399%" y="229" width="0.0153%" height="15" fill="rgb(222,106,8)" fg:x="488835" fg:w="107"/><text x="69.9899%" y="239.50"></text></g><g><title>[unknown] (106 samples, 0.02%)</title><rect x="69.7401%" y="213" width="0.0151%" height="15" fill="rgb(211,220,0)" fg:x="488836" fg:w="106"/><text x="69.9901%" y="223.50"></text></g><g><title>[unknown] (99 samples, 0.01%)</title><rect x="69.7411%" y="197" width="0.0141%" height="15" fill="rgb(229,52,16)" fg:x="488843" fg:w="99"/><text x="69.9911%" y="207.50"></text></g><g><title>[unknown] (98 samples, 0.01%)</title><rect x="69.7412%" y="181" width="0.0140%" height="15" fill="rgb(212,155,18)" fg:x="488844" fg:w="98"/><text x="69.9912%" y="191.50"></text></g><g><title>[unknown] (83 samples, 0.01%)</title><rect x="69.7433%" y="165" width="0.0118%" height="15" fill="rgb(242,21,14)" fg:x="488859" fg:w="83"/><text x="69.9933%" y="175.50"></text></g><g><title>[unknown] (79 samples, 0.01%)</title><rect x="69.7439%" y="149" width="0.0113%" height="15" fill="rgb(222,19,48)" fg:x="488863" fg:w="79"/><text x="69.9939%" y="159.50"></text></g><g><title>[unknown] (72 samples, 0.01%)</title><rect x="69.7449%" y="133" width="0.0103%" height="15" fill="rgb(232,45,27)" fg:x="488870" fg:w="72"/><text x="69.9949%" y="143.50"></text></g><g><title>core::num::diy_float::Fp::mul (6,401 samples, 0.91%)</title><rect x="69.7552%" y="277" width="0.9132%" height="15" fill="rgb(249,103,42)" fg:x="488942" fg:w="6401"/><text x="70.0052%" y="287.50"></text></g><g><title>core::num::diy_float::Fp::normalize (13,335 samples, 1.90%)</title><rect x="70.6684%" y="277" width="1.9024%" height="15" fill="rgb(246,81,33)" fg:x="495343" fg:w="13335"/><text x="70.9184%" y="287.50">c..</text></g><g><title>core::num::flt2dec::strategy::grisu::cached_power (7,187 samples, 1.03%)</title><rect x="72.5708%" y="277" width="1.0253%" height="15" fill="rgb(252,33,42)" fg:x="508678" fg:w="7187"/><text x="72.8208%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (98 samples, 0.01%)</title><rect x="74.9265%" y="229" width="0.0140%" height="15" fill="rgb(209,212,41)" fg:x="525190" fg:w="98"/><text x="75.1765%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (98 samples, 0.01%)</title><rect x="74.9265%" y="213" width="0.0140%" height="15" fill="rgb(207,154,6)" fg:x="525190" fg:w="98"/><text x="75.1765%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1,131 samples, 0.16%)</title><rect x="74.8725%" y="245" width="0.1614%" height="15" fill="rgb(223,64,47)" fg:x="524811" fg:w="1131"/><text x="75.1225%" y="255.50"></text></g><g><title>core::num::flt2dec::round_up::_{{closure}} (653 samples, 0.09%)</title><rect x="74.9407%" y="229" width="0.0932%" height="15" fill="rgb(211,161,38)" fg:x="525289" fg:w="653"/><text x="75.1907%" y="239.50"></text></g><g><title>core::num::flt2dec::round_up (1,975 samples, 0.28%)</title><rect x="74.8011%" y="261" width="0.2818%" height="15" fill="rgb(219,138,40)" fg:x="524311" fg:w="1975"/><text x="75.0511%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (344 samples, 0.05%)</title><rect x="75.0338%" y="245" width="0.0491%" height="15" fill="rgb(241,228,46)" fg:x="525942" fg:w="344"/><text x="75.2838%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (344 samples, 0.05%)</title><rect x="75.0338%" y="229" width="0.0491%" height="15" fill="rgb(223,209,38)" fg:x="525942" fg:w="344"/><text x="75.2838%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (344 samples, 0.05%)</title><rect x="75.0338%" y="213" width="0.0491%" height="15" fill="rgb(236,164,45)" fg:x="525942" fg:w="344"/><text x="75.2838%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (538 samples, 0.08%)</title><rect x="75.0829%" y="261" width="0.0768%" height="15" fill="rgb(231,15,5)" fg:x="526286" fg:w="538"/><text x="75.3329%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (538 samples, 0.08%)</title><rect x="75.0829%" y="245" width="0.0768%" height="15" fill="rgb(252,35,15)" fg:x="526286" fg:w="538"/><text x="75.3329%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (538 samples, 0.08%)</title><rect x="75.0829%" y="229" width="0.0768%" height="15" fill="rgb(248,181,18)" fg:x="526286" fg:w="538"/><text x="75.3329%" y="239.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (11,174 samples, 1.59%)</title><rect x="73.5962%" y="277" width="1.5941%" height="15" fill="rgb(233,39,42)" fg:x="515865" fg:w="11174"/><text x="73.8462%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (215 samples, 0.03%)</title><rect x="75.1596%" y="261" width="0.0307%" height="15" fill="rgb(238,110,33)" fg:x="526824" fg:w="215"/><text x="75.4096%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (215 samples, 0.03%)</title><rect x="75.1596%" y="245" width="0.0307%" height="15" fill="rgb(233,195,10)" fg:x="526824" fg:w="215"/><text x="75.4096%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (215 samples, 0.03%)</title><rect x="75.1596%" y="229" width="0.0307%" height="15" fill="rgb(254,105,3)" fg:x="526824" fg:w="215"/><text x="75.4096%" y="239.50"></text></g><g><title>core::fmt::rt::Argument::fmt (240,888 samples, 34.37%)</title><rect x="41.2068%" y="373" width="34.3664%" height="15" fill="rgb(221,225,9)" fg:x="288835" fg:w="240888"/><text x="41.4568%" y="383.50">core::fmt::rt::Argument::fmt</text></g><g><title>core::fmt::float::float_to_decimal_common_exact (238,131 samples, 33.97%)</title><rect x="41.6001%" y="357" width="33.9731%" height="15" fill="rgb(224,227,45)" fg:x="291592" fg:w="238131"/><text x="41.8501%" y="367.50">core::fmt::float::float_to_decimal_common_exact</text></g><g><title>core::num::flt2dec::to_exact_fixed_str (169,376 samples, 24.16%)</title><rect x="51.4091%" y="341" width="24.1641%" height="15" fill="rgb(229,198,43)" fg:x="360347" fg:w="169376"/><text x="51.6591%" y="351.50">core::num::flt2dec::to_exact_fixed_str</text></g><g><title>core::ops::function::FnMut::call_mut (140,084 samples, 19.99%)</title><rect x="55.5881%" y="325" width="19.9852%" height="15" fill="rgb(206,209,35)" fg:x="389639" fg:w="140084"/><text x="55.8381%" y="335.50">core::ops::function::FnMut::cal..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (140,084 samples, 19.99%)</title><rect x="55.5881%" y="309" width="19.9852%" height="15" fill="rgb(245,195,53)" fg:x="389639" fg:w="140084"/><text x="55.8381%" y="319.50">core::num::flt2dec::strategy::g..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (71,772 samples, 10.24%)</title><rect x="65.3338%" y="293" width="10.2394%" height="15" fill="rgb(240,92,26)" fg:x="457951" fg:w="71772"/><text x="65.5838%" y="303.50">core::num::flt2..</text></g><g><title>core::num::flt2dec::strategy::grisu::max_pow10_no_more_than (2,684 samples, 0.38%)</title><rect x="75.1903%" y="277" width="0.3829%" height="15" fill="rgb(207,40,23)" fg:x="527039" fg:w="2684"/><text x="75.4403%" y="287.50"></text></g><g><title>core::fmt::run (247,555 samples, 35.32%)</title><rect x="40.2638%" y="389" width="35.3176%" height="15" fill="rgb(223,111,35)" fg:x="282225" fg:w="247555"/><text x="40.5138%" y="399.50">core::fmt::run</text></g><g><title>core::fmt::Write::write_fmt (259,127 samples, 36.97%)</title><rect x="38.9607%" y="437" width="36.9685%" height="15" fill="rgb(229,147,28)" fg:x="273091" fg:w="259127"/><text x="39.2107%" y="447.50">core::fmt::Write::write_fmt</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (259,127 samples, 36.97%)</title><rect x="38.9607%" y="421" width="36.9685%" height="15" fill="rgb(211,29,28)" fg:x="273091" fg:w="259127"/><text x="39.2107%" y="431.50">&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_..</text></g><g><title>core::fmt::write (258,415 samples, 36.87%)</title><rect x="39.0623%" y="405" width="36.8669%" height="15" fill="rgb(228,72,33)" fg:x="273803" fg:w="258415"/><text x="39.3123%" y="415.50">core::fmt::write</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,412 samples, 0.34%)</title><rect x="75.5851%" y="389" width="0.3441%" height="15" fill="rgb(205,214,31)" fg:x="529806" fg:w="2412"/><text x="75.8351%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,412 samples, 0.34%)</title><rect x="75.5851%" y="373" width="0.3441%" height="15" fill="rgb(224,111,15)" fg:x="529806" fg:w="2412"/><text x="75.8351%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (268,433 samples, 38.30%)</title><rect x="37.6357%" y="453" width="38.2961%" height="15" fill="rgb(253,21,26)" fg:x="263804" fg:w="268433"/><text x="37.8857%" y="463.50">alloc::fmt::format::format_inner</text></g><g><title>alloc::fmt::format (268,704 samples, 38.33%)</title><rect x="37.5972%" y="501" width="38.3348%" height="15" fill="rgb(245,139,43)" fg:x="263534" fg:w="268704"/><text x="37.8472%" y="511.50">alloc::fmt::format</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (268,704 samples, 38.33%)</title><rect x="37.5972%" y="485" width="38.3348%" height="15" fill="rgb(252,170,7)" fg:x="263534" fg:w="268704"/><text x="37.8472%" y="495.50">core::option::Option&lt;T&gt;::map_or_else</text></g><g><title>alloc::fmt::format::_{{closure}} (268,704 samples, 38.33%)</title><rect x="37.5972%" y="469" width="38.3348%" height="15" fill="rgb(231,118,14)" fg:x="263534" fg:w="268704"/><text x="37.8472%" y="479.50">alloc::fmt::format::_{{closure}}</text></g><g><title>core::fmt::Arguments::new_v1_formatted (1,805 samples, 0.26%)</title><rect x="75.9320%" y="501" width="0.2575%" height="15" fill="rgb(238,83,0)" fg:x="532238" fg:w="1805"/><text x="76.1820%" y="511.50"></text></g><g><title>_int_free (11,807 samples, 1.68%)</title><rect x="77.0347%" y="389" width="1.6845%" height="15" fill="rgb(221,39,39)" fg:x="539967" fg:w="11807"/><text x="77.2847%" y="399.50"></text></g><g><title>tcache_put (1,902 samples, 0.27%)</title><rect x="78.4478%" y="373" width="0.2713%" height="15" fill="rgb(222,119,46)" fg:x="549872" fg:w="1902"/><text x="78.6978%" y="383.50"></text></g><g><title>__GI___libc_free (19,620 samples, 2.80%)</title><rect x="76.2730%" y="405" width="2.7991%" height="15" fill="rgb(222,165,49)" fg:x="534628" fg:w="19620"/><text x="76.5230%" y="415.50">__..</text></g><g><title>arena_for_chunk (2,474 samples, 0.35%)</title><rect x="78.7191%" y="389" width="0.3530%" height="15" fill="rgb(219,113,52)" fg:x="551774" fg:w="2474"/><text x="78.9691%" y="399.50"></text></g><g><title>arena_for_chunk (2,095 samples, 0.30%)</title><rect x="78.7732%" y="373" width="0.2989%" height="15" fill="rgb(214,7,15)" fg:x="552153" fg:w="2095"/><text x="79.0232%" y="383.50"></text></g><g><title>heap_for_ptr (1,248 samples, 0.18%)</title><rect x="78.8941%" y="357" width="0.1780%" height="15" fill="rgb(235,32,4)" fg:x="553000" fg:w="1248"/><text x="79.1441%" y="367.50"></text></g><g><title>__rdl_dealloc (645 samples, 0.09%)</title><rect x="79.0721%" y="405" width="0.0920%" height="15" fill="rgb(238,90,54)" fg:x="554248" fg:w="645"/><text x="79.3221%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20,835 samples, 2.97%)</title><rect x="76.2729%" y="437" width="2.9724%" height="15" fill="rgb(213,208,19)" fg:x="534627" fg:w="20835"/><text x="76.5229%" y="447.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (20,835 samples, 2.97%)</title><rect x="76.2729%" y="421" width="2.9724%" height="15" fill="rgb(233,156,4)" fg:x="534627" fg:w="20835"/><text x="76.5229%" y="431.50">all..</text></g><g><title>__rust_dealloc (569 samples, 0.08%)</title><rect x="79.1641%" y="405" width="0.0812%" height="15" fill="rgb(207,194,5)" fg:x="554893" fg:w="569"/><text x="79.4141%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (21,435 samples, 3.06%)</title><rect x="76.1895%" y="501" width="3.0580%" height="15" fill="rgb(206,111,30)" fg:x="534043" fg:w="21435"/><text x="76.4395%" y="511.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (21,435 samples, 3.06%)</title><rect x="76.1895%" y="485" width="3.0580%" height="15" fill="rgb(243,70,54)" fg:x="534043" fg:w="21435"/><text x="76.4395%" y="495.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (21,435 samples, 3.06%)</title><rect x="76.1895%" y="469" width="3.0580%" height="15" fill="rgb(242,28,8)" fg:x="534043" fg:w="21435"/><text x="76.4395%" y="479.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21,435 samples, 3.06%)</title><rect x="76.1895%" y="453" width="3.0580%" height="15" fill="rgb(219,106,18)" fg:x="534043" fg:w="21435"/><text x="76.4395%" y="463.50">&lt;al..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (1,052 samples, 0.15%)</title><rect x="79.3286%" y="469" width="0.1501%" height="15" fill="rgb(244,222,10)" fg:x="556046" fg:w="1052"/><text x="79.5786%" y="479.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (1,190 samples, 0.17%)</title><rect x="79.9735%" y="453" width="0.1698%" height="15" fill="rgb(236,179,52)" fg:x="560566" fg:w="1190"/><text x="80.2235%" y="463.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (86 samples, 0.01%)</title><rect x="80.3276%" y="437" width="0.0123%" height="15" fill="rgb(213,23,39)" fg:x="563048" fg:w="86"/><text x="80.5776%" y="447.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (5,410 samples, 0.77%)</title><rect x="80.3448%" y="437" width="0.7718%" height="15" fill="rgb(238,48,10)" fg:x="563169" fg:w="5410"/><text x="80.5948%" y="447.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (7,565 samples, 1.08%)</title><rect x="80.1432%" y="453" width="1.0793%" height="15" fill="rgb(251,196,23)" fg:x="561756" fg:w="7565"/><text x="80.3932%" y="463.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (738 samples, 0.11%)</title><rect x="81.1172%" y="437" width="0.1053%" height="15" fill="rgb(250,152,24)" fg:x="568583" fg:w="738"/><text x="81.3672%" y="447.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (3,238 samples, 0.46%)</title><rect x="81.5381%" y="437" width="0.4620%" height="15" fill="rgb(209,150,17)" fg:x="571533" fg:w="3238"/><text x="81.7881%" y="447.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (918 samples, 0.13%)</title><rect x="83.6284%" y="389" width="0.1310%" height="15" fill="rgb(234,202,34)" fg:x="586185" fg:w="918"/><text x="83.8784%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (767 samples, 0.11%)</title><rect x="83.7672%" y="373" width="0.1094%" height="15" fill="rgb(253,148,53)" fg:x="587158" fg:w="767"/><text x="84.0172%" y="383.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (9,025 samples, 1.29%)</title><rect x="82.6773%" y="405" width="1.2876%" height="15" fill="rgb(218,129,16)" fg:x="579518" fg:w="9025"/><text x="82.9273%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (1,440 samples, 0.21%)</title><rect x="83.7594%" y="389" width="0.2054%" height="15" fill="rgb(216,85,19)" fg:x="587103" fg:w="1440"/><text x="84.0094%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (618 samples, 0.09%)</title><rect x="83.8767%" y="373" width="0.0882%" height="15" fill="rgb(235,228,7)" fg:x="587925" fg:w="618"/><text x="84.1267%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (11,406 samples, 1.63%)</title><rect x="82.3704%" y="421" width="1.6272%" height="15" fill="rgb(245,175,0)" fg:x="577367" fg:w="11406"/><text x="82.6204%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (223 samples, 0.03%)</title><rect x="83.9658%" y="405" width="0.0318%" height="15" fill="rgb(208,168,36)" fg:x="588550" fg:w="223"/><text x="84.2158%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (19,541 samples, 2.79%)</title><rect x="81.2225%" y="453" width="2.7878%" height="15" fill="rgb(246,171,24)" fg:x="569321" fg:w="19541"/><text x="81.4725%" y="463.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (14,091 samples, 2.01%)</title><rect x="82.0000%" y="437" width="2.0103%" height="15" fill="rgb(215,142,24)" fg:x="574771" fg:w="14091"/><text x="82.2500%" y="447.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (89 samples, 0.01%)</title><rect x="83.9976%" y="421" width="0.0127%" height="15" fill="rgb(250,187,7)" fg:x="588773" fg:w="89"/><text x="84.2476%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (33,383 samples, 4.76%)</title><rect x="79.2480%" y="501" width="4.7626%" height="15" fill="rgb(228,66,33)" fg:x="555481" fg:w="33383"/><text x="79.4980%" y="511.50">core::..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (32,821 samples, 4.68%)</title><rect x="79.3282%" y="485" width="4.6824%" height="15" fill="rgb(234,215,21)" fg:x="556043" fg:w="32821"/><text x="79.5782%" y="495.50">core:..</text></g><g><title>core::num::dec2flt::dec2flt (31,766 samples, 4.53%)</title><rect x="79.4787%" y="469" width="4.5319%" height="15" fill="rgb(222,191,20)" fg:x="557098" fg:w="31766"/><text x="79.7287%" y="479.50">core:..</text></g><g><title>one_brc::round_towards_positive (337,770 samples, 48.19%)</title><rect x="36.3906%" y="517" width="48.1881%" height="15" fill="rgb(245,79,54)" fg:x="255076" fg:w="337770"/><text x="36.6406%" y="527.50">one_brc::round_towards_positive</text></g><g><title>std::f32::&lt;impl f32&gt;::round (3,982 samples, 0.57%)</title><rect x="84.0106%" y="501" width="0.5681%" height="15" fill="rgb(240,10,37)" fg:x="588864" fg:w="3982"/><text x="84.2606%" y="511.50"></text></g><g><title>__roundf (3,979 samples, 0.57%)</title><rect x="84.0110%" y="485" width="0.5677%" height="15" fill="rgb(214,192,32)" fg:x="588867" fg:w="3979"/><text x="84.2610%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (184 samples, 0.03%)</title><rect x="85.0785%" y="485" width="0.0263%" height="15" fill="rgb(209,36,54)" fg:x="596349" fg:w="184"/><text x="85.3285%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (568 samples, 0.08%)</title><rect x="85.8497%" y="389" width="0.0810%" height="15" fill="rgb(220,10,11)" fg:x="601755" fg:w="568"/><text x="86.0997%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,077 samples, 0.15%)</title><rect x="85.9308%" y="389" width="0.1537%" height="15" fill="rgb(221,106,17)" fg:x="602323" fg:w="1077"/><text x="86.1808%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,615 samples, 0.52%)</title><rect x="85.7022%" y="405" width="0.5157%" height="15" fill="rgb(251,142,44)" fg:x="600721" fg:w="3615"/><text x="85.9522%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (936 samples, 0.13%)</title><rect x="86.0844%" y="389" width="0.1335%" height="15" fill="rgb(238,13,15)" fg:x="603400" fg:w="936"/><text x="86.3344%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,678 samples, 0.52%)</title><rect x="86.5773%" y="389" width="0.5247%" height="15" fill="rgb(208,107,27)" fg:x="606855" fg:w="3678"/><text x="86.8273%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8,966 samples, 1.28%)</title><rect x="86.2179%" y="405" width="1.2791%" height="15" fill="rgb(205,136,37)" fg:x="604336" fg:w="8966"/><text x="86.4679%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,769 samples, 0.40%)</title><rect x="87.1020%" y="389" width="0.3950%" height="15" fill="rgb(250,205,27)" fg:x="610533" fg:w="2769"/><text x="87.3520%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16,120 samples, 2.30%)</title><rect x="85.1979%" y="421" width="2.2998%" height="15" fill="rgb(210,80,43)" fg:x="597186" fg:w="16120"/><text x="85.4479%" y="431.50">&lt;..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (16,324 samples, 2.33%)</title><rect x="85.1979%" y="453" width="2.3289%" height="15" fill="rgb(247,160,36)" fg:x="597186" fg:w="16324"/><text x="85.4479%" y="463.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16,324 samples, 2.33%)</title><rect x="85.1979%" y="437" width="2.3289%" height="15" fill="rgb(234,13,49)" fg:x="597186" fg:w="16324"/><text x="85.4479%" y="447.50">&lt;..</text></g><g><title>core::hash::BuildHasher::hash_one (204 samples, 0.03%)</title><rect x="87.4976%" y="421" width="0.0291%" height="15" fill="rgb(234,122,0)" fg:x="613306" fg:w="204"/><text x="87.7476%" y="431.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,669 samples, 0.38%)</title><rect x="87.5267%" y="453" width="0.3808%" height="15" fill="rgb(207,146,38)" fg:x="613510" fg:w="2669"/><text x="87.7767%" y="463.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,596 samples, 0.23%)</title><rect x="87.6798%" y="437" width="0.2277%" height="15" fill="rgb(207,177,25)" fg:x="614583" fg:w="1596"/><text x="87.9298%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,596 samples, 0.23%)</title><rect x="87.6798%" y="421" width="0.2277%" height="15" fill="rgb(211,178,42)" fg:x="614583" fg:w="1596"/><text x="87.9298%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1,596 samples, 0.23%)</title><rect x="87.6798%" y="405" width="0.2277%" height="15" fill="rgb(230,69,54)" fg:x="614583" fg:w="1596"/><text x="87.9298%" y="415.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.17249171743105015606 (72 samples, 0.01%)</title><rect x="88.8243%" y="325" width="0.0103%" height="15" fill="rgb(214,135,41)" fg:x="622605" fg:w="72"/><text x="89.0743%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (554 samples, 0.08%)</title><rect x="88.8346%" y="325" width="0.0790%" height="15" fill="rgb(237,67,25)" fg:x="622677" fg:w="554"/><text x="89.0846%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,287 samples, 0.33%)</title><rect x="88.7052%" y="341" width="0.3263%" height="15" fill="rgb(222,189,50)" fg:x="621770" fg:w="2287"/><text x="88.9552%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (826 samples, 0.12%)</title><rect x="88.9136%" y="325" width="0.1178%" height="15" fill="rgb(245,148,34)" fg:x="623231" fg:w="826"/><text x="89.1636%" y="335.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.17249171743105015606 (793 samples, 0.11%)</title><rect x="89.0349%" y="341" width="0.1131%" height="15" fill="rgb(222,29,6)" fg:x="624081" fg:w="793"/><text x="89.2849%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (10,544 samples, 1.50%)</title><rect x="89.1480%" y="341" width="1.5043%" height="15" fill="rgb(221,189,43)" fg:x="624874" fg:w="10544"/><text x="89.3980%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,808 samples, 0.26%)</title><rect x="90.3943%" y="325" width="0.2579%" height="15" fill="rgb(207,36,27)" fg:x="633610" fg:w="1808"/><text x="90.6443%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18,805 samples, 2.68%)</title><rect x="88.0344%" y="357" width="2.6828%" height="15" fill="rgb(217,90,24)" fg:x="617068" fg:w="18805"/><text x="88.2844%" y="367.50">&lt;c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (455 samples, 0.06%)</title><rect x="90.6523%" y="341" width="0.0649%" height="15" fill="rgb(224,66,35)" fg:x="635418" fg:w="455"/><text x="90.9023%" y="351.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.17249171743105015606 (3,907 samples, 0.56%)</title><rect x="90.7172%" y="357" width="0.5574%" height="15" fill="rgb(221,13,50)" fg:x="635873" fg:w="3907"/><text x="90.9672%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (168 samples, 0.02%)</title><rect x="92.1200%" y="309" width="0.0240%" height="15" fill="rgb(236,68,49)" fg:x="645706" fg:w="168"/><text x="92.3700%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (769 samples, 0.11%)</title><rect x="92.0657%" y="325" width="0.1097%" height="15" fill="rgb(229,146,28)" fg:x="645325" fg:w="769"/><text x="92.3157%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (220 samples, 0.03%)</title><rect x="92.1440%" y="309" width="0.0314%" height="15" fill="rgb(225,31,38)" fg:x="645874" fg:w="220"/><text x="92.3940%" y="319.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.17249171743105015606 (101 samples, 0.01%)</title><rect x="92.1799%" y="325" width="0.0144%" height="15" fill="rgb(250,208,3)" fg:x="646126" fg:w="101"/><text x="92.4299%" y="335.50"></text></g><g><title>core::cmp::min (402 samples, 0.06%)</title><rect x="92.1943%" y="325" width="0.0574%" height="15" fill="rgb(246,54,23)" fg:x="646227" fg:w="402"/><text x="92.4443%" y="335.50"></text></g><g><title>core::cmp::Ord::min (402 samples, 0.06%)</title><rect x="92.1943%" y="309" width="0.0574%" height="15" fill="rgb(243,76,11)" fg:x="646227" fg:w="402"/><text x="92.4443%" y="319.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.17249171743105015606 (402 samples, 0.06%)</title><rect x="92.1943%" y="293" width="0.0574%" height="15" fill="rgb(245,21,50)" fg:x="646227" fg:w="402"/><text x="92.4443%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,901 samples, 1.41%)</title><rect x="91.4609%" y="341" width="1.4125%" height="15" fill="rgb(228,9,43)" fg:x="641086" fg:w="9901"/><text x="91.7109%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (4,358 samples, 0.62%)</title><rect x="92.2517%" y="325" width="0.6217%" height="15" fill="rgb(208,100,47)" fg:x="646629" fg:w="4358"/><text x="92.5017%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (54,950 samples, 7.84%)</title><rect x="85.1047%" y="485" width="7.8395%" height="15" fill="rgb(232,26,8)" fg:x="596533" fg:w="54950"/><text x="85.3547%" y="495.50">hashbrown::..</text></g><g><title>core::hash::BuildHasher::hash_one (54,948 samples, 7.84%)</title><rect x="85.1050%" y="469" width="7.8392%" height="15" fill="rgb(216,166,38)" fg:x="596535" fg:w="54948"/><text x="85.3550%" y="479.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (35,255 samples, 5.03%)</title><rect x="87.9145%" y="453" width="5.0297%" height="15" fill="rgb(251,202,51)" fg:x="616228" fg:w="35255"/><text x="88.1645%" y="463.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (34,587 samples, 4.93%)</title><rect x="88.0098%" y="437" width="4.9344%" height="15" fill="rgb(254,216,34)" fg:x="616896" fg:w="34587"/><text x="88.2598%" y="447.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (34,587 samples, 4.93%)</title><rect x="88.0098%" y="421" width="4.9344%" height="15" fill="rgb(251,32,27)" fg:x="616896" fg:w="34587"/><text x="88.2598%" y="431.50">core::..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (34,587 samples, 4.93%)</title><rect x="88.0098%" y="405" width="4.9344%" height="15" fill="rgb(208,127,28)" fg:x="616896" fg:w="34587"/><text x="88.2598%" y="415.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (34,587 samples, 4.93%)</title><rect x="88.0098%" y="389" width="4.9344%" height="15" fill="rgb(224,137,22)" fg:x="616896" fg:w="34587"/><text x="88.2598%" y="399.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (34,587 samples, 4.93%)</title><rect x="88.0098%" y="373" width="4.9344%" height="15" fill="rgb(254,70,32)" fg:x="616896" fg:w="34587"/><text x="88.2598%" y="383.50">&lt;core:..</text></g><g><title>core::hash::Hasher::write_u8 (11,703 samples, 1.67%)</title><rect x="91.2746%" y="357" width="1.6696%" height="15" fill="rgb(229,75,37)" fg:x="639780" fg:w="11703"/><text x="91.5246%" y="367.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.17249171743105015606 (488 samples, 0.07%)</title><rect x="92.8746%" y="341" width="0.0696%" height="15" fill="rgb(252,64,23)" fg:x="650995" fg:w="488"/><text x="93.1246%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (788 samples, 0.11%)</title><rect x="93.1961%" y="453" width="0.1124%" height="15" fill="rgb(232,162,48)" fg:x="653249" fg:w="788"/><text x="93.4461%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (190 samples, 0.03%)</title><rect x="93.2815%" y="437" width="0.0271%" height="15" fill="rgb(246,160,12)" fg:x="653847" fg:w="190"/><text x="93.5315%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (755 samples, 0.11%)</title><rect x="93.5538%" y="437" width="0.1077%" height="15" fill="rgb(247,166,0)" fg:x="655756" fg:w="755"/><text x="93.8038%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (755 samples, 0.11%)</title><rect x="93.5538%" y="421" width="0.1077%" height="15" fill="rgb(249,219,21)" fg:x="655756" fg:w="755"/><text x="93.8038%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (755 samples, 0.11%)</title><rect x="93.5538%" y="405" width="0.1077%" height="15" fill="rgb(205,209,3)" fg:x="655756" fg:w="755"/><text x="93.8038%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (755 samples, 0.11%)</title><rect x="93.5538%" y="389" width="0.1077%" height="15" fill="rgb(243,44,1)" fg:x="655756" fg:w="755"/><text x="93.8038%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (22,972 samples, 3.28%)</title><rect x="93.3087%" y="453" width="3.2773%" height="15" fill="rgb(206,159,16)" fg:x="654038" fg:w="22972"/><text x="93.5587%" y="463.50">has..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (20,499 samples, 2.92%)</title><rect x="93.6615%" y="437" width="2.9245%" height="15" fill="rgb(244,77,30)" fg:x="656511" fg:w="20499"/><text x="93.9115%" y="447.50">ha..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20,499 samples, 2.92%)</title><rect x="93.6615%" y="421" width="2.9245%" height="15" fill="rgb(218,69,12)" fg:x="656511" fg:w="20499"/><text x="93.9115%" y="431.50">co..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (20,499 samples, 2.92%)</title><rect x="93.6615%" y="405" width="2.9245%" height="15" fill="rgb(212,87,7)" fg:x="656511" fg:w="20499"/><text x="93.9115%" y="415.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20,499 samples, 2.92%)</title><rect x="93.6615%" y="389" width="2.9245%" height="15" fill="rgb(245,114,25)" fg:x="656511" fg:w="20499"/><text x="93.9115%" y="399.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (20,499 samples, 2.92%)</title><rect x="93.6615%" y="373" width="2.9245%" height="15" fill="rgb(210,61,42)" fg:x="656511" fg:w="20499"/><text x="93.9115%" y="383.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (20,499 samples, 2.92%)</title><rect x="93.6615%" y="357" width="2.9245%" height="15" fill="rgb(211,52,33)" fg:x="656511" fg:w="20499"/><text x="93.9115%" y="367.50">&lt;[..</text></g><g><title>__memcmp_evex_movbe (10,465 samples, 1.49%)</title><rect x="95.0930%" y="341" width="1.4930%" height="15" fill="rgb(234,58,33)" fg:x="666545" fg:w="10465"/><text x="95.3430%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (2,401 samples, 0.34%)</title><rect x="96.5860%" y="453" width="0.3425%" height="15" fill="rgb(220,115,36)" fg:x="677010" fg:w="2401"/><text x="96.8360%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,169 samples, 0.88%)</title><rect x="96.9286%" y="421" width="0.8801%" height="15" fill="rgb(243,153,54)" fg:x="679411" fg:w="6169"/><text x="97.1786%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6,414 samples, 0.92%)</title><rect x="96.9286%" y="453" width="0.9151%" height="15" fill="rgb(251,47,18)" fg:x="679411" fg:w="6414"/><text x="97.1786%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6,414 samples, 0.92%)</title><rect x="96.9286%" y="437" width="0.9151%" height="15" fill="rgb(242,102,42)" fg:x="679411" fg:w="6414"/><text x="97.1786%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (245 samples, 0.03%)</title><rect x="97.8087%" y="421" width="0.0350%" height="15" fill="rgb(234,31,38)" fg:x="685580" fg:w="245"/><text x="98.0587%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,361 samples, 0.34%)</title><rect x="97.8436%" y="453" width="0.3368%" height="15" fill="rgb(221,117,51)" fg:x="685825" fg:w="2361"/><text x="98.0936%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,361 samples, 0.34%)</title><rect x="97.8436%" y="437" width="0.3368%" height="15" fill="rgb(212,20,18)" fg:x="685825" fg:w="2361"/><text x="98.0936%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (35,316 samples, 5.04%)</title><rect x="93.1424%" y="469" width="5.0384%" height="15" fill="rgb(245,133,36)" fg:x="652872" fg:w="35316"/><text x="93.3924%" y="479.50">hashbr..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (94,755 samples, 13.52%)</title><rect x="84.6666%" y="501" width="13.5183%" height="15" fill="rgb(212,6,19)" fg:x="593462" fg:w="94755"/><text x="84.9166%" y="511.50">hashbrown::rustc_ent..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (36,734 samples, 5.24%)</title><rect x="92.9442%" y="485" width="5.2407%" height="15" fill="rgb(218,1,36)" fg:x="651483" fg:w="36734"/><text x="93.1942%" y="495.50">hashbr..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (549,414 samples, 78.38%)</title><rect x="19.8927%" y="581" width="78.3825%" height="15" fill="rgb(246,84,54)" fg:x="139436" fg:w="549414"/><text x="20.1427%" y="591.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (549,414 samples, 78.38%)</title><rect x="19.8927%" y="565" width="78.3825%" height="15" fill="rgb(242,110,6)" fg:x="139436" fg:w="549414"/><text x="20.1427%" y="575.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (502,820 samples, 71.74%)</title><rect x="26.5401%" y="549" width="71.7351%" height="15" fill="rgb(214,47,5)" fg:x="186030" fg:w="502820"/><text x="26.7901%" y="559.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>one_brc::process_lines::_{{closure}} (502,820 samples, 71.74%)</title><rect x="26.5401%" y="533" width="71.7351%" height="15" fill="rgb(218,159,25)" fg:x="186030" fg:w="502820"/><text x="26.7901%" y="543.50">one_brc::process_lines::_{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (95,996 samples, 13.70%)</title><rect x="84.5798%" y="517" width="13.6953%" height="15" fill="rgb(215,211,28)" fg:x="592854" fg:w="95996"/><text x="84.8298%" y="527.50">std::collections::has..</text></g><g><title>std::collections::hash::map::map_entry (633 samples, 0.09%)</title><rect x="98.1849%" y="501" width="0.0903%" height="15" fill="rgb(238,59,32)" fg:x="688217" fg:w="633"/><text x="98.4349%" y="511.50"></text></g><g><title>std::panic::catch_unwind (549,416 samples, 78.38%)</title><rect x="19.8927%" y="709" width="78.3827%" height="15" fill="rgb(226,82,3)" fg:x="139436" fg:w="549416"/><text x="20.1427%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (549,416 samples, 78.38%)</title><rect x="19.8927%" y="693" width="78.3827%" height="15" fill="rgb(240,164,32)" fg:x="139436" fg:w="549416"/><text x="20.1427%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (549,416 samples, 78.38%)</title><rect x="19.8927%" y="677" width="78.3827%" height="15" fill="rgb(232,46,7)" fg:x="139436" fg:w="549416"/><text x="20.1427%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (549,416 samples, 78.38%)</title><rect x="19.8927%" y="661" width="78.3827%" height="15" fill="rgb(229,129,53)" fg:x="139436" fg:w="549416"/><text x="20.1427%" y="671.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (549,416 samples, 78.38%)</title><rect x="19.8927%" y="645" width="78.3827%" height="15" fill="rgb(234,188,29)" fg:x="139436" fg:w="549416"/><text x="20.1427%" y="655.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (549,416 samples, 78.38%)</title><rect x="19.8927%" y="629" width="78.3827%" height="15" fill="rgb(246,141,4)" fg:x="139436" fg:w="549416"/><text x="20.1427%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (549,416 samples, 78.38%)</title><rect x="19.8927%" y="613" width="78.3827%" height="15" fill="rgb(229,23,39)" fg:x="139436" fg:w="549416"/><text x="20.1427%" y="623.50">one_brc::main::_{{closure}}::_{{closure}}</text></g><g><title>one_brc::process_lines (549,416 samples, 78.38%)</title><rect x="19.8927%" y="597" width="78.3827%" height="15" fill="rgb(206,12,3)" fg:x="139436" fg:w="549416"/><text x="20.1427%" y="607.50">one_brc::process_lines</text></g><g><title>__clone3 (549,426 samples, 78.38%)</title><rect x="19.8923%" y="789" width="78.3842%" height="15" fill="rgb(252,226,20)" fg:x="139433" fg:w="549426"/><text x="20.1423%" y="799.50">__clone3</text></g><g><title>start_thread (549,424 samples, 78.38%)</title><rect x="19.8926%" y="773" width="78.3839%" height="15" fill="rgb(216,123,35)" fg:x="139435" fg:w="549424"/><text x="20.1426%" y="783.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (549,423 samples, 78.38%)</title><rect x="19.8927%" y="757" width="78.3837%" height="15" fill="rgb(212,68,40)" fg:x="139436" fg:w="549423"/><text x="20.1427%" y="767.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (549,423 samples, 78.38%)</title><rect x="19.8927%" y="741" width="78.3837%" height="15" fill="rgb(254,125,32)" fg:x="139436" fg:w="549423"/><text x="20.1427%" y="751.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (549,423 samples, 78.38%)</title><rect x="19.8927%" y="725" width="78.3837%" height="15" fill="rgb(253,97,22)" fg:x="139436" fg:w="549423"/><text x="20.1427%" y="735.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string::_{{closure}} (8,204 samples, 1.17%)</title><rect x="98.2767%" y="613" width="1.1704%" height="15" fill="rgb(241,101,14)" fg:x="688861" fg:w="8204"/><text x="98.5267%" y="623.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (8,204 samples, 1.17%)</title><rect x="98.2767%" y="597" width="1.1704%" height="15" fill="rgb(238,103,29)" fg:x="688861" fg:w="8204"/><text x="98.5267%" y="607.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (8,204 samples, 1.17%)</title><rect x="98.2767%" y="581" width="1.1704%" height="15" fill="rgb(233,195,47)" fg:x="688861" fg:w="8204"/><text x="98.5267%" y="591.50"></text></g><g><title>std::io::default_read_to_end (8,204 samples, 1.17%)</title><rect x="98.2767%" y="565" width="1.1704%" height="15" fill="rgb(246,218,30)" fg:x="688861" fg:w="8204"/><text x="98.5267%" y="575.50"></text></g><g><title>__GI___libc_read (8,204 samples, 1.17%)</title><rect x="98.2767%" y="549" width="1.1704%" height="15" fill="rgb(219,145,47)" fg:x="688861" fg:w="8204"/><text x="98.5267%" y="559.50"></text></g><g><title>[unknown] (8,204 samples, 1.17%)</title><rect x="98.2767%" y="533" width="1.1704%" height="15" fill="rgb(243,12,26)" fg:x="688861" fg:w="8204"/><text x="98.5267%" y="543.50"></text></g><g><title>[unknown] (8,202 samples, 1.17%)</title><rect x="98.2770%" y="517" width="1.1701%" height="15" fill="rgb(214,87,16)" fg:x="688863" fg:w="8202"/><text x="98.5270%" y="527.50"></text></g><g><title>[unknown] (8,202 samples, 1.17%)</title><rect x="98.2770%" y="501" width="1.1701%" height="15" fill="rgb(208,99,42)" fg:x="688863" fg:w="8202"/><text x="98.5270%" y="511.50"></text></g><g><title>[unknown] (8,202 samples, 1.17%)</title><rect x="98.2770%" y="485" width="1.1701%" height="15" fill="rgb(253,99,2)" fg:x="688863" fg:w="8202"/><text x="98.5270%" y="495.50"></text></g><g><title>[unknown] (8,202 samples, 1.17%)</title><rect x="98.2770%" y="469" width="1.1701%" height="15" fill="rgb(220,168,23)" fg:x="688863" fg:w="8202"/><text x="98.5270%" y="479.50"></text></g><g><title>[unknown] (8,202 samples, 1.17%)</title><rect x="98.2770%" y="453" width="1.1701%" height="15" fill="rgb(242,38,24)" fg:x="688863" fg:w="8202"/><text x="98.5270%" y="463.50"></text></g><g><title>[unknown] (8,202 samples, 1.17%)</title><rect x="98.2770%" y="437" width="1.1701%" height="15" fill="rgb(225,182,9)" fg:x="688863" fg:w="8202"/><text x="98.5270%" y="447.50"></text></g><g><title>[unknown] (8,202 samples, 1.17%)</title><rect x="98.2770%" y="421" width="1.1701%" height="15" fill="rgb(243,178,37)" fg:x="688863" fg:w="8202"/><text x="98.5270%" y="431.50"></text></g><g><title>[unknown] (8,125 samples, 1.16%)</title><rect x="98.2880%" y="405" width="1.1592%" height="15" fill="rgb(232,139,19)" fg:x="688940" fg:w="8125"/><text x="98.5380%" y="415.50"></text></g><g><title>[unknown] (8,085 samples, 1.15%)</title><rect x="98.2937%" y="389" width="1.1535%" height="15" fill="rgb(225,201,24)" fg:x="688980" fg:w="8085"/><text x="98.5437%" y="399.50"></text></g><g><title>[unknown] (7,916 samples, 1.13%)</title><rect x="98.3178%" y="373" width="1.1293%" height="15" fill="rgb(221,47,46)" fg:x="689149" fg:w="7916"/><text x="98.5678%" y="383.50"></text></g><g><title>[unknown] (4,070 samples, 0.58%)</title><rect x="98.8665%" y="357" width="0.5806%" height="15" fill="rgb(249,23,13)" fg:x="692995" fg:w="4070"/><text x="99.1165%" y="367.50"></text></g><g><title>[unknown] (4,069 samples, 0.58%)</title><rect x="98.8667%" y="341" width="0.5805%" height="15" fill="rgb(219,9,5)" fg:x="692996" fg:w="4069"/><text x="99.1167%" y="351.50"></text></g><g><title>[unknown] (4,023 samples, 0.57%)</title><rect x="98.8732%" y="325" width="0.5739%" height="15" fill="rgb(254,171,16)" fg:x="693042" fg:w="4023"/><text x="99.1232%" y="335.50"></text></g><g><title>[unknown] (3,948 samples, 0.56%)</title><rect x="98.8839%" y="309" width="0.5632%" height="15" fill="rgb(230,171,20)" fg:x="693117" fg:w="3948"/><text x="99.1339%" y="319.50"></text></g><g><title>[unknown] (3,765 samples, 0.54%)</title><rect x="98.9100%" y="293" width="0.5371%" height="15" fill="rgb(210,71,41)" fg:x="693300" fg:w="3765"/><text x="99.1600%" y="303.50"></text></g><g><title>[unknown] (3,592 samples, 0.51%)</title><rect x="98.9347%" y="277" width="0.5125%" height="15" fill="rgb(206,173,20)" fg:x="693473" fg:w="3592"/><text x="99.1847%" y="287.50"></text></g><g><title>[unknown] (3,496 samples, 0.50%)</title><rect x="98.9484%" y="261" width="0.4988%" height="15" fill="rgb(233,88,34)" fg:x="693569" fg:w="3496"/><text x="99.1984%" y="271.50"></text></g><g><title>[unknown] (3,289 samples, 0.47%)</title><rect x="98.9779%" y="245" width="0.4692%" height="15" fill="rgb(223,209,46)" fg:x="693776" fg:w="3289"/><text x="99.2279%" y="255.50"></text></g><g><title>[unknown] (2,781 samples, 0.40%)</title><rect x="99.0504%" y="229" width="0.3968%" height="15" fill="rgb(250,43,18)" fg:x="694284" fg:w="2781"/><text x="99.3004%" y="239.50"></text></g><g><title>[unknown] (1,593 samples, 0.23%)</title><rect x="99.2199%" y="213" width="0.2273%" height="15" fill="rgb(208,13,10)" fg:x="695472" fg:w="1593"/><text x="99.4699%" y="223.50"></text></g><g><title>[unknown] (986 samples, 0.14%)</title><rect x="99.3065%" y="197" width="0.1407%" height="15" fill="rgb(212,200,36)" fg:x="696079" fg:w="986"/><text x="99.5565%" y="207.50"></text></g><g><title>[unknown] (601 samples, 0.09%)</title><rect x="99.3614%" y="181" width="0.0857%" height="15" fill="rgb(225,90,30)" fg:x="696464" fg:w="601"/><text x="99.6114%" y="191.50"></text></g><g><title>[unknown] (232 samples, 0.03%)</title><rect x="99.4141%" y="165" width="0.0331%" height="15" fill="rgb(236,182,39)" fg:x="696833" fg:w="232"/><text x="99.6641%" y="175.50"></text></g><g><title>[unknown] (169 samples, 0.02%)</title><rect x="99.4231%" y="149" width="0.0241%" height="15" fill="rgb(212,144,35)" fg:x="696896" fg:w="169"/><text x="99.6731%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (97 samples, 0.01%)</title><rect x="99.8906%" y="581" width="0.0138%" height="15" fill="rgb(228,63,44)" fg:x="700173" fg:w="97"/><text x="100.1406%" y="591.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string (11,575 samples, 1.65%)</title><rect x="98.2767%" y="645" width="1.6514%" height="15" fill="rgb(228,109,6)" fg:x="688861" fg:w="11575"/><text x="98.5267%" y="655.50"></text></g><g><title>std::io::append_to_string (11,575 samples, 1.65%)</title><rect x="98.2767%" y="629" width="1.6514%" height="15" fill="rgb(238,117,24)" fg:x="688861" fg:w="11575"/><text x="98.5267%" y="639.50"></text></g><g><title>core::str::converts::from_utf8 (3,371 samples, 0.48%)</title><rect x="99.4472%" y="613" width="0.4809%" height="15" fill="rgb(242,26,26)" fg:x="697065" fg:w="3371"/><text x="99.6972%" y="623.50"></text></g><g><title>core::str::validations::run_utf8_validation (3,371 samples, 0.48%)</title><rect x="99.4472%" y="597" width="0.4809%" height="15" fill="rgb(221,92,48)" fg:x="697065" fg:w="3371"/><text x="99.6972%" y="607.50"></text></g><g><title>core::str::validations::utf8_char_width (166 samples, 0.02%)</title><rect x="99.9044%" y="581" width="0.0237%" height="15" fill="rgb(209,209,32)" fg:x="700270" fg:w="166"/><text x="100.1544%" y="591.50"></text></g><g><title>__libc_start_main_impl (11,580 samples, 1.65%)</title><rect x="98.2765%" y="773" width="1.6521%" height="15" fill="rgb(221,70,22)" fg:x="688859" fg:w="11580"/><text x="98.5265%" y="783.50"></text></g><g><title>__libc_start_call_main (11,580 samples, 1.65%)</title><rect x="98.2765%" y="757" width="1.6521%" height="15" fill="rgb(248,145,5)" fg:x="688859" fg:w="11580"/><text x="98.5265%" y="767.50"></text></g><g><title>main (11,580 samples, 1.65%)</title><rect x="98.2765%" y="741" width="1.6521%" height="15" fill="rgb(226,116,26)" fg:x="688859" fg:w="11580"/><text x="98.5265%" y="751.50"></text></g><g><title>std::rt::lang_start_internal (11,580 samples, 1.65%)</title><rect x="98.2765%" y="725" width="1.6521%" height="15" fill="rgb(244,5,17)" fg:x="688859" fg:w="11580"/><text x="98.5265%" y="735.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11,580 samples, 1.65%)</title><rect x="98.2765%" y="709" width="1.6521%" height="15" fill="rgb(252,159,33)" fg:x="688859" fg:w="11580"/><text x="98.5265%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11,580 samples, 1.65%)</title><rect x="98.2765%" y="693" width="1.6521%" height="15" fill="rgb(206,71,0)" fg:x="688859" fg:w="11580"/><text x="98.5265%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once (11,580 samples, 1.65%)</title><rect x="98.2765%" y="677" width="1.6521%" height="15" fill="rgb(233,118,54)" fg:x="688859" fg:w="11580"/><text x="98.5265%" y="687.50"></text></g><g><title>one_brc::main (11,580 samples, 1.65%)</title><rect x="98.2765%" y="661" width="1.6521%" height="15" fill="rgb(234,83,48)" fg:x="688859" fg:w="11580"/><text x="98.5265%" y="671.50"></text></g><g><title>_start (11,581 samples, 1.65%)</title><rect x="98.2765%" y="789" width="1.6522%" height="15" fill="rgb(228,3,54)" fg:x="688859" fg:w="11581"/><text x="98.5265%" y="799.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (353 samples, 0.05%)</title><rect x="99.9374%" y="789" width="0.0504%" height="15" fill="rgb(226,155,13)" fg:x="700501" fg:w="353"/><text x="100.1874%" y="799.50"></text></g><g><title>one-brc (700,934 samples, 100.00%)</title><rect x="0.0000%" y="805" width="99.9991%" height="15" fill="rgb(241,28,37)" fg:x="0" fg:w="700934"/><text x="0.2500%" y="815.50">one-brc</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (72 samples, 0.01%)</title><rect x="99.9889%" y="789" width="0.0103%" height="15" fill="rgb(233,93,10)" fg:x="700862" fg:w="72"/><text x="100.2389%" y="799.50"></text></g><g><title>all (700,940 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(225,113,19)" fg:x="0" fg:w="700940"/><text x="0.2500%" y="831.50"></text></g></svg></svg>