<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="725410"><g><title>[unknown] (921 samples, 0.13%)</title><rect x="0.0933%" y="613" width="0.1270%" height="15" fill="rgb(227,0,7)" fg:x="677" fg:w="921"/><text x="0.3433%" y="623.50"></text></g><g><title>[unknown] (921 samples, 0.13%)</title><rect x="0.0933%" y="597" width="0.1270%" height="15" fill="rgb(217,0,24)" fg:x="677" fg:w="921"/><text x="0.3433%" y="607.50"></text></g><g><title>[unknown] (919 samples, 0.13%)</title><rect x="0.0936%" y="581" width="0.1267%" height="15" fill="rgb(221,193,54)" fg:x="679" fg:w="919"/><text x="0.3436%" y="591.50"></text></g><g><title>[unknown] (916 samples, 0.13%)</title><rect x="0.0940%" y="565" width="0.1263%" height="15" fill="rgb(248,212,6)" fg:x="682" fg:w="916"/><text x="0.3440%" y="575.50"></text></g><g><title>[unknown] (914 samples, 0.13%)</title><rect x="0.0943%" y="549" width="0.1260%" height="15" fill="rgb(208,68,35)" fg:x="684" fg:w="914"/><text x="0.3443%" y="559.50"></text></g><g><title>[unknown] (914 samples, 0.13%)</title><rect x="0.0943%" y="533" width="0.1260%" height="15" fill="rgb(232,128,0)" fg:x="684" fg:w="914"/><text x="0.3443%" y="543.50"></text></g><g><title>[unknown] (914 samples, 0.13%)</title><rect x="0.0943%" y="517" width="0.1260%" height="15" fill="rgb(207,160,47)" fg:x="684" fg:w="914"/><text x="0.3443%" y="527.50"></text></g><g><title>[unknown] (914 samples, 0.13%)</title><rect x="0.0943%" y="501" width="0.1260%" height="15" fill="rgb(228,23,34)" fg:x="684" fg:w="914"/><text x="0.3443%" y="511.50"></text></g><g><title>[unknown] (851 samples, 0.12%)</title><rect x="0.1030%" y="485" width="0.1173%" height="15" fill="rgb(218,30,26)" fg:x="747" fg:w="851"/><text x="0.3530%" y="495.50"></text></g><g><title>[unknown] (850 samples, 0.12%)</title><rect x="0.1031%" y="469" width="0.1172%" height="15" fill="rgb(220,122,19)" fg:x="748" fg:w="850"/><text x="0.3531%" y="479.50"></text></g><g><title>[unknown] (850 samples, 0.12%)</title><rect x="0.1031%" y="453" width="0.1172%" height="15" fill="rgb(250,228,42)" fg:x="748" fg:w="850"/><text x="0.3531%" y="463.50"></text></g><g><title>[unknown] (850 samples, 0.12%)</title><rect x="0.1031%" y="437" width="0.1172%" height="15" fill="rgb(240,193,28)" fg:x="748" fg:w="850"/><text x="0.3531%" y="447.50"></text></g><g><title>[unknown] (850 samples, 0.12%)</title><rect x="0.1031%" y="421" width="0.1172%" height="15" fill="rgb(216,20,37)" fg:x="748" fg:w="850"/><text x="0.3531%" y="431.50"></text></g><g><title>[unknown] (672 samples, 0.09%)</title><rect x="0.1277%" y="405" width="0.0926%" height="15" fill="rgb(206,188,39)" fg:x="926" fg:w="672"/><text x="0.3777%" y="415.50"></text></g><g><title>[unknown] (621 samples, 0.09%)</title><rect x="0.1347%" y="389" width="0.0856%" height="15" fill="rgb(217,207,13)" fg:x="977" fg:w="621"/><text x="0.3847%" y="399.50"></text></g><g><title>[unknown] (604 samples, 0.08%)</title><rect x="0.1370%" y="373" width="0.0833%" height="15" fill="rgb(231,73,38)" fg:x="994" fg:w="604"/><text x="0.3870%" y="383.50"></text></g><g><title>[unknown] (557 samples, 0.08%)</title><rect x="0.1435%" y="357" width="0.0768%" height="15" fill="rgb(225,20,46)" fg:x="1041" fg:w="557"/><text x="0.3935%" y="367.50"></text></g><g><title>[unknown] (464 samples, 0.06%)</title><rect x="0.1563%" y="341" width="0.0640%" height="15" fill="rgb(210,31,41)" fg:x="1134" fg:w="464"/><text x="0.4063%" y="351.50"></text></g><g><title>[unknown] (350 samples, 0.05%)</title><rect x="0.1720%" y="325" width="0.0482%" height="15" fill="rgb(221,200,47)" fg:x="1248" fg:w="350"/><text x="0.4220%" y="335.50"></text></g><g><title>[unknown] (252 samples, 0.03%)</title><rect x="0.1856%" y="309" width="0.0347%" height="15" fill="rgb(226,26,5)" fg:x="1346" fg:w="252"/><text x="0.4356%" y="319.50"></text></g><g><title>[unknown] (212 samples, 0.03%)</title><rect x="0.1911%" y="293" width="0.0292%" height="15" fill="rgb(249,33,26)" fg:x="1386" fg:w="212"/><text x="0.4411%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (268 samples, 0.04%)</title><rect x="0.2206%" y="421" width="0.0369%" height="15" fill="rgb(235,183,28)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="431.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (268 samples, 0.04%)</title><rect x="0.2206%" y="405" width="0.0369%" height="15" fill="rgb(221,5,38)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (268 samples, 0.04%)</title><rect x="0.2206%" y="389" width="0.0369%" height="15" fill="rgb(247,18,42)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="399.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (268 samples, 0.04%)</title><rect x="0.2206%" y="373" width="0.0369%" height="15" fill="rgb(241,131,45)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="383.50"></text></g><g><title>__GI___libc_read (268 samples, 0.04%)</title><rect x="0.2206%" y="357" width="0.0369%" height="15" fill="rgb(249,31,29)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="367.50"></text></g><g><title>[unknown] (268 samples, 0.04%)</title><rect x="0.2206%" y="341" width="0.0369%" height="15" fill="rgb(225,111,53)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="351.50"></text></g><g><title>[unknown] (268 samples, 0.04%)</title><rect x="0.2206%" y="325" width="0.0369%" height="15" fill="rgb(238,160,17)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="335.50"></text></g><g><title>[unknown] (268 samples, 0.04%)</title><rect x="0.2206%" y="309" width="0.0369%" height="15" fill="rgb(214,148,48)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="319.50"></text></g><g><title>[unknown] (268 samples, 0.04%)</title><rect x="0.2206%" y="293" width="0.0369%" height="15" fill="rgb(232,36,49)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="303.50"></text></g><g><title>[unknown] (268 samples, 0.04%)</title><rect x="0.2206%" y="277" width="0.0369%" height="15" fill="rgb(209,103,24)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="287.50"></text></g><g><title>[unknown] (268 samples, 0.04%)</title><rect x="0.2206%" y="261" width="0.0369%" height="15" fill="rgb(229,88,8)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="271.50"></text></g><g><title>[unknown] (268 samples, 0.04%)</title><rect x="0.2206%" y="245" width="0.0369%" height="15" fill="rgb(213,181,19)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="255.50"></text></g><g><title>[unknown] (268 samples, 0.04%)</title><rect x="0.2206%" y="229" width="0.0369%" height="15" fill="rgb(254,191,54)" fg:x="1600" fg:w="268"/><text x="0.4706%" y="239.50"></text></g><g><title>[unknown] (266 samples, 0.04%)</title><rect x="0.2208%" y="213" width="0.0367%" height="15" fill="rgb(241,83,37)" fg:x="1602" fg:w="266"/><text x="0.4708%" y="223.50"></text></g><g><title>[unknown] (266 samples, 0.04%)</title><rect x="0.2208%" y="197" width="0.0367%" height="15" fill="rgb(233,36,39)" fg:x="1602" fg:w="266"/><text x="0.4708%" y="207.50"></text></g><g><title>[unknown] (243 samples, 0.03%)</title><rect x="0.2240%" y="181" width="0.0335%" height="15" fill="rgb(226,3,54)" fg:x="1625" fg:w="243"/><text x="0.4740%" y="191.50"></text></g><g><title>[unknown] (125 samples, 0.02%)</title><rect x="0.2403%" y="165" width="0.0172%" height="15" fill="rgb(245,192,40)" fg:x="1743" fg:w="125"/><text x="0.4903%" y="175.50"></text></g><g><title>[unknown] (125 samples, 0.02%)</title><rect x="0.2403%" y="149" width="0.0172%" height="15" fill="rgb(238,167,29)" fg:x="1743" fg:w="125"/><text x="0.4903%" y="159.50"></text></g><g><title>[unknown] (122 samples, 0.02%)</title><rect x="0.2407%" y="133" width="0.0168%" height="15" fill="rgb(232,182,51)" fg:x="1746" fg:w="122"/><text x="0.4907%" y="143.50"></text></g><g><title>[unknown] (119 samples, 0.02%)</title><rect x="0.2411%" y="117" width="0.0164%" height="15" fill="rgb(231,60,39)" fg:x="1749" fg:w="119"/><text x="0.4911%" y="127.50"></text></g><g><title>[unknown] (113 samples, 0.02%)</title><rect x="0.2419%" y="101" width="0.0156%" height="15" fill="rgb(208,69,12)" fg:x="1755" fg:w="113"/><text x="0.4919%" y="111.50"></text></g><g><title>[unknown] (104 samples, 0.01%)</title><rect x="0.2432%" y="85" width="0.0143%" height="15" fill="rgb(235,93,37)" fg:x="1764" fg:w="104"/><text x="0.4932%" y="95.50"></text></g><g><title>[unknown] (103 samples, 0.01%)</title><rect x="0.2433%" y="69" width="0.0142%" height="15" fill="rgb(213,116,39)" fg:x="1765" fg:w="103"/><text x="0.4933%" y="79.50"></text></g><g><title>[unknown] (98 samples, 0.01%)</title><rect x="0.2440%" y="53" width="0.0135%" height="15" fill="rgb(222,207,29)" fg:x="1770" fg:w="98"/><text x="0.4940%" y="63.50"></text></g><g><title>[unknown] (84 samples, 0.01%)</title><rect x="0.2459%" y="37" width="0.0116%" height="15" fill="rgb(206,96,30)" fg:x="1784" fg:w="84"/><text x="0.4959%" y="47.50"></text></g><g><title>alloc::string::String::from_utf8 (2,035 samples, 0.28%)</title><rect x="0.2575%" y="421" width="0.2805%" height="15" fill="rgb(218,138,4)" fg:x="1868" fg:w="2035"/><text x="0.5075%" y="431.50"></text></g><g><title>core::str::converts::from_utf8 (2,035 samples, 0.28%)</title><rect x="0.2575%" y="405" width="0.2805%" height="15" fill="rgb(250,191,14)" fg:x="1868" fg:w="2035"/><text x="0.5075%" y="415.50"></text></g><g><title>core::str::validations::run_utf8_validation (2,035 samples, 0.28%)</title><rect x="0.2575%" y="389" width="0.2805%" height="15" fill="rgb(239,60,40)" fg:x="1868" fg:w="2035"/><text x="0.5075%" y="399.50"></text></g><g><title>core::str::validations::utf8_char_width (80 samples, 0.01%)</title><rect x="0.5270%" y="373" width="0.0110%" height="15" fill="rgb(206,27,48)" fg:x="3823" fg:w="80"/><text x="0.7770%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,344 samples, 0.60%)</title><rect x="0.5380%" y="421" width="0.5988%" height="15" fill="rgb(225,35,8)" fg:x="3903" fg:w="4344"/><text x="0.7880%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,344 samples, 0.60%)</title><rect x="0.5380%" y="405" width="0.5988%" height="15" fill="rgb(250,213,24)" fg:x="3903" fg:w="4344"/><text x="0.7880%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,344 samples, 0.60%)</title><rect x="0.5380%" y="389" width="0.5988%" height="15" fill="rgb(247,123,22)" fg:x="3903" fg:w="4344"/><text x="0.7880%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,344 samples, 0.60%)</title><rect x="0.5380%" y="373" width="0.5988%" height="15" fill="rgb(231,138,38)" fg:x="3903" fg:w="4344"/><text x="0.7880%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (4,344 samples, 0.60%)</title><rect x="0.5380%" y="357" width="0.5988%" height="15" fill="rgb(231,145,46)" fg:x="3903" fg:w="4344"/><text x="0.7880%" y="367.50"></text></g><g><title>[unknown] (2,994 samples, 0.41%)</title><rect x="0.7241%" y="341" width="0.4127%" height="15" fill="rgb(251,118,11)" fg:x="5253" fg:w="2994"/><text x="0.9741%" y="351.50"></text></g><g><title>[unknown] (2,659 samples, 0.37%)</title><rect x="0.7703%" y="325" width="0.3666%" height="15" fill="rgb(217,147,25)" fg:x="5588" fg:w="2659"/><text x="1.0203%" y="335.50"></text></g><g><title>[unknown] (2,639 samples, 0.36%)</title><rect x="0.7731%" y="309" width="0.3638%" height="15" fill="rgb(247,81,37)" fg:x="5608" fg:w="2639"/><text x="1.0231%" y="319.50"></text></g><g><title>[unknown] (2,575 samples, 0.35%)</title><rect x="0.7819%" y="293" width="0.3550%" height="15" fill="rgb(209,12,38)" fg:x="5672" fg:w="2575"/><text x="1.0319%" y="303.50"></text></g><g><title>[unknown] (2,426 samples, 0.33%)</title><rect x="0.8024%" y="277" width="0.3344%" height="15" fill="rgb(227,1,9)" fg:x="5821" fg:w="2426"/><text x="1.0524%" y="287.50"></text></g><g><title>[unknown] (2,242 samples, 0.31%)</title><rect x="0.8278%" y="261" width="0.3091%" height="15" fill="rgb(248,47,43)" fg:x="6005" fg:w="2242"/><text x="1.0778%" y="271.50"></text></g><g><title>[unknown] (2,144 samples, 0.30%)</title><rect x="0.8413%" y="245" width="0.2956%" height="15" fill="rgb(221,10,30)" fg:x="6103" fg:w="2144"/><text x="1.0913%" y="255.50"></text></g><g><title>[unknown] (2,041 samples, 0.28%)</title><rect x="0.8555%" y="229" width="0.2814%" height="15" fill="rgb(210,229,1)" fg:x="6206" fg:w="2041"/><text x="1.1055%" y="239.50"></text></g><g><title>[unknown] (1,807 samples, 0.25%)</title><rect x="0.8878%" y="213" width="0.2491%" height="15" fill="rgb(222,148,37)" fg:x="6440" fg:w="1807"/><text x="1.1378%" y="223.50"></text></g><g><title>[unknown] (1,305 samples, 0.18%)</title><rect x="0.9570%" y="197" width="0.1799%" height="15" fill="rgb(234,67,33)" fg:x="6942" fg:w="1305"/><text x="1.2070%" y="207.50"></text></g><g><title>[unknown] (1,047 samples, 0.14%)</title><rect x="0.9925%" y="181" width="0.1443%" height="15" fill="rgb(247,98,35)" fg:x="7200" fg:w="1047"/><text x="1.2425%" y="191.50"></text></g><g><title>[unknown] (798 samples, 0.11%)</title><rect x="1.0269%" y="165" width="0.1100%" height="15" fill="rgb(247,138,52)" fg:x="7449" fg:w="798"/><text x="1.2769%" y="175.50"></text></g><g><title>[unknown] (209 samples, 0.03%)</title><rect x="1.1081%" y="149" width="0.0288%" height="15" fill="rgb(213,79,30)" fg:x="8038" fg:w="209"/><text x="1.3581%" y="159.50"></text></g><g><title>[unknown] (156 samples, 0.02%)</title><rect x="1.1154%" y="133" width="0.0215%" height="15" fill="rgb(246,177,23)" fg:x="8091" fg:w="156"/><text x="1.3654%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,651 samples, 0.92%)</title><rect x="0.2206%" y="597" width="0.9169%" height="15" fill="rgb(230,62,27)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,651 samples, 0.92%)</title><rect x="0.2206%" y="581" width="0.9169%" height="15" fill="rgb(216,154,8)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,651 samples, 0.92%)</title><rect x="0.2206%" y="565" width="0.9169%" height="15" fill="rgb(244,35,45)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,651 samples, 0.92%)</title><rect x="0.2206%" y="549" width="0.9169%" height="15" fill="rgb(251,115,12)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,651 samples, 0.92%)</title><rect x="0.2206%" y="533" width="0.9169%" height="15" fill="rgb(240,54,50)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6,651 samples, 0.92%)</title><rect x="0.2206%" y="517" width="0.9169%" height="15" fill="rgb(233,84,52)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,651 samples, 0.92%)</title><rect x="0.2206%" y="501" width="0.9169%" height="15" fill="rgb(207,117,47)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,651 samples, 0.92%)</title><rect x="0.2206%" y="485" width="0.9169%" height="15" fill="rgb(249,43,39)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,651 samples, 0.92%)</title><rect x="0.2206%" y="469" width="0.9169%" height="15" fill="rgb(209,38,44)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="479.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6,651 samples, 0.92%)</title><rect x="0.2206%" y="453" width="0.9169%" height="15" fill="rgb(236,212,23)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="463.50"></text></g><g><title>one_brc::main::_{{closure}} (6,651 samples, 0.92%)</title><rect x="0.2206%" y="437" width="0.9169%" height="15" fill="rgb(242,79,21)" fg:x="1600" fg:w="6651"/><text x="0.4706%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;&gt; (78 samples, 0.01%)</title><rect x="1.1377%" y="597" width="0.0108%" height="15" fill="rgb(211,96,35)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufreader::buffer::Buffer&gt; (78 samples, 0.01%)</title><rect x="1.1377%" y="581" width="0.0108%" height="15" fill="rgb(253,215,40)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::mem::maybe_uninit::MaybeUninit&lt;u8&gt;]&gt;&gt; (78 samples, 0.01%)</title><rect x="1.1377%" y="565" width="0.0108%" height="15" fill="rgb(211,81,21)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.01%)</title><rect x="1.1377%" y="549" width="0.0108%" height="15" fill="rgb(208,190,38)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (78 samples, 0.01%)</title><rect x="1.1377%" y="533" width="0.0108%" height="15" fill="rgb(235,213,38)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (78 samples, 0.01%)</title><rect x="1.1377%" y="517" width="0.0108%" height="15" fill="rgb(237,122,38)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="527.50"></text></g><g><title>__GI___libc_free (78 samples, 0.01%)</title><rect x="1.1377%" y="501" width="0.0108%" height="15" fill="rgb(244,218,35)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="511.50"></text></g><g><title>__GI___munmap (78 samples, 0.01%)</title><rect x="1.1377%" y="485" width="0.0108%" height="15" fill="rgb(240,68,47)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="495.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="469" width="0.0108%" height="15" fill="rgb(210,16,53)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="479.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="453" width="0.0108%" height="15" fill="rgb(235,124,12)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="463.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="437" width="0.0108%" height="15" fill="rgb(224,169,11)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="447.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="421" width="0.0108%" height="15" fill="rgb(250,166,2)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="431.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="405" width="0.0108%" height="15" fill="rgb(242,216,29)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="415.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="389" width="0.0108%" height="15" fill="rgb(230,116,27)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="399.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="373" width="0.0108%" height="15" fill="rgb(228,99,48)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="383.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="357" width="0.0108%" height="15" fill="rgb(253,11,6)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="367.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="341" width="0.0108%" height="15" fill="rgb(247,143,39)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="351.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="325" width="0.0108%" height="15" fill="rgb(236,97,10)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="335.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="309" width="0.0108%" height="15" fill="rgb(233,208,19)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="319.50"></text></g><g><title>[unknown] (78 samples, 0.01%)</title><rect x="1.1377%" y="293" width="0.0108%" height="15" fill="rgb(216,164,2)" fg:x="8253" fg:w="78"/><text x="1.3877%" y="303.50"></text></g><g><title>one_brc::main (6,738 samples, 0.93%)</title><rect x="0.2203%" y="613" width="0.9289%" height="15" fill="rgb(220,129,5)" fg:x="1598" fg:w="6738"/><text x="0.4703%" y="623.50"></text></g><g><title>[unknown] (8,333 samples, 1.15%)</title><rect x="0.0006%" y="629" width="1.1487%" height="15" fill="rgb(242,17,10)" fg:x="4" fg:w="8333"/><text x="0.2506%" y="639.50"></text></g><g><title>one-brc (8,346 samples, 1.15%)</title><rect x="0.0000%" y="645" width="1.1505%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="8346"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (178 samples, 0.02%)</title><rect x="1.1595%" y="629" width="0.0245%" height="15" fill="rgb(251,28,31)" fg:x="8411" fg:w="178"/><text x="1.4095%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (84 samples, 0.01%)</title><rect x="1.1931%" y="613" width="0.0116%" height="15" fill="rgb(233,223,10)" fg:x="8655" fg:w="84"/><text x="1.4431%" y="623.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (76 samples, 0.01%)</title><rect x="1.2047%" y="613" width="0.0105%" height="15" fill="rgb(215,21,27)" fg:x="8739" fg:w="76"/><text x="1.4547%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.01%)</title><rect x="1.2455%" y="613" width="0.0119%" height="15" fill="rgb(232,23,21)" fg:x="9035" fg:w="86"/><text x="1.4955%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (126 samples, 0.02%)</title><rect x="1.2605%" y="613" width="0.0174%" height="15" fill="rgb(244,5,23)" fg:x="9144" fg:w="126"/><text x="1.5105%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (98 samples, 0.01%)</title><rect x="1.2922%" y="613" width="0.0135%" height="15" fill="rgb(226,81,46)" fg:x="9374" fg:w="98"/><text x="1.5422%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (77 samples, 0.01%)</title><rect x="1.2951%" y="597" width="0.0106%" height="15" fill="rgb(247,70,30)" fg:x="9395" fg:w="77"/><text x="1.5451%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (81 samples, 0.01%)</title><rect x="1.3245%" y="613" width="0.0112%" height="15" fill="rgb(212,68,19)" fg:x="9608" fg:w="81"/><text x="1.5745%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (77 samples, 0.01%)</title><rect x="1.3397%" y="613" width="0.0106%" height="15" fill="rgb(240,187,13)" fg:x="9718" fg:w="77"/><text x="1.5897%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (92 samples, 0.01%)</title><rect x="1.3909%" y="613" width="0.0127%" height="15" fill="rgb(223,113,26)" fg:x="10090" fg:w="92"/><text x="1.6409%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (92 samples, 0.01%)</title><rect x="1.4134%" y="613" width="0.0127%" height="15" fill="rgb(206,192,2)" fg:x="10253" fg:w="92"/><text x="1.6634%" y="623.50"></text></g><g><title>[anon] (1,975 samples, 0.27%)</title><rect x="1.1879%" y="629" width="0.2723%" height="15" fill="rgb(241,108,4)" fg:x="8617" fg:w="1975"/><text x="1.4379%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (81 samples, 0.01%)</title><rect x="1.4604%" y="613" width="0.0112%" height="15" fill="rgb(247,173,49)" fg:x="10594" fg:w="81"/><text x="1.7104%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (198 samples, 0.03%)</title><rect x="1.4716%" y="613" width="0.0273%" height="15" fill="rgb(224,114,35)" fg:x="10675" fg:w="198"/><text x="1.7216%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (76 samples, 0.01%)</title><rect x="1.5080%" y="613" width="0.0105%" height="15" fill="rgb(245,159,27)" fg:x="10939" fg:w="76"/><text x="1.7580%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (117 samples, 0.02%)</title><rect x="1.5185%" y="613" width="0.0161%" height="15" fill="rgb(245,172,44)" fg:x="11015" fg:w="117"/><text x="1.7685%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (201 samples, 0.03%)</title><rect x="1.5635%" y="613" width="0.0277%" height="15" fill="rgb(236,23,11)" fg:x="11342" fg:w="201"/><text x="1.8135%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (175 samples, 0.02%)</title><rect x="1.5671%" y="597" width="0.0241%" height="15" fill="rgb(205,117,38)" fg:x="11368" fg:w="175"/><text x="1.8171%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (175 samples, 0.02%)</title><rect x="1.5671%" y="581" width="0.0241%" height="15" fill="rgb(237,72,25)" fg:x="11368" fg:w="175"/><text x="1.8171%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (85 samples, 0.01%)</title><rect x="1.5795%" y="565" width="0.0117%" height="15" fill="rgb(244,70,9)" fg:x="11458" fg:w="85"/><text x="1.8295%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (94 samples, 0.01%)</title><rect x="1.6340%" y="613" width="0.0130%" height="15" fill="rgb(217,125,39)" fg:x="11853" fg:w="94"/><text x="1.8840%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (119 samples, 0.02%)</title><rect x="1.6500%" y="613" width="0.0164%" height="15" fill="rgb(235,36,10)" fg:x="11969" fg:w="119"/><text x="1.9000%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (172 samples, 0.02%)</title><rect x="1.6862%" y="613" width="0.0237%" height="15" fill="rgb(251,123,47)" fg:x="12232" fg:w="172"/><text x="1.9362%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (94 samples, 0.01%)</title><rect x="1.7223%" y="613" width="0.0130%" height="15" fill="rgb(221,13,13)" fg:x="12494" fg:w="94"/><text x="1.9723%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (158 samples, 0.02%)</title><rect x="1.7353%" y="613" width="0.0218%" height="15" fill="rgb(238,131,9)" fg:x="12588" fg:w="158"/><text x="1.9853%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (80 samples, 0.01%)</title><rect x="1.7704%" y="613" width="0.0110%" height="15" fill="rgb(211,50,8)" fg:x="12843" fg:w="80"/><text x="2.0204%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (81 samples, 0.01%)</title><rect x="1.7857%" y="613" width="0.0112%" height="15" fill="rgb(245,182,24)" fg:x="12954" fg:w="81"/><text x="2.0357%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (104 samples, 0.01%)</title><rect x="1.8192%" y="613" width="0.0143%" height="15" fill="rgb(242,14,37)" fg:x="13197" fg:w="104"/><text x="2.0692%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (173 samples, 0.02%)</title><rect x="1.8336%" y="613" width="0.0238%" height="15" fill="rgb(246,228,12)" fg:x="13301" fg:w="173"/><text x="2.0836%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (140 samples, 0.02%)</title><rect x="1.8381%" y="597" width="0.0193%" height="15" fill="rgb(213,55,15)" fg:x="13334" fg:w="140"/><text x="2.0881%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (77 samples, 0.01%)</title><rect x="1.8468%" y="581" width="0.0106%" height="15" fill="rgb(209,9,3)" fg:x="13397" fg:w="77"/><text x="2.0968%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (129 samples, 0.02%)</title><rect x="1.8574%" y="613" width="0.0178%" height="15" fill="rgb(230,59,30)" fg:x="13474" fg:w="129"/><text x="2.1074%" y="623.50"></text></g><g><title>one_brc::process_lines (268 samples, 0.04%)</title><rect x="1.8864%" y="613" width="0.0369%" height="15" fill="rgb(209,121,21)" fg:x="13684" fg:w="268"/><text x="2.1364%" y="623.50"></text></g><g><title>[unknown] (3,584 samples, 0.49%)</title><rect x="1.4601%" y="629" width="0.4941%" height="15" fill="rgb(220,109,13)" fg:x="10592" fg:w="3584"/><text x="1.7101%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (123 samples, 0.02%)</title><rect x="2.2587%" y="325" width="0.0170%" height="15" fill="rgb(232,18,1)" fg:x="16385" fg:w="123"/><text x="2.5087%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (315 samples, 0.04%)</title><rect x="2.2817%" y="293" width="0.0434%" height="15" fill="rgb(215,41,42)" fg:x="16552" fg:w="315"/><text x="2.5317%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (163 samples, 0.02%)</title><rect x="2.3027%" y="277" width="0.0225%" height="15" fill="rgb(224,123,36)" fg:x="16704" fg:w="163"/><text x="2.5527%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (136 samples, 0.02%)</title><rect x="2.3064%" y="261" width="0.0187%" height="15" fill="rgb(240,125,3)" fg:x="16731" fg:w="136"/><text x="2.5564%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (133 samples, 0.02%)</title><rect x="2.3068%" y="245" width="0.0183%" height="15" fill="rgb(205,98,50)" fg:x="16734" fg:w="133"/><text x="2.5568%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (407 samples, 0.06%)</title><rect x="2.2758%" y="325" width="0.0561%" height="15" fill="rgb(205,185,37)" fg:x="16509" fg:w="407"/><text x="2.5258%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (403 samples, 0.06%)</title><rect x="2.2764%" y="309" width="0.0556%" height="15" fill="rgb(238,207,15)" fg:x="16513" fg:w="403"/><text x="2.5264%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (270 samples, 0.04%)</title><rect x="2.3763%" y="277" width="0.0372%" height="15" fill="rgb(213,199,42)" fg:x="17238" fg:w="270"/><text x="2.6263%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (628 samples, 0.09%)</title><rect x="2.3319%" y="325" width="0.0866%" height="15" fill="rgb(235,201,11)" fg:x="16916" fg:w="628"/><text x="2.5819%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (554 samples, 0.08%)</title><rect x="2.3421%" y="309" width="0.0764%" height="15" fill="rgb(207,46,11)" fg:x="16990" fg:w="554"/><text x="2.5921%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (554 samples, 0.08%)</title><rect x="2.3421%" y="293" width="0.0764%" height="15" fill="rgb(241,35,35)" fg:x="16990" fg:w="554"/><text x="2.5921%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (326 samples, 0.04%)</title><rect x="2.4906%" y="293" width="0.0449%" height="15" fill="rgb(243,32,47)" fg:x="18067" fg:w="326"/><text x="2.7406%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (266 samples, 0.04%)</title><rect x="2.4989%" y="277" width="0.0367%" height="15" fill="rgb(247,202,23)" fg:x="18127" fg:w="266"/><text x="2.7489%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (260 samples, 0.04%)</title><rect x="2.4997%" y="261" width="0.0358%" height="15" fill="rgb(219,102,11)" fg:x="18133" fg:w="260"/><text x="2.7497%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (744 samples, 0.10%)</title><rect x="2.4331%" y="309" width="0.1026%" height="15" fill="rgb(243,110,44)" fg:x="17650" fg:w="744"/><text x="2.6831%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (851 samples, 0.12%)</title><rect x="2.4185%" y="325" width="0.1173%" height="15" fill="rgb(222,74,54)" fg:x="17544" fg:w="851"/><text x="2.6685%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (73 samples, 0.01%)</title><rect x="2.6330%" y="293" width="0.0101%" height="15" fill="rgb(216,99,12)" fg:x="19100" fg:w="73"/><text x="2.8830%" y="303.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (81 samples, 0.01%)</title><rect x="2.6472%" y="293" width="0.0112%" height="15" fill="rgb(226,22,26)" fg:x="19203" fg:w="81"/><text x="2.8972%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,599 samples, 0.22%)</title><rect x="2.5390%" y="325" width="0.2204%" height="15" fill="rgb(217,163,10)" fg:x="18418" fg:w="1599"/><text x="2.7890%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,490 samples, 0.21%)</title><rect x="2.5540%" y="309" width="0.2054%" height="15" fill="rgb(213,25,53)" fg:x="18527" fg:w="1490"/><text x="2.8040%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (731 samples, 0.10%)</title><rect x="2.6586%" y="293" width="0.1008%" height="15" fill="rgb(252,105,26)" fg:x="19286" fg:w="731"/><text x="2.9086%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,730 samples, 0.65%)</title><rect x="2.1131%" y="341" width="0.6520%" height="15" fill="rgb(220,39,43)" fg:x="15329" fg:w="4730"/><text x="2.3631%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,163 samples, 0.71%)</title><rect x="2.0690%" y="373" width="0.7117%" height="15" fill="rgb(229,68,48)" fg:x="15009" fg:w="5163"/><text x="2.3190%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,156 samples, 0.71%)</title><rect x="2.0700%" y="357" width="0.7108%" height="15" fill="rgb(252,8,32)" fg:x="15016" fg:w="5156"/><text x="2.3200%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (113 samples, 0.02%)</title><rect x="2.7652%" y="341" width="0.0156%" height="15" fill="rgb(223,20,43)" fg:x="20059" fg:w="113"/><text x="3.0152%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (113 samples, 0.02%)</title><rect x="2.7652%" y="325" width="0.0156%" height="15" fill="rgb(229,81,49)" fg:x="20059" fg:w="113"/><text x="3.0152%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (80 samples, 0.01%)</title><rect x="2.7697%" y="309" width="0.0110%" height="15" fill="rgb(236,28,36)" fg:x="20092" fg:w="80"/><text x="3.0197%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (467 samples, 0.06%)</title><rect x="3.1050%" y="181" width="0.0644%" height="15" fill="rgb(249,185,26)" fg:x="22524" fg:w="467"/><text x="3.3550%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,206 samples, 0.17%)</title><rect x="3.0142%" y="229" width="0.1663%" height="15" fill="rgb(249,174,33)" fg:x="21865" fg:w="1206"/><text x="3.2642%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,037 samples, 0.14%)</title><rect x="3.0375%" y="213" width="0.1430%" height="15" fill="rgb(233,201,37)" fg:x="22034" fg:w="1037"/><text x="3.2875%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,010 samples, 0.14%)</title><rect x="3.0412%" y="197" width="0.1392%" height="15" fill="rgb(221,78,26)" fg:x="22061" fg:w="1010"/><text x="3.2912%" y="207.50"></text></g><g><title>core::mem::size_of_val (80 samples, 0.01%)</title><rect x="3.1694%" y="181" width="0.0110%" height="15" fill="rgb(250,127,30)" fg:x="22991" fg:w="80"/><text x="3.4194%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (326 samples, 0.04%)</title><rect x="3.1870%" y="181" width="0.0449%" height="15" fill="rgb(230,49,44)" fg:x="23119" fg:w="326"/><text x="3.4370%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (246 samples, 0.03%)</title><rect x="3.1981%" y="165" width="0.0339%" height="15" fill="rgb(229,67,23)" fg:x="23199" fg:w="246"/><text x="3.4481%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (237 samples, 0.03%)</title><rect x="3.1993%" y="149" width="0.0327%" height="15" fill="rgb(249,83,47)" fg:x="23208" fg:w="237"/><text x="3.4493%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,385 samples, 0.33%)</title><rect x="2.9171%" y="261" width="0.3288%" height="15" fill="rgb(215,43,3)" fg:x="21161" fg:w="2385"/><text x="3.1671%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,385 samples, 0.33%)</title><rect x="2.9171%" y="245" width="0.3288%" height="15" fill="rgb(238,154,13)" fg:x="21161" fg:w="2385"/><text x="3.1671%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (475 samples, 0.07%)</title><rect x="3.1804%" y="229" width="0.0655%" height="15" fill="rgb(219,56,2)" fg:x="23071" fg:w="475"/><text x="3.4304%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (475 samples, 0.07%)</title><rect x="3.1804%" y="213" width="0.0655%" height="15" fill="rgb(233,0,4)" fg:x="23071" fg:w="475"/><text x="3.4304%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (427 samples, 0.06%)</title><rect x="3.1870%" y="197" width="0.0589%" height="15" fill="rgb(235,30,7)" fg:x="23119" fg:w="427"/><text x="3.4370%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (101 samples, 0.01%)</title><rect x="3.2320%" y="181" width="0.0139%" height="15" fill="rgb(250,79,13)" fg:x="23445" fg:w="101"/><text x="3.4820%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (101 samples, 0.01%)</title><rect x="3.2320%" y="165" width="0.0139%" height="15" fill="rgb(211,146,34)" fg:x="23445" fg:w="101"/><text x="3.4820%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (2,900 samples, 0.40%)</title><rect x="2.8786%" y="277" width="0.3998%" height="15" fill="rgb(228,22,38)" fg:x="20882" fg:w="2900"/><text x="3.1286%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (215 samples, 0.03%)</title><rect x="3.2488%" y="261" width="0.0296%" height="15" fill="rgb(235,168,5)" fg:x="23567" fg:w="215"/><text x="3.4988%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (215 samples, 0.03%)</title><rect x="3.2488%" y="245" width="0.0296%" height="15" fill="rgb(221,155,16)" fg:x="23567" fg:w="215"/><text x="3.4988%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (215 samples, 0.03%)</title><rect x="3.2488%" y="229" width="0.0296%" height="15" fill="rgb(215,215,53)" fg:x="23567" fg:w="215"/><text x="3.4988%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (101 samples, 0.01%)</title><rect x="3.3556%" y="245" width="0.0139%" height="15" fill="rgb(223,4,10)" fg:x="24342" fg:w="101"/><text x="3.6056%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (204 samples, 0.03%)</title><rect x="3.4462%" y="165" width="0.0281%" height="15" fill="rgb(234,103,6)" fg:x="24999" fg:w="204"/><text x="3.6962%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (287 samples, 0.04%)</title><rect x="3.4360%" y="197" width="0.0396%" height="15" fill="rgb(227,97,0)" fg:x="24925" fg:w="287"/><text x="3.6860%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (213 samples, 0.03%)</title><rect x="3.4462%" y="181" width="0.0294%" height="15" fill="rgb(234,150,53)" fg:x="24999" fg:w="213"/><text x="3.6962%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (666 samples, 0.09%)</title><rect x="3.3839%" y="213" width="0.0918%" height="15" fill="rgb(228,201,54)" fg:x="24547" fg:w="666"/><text x="3.6339%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,294 samples, 1.42%)</title><rect x="2.0568%" y="389" width="1.4191%" height="15" fill="rgb(222,22,37)" fg:x="14920" fg:w="10294"/><text x="2.3068%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,042 samples, 0.70%)</title><rect x="2.7808%" y="373" width="0.6951%" height="15" fill="rgb(237,53,32)" fg:x="20172" fg:w="5042"/><text x="3.0308%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,889 samples, 0.67%)</title><rect x="2.8019%" y="357" width="0.6740%" height="15" fill="rgb(233,25,53)" fg:x="20325" fg:w="4889"/><text x="3.0519%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4,831 samples, 0.67%)</title><rect x="2.8099%" y="341" width="0.6660%" height="15" fill="rgb(210,40,34)" fg:x="20383" fg:w="4831"/><text x="3.0599%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,725 samples, 0.65%)</title><rect x="2.8245%" y="325" width="0.6514%" height="15" fill="rgb(241,220,44)" fg:x="20489" fg:w="4725"/><text x="3.0745%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,439 samples, 0.61%)</title><rect x="2.8639%" y="309" width="0.6119%" height="15" fill="rgb(235,28,35)" fg:x="20775" fg:w="4439"/><text x="3.1139%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,435 samples, 0.61%)</title><rect x="2.8644%" y="293" width="0.6114%" height="15" fill="rgb(210,56,17)" fg:x="20779" fg:w="4435"/><text x="3.1144%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,432 samples, 0.20%)</title><rect x="3.2784%" y="277" width="0.1974%" height="15" fill="rgb(224,130,29)" fg:x="23782" fg:w="1432"/><text x="3.5284%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,338 samples, 0.18%)</title><rect x="3.2914%" y="261" width="0.1844%" height="15" fill="rgb(235,212,8)" fg:x="23876" fg:w="1338"/><text x="3.5414%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (771 samples, 0.11%)</title><rect x="3.3695%" y="245" width="0.1063%" height="15" fill="rgb(223,33,50)" fg:x="24443" fg:w="771"/><text x="3.6195%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (757 samples, 0.10%)</title><rect x="3.3715%" y="229" width="0.1044%" height="15" fill="rgb(219,149,13)" fg:x="24457" fg:w="757"/><text x="3.6215%" y="239.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (10,299 samples, 1.42%)</title><rect x="2.0562%" y="405" width="1.4197%" height="15" fill="rgb(250,156,29)" fg:x="14916" fg:w="10299"/><text x="2.3062%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (300 samples, 0.04%)</title><rect x="3.4762%" y="405" width="0.0414%" height="15" fill="rgb(216,193,19)" fg:x="25217" fg:w="300"/><text x="3.7262%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (190 samples, 0.03%)</title><rect x="3.5176%" y="405" width="0.0262%" height="15" fill="rgb(216,135,14)" fg:x="25517" fg:w="190"/><text x="3.7676%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (170 samples, 0.02%)</title><rect x="3.5798%" y="341" width="0.0234%" height="15" fill="rgb(241,47,5)" fg:x="25968" fg:w="170"/><text x="3.8298%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (213 samples, 0.03%)</title><rect x="3.6033%" y="341" width="0.0294%" height="15" fill="rgb(233,42,35)" fg:x="26139" fg:w="213"/><text x="3.8533%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (470 samples, 0.06%)</title><rect x="3.5722%" y="357" width="0.0648%" height="15" fill="rgb(231,13,6)" fg:x="25913" fg:w="470"/><text x="3.8222%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (118 samples, 0.02%)</title><rect x="3.6486%" y="341" width="0.0163%" height="15" fill="rgb(207,181,40)" fg:x="26467" fg:w="118"/><text x="3.8986%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (260 samples, 0.04%)</title><rect x="3.6859%" y="309" width="0.0358%" height="15" fill="rgb(254,173,49)" fg:x="26738" fg:w="260"/><text x="3.9359%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (336 samples, 0.05%)</title><rect x="3.6763%" y="325" width="0.0463%" height="15" fill="rgb(221,1,38)" fg:x="26668" fg:w="336"/><text x="3.9263%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (626 samples, 0.09%)</title><rect x="3.6370%" y="357" width="0.0863%" height="15" fill="rgb(206,124,46)" fg:x="26383" fg:w="626"/><text x="3.8870%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (424 samples, 0.06%)</title><rect x="3.6648%" y="341" width="0.0584%" height="15" fill="rgb(249,21,11)" fg:x="26585" fg:w="424"/><text x="3.9148%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,303 samples, 0.18%)</title><rect x="3.5438%" y="405" width="0.1796%" height="15" fill="rgb(222,201,40)" fg:x="25707" fg:w="1303"/><text x="3.7938%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,271 samples, 0.18%)</title><rect x="3.5482%" y="389" width="0.1752%" height="15" fill="rgb(235,61,29)" fg:x="25739" fg:w="1271"/><text x="3.7982%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,225 samples, 0.17%)</title><rect x="3.5545%" y="373" width="0.1689%" height="15" fill="rgb(219,207,3)" fg:x="25785" fg:w="1225"/><text x="3.8045%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (83 samples, 0.01%)</title><rect x="3.8909%" y="261" width="0.0114%" height="15" fill="rgb(222,56,46)" fg:x="28225" fg:w="83"/><text x="4.1409%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (110 samples, 0.02%)</title><rect x="3.8875%" y="293" width="0.0152%" height="15" fill="rgb(239,76,54)" fg:x="28200" fg:w="110"/><text x="4.1375%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (85 samples, 0.01%)</title><rect x="3.8909%" y="277" width="0.0117%" height="15" fill="rgb(231,124,27)" fg:x="28225" fg:w="85"/><text x="4.1409%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (745 samples, 0.10%)</title><rect x="3.8001%" y="373" width="0.1027%" height="15" fill="rgb(249,195,6)" fg:x="27566" fg:w="745"/><text x="4.0501%" y="383.50"></text></g><g><title>core::char::methods::encode_utf8_raw (686 samples, 0.09%)</title><rect x="3.8082%" y="357" width="0.0946%" height="15" fill="rgb(237,174,47)" fg:x="27625" fg:w="686"/><text x="4.0582%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (309 samples, 0.04%)</title><rect x="3.8602%" y="341" width="0.0426%" height="15" fill="rgb(206,201,31)" fg:x="28002" fg:w="309"/><text x="4.1102%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (299 samples, 0.04%)</title><rect x="3.8615%" y="325" width="0.0412%" height="15" fill="rgb(231,57,52)" fg:x="28012" fg:w="299"/><text x="4.1115%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (274 samples, 0.04%)</title><rect x="3.8650%" y="309" width="0.0378%" height="15" fill="rgb(248,177,22)" fg:x="28037" fg:w="274"/><text x="4.1150%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (992 samples, 0.14%)</title><rect x="3.7707%" y="389" width="0.1368%" height="15" fill="rgb(215,211,37)" fg:x="27353" fg:w="992"/><text x="4.0207%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (103 samples, 0.01%)</title><rect x="4.0387%" y="373" width="0.0142%" height="15" fill="rgb(241,128,51)" fg:x="29297" fg:w="103"/><text x="4.2887%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (328 samples, 0.05%)</title><rect x="4.0555%" y="373" width="0.0452%" height="15" fill="rgb(227,165,31)" fg:x="29419" fg:w="328"/><text x="4.3055%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (327 samples, 0.05%)</title><rect x="4.0556%" y="357" width="0.0451%" height="15" fill="rgb(228,167,24)" fg:x="29420" fg:w="327"/><text x="4.3056%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (299 samples, 0.04%)</title><rect x="4.0595%" y="341" width="0.0412%" height="15" fill="rgb(228,143,12)" fg:x="29448" fg:w="299"/><text x="4.3095%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (142 samples, 0.02%)</title><rect x="4.0811%" y="325" width="0.0196%" height="15" fill="rgb(249,149,8)" fg:x="29605" fg:w="142"/><text x="4.3311%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (113 samples, 0.02%)</title><rect x="4.0851%" y="309" width="0.0156%" height="15" fill="rgb(243,35,44)" fg:x="29634" fg:w="113"/><text x="4.3351%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (113 samples, 0.02%)</title><rect x="4.0851%" y="293" width="0.0156%" height="15" fill="rgb(246,89,9)" fg:x="29634" fg:w="113"/><text x="4.3351%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (172 samples, 0.02%)</title><rect x="4.1421%" y="325" width="0.0237%" height="15" fill="rgb(233,213,13)" fg:x="30047" fg:w="172"/><text x="4.3921%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (509 samples, 0.07%)</title><rect x="4.1007%" y="373" width="0.0702%" height="15" fill="rgb(233,141,41)" fg:x="29747" fg:w="509"/><text x="4.3507%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (439 samples, 0.06%)</title><rect x="4.1104%" y="357" width="0.0605%" height="15" fill="rgb(239,167,4)" fg:x="29817" fg:w="439"/><text x="4.3604%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (439 samples, 0.06%)</title><rect x="4.1104%" y="341" width="0.0605%" height="15" fill="rgb(209,217,16)" fg:x="29817" fg:w="439"/><text x="4.3604%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (322 samples, 0.04%)</title><rect x="4.2435%" y="341" width="0.0444%" height="15" fill="rgb(219,88,35)" fg:x="30783" fg:w="322"/><text x="4.4935%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (258 samples, 0.04%)</title><rect x="4.2524%" y="325" width="0.0356%" height="15" fill="rgb(220,193,23)" fg:x="30847" fg:w="258"/><text x="4.5024%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (248 samples, 0.03%)</title><rect x="4.2537%" y="309" width="0.0342%" height="15" fill="rgb(230,90,52)" fg:x="30857" fg:w="248"/><text x="4.5037%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (850 samples, 0.12%)</title><rect x="4.1709%" y="373" width="0.1172%" height="15" fill="rgb(252,106,19)" fg:x="30256" fg:w="850"/><text x="4.4209%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (754 samples, 0.10%)</title><rect x="4.1841%" y="357" width="0.1039%" height="15" fill="rgb(206,74,20)" fg:x="30352" fg:w="754"/><text x="4.4341%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_aligned (132 samples, 0.02%)</title><rect x="4.2996%" y="357" width="0.0182%" height="15" fill="rgb(230,138,44)" fg:x="31190" fg:w="132"/><text x="4.5496%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (109 samples, 0.02%)</title><rect x="4.3028%" y="341" width="0.0150%" height="15" fill="rgb(235,182,43)" fg:x="31213" fg:w="109"/><text x="4.5528%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (1,948 samples, 0.27%)</title><rect x="4.2911%" y="373" width="0.2685%" height="15" fill="rgb(242,16,51)" fg:x="31128" fg:w="1948"/><text x="4.5411%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,754 samples, 0.24%)</title><rect x="4.3178%" y="357" width="0.2418%" height="15" fill="rgb(248,9,4)" fg:x="31322" fg:w="1754"/><text x="4.5678%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,714 samples, 0.65%)</title><rect x="3.9154%" y="389" width="0.6498%" height="15" fill="rgb(210,31,22)" fg:x="28403" fg:w="4714"/><text x="4.1654%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (184 samples, 0.03%)</title><rect x="4.5653%" y="373" width="0.0254%" height="15" fill="rgb(239,54,39)" fg:x="33117" fg:w="184"/><text x="4.8153%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (142 samples, 0.02%)</title><rect x="4.5711%" y="357" width="0.0196%" height="15" fill="rgb(230,99,41)" fg:x="33159" fg:w="142"/><text x="4.8211%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (105 samples, 0.01%)</title><rect x="4.5762%" y="341" width="0.0145%" height="15" fill="rgb(253,106,12)" fg:x="33196" fg:w="105"/><text x="4.8262%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (103 samples, 0.01%)</title><rect x="4.5764%" y="325" width="0.0142%" height="15" fill="rgb(213,46,41)" fg:x="33198" fg:w="103"/><text x="4.8264%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,430 samples, 0.89%)</title><rect x="3.7234%" y="405" width="0.8864%" height="15" fill="rgb(215,133,35)" fg:x="27010" fg:w="6430"/><text x="3.9734%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (323 samples, 0.04%)</title><rect x="4.5653%" y="389" width="0.0445%" height="15" fill="rgb(213,28,5)" fg:x="33117" fg:w="323"/><text x="4.8153%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (139 samples, 0.02%)</title><rect x="4.5906%" y="373" width="0.0192%" height="15" fill="rgb(215,77,49)" fg:x="33301" fg:w="139"/><text x="4.8406%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (139 samples, 0.02%)</title><rect x="4.5906%" y="357" width="0.0192%" height="15" fill="rgb(248,100,22)" fg:x="33301" fg:w="139"/><text x="4.8406%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (73 samples, 0.01%)</title><rect x="4.5997%" y="341" width="0.0101%" height="15" fill="rgb(208,67,9)" fg:x="33367" fg:w="73"/><text x="4.8497%" y="351.50"></text></g><g><title>one_brc::round_towards_positive (579 samples, 0.08%)</title><rect x="4.6098%" y="405" width="0.0798%" height="15" fill="rgb(219,133,21)" fg:x="33440" fg:w="579"/><text x="4.8598%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (150 samples, 0.02%)</title><rect x="4.6689%" y="389" width="0.0207%" height="15" fill="rgb(246,46,29)" fg:x="33869" fg:w="150"/><text x="4.9189%" y="399.50"></text></g><g><title>__round (130 samples, 0.02%)</title><rect x="4.6717%" y="373" width="0.0179%" height="15" fill="rgb(246,185,52)" fg:x="33889" fg:w="130"/><text x="4.9217%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (93 samples, 0.01%)</title><rect x="4.7863%" y="357" width="0.0128%" height="15" fill="rgb(252,136,11)" fg:x="34720" fg:w="93"/><text x="5.0363%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (555 samples, 0.08%)</title><rect x="4.7412%" y="389" width="0.0765%" height="15" fill="rgb(219,138,53)" fg:x="34393" fg:w="555"/><text x="4.9912%" y="399.50"></text></g><g><title>one_brc::Measurement::record (466 samples, 0.06%)</title><rect x="4.7534%" y="373" width="0.0642%" height="15" fill="rgb(211,51,23)" fg:x="34482" fg:w="466"/><text x="5.0034%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (135 samples, 0.02%)</title><rect x="4.7991%" y="357" width="0.0186%" height="15" fill="rgb(247,221,28)" fg:x="34813" fg:w="135"/><text x="5.0491%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (86 samples, 0.01%)</title><rect x="4.8298%" y="325" width="0.0119%" height="15" fill="rgb(251,222,45)" fg:x="35036" fg:w="86"/><text x="5.0798%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (157 samples, 0.02%)</title><rect x="4.8231%" y="341" width="0.0216%" height="15" fill="rgb(217,162,53)" fg:x="34987" fg:w="157"/><text x="5.0731%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (174 samples, 0.02%)</title><rect x="4.8217%" y="357" width="0.0240%" height="15" fill="rgb(229,93,14)" fg:x="34977" fg:w="174"/><text x="5.0717%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,136 samples, 0.16%)</title><rect x="4.6896%" y="405" width="0.1566%" height="15" fill="rgb(209,67,49)" fg:x="34019" fg:w="1136"/><text x="4.9396%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (207 samples, 0.03%)</title><rect x="4.8177%" y="389" width="0.0285%" height="15" fill="rgb(213,87,29)" fg:x="34948" fg:w="207"/><text x="5.0677%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (205 samples, 0.03%)</title><rect x="4.8180%" y="373" width="0.0283%" height="15" fill="rgb(205,151,52)" fg:x="34950" fg:w="205"/><text x="5.0680%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (142 samples, 0.02%)</title><rect x="4.8781%" y="341" width="0.0196%" height="15" fill="rgb(253,215,39)" fg:x="35386" fg:w="142"/><text x="5.1281%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (422 samples, 0.06%)</title><rect x="4.8462%" y="405" width="0.0582%" height="15" fill="rgb(221,220,41)" fg:x="35155" fg:w="422"/><text x="5.0962%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (257 samples, 0.04%)</title><rect x="4.8690%" y="389" width="0.0354%" height="15" fill="rgb(218,133,21)" fg:x="35320" fg:w="257"/><text x="5.1190%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (205 samples, 0.03%)</title><rect x="4.8761%" y="373" width="0.0283%" height="15" fill="rgb(221,193,43)" fg:x="35372" fg:w="205"/><text x="5.1261%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (202 samples, 0.03%)</title><rect x="4.8766%" y="357" width="0.0278%" height="15" fill="rgb(240,128,52)" fg:x="35375" fg:w="202"/><text x="5.1266%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (252 samples, 0.03%)</title><rect x="5.0934%" y="277" width="0.0347%" height="15" fill="rgb(253,114,12)" fg:x="36948" fg:w="252"/><text x="5.3434%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (757 samples, 0.10%)</title><rect x="5.0260%" y="293" width="0.1044%" height="15" fill="rgb(215,223,47)" fg:x="36459" fg:w="757"/><text x="5.2760%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (736 samples, 0.10%)</title><rect x="5.3377%" y="277" width="0.1015%" height="15" fill="rgb(248,225,23)" fg:x="38720" fg:w="736"/><text x="5.5877%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,336 samples, 0.46%)</title><rect x="4.9845%" y="309" width="0.4599%" height="15" fill="rgb(250,108,0)" fg:x="36158" fg:w="3336"/><text x="5.2345%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,278 samples, 0.31%)</title><rect x="5.1303%" y="293" width="0.3140%" height="15" fill="rgb(228,208,7)" fg:x="37216" fg:w="2278"/><text x="5.3803%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,375 samples, 0.47%)</title><rect x="4.9799%" y="341" width="0.4653%" height="15" fill="rgb(244,45,10)" fg:x="36125" fg:w="3375"/><text x="5.2299%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,342 samples, 0.46%)</title><rect x="4.9845%" y="325" width="0.4607%" height="15" fill="rgb(207,125,25)" fg:x="36158" fg:w="3342"/><text x="5.2345%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (364 samples, 0.05%)</title><rect x="5.4539%" y="325" width="0.0502%" height="15" fill="rgb(210,195,18)" fg:x="39563" fg:w="364"/><text x="5.7039%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (345 samples, 0.05%)</title><rect x="5.5045%" y="309" width="0.0476%" height="15" fill="rgb(249,80,12)" fg:x="39930" fg:w="345"/><text x="5.7545%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (397 samples, 0.05%)</title><rect x="5.5777%" y="293" width="0.0547%" height="15" fill="rgb(221,65,9)" fg:x="40461" fg:w="397"/><text x="5.8277%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (144 samples, 0.02%)</title><rect x="5.6324%" y="293" width="0.0199%" height="15" fill="rgb(235,49,36)" fg:x="40858" fg:w="144"/><text x="5.8824%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (757 samples, 0.10%)</title><rect x="5.5520%" y="309" width="0.1044%" height="15" fill="rgb(225,32,20)" fg:x="40275" fg:w="757"/><text x="5.8020%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,154 samples, 0.16%)</title><rect x="5.5041%" y="325" width="0.1591%" height="15" fill="rgb(215,141,46)" fg:x="39927" fg:w="1154"/><text x="5.7541%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,623 samples, 0.22%)</title><rect x="5.4452%" y="341" width="0.2237%" height="15" fill="rgb(250,160,47)" fg:x="39500" fg:w="1623"/><text x="5.6952%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (150 samples, 0.02%)</title><rect x="5.7810%" y="213" width="0.0207%" height="15" fill="rgb(216,222,40)" fg:x="41936" fg:w="150"/><text x="6.0310%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (407 samples, 0.06%)</title><rect x="5.7459%" y="229" width="0.0561%" height="15" fill="rgb(234,217,39)" fg:x="41681" fg:w="407"/><text x="5.9959%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (94 samples, 0.01%)</title><rect x="5.8564%" y="213" width="0.0130%" height="15" fill="rgb(207,178,40)" fg:x="42483" fg:w="94"/><text x="6.1064%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (544 samples, 0.07%)</title><rect x="5.8021%" y="229" width="0.0750%" height="15" fill="rgb(221,136,13)" fg:x="42089" fg:w="544"/><text x="6.0521%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,409 samples, 0.19%)</title><rect x="5.6926%" y="245" width="0.1942%" height="15" fill="rgb(249,199,10)" fg:x="41295" fg:w="1409"/><text x="5.9426%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (124 samples, 0.02%)</title><rect x="5.9495%" y="213" width="0.0171%" height="15" fill="rgb(249,222,13)" fg:x="43158" fg:w="124"/><text x="6.1995%" y="223.50"></text></g><g><title>core::cmp::min (457 samples, 0.06%)</title><rect x="5.9666%" y="213" width="0.0630%" height="15" fill="rgb(244,185,38)" fg:x="43282" fg:w="457"/><text x="6.2166%" y="223.50"></text></g><g><title>core::cmp::Ord::min (457 samples, 0.06%)</title><rect x="5.9666%" y="197" width="0.0630%" height="15" fill="rgb(236,202,9)" fg:x="43282" fg:w="457"/><text x="6.2166%" y="207.50"></text></g><g><title>core::cmp::min_by (440 samples, 0.06%)</title><rect x="5.9689%" y="181" width="0.0607%" height="15" fill="rgb(250,229,37)" fg:x="43299" fg:w="440"/><text x="6.2189%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (128 samples, 0.02%)</title><rect x="6.0119%" y="165" width="0.0176%" height="15" fill="rgb(206,174,23)" fg:x="43611" fg:w="128"/><text x="6.2619%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (99 samples, 0.01%)</title><rect x="6.0159%" y="149" width="0.0136%" height="15" fill="rgb(211,33,43)" fg:x="43640" fg:w="99"/><text x="6.2659%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (416 samples, 0.06%)</title><rect x="6.0296%" y="213" width="0.0573%" height="15" fill="rgb(245,58,50)" fg:x="43739" fg:w="416"/><text x="6.2796%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,912 samples, 0.40%)</title><rect x="5.6892%" y="293" width="0.4014%" height="15" fill="rgb(244,68,36)" fg:x="41270" fg:w="2912"/><text x="5.9392%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,891 samples, 0.40%)</title><rect x="5.6921%" y="277" width="0.3985%" height="15" fill="rgb(232,229,15)" fg:x="41291" fg:w="2891"/><text x="5.9421%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,890 samples, 0.40%)</title><rect x="5.6922%" y="261" width="0.3984%" height="15" fill="rgb(254,30,23)" fg:x="41292" fg:w="2890"/><text x="5.9422%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,478 samples, 0.20%)</title><rect x="5.8869%" y="245" width="0.2037%" height="15" fill="rgb(235,160,14)" fg:x="42704" fg:w="1478"/><text x="6.1369%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,442 samples, 0.20%)</title><rect x="5.8918%" y="229" width="0.1988%" height="15" fill="rgb(212,155,44)" fg:x="42740" fg:w="1442"/><text x="6.1418%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (8,238 samples, 1.14%)</title><rect x="4.9551%" y="373" width="1.1356%" height="15" fill="rgb(226,2,50)" fg:x="35945" fg:w="8238"/><text x="5.2051%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,182 samples, 1.13%)</title><rect x="4.9628%" y="357" width="1.1279%" height="15" fill="rgb(234,177,6)" fg:x="36001" fg:w="8182"/><text x="5.2128%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,060 samples, 0.42%)</title><rect x="5.6689%" y="341" width="0.4218%" height="15" fill="rgb(217,24,9)" fg:x="41123" fg:w="3060"/><text x="5.9189%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,040 samples, 0.42%)</title><rect x="5.6717%" y="325" width="0.4191%" height="15" fill="rgb(220,13,46)" fg:x="41143" fg:w="3040"/><text x="5.9217%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,971 samples, 0.41%)</title><rect x="5.6812%" y="309" width="0.4096%" height="15" fill="rgb(239,221,27)" fg:x="41212" fg:w="2971"/><text x="5.9312%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (104 samples, 0.01%)</title><rect x="6.1383%" y="325" width="0.0143%" height="15" fill="rgb(222,198,25)" fg:x="44528" fg:w="104"/><text x="6.3883%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (213 samples, 0.03%)</title><rect x="6.1234%" y="341" width="0.0294%" height="15" fill="rgb(211,99,13)" fg:x="44420" fg:w="213"/><text x="6.3734%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (359 samples, 0.05%)</title><rect x="6.1120%" y="357" width="0.0495%" height="15" fill="rgb(232,111,31)" fg:x="44337" fg:w="359"/><text x="6.3620%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (116 samples, 0.02%)</title><rect x="6.2315%" y="341" width="0.0160%" height="15" fill="rgb(245,82,37)" fg:x="45204" fg:w="116"/><text x="6.4815%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (148 samples, 0.02%)</title><rect x="6.3185%" y="309" width="0.0204%" height="15" fill="rgb(227,149,46)" fg:x="45835" fg:w="148"/><text x="6.5685%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (542 samples, 0.07%)</title><rect x="6.2847%" y="325" width="0.0747%" height="15" fill="rgb(218,36,50)" fg:x="45590" fg:w="542"/><text x="6.5347%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (149 samples, 0.02%)</title><rect x="6.3389%" y="309" width="0.0205%" height="15" fill="rgb(226,80,48)" fg:x="45983" fg:w="149"/><text x="6.5889%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (129 samples, 0.02%)</title><rect x="6.3417%" y="293" width="0.0178%" height="15" fill="rgb(238,224,15)" fg:x="46003" fg:w="129"/><text x="6.5917%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (837 samples, 0.12%)</title><rect x="6.2475%" y="341" width="0.1154%" height="15" fill="rgb(241,136,10)" fg:x="45320" fg:w="837"/><text x="6.4975%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (111 samples, 0.02%)</title><rect x="6.3867%" y="293" width="0.0153%" height="15" fill="rgb(208,32,45)" fg:x="46330" fg:w="111"/><text x="6.6367%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (181 samples, 0.02%)</title><rect x="6.3775%" y="309" width="0.0250%" height="15" fill="rgb(207,135,9)" fg:x="46263" fg:w="181"/><text x="6.6275%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (188 samples, 0.03%)</title><rect x="6.3768%" y="325" width="0.0259%" height="15" fill="rgb(206,86,44)" fg:x="46258" fg:w="188"/><text x="6.6268%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (104 samples, 0.01%)</title><rect x="6.4227%" y="293" width="0.0143%" height="15" fill="rgb(245,177,15)" fg:x="46591" fg:w="104"/><text x="6.6727%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (218 samples, 0.03%)</title><rect x="6.4073%" y="309" width="0.0301%" height="15" fill="rgb(206,64,50)" fg:x="46479" fg:w="218"/><text x="6.6573%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (279 samples, 0.04%)</title><rect x="6.4027%" y="325" width="0.0385%" height="15" fill="rgb(234,36,40)" fg:x="46446" fg:w="279"/><text x="6.6527%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (269 samples, 0.04%)</title><rect x="6.5207%" y="229" width="0.0371%" height="15" fill="rgb(213,64,8)" fg:x="47302" fg:w="269"/><text x="6.7707%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (572 samples, 0.08%)</title><rect x="6.4834%" y="277" width="0.0789%" height="15" fill="rgb(210,75,36)" fg:x="47031" fg:w="572"/><text x="6.7334%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (513 samples, 0.07%)</title><rect x="6.4915%" y="261" width="0.0707%" height="15" fill="rgb(229,88,21)" fg:x="47090" fg:w="513"/><text x="6.7415%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (513 samples, 0.07%)</title><rect x="6.4915%" y="245" width="0.0707%" height="15" fill="rgb(252,204,47)" fg:x="47090" fg:w="513"/><text x="6.7415%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,497 samples, 0.21%)</title><rect x="6.3659%" y="341" width="0.2064%" height="15" fill="rgb(208,77,27)" fg:x="46179" fg:w="1497"/><text x="6.6159%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (950 samples, 0.13%)</title><rect x="6.4413%" y="325" width="0.1310%" height="15" fill="rgb(221,76,26)" fg:x="46726" fg:w="950"/><text x="6.6913%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (879 samples, 0.12%)</title><rect x="6.4511%" y="309" width="0.1212%" height="15" fill="rgb(225,139,18)" fg:x="46797" fg:w="879"/><text x="6.7011%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (667 samples, 0.09%)</title><rect x="6.4803%" y="293" width="0.0919%" height="15" fill="rgb(230,137,11)" fg:x="47009" fg:w="667"/><text x="6.7303%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (73 samples, 0.01%)</title><rect x="6.5622%" y="277" width="0.0101%" height="15" fill="rgb(212,28,1)" fg:x="47603" fg:w="73"/><text x="6.8122%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (750 samples, 0.10%)</title><rect x="6.5840%" y="341" width="0.1034%" height="15" fill="rgb(248,164,17)" fg:x="47761" fg:w="750"/><text x="6.8340%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (655 samples, 0.09%)</title><rect x="6.5971%" y="325" width="0.0903%" height="15" fill="rgb(222,171,42)" fg:x="47856" fg:w="655"/><text x="6.8471%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (156 samples, 0.02%)</title><rect x="6.6659%" y="309" width="0.0215%" height="15" fill="rgb(243,84,45)" fg:x="48355" fg:w="156"/><text x="6.9159%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (352 samples, 0.05%)</title><rect x="6.7219%" y="325" width="0.0485%" height="15" fill="rgb(252,49,23)" fg:x="48761" fg:w="352"/><text x="6.9719%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (154 samples, 0.02%)</title><rect x="6.7491%" y="309" width="0.0212%" height="15" fill="rgb(215,19,7)" fg:x="48959" fg:w="154"/><text x="6.9991%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (114 samples, 0.02%)</title><rect x="6.8408%" y="309" width="0.0157%" height="15" fill="rgb(238,81,41)" fg:x="49624" fg:w="114"/><text x="7.0908%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (723 samples, 0.10%)</title><rect x="6.7704%" y="325" width="0.0997%" height="15" fill="rgb(210,199,37)" fg:x="49113" fg:w="723"/><text x="7.0204%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (98 samples, 0.01%)</title><rect x="6.8565%" y="309" width="0.0135%" height="15" fill="rgb(244,192,49)" fg:x="49738" fg:w="98"/><text x="7.1065%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,039 samples, 0.28%)</title><rect x="6.6874%" y="341" width="0.2811%" height="15" fill="rgb(226,211,11)" fg:x="48511" fg:w="2039"/><text x="6.9374%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (714 samples, 0.10%)</title><rect x="6.8700%" y="325" width="0.0984%" height="15" fill="rgb(236,162,54)" fg:x="49836" fg:w="714"/><text x="7.1200%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (600 samples, 0.08%)</title><rect x="6.8858%" y="309" width="0.0827%" height="15" fill="rgb(220,229,9)" fg:x="49950" fg:w="600"/><text x="7.1358%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (171 samples, 0.02%)</title><rect x="6.9449%" y="293" width="0.0236%" height="15" fill="rgb(250,87,22)" fg:x="50379" fg:w="171"/><text x="7.1949%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (14,971 samples, 2.06%)</title><rect x="4.9098%" y="389" width="2.0638%" height="15" fill="rgb(239,43,17)" fg:x="35616" fg:w="14971"/><text x="5.1598%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,404 samples, 0.88%)</title><rect x="6.0908%" y="373" width="0.8828%" height="15" fill="rgb(231,177,25)" fg:x="44183" fg:w="6404"/><text x="6.3408%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,854 samples, 0.81%)</title><rect x="6.1666%" y="357" width="0.8070%" height="15" fill="rgb(219,179,1)" fg:x="44733" fg:w="5854"/><text x="6.4166%" y="367.50"></text></g><g><title>__clone3 (36,609 samples, 5.05%)</title><rect x="1.9542%" y="629" width="5.0467%" height="15" fill="rgb(238,219,53)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="639.50">__clon..</text></g><g><title>start_thread (36,609 samples, 5.05%)</title><rect x="1.9542%" y="613" width="5.0467%" height="15" fill="rgb(232,167,36)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="623.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36,609 samples, 5.05%)</title><rect x="1.9542%" y="597" width="5.0467%" height="15" fill="rgb(244,19,51)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="607.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (36,609 samples, 5.05%)</title><rect x="1.9542%" y="581" width="5.0467%" height="15" fill="rgb(224,6,22)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="591.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (36,609 samples, 5.05%)</title><rect x="1.9542%" y="565" width="5.0467%" height="15" fill="rgb(224,145,5)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="575.50">std::t..</text></g><g><title>std::panic::catch_unwind (36,609 samples, 5.05%)</title><rect x="1.9542%" y="549" width="5.0467%" height="15" fill="rgb(234,130,49)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="559.50">std::p..</text></g><g><title>std::panicking::try (36,609 samples, 5.05%)</title><rect x="1.9542%" y="533" width="5.0467%" height="15" fill="rgb(254,6,2)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="543.50">std::p..</text></g><g><title>__rust_try (36,609 samples, 5.05%)</title><rect x="1.9542%" y="517" width="5.0467%" height="15" fill="rgb(208,96,46)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="527.50">__rust..</text></g><g><title>std::panicking::try::do_call (36,609 samples, 5.05%)</title><rect x="1.9542%" y="501" width="5.0467%" height="15" fill="rgb(239,3,39)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="511.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36,609 samples, 5.05%)</title><rect x="1.9542%" y="485" width="5.0467%" height="15" fill="rgb(233,210,1)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="495.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (36,609 samples, 5.05%)</title><rect x="1.9542%" y="469" width="5.0467%" height="15" fill="rgb(244,137,37)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="479.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (36,609 samples, 5.05%)</title><rect x="1.9542%" y="453" width="5.0467%" height="15" fill="rgb(240,136,2)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="463.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (36,609 samples, 5.05%)</title><rect x="1.9542%" y="437" width="5.0467%" height="15" fill="rgb(239,18,37)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="447.50">one_br..</text></g><g><title>one_brc::process_lines (36,609 samples, 5.05%)</title><rect x="1.9542%" y="421" width="5.0467%" height="15" fill="rgb(218,185,22)" fg:x="14176" fg:w="36609"/><text x="2.2042%" y="431.50">one_br..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (15,208 samples, 2.10%)</title><rect x="4.9044%" y="405" width="2.0965%" height="15" fill="rgb(225,218,4)" fg:x="35577" fg:w="15208"/><text x="5.1544%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (179 samples, 0.02%)</title><rect x="6.9762%" y="389" width="0.0247%" height="15" fill="rgb(230,182,32)" fg:x="50606" fg:w="179"/><text x="7.2262%" y="399.50"></text></g><g><title>worker-0 (42,505 samples, 5.86%)</title><rect x="1.1512%" y="645" width="5.8594%" height="15" fill="rgb(242,56,43)" fg:x="8351" fg:w="42505"/><text x="1.4012%" y="655.50">worker-0</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (185 samples, 0.03%)</title><rect x="7.0188%" y="629" width="0.0255%" height="15" fill="rgb(233,99,24)" fg:x="50915" fg:w="185"/><text x="7.2688%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (79 samples, 0.01%)</title><rect x="7.0468%" y="613" width="0.0109%" height="15" fill="rgb(234,209,42)" fg:x="51118" fg:w="79"/><text x="7.2968%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (78 samples, 0.01%)</title><rect x="7.0469%" y="597" width="0.0108%" height="15" fill="rgb(227,7,12)" fg:x="51119" fg:w="78"/><text x="7.2969%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (115 samples, 0.02%)</title><rect x="7.0577%" y="613" width="0.0159%" height="15" fill="rgb(245,203,43)" fg:x="51197" fg:w="115"/><text x="7.3077%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (74 samples, 0.01%)</title><rect x="7.0863%" y="613" width="0.0102%" height="15" fill="rgb(238,205,33)" fg:x="51405" fg:w="74"/><text x="7.3363%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.01%)</title><rect x="7.1324%" y="613" width="0.0120%" height="15" fill="rgb(231,56,7)" fg:x="51739" fg:w="87"/><text x="7.3824%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (162 samples, 0.02%)</title><rect x="7.1471%" y="613" width="0.0223%" height="15" fill="rgb(244,186,29)" fg:x="51846" fg:w="162"/><text x="7.3971%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (155 samples, 0.02%)</title><rect x="7.1861%" y="613" width="0.0214%" height="15" fill="rgb(234,111,31)" fg:x="52129" fg:w="155"/><text x="7.4361%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (87 samples, 0.01%)</title><rect x="7.1955%" y="597" width="0.0120%" height="15" fill="rgb(241,149,10)" fg:x="52197" fg:w="87"/><text x="7.4455%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (113 samples, 0.02%)</title><rect x="7.2075%" y="613" width="0.0156%" height="15" fill="rgb(249,206,44)" fg:x="52284" fg:w="113"/><text x="7.4575%" y="623.50"></text></g><g><title>__memcpy_evex_unaligned_erms (76 samples, 0.01%)</title><rect x="7.2231%" y="613" width="0.0105%" height="15" fill="rgb(251,153,30)" fg:x="52397" fg:w="76"/><text x="7.4731%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (82 samples, 0.01%)</title><rect x="7.2446%" y="613" width="0.0113%" height="15" fill="rgb(239,152,38)" fg:x="52553" fg:w="82"/><text x="7.4946%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (83 samples, 0.01%)</title><rect x="7.2607%" y="613" width="0.0114%" height="15" fill="rgb(249,139,47)" fg:x="52670" fg:w="83"/><text x="7.5107%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (80 samples, 0.01%)</title><rect x="7.2817%" y="613" width="0.0110%" height="15" fill="rgb(244,64,35)" fg:x="52822" fg:w="80"/><text x="7.5317%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (95 samples, 0.01%)</title><rect x="7.3030%" y="613" width="0.0131%" height="15" fill="rgb(216,46,15)" fg:x="52977" fg:w="95"/><text x="7.5530%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (111 samples, 0.02%)</title><rect x="7.3161%" y="613" width="0.0153%" height="15" fill="rgb(250,74,19)" fg:x="53072" fg:w="111"/><text x="7.5661%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (75 samples, 0.01%)</title><rect x="7.3314%" y="613" width="0.0103%" height="15" fill="rgb(249,42,33)" fg:x="53183" fg:w="75"/><text x="7.5814%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (109 samples, 0.02%)</title><rect x="7.3418%" y="613" width="0.0150%" height="15" fill="rgb(242,149,17)" fg:x="53258" fg:w="109"/><text x="7.5918%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (97 samples, 0.01%)</title><rect x="7.3652%" y="613" width="0.0134%" height="15" fill="rgb(244,29,21)" fg:x="53428" fg:w="97"/><text x="7.6152%" y="623.50"></text></g><g><title>[anon] (2,671 samples, 0.37%)</title><rect x="7.0468%" y="629" width="0.3682%" height="15" fill="rgb(220,130,37)" fg:x="51118" fg:w="2671"/><text x="7.2968%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (169 samples, 0.02%)</title><rect x="7.4238%" y="613" width="0.0233%" height="15" fill="rgb(211,67,2)" fg:x="53853" fg:w="169"/><text x="7.6738%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (74 samples, 0.01%)</title><rect x="7.4508%" y="613" width="0.0102%" height="15" fill="rgb(235,68,52)" fg:x="54049" fg:w="74"/><text x="7.7008%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (126 samples, 0.02%)</title><rect x="7.4610%" y="613" width="0.0174%" height="15" fill="rgb(246,142,3)" fg:x="54123" fg:w="126"/><text x="7.7110%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (79 samples, 0.01%)</title><rect x="7.5009%" y="613" width="0.0109%" height="15" fill="rgb(241,25,7)" fg:x="54412" fg:w="79"/><text x="7.7509%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (212 samples, 0.03%)</title><rect x="7.5120%" y="613" width="0.0292%" height="15" fill="rgb(242,119,39)" fg:x="54493" fg:w="212"/><text x="7.7620%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (212 samples, 0.03%)</title><rect x="7.5120%" y="597" width="0.0292%" height="15" fill="rgb(241,98,45)" fg:x="54493" fg:w="212"/><text x="7.7620%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (212 samples, 0.03%)</title><rect x="7.5120%" y="581" width="0.0292%" height="15" fill="rgb(254,28,30)" fg:x="54493" fg:w="212"/><text x="7.7620%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (83 samples, 0.01%)</title><rect x="7.5298%" y="565" width="0.0114%" height="15" fill="rgb(241,142,54)" fg:x="54622" fg:w="83"/><text x="7.7798%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (99 samples, 0.01%)</title><rect x="7.5690%" y="613" width="0.0136%" height="15" fill="rgb(222,85,15)" fg:x="54906" fg:w="99"/><text x="7.8190%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (129 samples, 0.02%)</title><rect x="7.5836%" y="613" width="0.0178%" height="15" fill="rgb(210,85,47)" fg:x="55012" fg:w="129"/><text x="7.8336%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (126 samples, 0.02%)</title><rect x="7.6202%" y="613" width="0.0174%" height="15" fill="rgb(224,206,25)" fg:x="55278" fg:w="126"/><text x="7.8702%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (124 samples, 0.02%)</title><rect x="7.6474%" y="613" width="0.0171%" height="15" fill="rgb(243,201,19)" fg:x="55475" fg:w="124"/><text x="7.8974%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (85 samples, 0.01%)</title><rect x="7.6868%" y="613" width="0.0117%" height="15" fill="rgb(236,59,4)" fg:x="55761" fg:w="85"/><text x="7.9368%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (90 samples, 0.01%)</title><rect x="7.7043%" y="613" width="0.0124%" height="15" fill="rgb(254,179,45)" fg:x="55888" fg:w="90"/><text x="7.9543%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (110 samples, 0.02%)</title><rect x="7.7333%" y="613" width="0.0152%" height="15" fill="rgb(226,14,10)" fg:x="56098" fg:w="110"/><text x="7.9833%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (195 samples, 0.03%)</title><rect x="7.7484%" y="613" width="0.0269%" height="15" fill="rgb(244,27,41)" fg:x="56208" fg:w="195"/><text x="7.9984%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (163 samples, 0.02%)</title><rect x="7.7529%" y="597" width="0.0225%" height="15" fill="rgb(235,35,32)" fg:x="56240" fg:w="163"/><text x="8.0029%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (85 samples, 0.01%)</title><rect x="7.7636%" y="581" width="0.0117%" height="15" fill="rgb(218,68,31)" fg:x="56318" fg:w="85"/><text x="8.0136%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (133 samples, 0.02%)</title><rect x="7.7753%" y="613" width="0.0183%" height="15" fill="rgb(207,120,37)" fg:x="56403" fg:w="133"/><text x="8.0253%" y="623.50"></text></g><g><title>one_brc::process_lines (332 samples, 0.05%)</title><rect x="7.8030%" y="613" width="0.0458%" height="15" fill="rgb(227,98,0)" fg:x="56604" fg:w="332"/><text x="8.0530%" y="623.50"></text></g><g><title>[unknown] (3,387 samples, 0.47%)</title><rect x="7.4150%" y="629" width="0.4669%" height="15" fill="rgb(207,7,3)" fg:x="53789" fg:w="3387"/><text x="7.6650%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (100 samples, 0.01%)</title><rect x="8.2112%" y="325" width="0.0138%" height="15" fill="rgb(206,98,19)" fg:x="59565" fg:w="100"/><text x="8.4612%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (383 samples, 0.05%)</title><rect x="8.2311%" y="293" width="0.0528%" height="15" fill="rgb(217,5,26)" fg:x="59709" fg:w="383"/><text x="8.4811%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (187 samples, 0.03%)</title><rect x="8.2581%" y="277" width="0.0258%" height="15" fill="rgb(235,190,38)" fg:x="59905" fg:w="187"/><text x="8.5081%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (147 samples, 0.02%)</title><rect x="8.2636%" y="261" width="0.0203%" height="15" fill="rgb(247,86,24)" fg:x="59945" fg:w="147"/><text x="8.5136%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (147 samples, 0.02%)</title><rect x="8.2636%" y="245" width="0.0203%" height="15" fill="rgb(205,101,16)" fg:x="59945" fg:w="147"/><text x="8.5136%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (428 samples, 0.06%)</title><rect x="8.2250%" y="325" width="0.0590%" height="15" fill="rgb(246,168,33)" fg:x="59665" fg:w="428"/><text x="8.4750%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (426 samples, 0.06%)</title><rect x="8.2253%" y="309" width="0.0587%" height="15" fill="rgb(231,114,1)" fg:x="59667" fg:w="426"/><text x="8.4753%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (260 samples, 0.04%)</title><rect x="8.3327%" y="277" width="0.0358%" height="15" fill="rgb(207,184,53)" fg:x="60446" fg:w="260"/><text x="8.5827%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (661 samples, 0.09%)</title><rect x="8.2840%" y="325" width="0.0911%" height="15" fill="rgb(224,95,51)" fg:x="60093" fg:w="661"/><text x="8.5340%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (588 samples, 0.08%)</title><rect x="8.2941%" y="309" width="0.0811%" height="15" fill="rgb(212,188,45)" fg:x="60166" fg:w="588"/><text x="8.5441%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (588 samples, 0.08%)</title><rect x="8.2941%" y="293" width="0.0811%" height="15" fill="rgb(223,154,38)" fg:x="60166" fg:w="588"/><text x="8.5441%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (329 samples, 0.05%)</title><rect x="8.4516%" y="293" width="0.0454%" height="15" fill="rgb(251,22,52)" fg:x="61309" fg:w="329"/><text x="8.7016%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (276 samples, 0.04%)</title><rect x="8.4589%" y="277" width="0.0380%" height="15" fill="rgb(229,209,22)" fg:x="61362" fg:w="276"/><text x="8.7089%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (271 samples, 0.04%)</title><rect x="8.4596%" y="261" width="0.0374%" height="15" fill="rgb(234,138,34)" fg:x="61367" fg:w="271"/><text x="8.7096%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (893 samples, 0.12%)</title><rect x="8.3751%" y="325" width="0.1231%" height="15" fill="rgb(212,95,11)" fg:x="60754" fg:w="893"/><text x="8.6251%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (802 samples, 0.11%)</title><rect x="8.3877%" y="309" width="0.1106%" height="15" fill="rgb(240,179,47)" fg:x="60845" fg:w="802"/><text x="8.6377%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (76 samples, 0.01%)</title><rect x="8.6045%" y="293" width="0.0105%" height="15" fill="rgb(240,163,11)" fg:x="62418" fg:w="76"/><text x="8.8545%" y="303.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (99 samples, 0.01%)</title><rect x="8.6190%" y="293" width="0.0136%" height="15" fill="rgb(236,37,12)" fg:x="62523" fg:w="99"/><text x="8.8690%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,716 samples, 0.24%)</title><rect x="8.5020%" y="325" width="0.2366%" height="15" fill="rgb(232,164,16)" fg:x="61674" fg:w="1716"/><text x="8.7520%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,604 samples, 0.22%)</title><rect x="8.5174%" y="309" width="0.2211%" height="15" fill="rgb(244,205,15)" fg:x="61786" fg:w="1604"/><text x="8.7674%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (767 samples, 0.11%)</title><rect x="8.6328%" y="293" width="0.1057%" height="15" fill="rgb(223,117,47)" fg:x="62623" fg:w="767"/><text x="8.8828%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,041 samples, 0.69%)</title><rect x="8.0502%" y="341" width="0.6949%" height="15" fill="rgb(244,107,35)" fg:x="58397" fg:w="5041"/><text x="8.3002%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,542 samples, 0.76%)</title><rect x="8.0028%" y="373" width="0.7640%" height="15" fill="rgb(205,140,8)" fg:x="58053" fg:w="5542"/><text x="8.2528%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,535 samples, 0.76%)</title><rect x="8.0037%" y="357" width="0.7630%" height="15" fill="rgb(228,84,46)" fg:x="58060" fg:w="5535"/><text x="8.2537%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (156 samples, 0.02%)</title><rect x="8.7453%" y="341" width="0.0215%" height="15" fill="rgb(254,188,9)" fg:x="63439" fg:w="156"/><text x="8.9953%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (156 samples, 0.02%)</title><rect x="8.7453%" y="325" width="0.0215%" height="15" fill="rgb(206,112,54)" fg:x="63439" fg:w="156"/><text x="8.9953%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (99 samples, 0.01%)</title><rect x="8.7531%" y="309" width="0.0136%" height="15" fill="rgb(216,84,49)" fg:x="63496" fg:w="99"/><text x="9.0031%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (73 samples, 0.01%)</title><rect x="8.7567%" y="293" width="0.0101%" height="15" fill="rgb(214,194,35)" fg:x="63522" fg:w="73"/><text x="9.0067%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (538 samples, 0.07%)</title><rect x="9.1209%" y="181" width="0.0742%" height="15" fill="rgb(249,28,3)" fg:x="66164" fg:w="538"/><text x="9.3709%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,399 samples, 0.19%)</title><rect x="9.0121%" y="229" width="0.1929%" height="15" fill="rgb(222,56,52)" fg:x="65375" fg:w="1399"/><text x="9.2621%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,138 samples, 0.16%)</title><rect x="9.0481%" y="213" width="0.1569%" height="15" fill="rgb(245,217,50)" fg:x="65636" fg:w="1138"/><text x="9.2981%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,103 samples, 0.15%)</title><rect x="9.0529%" y="197" width="0.1521%" height="15" fill="rgb(213,201,24)" fg:x="65671" fg:w="1103"/><text x="9.3029%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (333 samples, 0.05%)</title><rect x="9.2129%" y="181" width="0.0459%" height="15" fill="rgb(248,116,28)" fg:x="66831" fg:w="333"/><text x="9.4629%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (260 samples, 0.04%)</title><rect x="9.2229%" y="165" width="0.0358%" height="15" fill="rgb(219,72,43)" fg:x="66904" fg:w="260"/><text x="9.4729%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (243 samples, 0.03%)</title><rect x="9.2253%" y="149" width="0.0335%" height="15" fill="rgb(209,138,14)" fg:x="66921" fg:w="243"/><text x="9.4753%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,610 samples, 0.36%)</title><rect x="8.9129%" y="261" width="0.3598%" height="15" fill="rgb(222,18,33)" fg:x="64655" fg:w="2610"/><text x="9.1629%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,610 samples, 0.36%)</title><rect x="8.9129%" y="245" width="0.3598%" height="15" fill="rgb(213,199,7)" fg:x="64655" fg:w="2610"/><text x="9.1629%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (491 samples, 0.07%)</title><rect x="9.2050%" y="229" width="0.0677%" height="15" fill="rgb(250,110,10)" fg:x="66774" fg:w="491"/><text x="9.4550%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (491 samples, 0.07%)</title><rect x="9.2050%" y="213" width="0.0677%" height="15" fill="rgb(248,123,6)" fg:x="66774" fg:w="491"/><text x="9.4550%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (434 samples, 0.06%)</title><rect x="9.2129%" y="197" width="0.0598%" height="15" fill="rgb(206,91,31)" fg:x="66831" fg:w="434"/><text x="9.4629%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (101 samples, 0.01%)</title><rect x="9.2588%" y="181" width="0.0139%" height="15" fill="rgb(211,154,13)" fg:x="67164" fg:w="101"/><text x="9.5088%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (101 samples, 0.01%)</title><rect x="9.2588%" y="165" width="0.0139%" height="15" fill="rgb(225,148,7)" fg:x="67164" fg:w="101"/><text x="9.5088%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,114 samples, 0.43%)</title><rect x="8.8732%" y="277" width="0.4293%" height="15" fill="rgb(220,160,43)" fg:x="64367" fg:w="3114"/><text x="9.1232%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (208 samples, 0.03%)</title><rect x="9.2738%" y="261" width="0.0287%" height="15" fill="rgb(213,52,39)" fg:x="67273" fg:w="208"/><text x="9.5238%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (208 samples, 0.03%)</title><rect x="9.2738%" y="245" width="0.0287%" height="15" fill="rgb(243,137,7)" fg:x="67273" fg:w="208"/><text x="9.5238%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (208 samples, 0.03%)</title><rect x="9.2738%" y="229" width="0.0287%" height="15" fill="rgb(230,79,13)" fg:x="67273" fg:w="208"/><text x="9.5238%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (89 samples, 0.01%)</title><rect x="9.3976%" y="245" width="0.0123%" height="15" fill="rgb(247,105,23)" fg:x="68171" fg:w="89"/><text x="9.6476%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (251 samples, 0.03%)</title><rect x="9.4835%" y="165" width="0.0346%" height="15" fill="rgb(223,179,41)" fg:x="68794" fg:w="251"/><text x="9.7335%" y="175.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,091 samples, 0.70%)</title><rect x="8.8179%" y="325" width="0.7018%" height="15" fill="rgb(218,9,34)" fg:x="63966" fg:w="5091"/><text x="9.0679%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,788 samples, 0.66%)</title><rect x="8.8597%" y="309" width="0.6600%" height="15" fill="rgb(222,106,8)" fg:x="64269" fg:w="4788"/><text x="9.1097%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,786 samples, 0.66%)</title><rect x="8.8600%" y="293" width="0.6598%" height="15" fill="rgb(211,220,0)" fg:x="64271" fg:w="4786"/><text x="9.1100%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,576 samples, 0.22%)</title><rect x="9.3025%" y="277" width="0.2173%" height="15" fill="rgb(229,52,16)" fg:x="67481" fg:w="1576"/><text x="9.5525%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,499 samples, 0.21%)</title><rect x="9.3131%" y="261" width="0.2066%" height="15" fill="rgb(212,155,18)" fg:x="67558" fg:w="1499"/><text x="9.5631%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (797 samples, 0.11%)</title><rect x="9.4099%" y="245" width="0.1099%" height="15" fill="rgb(242,21,14)" fg:x="68260" fg:w="797"/><text x="9.6599%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (788 samples, 0.11%)</title><rect x="9.4111%" y="229" width="0.1086%" height="15" fill="rgb(222,19,48)" fg:x="68269" fg:w="788"/><text x="9.6611%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (715 samples, 0.10%)</title><rect x="9.4212%" y="213" width="0.0986%" height="15" fill="rgb(232,45,27)" fg:x="68342" fg:w="715"/><text x="9.6712%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (331 samples, 0.05%)</title><rect x="9.4741%" y="197" width="0.0456%" height="15" fill="rgb(249,103,42)" fg:x="68726" fg:w="331"/><text x="9.7241%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (263 samples, 0.04%)</title><rect x="9.4835%" y="181" width="0.0363%" height="15" fill="rgb(246,81,33)" fg:x="68794" fg:w="263"/><text x="9.7335%" y="191.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11,116 samples, 1.53%)</title><rect x="7.9876%" y="405" width="1.5324%" height="15" fill="rgb(252,33,42)" fg:x="57943" fg:w="11116"/><text x="8.2376%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,107 samples, 1.53%)</title><rect x="7.9889%" y="389" width="1.5311%" height="15" fill="rgb(209,212,41)" fg:x="57952" fg:w="11107"/><text x="8.2389%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,464 samples, 0.75%)</title><rect x="8.7668%" y="373" width="0.7532%" height="15" fill="rgb(207,154,6)" fg:x="63595" fg:w="5464"/><text x="9.0168%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,267 samples, 0.73%)</title><rect x="8.7939%" y="357" width="0.7261%" height="15" fill="rgb(223,64,47)" fg:x="63792" fg:w="5267"/><text x="9.0439%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,213 samples, 0.72%)</title><rect x="8.8014%" y="341" width="0.7186%" height="15" fill="rgb(211,161,38)" fg:x="63846" fg:w="5213"/><text x="9.0514%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (359 samples, 0.05%)</title><rect x="9.5203%" y="405" width="0.0495%" height="15" fill="rgb(219,138,40)" fg:x="69061" fg:w="359"/><text x="9.7703%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (192 samples, 0.03%)</title><rect x="9.5698%" y="405" width="0.0265%" height="15" fill="rgb(241,228,46)" fg:x="69420" fg:w="192"/><text x="9.8198%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (157 samples, 0.02%)</title><rect x="9.6308%" y="341" width="0.0216%" height="15" fill="rgb(223,209,38)" fg:x="69863" fg:w="157"/><text x="9.8808%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (245 samples, 0.03%)</title><rect x="9.6525%" y="341" width="0.0338%" height="15" fill="rgb(236,164,45)" fg:x="70020" fg:w="245"/><text x="9.9025%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (488 samples, 0.07%)</title><rect x="9.6245%" y="357" width="0.0673%" height="15" fill="rgb(231,15,5)" fg:x="69817" fg:w="488"/><text x="9.8745%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (132 samples, 0.02%)</title><rect x="9.7075%" y="341" width="0.0182%" height="15" fill="rgb(252,35,15)" fg:x="70419" fg:w="132"/><text x="9.9575%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (326 samples, 0.04%)</title><rect x="9.7517%" y="309" width="0.0449%" height="15" fill="rgb(248,181,18)" fg:x="70740" fg:w="326"/><text x="10.0017%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (410 samples, 0.06%)</title><rect x="9.7408%" y="325" width="0.0565%" height="15" fill="rgb(233,39,42)" fg:x="70661" fg:w="410"/><text x="9.9908%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,470 samples, 0.20%)</title><rect x="9.5962%" y="405" width="0.2026%" height="15" fill="rgb(238,110,33)" fg:x="69612" fg:w="1470"/><text x="9.8462%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,444 samples, 0.20%)</title><rect x="9.5998%" y="389" width="0.1991%" height="15" fill="rgb(233,195,10)" fg:x="69638" fg:w="1444"/><text x="9.8498%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,398 samples, 0.19%)</title><rect x="9.6062%" y="373" width="0.1927%" height="15" fill="rgb(254,105,3)" fg:x="69684" fg:w="1398"/><text x="9.8562%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (777 samples, 0.11%)</title><rect x="9.6918%" y="357" width="0.1071%" height="15" fill="rgb(221,225,9)" fg:x="70305" fg:w="777"/><text x="9.9418%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (531 samples, 0.07%)</title><rect x="9.7257%" y="341" width="0.0732%" height="15" fill="rgb(224,227,45)" fg:x="70551" fg:w="531"/><text x="9.9757%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (92 samples, 0.01%)</title><rect x="9.9841%" y="261" width="0.0127%" height="15" fill="rgb(229,198,43)" fg:x="72426" fg:w="92"/><text x="10.2341%" y="271.50"></text></g><g><title>core::char::methods::encode_utf8_raw (746 samples, 0.10%)</title><rect x="9.8943%" y="357" width="0.1028%" height="15" fill="rgb(206,209,35)" fg:x="71774" fg:w="746"/><text x="10.1443%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (343 samples, 0.05%)</title><rect x="9.9498%" y="341" width="0.0473%" height="15" fill="rgb(245,195,53)" fg:x="72177" fg:w="343"/><text x="10.1998%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (332 samples, 0.05%)</title><rect x="9.9513%" y="325" width="0.0458%" height="15" fill="rgb(240,92,26)" fg:x="72188" fg:w="332"/><text x="10.2013%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (313 samples, 0.04%)</title><rect x="9.9540%" y="309" width="0.0431%" height="15" fill="rgb(207,40,23)" fg:x="72207" fg:w="313"/><text x="10.2040%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (127 samples, 0.02%)</title><rect x="9.9796%" y="293" width="0.0175%" height="15" fill="rgb(223,111,35)" fg:x="72393" fg:w="127"/><text x="10.2296%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (94 samples, 0.01%)</title><rect x="9.9841%" y="277" width="0.0130%" height="15" fill="rgb(229,147,28)" fg:x="72426" fg:w="94"/><text x="10.2341%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (807 samples, 0.11%)</title><rect x="9.8863%" y="373" width="0.1112%" height="15" fill="rgb(211,29,28)" fg:x="71716" fg:w="807"/><text x="10.1363%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,084 samples, 0.15%)</title><rect x="9.8518%" y="389" width="0.1494%" height="15" fill="rgb(228,72,33)" fg:x="71466" fg:w="1084"/><text x="10.1018%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (129 samples, 0.02%)</title><rect x="10.1458%" y="373" width="0.0178%" height="15" fill="rgb(205,214,31)" fg:x="73599" fg:w="129"/><text x="10.3958%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (299 samples, 0.04%)</title><rect x="10.1700%" y="341" width="0.0412%" height="15" fill="rgb(224,111,15)" fg:x="73774" fg:w="299"/><text x="10.4200%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (136 samples, 0.02%)</title><rect x="10.1924%" y="325" width="0.0187%" height="15" fill="rgb(253,21,26)" fg:x="73937" fg:w="136"/><text x="10.4424%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (116 samples, 0.02%)</title><rect x="10.1952%" y="309" width="0.0160%" height="15" fill="rgb(245,139,43)" fg:x="73957" fg:w="116"/><text x="10.4452%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (116 samples, 0.02%)</title><rect x="10.1952%" y="293" width="0.0160%" height="15" fill="rgb(252,170,7)" fg:x="73957" fg:w="116"/><text x="10.4452%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (329 samples, 0.05%)</title><rect x="10.1660%" y="373" width="0.0454%" height="15" fill="rgb(231,118,14)" fg:x="73745" fg:w="329"/><text x="10.4160%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (329 samples, 0.05%)</title><rect x="10.1660%" y="357" width="0.0454%" height="15" fill="rgb(238,83,0)" fg:x="73745" fg:w="329"/><text x="10.4160%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (152 samples, 0.02%)</title><rect x="10.2582%" y="325" width="0.0210%" height="15" fill="rgb(221,39,39)" fg:x="74414" fg:w="152"/><text x="10.5082%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (543 samples, 0.07%)</title><rect x="10.2113%" y="373" width="0.0749%" height="15" fill="rgb(222,119,46)" fg:x="74074" fg:w="543"/><text x="10.4613%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (474 samples, 0.07%)</title><rect x="10.2208%" y="357" width="0.0653%" height="15" fill="rgb(222,165,49)" fg:x="74143" fg:w="474"/><text x="10.4708%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (474 samples, 0.07%)</title><rect x="10.2208%" y="341" width="0.0653%" height="15" fill="rgb(219,113,52)" fg:x="74143" fg:w="474"/><text x="10.4708%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (865 samples, 0.12%)</title><rect x="10.2862%" y="373" width="0.1192%" height="15" fill="rgb(214,7,15)" fg:x="74617" fg:w="865"/><text x="10.5362%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (767 samples, 0.11%)</title><rect x="10.2997%" y="357" width="0.1057%" height="15" fill="rgb(235,32,4)" fg:x="74715" fg:w="767"/><text x="10.5497%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (333 samples, 0.05%)</title><rect x="10.3595%" y="341" width="0.0459%" height="15" fill="rgb(238,90,54)" fg:x="75149" fg:w="333"/><text x="10.6095%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (264 samples, 0.04%)</title><rect x="10.3690%" y="325" width="0.0364%" height="15" fill="rgb(213,208,19)" fg:x="75218" fg:w="264"/><text x="10.6190%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (255 samples, 0.04%)</title><rect x="10.3703%" y="309" width="0.0352%" height="15" fill="rgb(233,156,4)" fg:x="75227" fg:w="255"/><text x="10.6203%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned (121 samples, 0.02%)</title><rect x="10.4177%" y="357" width="0.0167%" height="15" fill="rgb(207,194,5)" fg:x="75571" fg:w="121"/><text x="10.6677%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (81 samples, 0.01%)</title><rect x="10.4232%" y="341" width="0.0112%" height="15" fill="rgb(206,111,30)" fg:x="75611" fg:w="81"/><text x="10.6732%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,142 samples, 0.30%)</title><rect x="10.4094%" y="373" width="0.2953%" height="15" fill="rgb(243,70,54)" fg:x="75511" fg:w="2142"/><text x="10.6594%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,961 samples, 0.27%)</title><rect x="10.4344%" y="357" width="0.2703%" height="15" fill="rgb(242,28,8)" fg:x="75692" fg:w="1961"/><text x="10.6844%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,103 samples, 0.70%)</title><rect x="10.0085%" y="389" width="0.7035%" height="15" fill="rgb(219,106,18)" fg:x="72603" fg:w="5103"/><text x="10.2585%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (204 samples, 0.03%)</title><rect x="10.7123%" y="373" width="0.0281%" height="15" fill="rgb(244,222,10)" fg:x="77708" fg:w="204"/><text x="10.9623%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (144 samples, 0.02%)</title><rect x="10.7206%" y="357" width="0.0199%" height="15" fill="rgb(236,179,52)" fg:x="77768" fg:w="144"/><text x="10.9706%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (90 samples, 0.01%)</title><rect x="10.7280%" y="341" width="0.0124%" height="15" fill="rgb(213,23,39)" fg:x="77822" fg:w="90"/><text x="10.9780%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (85 samples, 0.01%)</title><rect x="10.7287%" y="325" width="0.0117%" height="15" fill="rgb(238,48,10)" fg:x="77827" fg:w="85"/><text x="10.9787%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (82 samples, 0.01%)</title><rect x="10.7408%" y="341" width="0.0113%" height="15" fill="rgb(251,196,23)" fg:x="77915" fg:w="82"/><text x="10.9908%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,991 samples, 0.96%)</title><rect x="9.7989%" y="405" width="0.9637%" height="15" fill="rgb(250,152,24)" fg:x="71082" fg:w="6991"/><text x="10.0489%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (365 samples, 0.05%)</title><rect x="10.7123%" y="389" width="0.0503%" height="15" fill="rgb(209,150,17)" fg:x="77708" fg:w="365"/><text x="10.9623%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="10.7404%" y="373" width="0.0222%" height="15" fill="rgb(234,202,34)" fg:x="77912" fg:w="161"/><text x="10.9904%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="10.7404%" y="357" width="0.0222%" height="15" fill="rgb(253,148,53)" fg:x="77912" fg:w="161"/><text x="10.9904%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (76 samples, 0.01%)</title><rect x="10.7521%" y="341" width="0.0105%" height="15" fill="rgb(218,129,16)" fg:x="77997" fg:w="76"/><text x="11.0021%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (74 samples, 0.01%)</title><rect x="10.7524%" y="325" width="0.0102%" height="15" fill="rgb(216,85,19)" fg:x="77999" fg:w="74"/><text x="11.0024%" y="335.50"></text></g><g><title>one_brc::round_towards_positive (645 samples, 0.09%)</title><rect x="10.7626%" y="405" width="0.0889%" height="15" fill="rgb(235,228,7)" fg:x="78073" fg:w="645"/><text x="11.0126%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (153 samples, 0.02%)</title><rect x="10.8304%" y="389" width="0.0211%" height="15" fill="rgb(245,175,0)" fg:x="78565" fg:w="153"/><text x="11.0804%" y="399.50"></text></g><g><title>__round (123 samples, 0.02%)</title><rect x="10.8346%" y="373" width="0.0170%" height="15" fill="rgb(208,168,36)" fg:x="78595" fg:w="123"/><text x="11.0846%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (89 samples, 0.01%)</title><rect x="10.9669%" y="357" width="0.0123%" height="15" fill="rgb(246,171,24)" fg:x="79555" fg:w="89"/><text x="11.2169%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (613 samples, 0.08%)</title><rect x="10.9148%" y="389" width="0.0845%" height="15" fill="rgb(215,142,24)" fg:x="79177" fg:w="613"/><text x="11.1648%" y="399.50"></text></g><g><title>one_brc::Measurement::record (516 samples, 0.07%)</title><rect x="10.9282%" y="373" width="0.0711%" height="15" fill="rgb(250,187,7)" fg:x="79274" fg:w="516"/><text x="11.1782%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (146 samples, 0.02%)</title><rect x="10.9792%" y="357" width="0.0201%" height="15" fill="rgb(228,66,33)" fg:x="79644" fg:w="146"/><text x="11.2292%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (108 samples, 0.01%)</title><rect x="11.0136%" y="325" width="0.0149%" height="15" fill="rgb(234,215,21)" fg:x="79894" fg:w="108"/><text x="11.2636%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (191 samples, 0.03%)</title><rect x="11.0054%" y="341" width="0.0263%" height="15" fill="rgb(222,191,20)" fg:x="79834" fg:w="191"/><text x="11.2554%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (212 samples, 0.03%)</title><rect x="11.0029%" y="357" width="0.0292%" height="15" fill="rgb(245,79,54)" fg:x="79816" fg:w="212"/><text x="11.2529%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,316 samples, 0.18%)</title><rect x="10.8515%" y="405" width="0.1814%" height="15" fill="rgb(240,10,37)" fg:x="78718" fg:w="1316"/><text x="11.1015%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (244 samples, 0.03%)</title><rect x="10.9993%" y="389" width="0.0336%" height="15" fill="rgb(214,192,32)" fg:x="79790" fg:w="244"/><text x="11.2493%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (241 samples, 0.03%)</title><rect x="10.9997%" y="373" width="0.0332%" height="15" fill="rgb(209,36,54)" fg:x="79793" fg:w="241"/><text x="11.2497%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (128 samples, 0.02%)</title><rect x="11.0673%" y="341" width="0.0176%" height="15" fill="rgb(220,10,11)" fg:x="80283" fg:w="128"/><text x="11.3173%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (439 samples, 0.06%)</title><rect x="11.0329%" y="405" width="0.0605%" height="15" fill="rgb(221,106,17)" fg:x="80034" fg:w="439"/><text x="11.2829%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (275 samples, 0.04%)</title><rect x="11.0555%" y="389" width="0.0379%" height="15" fill="rgb(251,142,44)" fg:x="80198" fg:w="275"/><text x="11.3055%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (202 samples, 0.03%)</title><rect x="11.0656%" y="373" width="0.0278%" height="15" fill="rgb(238,13,15)" fg:x="80271" fg:w="202"/><text x="11.3156%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (196 samples, 0.03%)</title><rect x="11.0664%" y="357" width="0.0270%" height="15" fill="rgb(208,107,27)" fg:x="80277" fg:w="196"/><text x="11.3164%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (292 samples, 0.04%)</title><rect x="11.3089%" y="277" width="0.0403%" height="15" fill="rgb(205,136,37)" fg:x="82036" fg:w="292"/><text x="11.5589%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (883 samples, 0.12%)</title><rect x="11.2288%" y="293" width="0.1217%" height="15" fill="rgb(250,205,27)" fg:x="81455" fg:w="883"/><text x="11.4788%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (768 samples, 0.11%)</title><rect x="11.5773%" y="277" width="0.1059%" height="15" fill="rgb(210,80,43)" fg:x="83983" fg:w="768"/><text x="11.8273%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,459 samples, 0.34%)</title><rect x="11.3505%" y="293" width="0.3390%" height="15" fill="rgb(247,160,36)" fg:x="82338" fg:w="2459"/><text x="11.6005%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,663 samples, 0.50%)</title><rect x="11.1847%" y="309" width="0.5050%" height="15" fill="rgb(234,13,49)" fg:x="81135" fg:w="3663"/><text x="11.4347%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,700 samples, 0.51%)</title><rect x="11.1803%" y="341" width="0.5101%" height="15" fill="rgb(234,122,0)" fg:x="81103" fg:w="3700"/><text x="11.4303%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,668 samples, 0.51%)</title><rect x="11.1847%" y="325" width="0.5056%" height="15" fill="rgb(207,146,38)" fg:x="81135" fg:w="3668"/><text x="11.4347%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (377 samples, 0.05%)</title><rect x="11.6997%" y="325" width="0.0520%" height="15" fill="rgb(207,177,25)" fg:x="84871" fg:w="377"/><text x="11.9497%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (405 samples, 0.06%)</title><rect x="11.7524%" y="309" width="0.0558%" height="15" fill="rgb(211,178,42)" fg:x="85253" fg:w="405"/><text x="12.0024%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (476 samples, 0.07%)</title><rect x="11.8321%" y="293" width="0.0656%" height="15" fill="rgb(230,69,54)" fg:x="85831" fg:w="476"/><text x="12.0821%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (146 samples, 0.02%)</title><rect x="11.8977%" y="293" width="0.0201%" height="15" fill="rgb(214,135,41)" fg:x="86307" fg:w="146"/><text x="12.1477%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (825 samples, 0.11%)</title><rect x="11.8082%" y="309" width="0.1137%" height="15" fill="rgb(237,67,25)" fg:x="85658" fg:w="825"/><text x="12.0582%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,287 samples, 0.18%)</title><rect x="11.7517%" y="325" width="0.1774%" height="15" fill="rgb(222,189,50)" fg:x="85248" fg:w="1287"/><text x="12.0017%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,778 samples, 0.25%)</title><rect x="11.6904%" y="341" width="0.2451%" height="15" fill="rgb(245,148,34)" fg:x="84803" fg:w="1778"/><text x="11.9404%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (137 samples, 0.02%)</title><rect x="12.0561%" y="213" width="0.0189%" height="15" fill="rgb(222,29,6)" fg:x="87456" fg:w="137"/><text x="12.3061%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (424 samples, 0.06%)</title><rect x="12.0169%" y="229" width="0.0584%" height="15" fill="rgb(221,189,43)" fg:x="87172" fg:w="424"/><text x="12.2669%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (130 samples, 0.02%)</title><rect x="12.1411%" y="213" width="0.0179%" height="15" fill="rgb(207,36,27)" fg:x="88073" fg:w="130"/><text x="12.3911%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (674 samples, 0.09%)</title><rect x="12.0755%" y="229" width="0.0929%" height="15" fill="rgb(217,90,24)" fg:x="87597" fg:w="674"/><text x="12.3255%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,583 samples, 0.22%)</title><rect x="11.9605%" y="245" width="0.2182%" height="15" fill="rgb(224,66,35)" fg:x="86763" fg:w="1583"/><text x="12.2105%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (130 samples, 0.02%)</title><rect x="12.2478%" y="213" width="0.0179%" height="15" fill="rgb(221,13,50)" fg:x="88847" fg:w="130"/><text x="12.4978%" y="223.50"></text></g><g><title>core::cmp::min (498 samples, 0.07%)</title><rect x="12.2658%" y="213" width="0.0687%" height="15" fill="rgb(236,68,49)" fg:x="88977" fg:w="498"/><text x="12.5158%" y="223.50"></text></g><g><title>core::cmp::Ord::min (498 samples, 0.07%)</title><rect x="12.2658%" y="197" width="0.0687%" height="15" fill="rgb(229,146,28)" fg:x="88977" fg:w="498"/><text x="12.5158%" y="207.50"></text></g><g><title>core::cmp::min_by (475 samples, 0.07%)</title><rect x="12.2689%" y="181" width="0.0655%" height="15" fill="rgb(225,31,38)" fg:x="89000" fg:w="475"/><text x="12.5189%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (142 samples, 0.02%)</title><rect x="12.3148%" y="165" width="0.0196%" height="15" fill="rgb(250,208,3)" fg:x="89333" fg:w="142"/><text x="12.5648%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (104 samples, 0.01%)</title><rect x="12.3201%" y="149" width="0.0143%" height="15" fill="rgb(246,54,23)" fg:x="89371" fg:w="104"/><text x="12.5701%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (540 samples, 0.07%)</title><rect x="12.3344%" y="213" width="0.0744%" height="15" fill="rgb(243,76,11)" fg:x="89475" fg:w="540"/><text x="12.5844%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (9,151 samples, 1.26%)</title><rect x="11.1523%" y="373" width="1.2615%" height="15" fill="rgb(245,21,50)" fg:x="80900" fg:w="9151"/><text x="11.4023%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,094 samples, 1.25%)</title><rect x="11.1602%" y="357" width="1.2536%" height="15" fill="rgb(228,9,43)" fg:x="80957" fg:w="9094"/><text x="11.4102%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,470 samples, 0.48%)</title><rect x="11.9355%" y="341" width="0.4784%" height="15" fill="rgb(208,100,47)" fg:x="86581" fg:w="3470"/><text x="12.1855%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,440 samples, 0.47%)</title><rect x="11.9396%" y="325" width="0.4742%" height="15" fill="rgb(232,26,8)" fg:x="86611" fg:w="3440"/><text x="12.1896%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,373 samples, 0.46%)</title><rect x="11.9488%" y="309" width="0.4650%" height="15" fill="rgb(216,166,38)" fg:x="86678" fg:w="3373"/><text x="12.1988%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,310 samples, 0.46%)</title><rect x="11.9575%" y="293" width="0.4563%" height="15" fill="rgb(251,202,51)" fg:x="86741" fg:w="3310"/><text x="12.2075%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,291 samples, 0.45%)</title><rect x="11.9601%" y="277" width="0.4537%" height="15" fill="rgb(254,216,34)" fg:x="86760" fg:w="3291"/><text x="12.2101%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,291 samples, 0.45%)</title><rect x="11.9601%" y="261" width="0.4537%" height="15" fill="rgb(251,32,27)" fg:x="86760" fg:w="3291"/><text x="12.2101%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,705 samples, 0.24%)</title><rect x="12.1788%" y="245" width="0.2350%" height="15" fill="rgb(208,127,28)" fg:x="88346" fg:w="1705"/><text x="12.4288%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,653 samples, 0.23%)</title><rect x="12.1859%" y="229" width="0.2279%" height="15" fill="rgb(224,137,22)" fg:x="88398" fg:w="1653"/><text x="12.4359%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (139 samples, 0.02%)</title><rect x="12.4651%" y="325" width="0.0192%" height="15" fill="rgb(254,70,32)" fg:x="90423" fg:w="139"/><text x="12.7151%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (254 samples, 0.04%)</title><rect x="12.4495%" y="341" width="0.0350%" height="15" fill="rgb(229,75,37)" fg:x="90310" fg:w="254"/><text x="12.6995%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (369 samples, 0.05%)</title><rect x="12.4390%" y="357" width="0.0509%" height="15" fill="rgb(252,64,23)" fg:x="90234" fg:w="369"/><text x="12.6890%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (94 samples, 0.01%)</title><rect x="12.5642%" y="341" width="0.0130%" height="15" fill="rgb(232,162,48)" fg:x="91142" fg:w="94"/><text x="12.8142%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (149 samples, 0.02%)</title><rect x="12.6516%" y="309" width="0.0205%" height="15" fill="rgb(246,160,12)" fg:x="91776" fg:w="149"/><text x="12.9016%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (572 samples, 0.08%)</title><rect x="12.6155%" y="325" width="0.0789%" height="15" fill="rgb(247,166,0)" fg:x="91514" fg:w="572"/><text x="12.8655%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (161 samples, 0.02%)</title><rect x="12.6721%" y="309" width="0.0222%" height="15" fill="rgb(249,219,21)" fg:x="91925" fg:w="161"/><text x="12.9221%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (140 samples, 0.02%)</title><rect x="12.6750%" y="293" width="0.0193%" height="15" fill="rgb(205,209,3)" fg:x="91946" fg:w="140"/><text x="12.9250%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (878 samples, 0.12%)</title><rect x="12.5772%" y="341" width="0.1210%" height="15" fill="rgb(243,44,1)" fg:x="91236" fg:w="878"/><text x="12.8272%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (111 samples, 0.02%)</title><rect x="12.7229%" y="293" width="0.0153%" height="15" fill="rgb(206,159,16)" fg:x="92293" fg:w="111"/><text x="12.9729%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (170 samples, 0.02%)</title><rect x="12.7149%" y="309" width="0.0234%" height="15" fill="rgb(244,77,30)" fg:x="92235" fg:w="170"/><text x="12.9649%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (183 samples, 0.03%)</title><rect x="12.7134%" y="325" width="0.0252%" height="15" fill="rgb(218,69,12)" fg:x="92224" fg:w="183"/><text x="12.9634%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (109 samples, 0.02%)</title><rect x="12.7624%" y="293" width="0.0150%" height="15" fill="rgb(212,87,7)" fg:x="92580" fg:w="109"/><text x="13.0124%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (240 samples, 0.03%)</title><rect x="12.7445%" y="309" width="0.0331%" height="15" fill="rgb(245,114,25)" fg:x="92450" fg:w="240"/><text x="12.9945%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (311 samples, 0.04%)</title><rect x="12.7386%" y="325" width="0.0429%" height="15" fill="rgb(210,61,42)" fg:x="92407" fg:w="311"/><text x="12.9886%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (241 samples, 0.03%)</title><rect x="12.8763%" y="229" width="0.0332%" height="15" fill="rgb(211,52,33)" fg:x="93406" fg:w="241"/><text x="13.1263%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (610 samples, 0.08%)</title><rect x="12.8318%" y="277" width="0.0841%" height="15" fill="rgb(234,58,33)" fg:x="93083" fg:w="610"/><text x="13.0818%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (550 samples, 0.08%)</title><rect x="12.8400%" y="261" width="0.0758%" height="15" fill="rgb(220,115,36)" fg:x="93143" fg:w="550"/><text x="13.0900%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (550 samples, 0.08%)</title><rect x="12.8400%" y="245" width="0.0758%" height="15" fill="rgb(243,153,54)" fg:x="93143" fg:w="550"/><text x="13.0900%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,618 samples, 0.22%)</title><rect x="12.7019%" y="341" width="0.2230%" height="15" fill="rgb(251,47,18)" fg:x="92141" fg:w="1618"/><text x="12.9519%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1,040 samples, 0.14%)</title><rect x="12.7816%" y="325" width="0.1434%" height="15" fill="rgb(242,102,42)" fg:x="92719" fg:w="1040"/><text x="13.0316%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (964 samples, 0.13%)</title><rect x="12.7921%" y="309" width="0.1329%" height="15" fill="rgb(234,31,38)" fg:x="92795" fg:w="964"/><text x="13.0421%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (715 samples, 0.10%)</title><rect x="12.8264%" y="293" width="0.0986%" height="15" fill="rgb(221,117,51)" fg:x="93044" fg:w="715"/><text x="13.0764%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (791 samples, 0.11%)</title><rect x="12.9404%" y="341" width="0.1090%" height="15" fill="rgb(212,20,18)" fg:x="93871" fg:w="791"/><text x="13.1904%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (674 samples, 0.09%)</title><rect x="12.9565%" y="325" width="0.0929%" height="15" fill="rgb(245,133,36)" fg:x="93988" fg:w="674"/><text x="13.2065%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (175 samples, 0.02%)</title><rect x="13.0253%" y="309" width="0.0241%" height="15" fill="rgb(212,6,19)" fg:x="94487" fg:w="175"/><text x="13.2753%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (406 samples, 0.06%)</title><rect x="13.0856%" y="325" width="0.0560%" height="15" fill="rgb(218,1,36)" fg:x="94924" fg:w="406"/><text x="13.3356%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (153 samples, 0.02%)</title><rect x="13.1204%" y="309" width="0.0211%" height="15" fill="rgb(246,84,54)" fg:x="95177" fg:w="153"/><text x="13.3704%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (106 samples, 0.01%)</title><rect x="13.2208%" y="309" width="0.0146%" height="15" fill="rgb(242,110,6)" fg:x="95905" fg:w="106"/><text x="13.4708%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (764 samples, 0.11%)</title><rect x="13.1415%" y="325" width="0.1053%" height="15" fill="rgb(214,47,5)" fg:x="95330" fg:w="764"/><text x="13.3915%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (83 samples, 0.01%)</title><rect x="13.2354%" y="309" width="0.0114%" height="15" fill="rgb(218,159,25)" fg:x="96011" fg:w="83"/><text x="13.4854%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,238 samples, 0.31%)</title><rect x="13.0494%" y="341" width="0.3085%" height="15" fill="rgb(215,211,28)" fg:x="94662" fg:w="2238"/><text x="13.2994%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (806 samples, 0.11%)</title><rect x="13.2469%" y="325" width="0.1111%" height="15" fill="rgb(238,59,32)" fg:x="96094" fg:w="806"/><text x="13.4969%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (680 samples, 0.09%)</title><rect x="13.2642%" y="309" width="0.0937%" height="15" fill="rgb(226,82,3)" fg:x="96220" fg:w="680"/><text x="13.5142%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (199 samples, 0.03%)</title><rect x="13.3305%" y="293" width="0.0274%" height="15" fill="rgb(240,164,32)" fg:x="96701" fg:w="199"/><text x="13.5805%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,421 samples, 2.26%)</title><rect x="11.0994%" y="389" width="2.2637%" height="15" fill="rgb(232,46,7)" fg:x="80516" fg:w="16421"/><text x="11.3494%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,886 samples, 0.95%)</title><rect x="12.4138%" y="373" width="0.9493%" height="15" fill="rgb(229,129,53)" fg:x="90051" fg:w="6886"/><text x="12.6638%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,294 samples, 0.87%)</title><rect x="12.4954%" y="357" width="0.8676%" height="15" fill="rgb(234,188,29)" fg:x="90643" fg:w="6294"/><text x="12.7454%" y="367.50"></text></g><g><title>__clone3 (39,990 samples, 5.51%)</title><rect x="7.8819%" y="629" width="5.5127%" height="15" fill="rgb(246,141,4)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="639.50">__clone3</text></g><g><title>start_thread (39,990 samples, 5.51%)</title><rect x="7.8819%" y="613" width="5.5127%" height="15" fill="rgb(229,23,39)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (39,990 samples, 5.51%)</title><rect x="7.8819%" y="597" width="5.5127%" height="15" fill="rgb(206,12,3)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (39,990 samples, 5.51%)</title><rect x="7.8819%" y="581" width="5.5127%" height="15" fill="rgb(252,226,20)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (39,990 samples, 5.51%)</title><rect x="7.8819%" y="565" width="5.5127%" height="15" fill="rgb(216,123,35)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (39,990 samples, 5.51%)</title><rect x="7.8819%" y="549" width="5.5127%" height="15" fill="rgb(212,68,40)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (39,990 samples, 5.51%)</title><rect x="7.8819%" y="533" width="5.5127%" height="15" fill="rgb(254,125,32)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="543.50">std::pa..</text></g><g><title>__rust_try (39,990 samples, 5.51%)</title><rect x="7.8819%" y="517" width="5.5127%" height="15" fill="rgb(253,97,22)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (39,990 samples, 5.51%)</title><rect x="7.8819%" y="501" width="5.5127%" height="15" fill="rgb(241,101,14)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (39,990 samples, 5.51%)</title><rect x="7.8819%" y="485" width="5.5127%" height="15" fill="rgb(238,103,29)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (39,990 samples, 5.51%)</title><rect x="7.8819%" y="469" width="5.5127%" height="15" fill="rgb(233,195,47)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (39,990 samples, 5.51%)</title><rect x="7.8819%" y="453" width="5.5127%" height="15" fill="rgb(246,218,30)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (39,990 samples, 5.51%)</title><rect x="7.8819%" y="437" width="5.5127%" height="15" fill="rgb(219,145,47)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (39,990 samples, 5.51%)</title><rect x="7.8819%" y="421" width="5.5127%" height="15" fill="rgb(243,12,26)" fg:x="57176" fg:w="39990"/><text x="8.1319%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (16,693 samples, 2.30%)</title><rect x="11.0935%" y="405" width="2.3012%" height="15" fill="rgb(214,87,16)" fg:x="80473" fg:w="16693"/><text x="11.3435%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (206 samples, 0.03%)</title><rect x="13.3662%" y="389" width="0.0284%" height="15" fill="rgb(208,99,42)" fg:x="96960" fg:w="206"/><text x="13.6162%" y="399.50"></text></g><g><title>worker-10 (46,387 samples, 6.39%)</title><rect x="7.0107%" y="645" width="6.3946%" height="15" fill="rgb(253,99,2)" fg:x="50856" fg:w="46387"/><text x="7.2607%" y="655.50">worker-10</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (192 samples, 0.03%)</title><rect x="13.4145%" y="629" width="0.0265%" height="15" fill="rgb(220,168,23)" fg:x="97310" fg:w="192"/><text x="13.6645%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (80 samples, 0.01%)</title><rect x="13.4445%" y="613" width="0.0110%" height="15" fill="rgb(242,38,24)" fg:x="97528" fg:w="80"/><text x="13.6945%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (80 samples, 0.01%)</title><rect x="13.4445%" y="597" width="0.0110%" height="15" fill="rgb(225,182,9)" fg:x="97528" fg:w="80"/><text x="13.6945%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (111 samples, 0.02%)</title><rect x="13.4556%" y="613" width="0.0153%" height="15" fill="rgb(243,178,37)" fg:x="97608" fg:w="111"/><text x="13.7056%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.01%)</title><rect x="13.5300%" y="613" width="0.0102%" height="15" fill="rgb(232,139,19)" fg:x="98148" fg:w="74"/><text x="13.7800%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (160 samples, 0.02%)</title><rect x="13.5441%" y="613" width="0.0221%" height="15" fill="rgb(225,201,24)" fg:x="98250" fg:w="160"/><text x="13.7941%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (108 samples, 0.01%)</title><rect x="13.5824%" y="613" width="0.0149%" height="15" fill="rgb(221,47,46)" fg:x="98528" fg:w="108"/><text x="13.8324%" y="623.50"></text></g><g><title>__memcmp_evex_movbe (98 samples, 0.01%)</title><rect x="13.5973%" y="613" width="0.0135%" height="15" fill="rgb(249,23,13)" fg:x="98636" fg:w="98"/><text x="13.8473%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (83 samples, 0.01%)</title><rect x="13.6286%" y="613" width="0.0114%" height="15" fill="rgb(219,9,5)" fg:x="98863" fg:w="83"/><text x="13.8786%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (76 samples, 0.01%)</title><rect x="13.6654%" y="613" width="0.0105%" height="15" fill="rgb(254,171,16)" fg:x="99130" fg:w="76"/><text x="13.9154%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (115 samples, 0.02%)</title><rect x="13.6940%" y="613" width="0.0159%" height="15" fill="rgb(230,171,20)" fg:x="99338" fg:w="115"/><text x="13.9440%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (80 samples, 0.01%)</title><rect x="13.7099%" y="613" width="0.0110%" height="15" fill="rgb(210,71,41)" fg:x="99453" fg:w="80"/><text x="13.9599%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (99 samples, 0.01%)</title><rect x="13.7209%" y="613" width="0.0136%" height="15" fill="rgb(206,173,20)" fg:x="99533" fg:w="99"/><text x="13.9709%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (87 samples, 0.01%)</title><rect x="13.7346%" y="613" width="0.0120%" height="15" fill="rgb(233,88,34)" fg:x="99632" fg:w="87"/><text x="13.9846%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (87 samples, 0.01%)</title><rect x="13.7466%" y="613" width="0.0120%" height="15" fill="rgb(223,209,46)" fg:x="99719" fg:w="87"/><text x="13.9966%" y="623.50"></text></g><g><title>[anon] (2,533 samples, 0.35%)</title><rect x="13.4445%" y="629" width="0.3492%" height="15" fill="rgb(250,43,18)" fg:x="97528" fg:w="2533"/><text x="13.6945%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (135 samples, 0.02%)</title><rect x="13.8024%" y="613" width="0.0186%" height="15" fill="rgb(208,13,10)" fg:x="100124" fg:w="135"/><text x="14.0524%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (132 samples, 0.02%)</title><rect x="13.8351%" y="613" width="0.0182%" height="15" fill="rgb(212,200,36)" fg:x="100361" fg:w="132"/><text x="14.0851%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (75 samples, 0.01%)</title><rect x="13.8646%" y="613" width="0.0103%" height="15" fill="rgb(225,90,30)" fg:x="100575" fg:w="75"/><text x="14.1146%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (77 samples, 0.01%)</title><rect x="13.8749%" y="613" width="0.0106%" height="15" fill="rgb(236,182,39)" fg:x="100650" fg:w="77"/><text x="14.1249%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (201 samples, 0.03%)</title><rect x="13.8859%" y="613" width="0.0277%" height="15" fill="rgb(212,144,35)" fg:x="100730" fg:w="201"/><text x="14.1359%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (201 samples, 0.03%)</title><rect x="13.8859%" y="597" width="0.0277%" height="15" fill="rgb(228,63,44)" fg:x="100730" fg:w="201"/><text x="14.1359%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (201 samples, 0.03%)</title><rect x="13.8859%" y="581" width="0.0277%" height="15" fill="rgb(228,109,6)" fg:x="100730" fg:w="201"/><text x="14.1359%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (84 samples, 0.01%)</title><rect x="13.9021%" y="565" width="0.0116%" height="15" fill="rgb(238,117,24)" fg:x="100847" fg:w="84"/><text x="14.1521%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (97 samples, 0.01%)</title><rect x="13.9407%" y="613" width="0.0134%" height="15" fill="rgb(242,26,26)" fg:x="101127" fg:w="97"/><text x="14.1907%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (122 samples, 0.02%)</title><rect x="13.9551%" y="613" width="0.0168%" height="15" fill="rgb(221,92,48)" fg:x="101232" fg:w="122"/><text x="14.2051%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (158 samples, 0.02%)</title><rect x="13.9943%" y="613" width="0.0218%" height="15" fill="rgb(209,209,32)" fg:x="101516" fg:w="158"/><text x="14.2443%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (117 samples, 0.02%)</title><rect x="14.0252%" y="613" width="0.0161%" height="15" fill="rgb(221,70,22)" fg:x="101740" fg:w="117"/><text x="14.2752%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (81 samples, 0.01%)</title><rect x="14.0632%" y="613" width="0.0112%" height="15" fill="rgb(248,145,5)" fg:x="102016" fg:w="81"/><text x="14.3132%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (90 samples, 0.01%)</title><rect x="14.0787%" y="613" width="0.0124%" height="15" fill="rgb(226,116,26)" fg:x="102128" fg:w="90"/><text x="14.3287%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (117 samples, 0.02%)</title><rect x="14.1073%" y="613" width="0.0161%" height="15" fill="rgb(244,5,17)" fg:x="102336" fg:w="117"/><text x="14.3573%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (192 samples, 0.03%)</title><rect x="14.1235%" y="613" width="0.0265%" height="15" fill="rgb(252,159,33)" fg:x="102453" fg:w="192"/><text x="14.3735%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (165 samples, 0.02%)</title><rect x="14.1272%" y="597" width="0.0227%" height="15" fill="rgb(206,71,0)" fg:x="102480" fg:w="165"/><text x="14.3772%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (81 samples, 0.01%)</title><rect x="14.1388%" y="581" width="0.0112%" height="15" fill="rgb(233,118,54)" fg:x="102564" fg:w="81"/><text x="14.3888%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (115 samples, 0.02%)</title><rect x="14.1499%" y="613" width="0.0159%" height="15" fill="rgb(234,83,48)" fg:x="102645" fg:w="115"/><text x="14.3999%" y="623.50"></text></g><g><title>one_brc::process_lines (304 samples, 0.04%)</title><rect x="14.1781%" y="613" width="0.0419%" height="15" fill="rgb(228,3,54)" fg:x="102849" fg:w="304"/><text x="14.4281%" y="623.50"></text></g><g><title>[unknown] (3,354 samples, 0.46%)</title><rect x="13.7937%" y="629" width="0.4624%" height="15" fill="rgb(226,155,13)" fg:x="100061" fg:w="3354"/><text x="14.0437%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (109 samples, 0.02%)</title><rect x="14.5736%" y="325" width="0.0150%" height="15" fill="rgb(241,28,37)" fg:x="105718" fg:w="109"/><text x="14.8236%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (192 samples, 0.03%)</title><rect x="14.6189%" y="277" width="0.0265%" height="15" fill="rgb(233,93,10)" fg:x="106047" fg:w="192"/><text x="14.8689%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (162 samples, 0.02%)</title><rect x="14.6230%" y="261" width="0.0223%" height="15" fill="rgb(225,113,19)" fg:x="106077" fg:w="162"/><text x="14.8730%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (161 samples, 0.02%)</title><rect x="14.6232%" y="245" width="0.0222%" height="15" fill="rgb(241,2,18)" fg:x="106078" fg:w="161"/><text x="14.8732%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (415 samples, 0.06%)</title><rect x="14.5889%" y="325" width="0.0572%" height="15" fill="rgb(228,207,21)" fg:x="105829" fg:w="415"/><text x="14.8389%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (414 samples, 0.06%)</title><rect x="14.5890%" y="309" width="0.0571%" height="15" fill="rgb(213,211,35)" fg:x="105830" fg:w="414"/><text x="14.8390%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (376 samples, 0.05%)</title><rect x="14.5942%" y="293" width="0.0518%" height="15" fill="rgb(209,83,10)" fg:x="105868" fg:w="376"/><text x="14.8442%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (232 samples, 0.03%)</title><rect x="14.6960%" y="277" width="0.0320%" height="15" fill="rgb(209,164,1)" fg:x="106606" fg:w="232"/><text x="14.9460%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (644 samples, 0.09%)</title><rect x="14.6461%" y="325" width="0.0888%" height="15" fill="rgb(213,184,43)" fg:x="106244" fg:w="644"/><text x="14.8961%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (563 samples, 0.08%)</title><rect x="14.6572%" y="309" width="0.0776%" height="15" fill="rgb(231,61,34)" fg:x="106325" fg:w="563"/><text x="14.9072%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (563 samples, 0.08%)</title><rect x="14.6572%" y="293" width="0.0776%" height="15" fill="rgb(235,75,3)" fg:x="106325" fg:w="563"/><text x="14.9072%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (319 samples, 0.04%)</title><rect x="14.8182%" y="293" width="0.0440%" height="15" fill="rgb(220,106,47)" fg:x="107493" fg:w="319"/><text x="15.0682%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (253 samples, 0.03%)</title><rect x="14.8273%" y="277" width="0.0349%" height="15" fill="rgb(210,196,33)" fg:x="107559" fg:w="253"/><text x="15.0773%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (242 samples, 0.03%)</title><rect x="14.8289%" y="261" width="0.0334%" height="15" fill="rgb(229,154,42)" fg:x="107570" fg:w="242"/><text x="15.0789%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (816 samples, 0.11%)</title><rect x="14.7499%" y="309" width="0.1125%" height="15" fill="rgb(228,114,26)" fg:x="106997" fg:w="816"/><text x="14.9999%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (930 samples, 0.13%)</title><rect x="14.7348%" y="325" width="0.1282%" height="15" fill="rgb(208,144,1)" fg:x="106888" fg:w="930"/><text x="14.9848%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (75 samples, 0.01%)</title><rect x="14.9662%" y="293" width="0.0103%" height="15" fill="rgb(239,112,37)" fg:x="108566" fg:w="75"/><text x="15.2162%" y="303.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (87 samples, 0.01%)</title><rect x="14.9795%" y="293" width="0.0120%" height="15" fill="rgb(210,96,50)" fg:x="108663" fg:w="87"/><text x="15.2295%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,677 samples, 0.23%)</title><rect x="14.8662%" y="325" width="0.2312%" height="15" fill="rgb(222,178,2)" fg:x="107841" fg:w="1677"/><text x="15.1162%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,548 samples, 0.21%)</title><rect x="14.8840%" y="309" width="0.2134%" height="15" fill="rgb(226,74,18)" fg:x="107970" fg:w="1548"/><text x="15.1340%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (767 samples, 0.11%)</title><rect x="14.9917%" y="293" width="0.1057%" height="15" fill="rgb(225,67,54)" fg:x="108751" fg:w="767"/><text x="15.2417%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,951 samples, 0.68%)</title><rect x="14.4214%" y="341" width="0.6825%" height="15" fill="rgb(251,92,32)" fg:x="104614" fg:w="4951"/><text x="14.6714%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,420 samples, 0.75%)</title><rect x="14.3749%" y="373" width="0.7472%" height="15" fill="rgb(228,149,22)" fg:x="104277" fg:w="5420"/><text x="14.6249%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,411 samples, 0.75%)</title><rect x="14.3761%" y="357" width="0.7459%" height="15" fill="rgb(243,54,13)" fg:x="104286" fg:w="5411"/><text x="14.6261%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (132 samples, 0.02%)</title><rect x="15.1039%" y="341" width="0.0182%" height="15" fill="rgb(243,180,28)" fg:x="109565" fg:w="132"/><text x="15.3539%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (132 samples, 0.02%)</title><rect x="15.1039%" y="325" width="0.0182%" height="15" fill="rgb(208,167,24)" fg:x="109565" fg:w="132"/><text x="15.3539%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (86 samples, 0.01%)</title><rect x="15.1102%" y="309" width="0.0119%" height="15" fill="rgb(245,73,45)" fg:x="109611" fg:w="86"/><text x="15.3602%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (530 samples, 0.07%)</title><rect x="15.4842%" y="181" width="0.0731%" height="15" fill="rgb(237,203,48)" fg:x="112324" fg:w="530"/><text x="15.7342%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,376 samples, 0.19%)</title><rect x="15.3796%" y="229" width="0.1897%" height="15" fill="rgb(211,197,16)" fg:x="111565" fg:w="1376"/><text x="15.6296%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,152 samples, 0.16%)</title><rect x="15.4105%" y="213" width="0.1588%" height="15" fill="rgb(243,99,51)" fg:x="111789" fg:w="1152"/><text x="15.6605%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,108 samples, 0.15%)</title><rect x="15.4165%" y="197" width="0.1527%" height="15" fill="rgb(215,123,29)" fg:x="111833" fg:w="1108"/><text x="15.6665%" y="207.50"></text></g><g><title>core::mem::size_of_val (87 samples, 0.01%)</title><rect x="15.5573%" y="181" width="0.0120%" height="15" fill="rgb(239,186,37)" fg:x="112854" fg:w="87"/><text x="15.8073%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (351 samples, 0.05%)</title><rect x="15.5759%" y="181" width="0.0484%" height="15" fill="rgb(252,136,39)" fg:x="112989" fg:w="351"/><text x="15.8259%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (258 samples, 0.04%)</title><rect x="15.5887%" y="165" width="0.0356%" height="15" fill="rgb(223,213,32)" fg:x="113082" fg:w="258"/><text x="15.8387%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (243 samples, 0.03%)</title><rect x="15.5908%" y="149" width="0.0335%" height="15" fill="rgb(233,115,5)" fg:x="113097" fg:w="243"/><text x="15.8408%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,627 samples, 0.36%)</title><rect x="15.2776%" y="261" width="0.3621%" height="15" fill="rgb(207,226,44)" fg:x="110825" fg:w="2627"/><text x="15.5276%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,627 samples, 0.36%)</title><rect x="15.2776%" y="245" width="0.3621%" height="15" fill="rgb(208,126,0)" fg:x="110825" fg:w="2627"/><text x="15.5276%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (511 samples, 0.07%)</title><rect x="15.5693%" y="229" width="0.0704%" height="15" fill="rgb(244,66,21)" fg:x="112941" fg:w="511"/><text x="15.8193%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (511 samples, 0.07%)</title><rect x="15.5693%" y="213" width="0.0704%" height="15" fill="rgb(222,97,12)" fg:x="112941" fg:w="511"/><text x="15.8193%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (463 samples, 0.06%)</title><rect x="15.5759%" y="197" width="0.0638%" height="15" fill="rgb(219,213,19)" fg:x="112989" fg:w="463"/><text x="15.8259%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (112 samples, 0.02%)</title><rect x="15.6243%" y="181" width="0.0154%" height="15" fill="rgb(252,169,30)" fg:x="113340" fg:w="112"/><text x="15.8743%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (112 samples, 0.02%)</title><rect x="15.6243%" y="165" width="0.0154%" height="15" fill="rgb(206,32,51)" fg:x="113340" fg:w="112"/><text x="15.8743%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,183 samples, 0.44%)</title><rect x="15.2322%" y="277" width="0.4388%" height="15" fill="rgb(250,172,42)" fg:x="110496" fg:w="3183"/><text x="15.4822%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (226 samples, 0.03%)</title><rect x="15.6398%" y="261" width="0.0312%" height="15" fill="rgb(209,34,43)" fg:x="113453" fg:w="226"/><text x="15.8898%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (226 samples, 0.03%)</title><rect x="15.6398%" y="245" width="0.0312%" height="15" fill="rgb(223,11,35)" fg:x="113453" fg:w="226"/><text x="15.8898%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (226 samples, 0.03%)</title><rect x="15.6398%" y="229" width="0.0312%" height="15" fill="rgb(251,219,26)" fg:x="113453" fg:w="226"/><text x="15.8898%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (112 samples, 0.02%)</title><rect x="15.7609%" y="245" width="0.0154%" height="15" fill="rgb(231,119,3)" fg:x="114331" fg:w="112"/><text x="16.0109%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (218 samples, 0.03%)</title><rect x="15.8526%" y="165" width="0.0301%" height="15" fill="rgb(216,97,11)" fg:x="114996" fg:w="218"/><text x="16.1026%" y="175.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,145 samples, 0.71%)</title><rect x="15.1738%" y="325" width="0.7093%" height="15" fill="rgb(223,59,9)" fg:x="110072" fg:w="5145"/><text x="15.4238%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,837 samples, 0.67%)</title><rect x="15.2162%" y="309" width="0.6668%" height="15" fill="rgb(233,93,31)" fg:x="110380" fg:w="4837"/><text x="15.4662%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,832 samples, 0.67%)</title><rect x="15.2169%" y="293" width="0.6661%" height="15" fill="rgb(239,81,33)" fg:x="110385" fg:w="4832"/><text x="15.4669%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,538 samples, 0.21%)</title><rect x="15.6710%" y="277" width="0.2120%" height="15" fill="rgb(213,120,34)" fg:x="113679" fg:w="1538"/><text x="15.9210%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,458 samples, 0.20%)</title><rect x="15.6820%" y="261" width="0.2010%" height="15" fill="rgb(243,49,53)" fg:x="113759" fg:w="1458"/><text x="15.9320%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (774 samples, 0.11%)</title><rect x="15.7763%" y="245" width="0.1067%" height="15" fill="rgb(247,216,33)" fg:x="114443" fg:w="774"/><text x="16.0263%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (763 samples, 0.11%)</title><rect x="15.7778%" y="229" width="0.1052%" height="15" fill="rgb(226,26,14)" fg:x="114454" fg:w="763"/><text x="16.0278%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (696 samples, 0.10%)</title><rect x="15.7871%" y="213" width="0.0959%" height="15" fill="rgb(215,49,53)" fg:x="114521" fg:w="696"/><text x="16.0371%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (283 samples, 0.04%)</title><rect x="15.8440%" y="197" width="0.0390%" height="15" fill="rgb(245,162,40)" fg:x="114934" fg:w="283"/><text x="16.0940%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (221 samples, 0.03%)</title><rect x="15.8526%" y="181" width="0.0305%" height="15" fill="rgb(229,68,17)" fg:x="114996" fg:w="221"/><text x="16.1026%" y="191.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11,056 samples, 1.52%)</title><rect x="14.3596%" y="405" width="1.5241%" height="15" fill="rgb(213,182,10)" fg:x="104166" fg:w="11056"/><text x="14.6096%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,048 samples, 1.52%)</title><rect x="14.3607%" y="389" width="1.5230%" height="15" fill="rgb(245,125,30)" fg:x="104174" fg:w="11048"/><text x="14.6107%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,525 samples, 0.76%)</title><rect x="15.1221%" y="373" width="0.7616%" height="15" fill="rgb(232,202,2)" fg:x="109697" fg:w="5525"/><text x="15.3721%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,343 samples, 0.74%)</title><rect x="15.1472%" y="357" width="0.7365%" height="15" fill="rgb(237,140,51)" fg:x="109879" fg:w="5343"/><text x="15.3972%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,280 samples, 0.73%)</title><rect x="15.1558%" y="341" width="0.7279%" height="15" fill="rgb(236,157,25)" fg:x="109942" fg:w="5280"/><text x="15.4058%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (350 samples, 0.05%)</title><rect x="15.8845%" y="405" width="0.0482%" height="15" fill="rgb(219,209,0)" fg:x="115228" fg:w="350"/><text x="16.1345%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (187 samples, 0.03%)</title><rect x="15.9328%" y="405" width="0.0258%" height="15" fill="rgb(240,116,54)" fg:x="115578" fg:w="187"/><text x="16.1828%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (165 samples, 0.02%)</title><rect x="15.9940%" y="341" width="0.0227%" height="15" fill="rgb(216,10,36)" fg:x="116022" fg:w="165"/><text x="16.2440%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (208 samples, 0.03%)</title><rect x="16.0169%" y="341" width="0.0287%" height="15" fill="rgb(222,72,44)" fg:x="116188" fg:w="208"/><text x="16.2669%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (444 samples, 0.06%)</title><rect x="15.9890%" y="357" width="0.0612%" height="15" fill="rgb(232,159,9)" fg:x="115986" fg:w="444"/><text x="16.2390%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (121 samples, 0.02%)</title><rect x="16.0650%" y="341" width="0.0167%" height="15" fill="rgb(210,39,32)" fg:x="116537" fg:w="121"/><text x="16.3150%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (306 samples, 0.04%)</title><rect x="16.1081%" y="309" width="0.0422%" height="15" fill="rgb(216,194,45)" fg:x="116850" fg:w="306"/><text x="16.3581%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (393 samples, 0.05%)</title><rect x="16.0970%" y="325" width="0.0542%" height="15" fill="rgb(218,18,35)" fg:x="116769" fg:w="393"/><text x="16.3470%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (738 samples, 0.10%)</title><rect x="16.0502%" y="357" width="0.1017%" height="15" fill="rgb(207,83,51)" fg:x="116430" fg:w="738"/><text x="16.3002%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (510 samples, 0.07%)</title><rect x="16.0817%" y="341" width="0.0703%" height="15" fill="rgb(225,63,43)" fg:x="116658" fg:w="510"/><text x="16.3317%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,405 samples, 0.19%)</title><rect x="15.9586%" y="405" width="0.1937%" height="15" fill="rgb(207,57,36)" fg:x="115765" fg:w="1405"/><text x="16.2086%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,370 samples, 0.19%)</title><rect x="15.9634%" y="389" width="0.1889%" height="15" fill="rgb(216,99,33)" fg:x="115800" fg:w="1370"/><text x="16.2134%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,332 samples, 0.18%)</title><rect x="15.9686%" y="373" width="0.1836%" height="15" fill="rgb(225,42,16)" fg:x="115838" fg:w="1332"/><text x="16.2186%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (111 samples, 0.02%)</title><rect x="16.3262%" y="293" width="0.0153%" height="15" fill="rgb(220,201,45)" fg:x="118432" fg:w="111"/><text x="16.5762%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (89 samples, 0.01%)</title><rect x="16.3292%" y="277" width="0.0123%" height="15" fill="rgb(225,33,4)" fg:x="118454" fg:w="89"/><text x="16.5792%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (89 samples, 0.01%)</title><rect x="16.3292%" y="261" width="0.0123%" height="15" fill="rgb(224,33,50)" fg:x="118454" fg:w="89"/><text x="16.5792%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (270 samples, 0.04%)</title><rect x="16.3044%" y="309" width="0.0372%" height="15" fill="rgb(246,198,51)" fg:x="118274" fg:w="270"/><text x="16.5544%" y="319.50"></text></g><g><title>core::char::methods::encode_utf8_raw (732 samples, 0.10%)</title><rect x="16.2410%" y="357" width="0.1009%" height="15" fill="rgb(205,22,4)" fg:x="117814" fg:w="732"/><text x="16.4910%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (311 samples, 0.04%)</title><rect x="16.2991%" y="341" width="0.0429%" height="15" fill="rgb(206,3,8)" fg:x="118235" fg:w="311"/><text x="16.5491%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (299 samples, 0.04%)</title><rect x="16.3007%" y="325" width="0.0412%" height="15" fill="rgb(251,23,15)" fg:x="118247" fg:w="299"/><text x="16.5507%" y="335.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (787 samples, 0.11%)</title><rect x="16.2336%" y="373" width="0.1085%" height="15" fill="rgb(252,88,28)" fg:x="117760" fg:w="787"/><text x="16.4836%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,031 samples, 0.14%)</title><rect x="16.2030%" y="389" width="0.1421%" height="15" fill="rgb(212,127,14)" fg:x="117538" fg:w="1031"/><text x="16.4530%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (134 samples, 0.02%)</title><rect x="16.4956%" y="373" width="0.0185%" height="15" fill="rgb(247,145,37)" fg:x="119661" fg:w="134"/><text x="16.7456%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (309 samples, 0.04%)</title><rect x="16.5153%" y="373" width="0.0426%" height="15" fill="rgb(209,117,53)" fg:x="119804" fg:w="309"/><text x="16.7653%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (305 samples, 0.04%)</title><rect x="16.5159%" y="357" width="0.0420%" height="15" fill="rgb(212,90,42)" fg:x="119808" fg:w="305"/><text x="16.7659%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (270 samples, 0.04%)</title><rect x="16.5207%" y="341" width="0.0372%" height="15" fill="rgb(218,164,37)" fg:x="119843" fg:w="270"/><text x="16.7707%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (120 samples, 0.02%)</title><rect x="16.5414%" y="325" width="0.0165%" height="15" fill="rgb(246,65,34)" fg:x="119993" fg:w="120"/><text x="16.7914%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (103 samples, 0.01%)</title><rect x="16.5437%" y="309" width="0.0142%" height="15" fill="rgb(231,100,33)" fg:x="120010" fg:w="103"/><text x="16.7937%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (101 samples, 0.01%)</title><rect x="16.5440%" y="293" width="0.0139%" height="15" fill="rgb(228,126,14)" fg:x="120012" fg:w="101"/><text x="16.7940%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (195 samples, 0.03%)</title><rect x="16.6012%" y="325" width="0.0269%" height="15" fill="rgb(215,173,21)" fg:x="120427" fg:w="195"/><text x="16.8512%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (558 samples, 0.08%)</title><rect x="16.5579%" y="373" width="0.0769%" height="15" fill="rgb(210,6,40)" fg:x="120113" fg:w="558"/><text x="16.8079%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (492 samples, 0.07%)</title><rect x="16.5670%" y="357" width="0.0678%" height="15" fill="rgb(212,48,18)" fg:x="120179" fg:w="492"/><text x="16.8170%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (492 samples, 0.07%)</title><rect x="16.5670%" y="341" width="0.0678%" height="15" fill="rgb(230,214,11)" fg:x="120179" fg:w="492"/><text x="16.8170%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (830 samples, 0.11%)</title><rect x="16.6349%" y="373" width="0.1144%" height="15" fill="rgb(254,105,39)" fg:x="120671" fg:w="830"/><text x="16.8849%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (744 samples, 0.10%)</title><rect x="16.6467%" y="357" width="0.1026%" height="15" fill="rgb(245,158,5)" fg:x="120757" fg:w="744"/><text x="16.8967%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (293 samples, 0.04%)</title><rect x="16.7089%" y="341" width="0.0404%" height="15" fill="rgb(249,208,11)" fg:x="121208" fg:w="293"/><text x="16.9589%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (216 samples, 0.03%)</title><rect x="16.7195%" y="325" width="0.0298%" height="15" fill="rgb(210,39,28)" fg:x="121285" fg:w="216"/><text x="16.9695%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (207 samples, 0.03%)</title><rect x="16.7208%" y="309" width="0.0285%" height="15" fill="rgb(211,56,53)" fg:x="121294" fg:w="207"/><text x="16.9708%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned (144 samples, 0.02%)</title><rect x="16.7613%" y="357" width="0.0199%" height="15" fill="rgb(226,201,30)" fg:x="121588" fg:w="144"/><text x="17.0113%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (110 samples, 0.02%)</title><rect x="16.7660%" y="341" width="0.0152%" height="15" fill="rgb(239,101,34)" fg:x="121622" fg:w="110"/><text x="17.0160%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,041 samples, 0.28%)</title><rect x="16.7516%" y="373" width="0.2814%" height="15" fill="rgb(226,209,5)" fg:x="121518" fg:w="2041"/><text x="17.0016%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,827 samples, 0.25%)</title><rect x="16.7811%" y="357" width="0.2519%" height="15" fill="rgb(250,105,47)" fg:x="121732" fg:w="1827"/><text x="17.0311%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,975 samples, 0.69%)</title><rect x="16.3534%" y="389" width="0.6858%" height="15" fill="rgb(230,72,3)" fg:x="118629" fg:w="4975"/><text x="16.6034%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (217 samples, 0.03%)</title><rect x="17.0393%" y="373" width="0.0299%" height="15" fill="rgb(232,218,39)" fg:x="123605" fg:w="217"/><text x="17.2893%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (168 samples, 0.02%)</title><rect x="17.0461%" y="357" width="0.0232%" height="15" fill="rgb(248,166,6)" fg:x="123654" fg:w="168"/><text x="17.2961%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (110 samples, 0.02%)</title><rect x="17.0541%" y="341" width="0.0152%" height="15" fill="rgb(247,89,20)" fg:x="123712" fg:w="110"/><text x="17.3041%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (107 samples, 0.01%)</title><rect x="17.0545%" y="325" width="0.0148%" height="15" fill="rgb(248,130,54)" fg:x="123715" fg:w="107"/><text x="17.3045%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (98 samples, 0.01%)</title><rect x="17.0701%" y="341" width="0.0135%" height="15" fill="rgb(234,196,4)" fg:x="123828" fg:w="98"/><text x="17.3201%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,828 samples, 0.94%)</title><rect x="16.1522%" y="405" width="0.9413%" height="15" fill="rgb(250,143,31)" fg:x="117170" fg:w="6828"/><text x="16.4022%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (393 samples, 0.05%)</title><rect x="17.0393%" y="389" width="0.0542%" height="15" fill="rgb(211,110,34)" fg:x="123605" fg:w="393"/><text x="17.2893%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (176 samples, 0.02%)</title><rect x="17.0692%" y="373" width="0.0243%" height="15" fill="rgb(215,124,48)" fg:x="123822" fg:w="176"/><text x="17.3192%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (176 samples, 0.02%)</title><rect x="17.0692%" y="357" width="0.0243%" height="15" fill="rgb(216,46,13)" fg:x="123822" fg:w="176"/><text x="17.3192%" y="367.50"></text></g><g><title>one_brc::round_towards_positive (634 samples, 0.09%)</title><rect x="17.0935%" y="405" width="0.0874%" height="15" fill="rgb(205,184,25)" fg:x="123998" fg:w="634"/><text x="17.3435%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (147 samples, 0.02%)</title><rect x="17.1606%" y="389" width="0.0203%" height="15" fill="rgb(228,1,10)" fg:x="124485" fg:w="147"/><text x="17.4106%" y="399.50"></text></g><g><title>__round (120 samples, 0.02%)</title><rect x="17.1644%" y="373" width="0.0165%" height="15" fill="rgb(213,116,27)" fg:x="124512" fg:w="120"/><text x="17.4144%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (93 samples, 0.01%)</title><rect x="17.2829%" y="357" width="0.0128%" height="15" fill="rgb(241,95,50)" fg:x="125372" fg:w="93"/><text x="17.5329%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (582 samples, 0.08%)</title><rect x="17.2348%" y="389" width="0.0802%" height="15" fill="rgb(238,48,32)" fg:x="125023" fg:w="582"/><text x="17.4848%" y="399.50"></text></g><g><title>one_brc::Measurement::record (498 samples, 0.07%)</title><rect x="17.2464%" y="373" width="0.0687%" height="15" fill="rgb(235,113,49)" fg:x="125107" fg:w="498"/><text x="17.4964%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (140 samples, 0.02%)</title><rect x="17.2957%" y="357" width="0.0193%" height="15" fill="rgb(205,127,43)" fg:x="125465" fg:w="140"/><text x="17.5457%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (96 samples, 0.01%)</title><rect x="17.3285%" y="325" width="0.0132%" height="15" fill="rgb(250,162,2)" fg:x="125703" fg:w="96"/><text x="17.5785%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (170 samples, 0.02%)</title><rect x="17.3218%" y="341" width="0.0234%" height="15" fill="rgb(220,13,41)" fg:x="125654" fg:w="170"/><text x="17.5718%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (188 samples, 0.03%)</title><rect x="17.3201%" y="357" width="0.0259%" height="15" fill="rgb(249,221,25)" fg:x="125642" fg:w="188"/><text x="17.5701%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,203 samples, 0.17%)</title><rect x="17.1809%" y="405" width="0.1658%" height="15" fill="rgb(215,208,19)" fg:x="124632" fg:w="1203"/><text x="17.4309%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (230 samples, 0.03%)</title><rect x="17.3150%" y="389" width="0.0317%" height="15" fill="rgb(236,175,2)" fg:x="125605" fg:w="230"/><text x="17.5650%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (226 samples, 0.03%)</title><rect x="17.3156%" y="373" width="0.0312%" height="15" fill="rgb(241,52,2)" fg:x="125609" fg:w="226"/><text x="17.5656%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (95 samples, 0.01%)</title><rect x="17.3902%" y="325" width="0.0131%" height="15" fill="rgb(248,140,14)" fg:x="126150" fg:w="95"/><text x="17.6402%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (154 samples, 0.02%)</title><rect x="17.3845%" y="341" width="0.0212%" height="15" fill="rgb(253,22,42)" fg:x="126109" fg:w="154"/><text x="17.6345%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (477 samples, 0.07%)</title><rect x="17.3467%" y="405" width="0.0658%" height="15" fill="rgb(234,61,47)" fg:x="125835" fg:w="477"/><text x="17.5967%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (305 samples, 0.04%)</title><rect x="17.3705%" y="389" width="0.0420%" height="15" fill="rgb(208,226,15)" fg:x="126007" fg:w="305"/><text x="17.6205%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (219 samples, 0.03%)</title><rect x="17.3823%" y="373" width="0.0302%" height="15" fill="rgb(217,221,4)" fg:x="126093" fg:w="219"/><text x="17.6323%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (215 samples, 0.03%)</title><rect x="17.3829%" y="357" width="0.0296%" height="15" fill="rgb(212,174,34)" fg:x="126097" fg:w="215"/><text x="17.6329%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (276 samples, 0.04%)</title><rect x="17.6231%" y="277" width="0.0380%" height="15" fill="rgb(253,83,4)" fg:x="127840" fg:w="276"/><text x="17.8731%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (868 samples, 0.12%)</title><rect x="17.5433%" y="293" width="0.1197%" height="15" fill="rgb(250,195,49)" fg:x="127261" fg:w="868"/><text x="17.7933%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (780 samples, 0.11%)</title><rect x="17.8931%" y="277" width="0.1075%" height="15" fill="rgb(241,192,25)" fg:x="129798" fg:w="780"/><text x="18.1431%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,494 samples, 0.34%)</title><rect x="17.6630%" y="293" width="0.3438%" height="15" fill="rgb(208,124,10)" fg:x="128129" fg:w="2494"/><text x="17.9130%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,669 samples, 0.51%)</title><rect x="17.5011%" y="309" width="0.5058%" height="15" fill="rgb(222,33,0)" fg:x="126955" fg:w="3669"/><text x="17.7511%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,703 samples, 0.51%)</title><rect x="17.4971%" y="341" width="0.5105%" height="15" fill="rgb(234,209,28)" fg:x="126926" fg:w="3703"/><text x="17.7471%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,674 samples, 0.51%)</title><rect x="17.5011%" y="325" width="0.5065%" height="15" fill="rgb(224,11,23)" fg:x="126955" fg:w="3674"/><text x="17.7511%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (378 samples, 0.05%)</title><rect x="18.0166%" y="325" width="0.0521%" height="15" fill="rgb(232,99,1)" fg:x="130694" fg:w="378"/><text x="18.2666%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (405 samples, 0.06%)</title><rect x="18.0701%" y="309" width="0.0558%" height="15" fill="rgb(237,95,45)" fg:x="131082" fg:w="405"/><text x="18.3201%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (503 samples, 0.07%)</title><rect x="18.1515%" y="293" width="0.0693%" height="15" fill="rgb(208,109,11)" fg:x="131673" fg:w="503"/><text x="18.4015%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (126 samples, 0.02%)</title><rect x="18.2209%" y="293" width="0.0174%" height="15" fill="rgb(216,190,48)" fg:x="132176" fg:w="126"/><text x="18.4709%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (849 samples, 0.12%)</title><rect x="18.1259%" y="309" width="0.1170%" height="15" fill="rgb(251,171,36)" fg:x="131487" fg:w="849"/><text x="18.3759%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,313 samples, 0.18%)</title><rect x="18.0687%" y="325" width="0.1810%" height="15" fill="rgb(230,62,22)" fg:x="131072" fg:w="1313"/><text x="18.3187%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,799 samples, 0.25%)</title><rect x="18.0076%" y="341" width="0.2480%" height="15" fill="rgb(225,114,35)" fg:x="130629" fg:w="1799"/><text x="18.2576%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (147 samples, 0.02%)</title><rect x="18.3809%" y="213" width="0.0203%" height="15" fill="rgb(215,118,42)" fg:x="133337" fg:w="147"/><text x="18.6309%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (439 samples, 0.06%)</title><rect x="18.3416%" y="229" width="0.0605%" height="15" fill="rgb(243,119,21)" fg:x="133052" fg:w="439"/><text x="18.5916%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (125 samples, 0.02%)</title><rect x="18.4662%" y="213" width="0.0172%" height="15" fill="rgb(252,177,53)" fg:x="133956" fg:w="125"/><text x="18.7162%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (661 samples, 0.09%)</title><rect x="18.4021%" y="229" width="0.0911%" height="15" fill="rgb(237,209,29)" fg:x="133491" fg:w="661"/><text x="18.6521%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,596 samples, 0.22%)</title><rect x="18.2826%" y="245" width="0.2200%" height="15" fill="rgb(212,65,23)" fg:x="132624" fg:w="1596"/><text x="18.5326%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (128 samples, 0.02%)</title><rect x="18.5779%" y="213" width="0.0176%" height="15" fill="rgb(230,222,46)" fg:x="134766" fg:w="128"/><text x="18.8279%" y="223.50"></text></g><g><title>core::cmp::min (497 samples, 0.07%)</title><rect x="18.5964%" y="213" width="0.0685%" height="15" fill="rgb(215,135,32)" fg:x="134900" fg:w="497"/><text x="18.8464%" y="223.50"></text></g><g><title>core::cmp::Ord::min (497 samples, 0.07%)</title><rect x="18.5964%" y="197" width="0.0685%" height="15" fill="rgb(246,101,22)" fg:x="134900" fg:w="497"/><text x="18.8464%" y="207.50"></text></g><g><title>core::cmp::min_by (477 samples, 0.07%)</title><rect x="18.5991%" y="181" width="0.0658%" height="15" fill="rgb(206,107,13)" fg:x="134920" fg:w="477"/><text x="18.8491%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (165 samples, 0.02%)</title><rect x="18.6421%" y="165" width="0.0227%" height="15" fill="rgb(250,100,44)" fg:x="135232" fg:w="165"/><text x="18.8921%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (111 samples, 0.02%)</title><rect x="18.6496%" y="149" width="0.0153%" height="15" fill="rgb(231,147,38)" fg:x="135286" fg:w="111"/><text x="18.8996%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (518 samples, 0.07%)</title><rect x="18.6649%" y="213" width="0.0714%" height="15" fill="rgb(229,8,40)" fg:x="135397" fg:w="518"/><text x="18.9149%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,343 samples, 0.46%)</title><rect x="18.2799%" y="293" width="0.4608%" height="15" fill="rgb(221,135,30)" fg:x="132604" fg:w="3343"/><text x="18.5299%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,323 samples, 0.46%)</title><rect x="18.2826%" y="277" width="0.4581%" height="15" fill="rgb(249,193,18)" fg:x="132624" fg:w="3323"/><text x="18.5326%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,323 samples, 0.46%)</title><rect x="18.2826%" y="261" width="0.4581%" height="15" fill="rgb(209,133,39)" fg:x="132624" fg:w="3323"/><text x="18.5326%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,727 samples, 0.24%)</title><rect x="18.5026%" y="245" width="0.2381%" height="15" fill="rgb(232,100,14)" fg:x="134220" fg:w="1727"/><text x="18.7526%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,659 samples, 0.23%)</title><rect x="18.5120%" y="229" width="0.2287%" height="15" fill="rgb(224,185,1)" fg:x="134288" fg:w="1659"/><text x="18.7620%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (9,223 samples, 1.27%)</title><rect x="17.4694%" y="373" width="1.2714%" height="15" fill="rgb(223,139,8)" fg:x="126725" fg:w="9223"/><text x="17.7194%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,173 samples, 1.26%)</title><rect x="17.4763%" y="357" width="1.2645%" height="15" fill="rgb(232,213,38)" fg:x="126775" fg:w="9173"/><text x="17.7263%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,513 samples, 0.48%)</title><rect x="18.2566%" y="341" width="0.4843%" height="15" fill="rgb(207,94,22)" fg:x="132435" fg:w="3513"/><text x="18.5066%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,485 samples, 0.48%)</title><rect x="18.2604%" y="325" width="0.4804%" height="15" fill="rgb(219,183,54)" fg:x="132463" fg:w="3485"/><text x="18.5104%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,412 samples, 0.47%)</title><rect x="18.2705%" y="309" width="0.4704%" height="15" fill="rgb(216,185,54)" fg:x="132536" fg:w="3412"/><text x="18.5205%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (120 samples, 0.02%)</title><rect x="18.7908%" y="325" width="0.0165%" height="15" fill="rgb(254,217,39)" fg:x="136310" fg:w="120"/><text x="19.0408%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (229 samples, 0.03%)</title><rect x="18.7759%" y="341" width="0.0316%" height="15" fill="rgb(240,178,23)" fg:x="136202" fg:w="229"/><text x="19.0259%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (360 samples, 0.05%)</title><rect x="18.7635%" y="357" width="0.0496%" height="15" fill="rgb(218,11,47)" fg:x="136112" fg:w="360"/><text x="19.0135%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (101 samples, 0.01%)</title><rect x="18.8919%" y="341" width="0.0139%" height="15" fill="rgb(218,51,51)" fg:x="137044" fg:w="101"/><text x="19.1419%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (157 samples, 0.02%)</title><rect x="18.9809%" y="309" width="0.0216%" height="15" fill="rgb(238,126,27)" fg:x="137689" fg:w="157"/><text x="19.2309%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (585 samples, 0.08%)</title><rect x="18.9458%" y="325" width="0.0806%" height="15" fill="rgb(249,202,22)" fg:x="137435" fg:w="585"/><text x="19.1958%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (174 samples, 0.02%)</title><rect x="19.0025%" y="309" width="0.0240%" height="15" fill="rgb(254,195,49)" fg:x="137846" fg:w="174"/><text x="19.2525%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (150 samples, 0.02%)</title><rect x="19.0058%" y="293" width="0.0207%" height="15" fill="rgb(208,123,14)" fg:x="137870" fg:w="150"/><text x="19.2558%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (898 samples, 0.12%)</title><rect x="18.9059%" y="341" width="0.1238%" height="15" fill="rgb(224,200,8)" fg:x="137145" fg:w="898"/><text x="19.1559%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (126 samples, 0.02%)</title><rect x="19.0565%" y="293" width="0.0174%" height="15" fill="rgb(217,61,36)" fg:x="138238" fg:w="126"/><text x="19.3065%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (202 samples, 0.03%)</title><rect x="19.0463%" y="309" width="0.0278%" height="15" fill="rgb(206,35,45)" fg:x="138164" fg:w="202"/><text x="19.2963%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (209 samples, 0.03%)</title><rect x="19.0455%" y="325" width="0.0288%" height="15" fill="rgb(217,65,33)" fg:x="138158" fg:w="209"/><text x="19.2955%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (99 samples, 0.01%)</title><rect x="19.0984%" y="293" width="0.0136%" height="15" fill="rgb(222,158,48)" fg:x="138542" fg:w="99"/><text x="19.3484%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (239 samples, 0.03%)</title><rect x="19.0796%" y="309" width="0.0329%" height="15" fill="rgb(254,2,54)" fg:x="138405" fg:w="239"/><text x="19.3296%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (304 samples, 0.04%)</title><rect x="19.0743%" y="325" width="0.0419%" height="15" fill="rgb(250,143,38)" fg:x="138367" fg:w="304"/><text x="19.3243%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (256 samples, 0.04%)</title><rect x="19.2042%" y="229" width="0.0353%" height="15" fill="rgb(248,25,0)" fg:x="139309" fg:w="256"/><text x="19.4542%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (571 samples, 0.08%)</title><rect x="19.1652%" y="277" width="0.0787%" height="15" fill="rgb(206,152,27)" fg:x="139026" fg:w="571"/><text x="19.4152%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (525 samples, 0.07%)</title><rect x="19.1715%" y="261" width="0.0724%" height="15" fill="rgb(240,77,30)" fg:x="139072" fg:w="525"/><text x="19.4215%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (525 samples, 0.07%)</title><rect x="19.1715%" y="245" width="0.0724%" height="15" fill="rgb(231,5,3)" fg:x="139072" fg:w="525"/><text x="19.4215%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,598 samples, 0.22%)</title><rect x="19.0316%" y="341" width="0.2203%" height="15" fill="rgb(207,226,32)" fg:x="138057" fg:w="1598"/><text x="19.2816%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (984 samples, 0.14%)</title><rect x="19.1162%" y="325" width="0.1356%" height="15" fill="rgb(222,207,47)" fg:x="138671" fg:w="984"/><text x="19.3662%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (917 samples, 0.13%)</title><rect x="19.1255%" y="309" width="0.1264%" height="15" fill="rgb(229,115,45)" fg:x="138738" fg:w="917"/><text x="19.3755%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (661 samples, 0.09%)</title><rect x="19.1608%" y="293" width="0.0911%" height="15" fill="rgb(224,191,6)" fg:x="138994" fg:w="661"/><text x="19.4108%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (778 samples, 0.11%)</title><rect x="19.2637%" y="341" width="0.1072%" height="15" fill="rgb(230,227,24)" fg:x="139741" fg:w="778"/><text x="19.5137%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (659 samples, 0.09%)</title><rect x="19.2801%" y="325" width="0.0908%" height="15" fill="rgb(228,80,19)" fg:x="139860" fg:w="659"/><text x="19.5301%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (182 samples, 0.03%)</title><rect x="19.3459%" y="309" width="0.0251%" height="15" fill="rgb(247,229,0)" fg:x="140337" fg:w="182"/><text x="19.5959%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (434 samples, 0.06%)</title><rect x="19.4086%" y="325" width="0.0598%" height="15" fill="rgb(237,194,15)" fg:x="140792" fg:w="434"/><text x="19.6586%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (175 samples, 0.02%)</title><rect x="19.4443%" y="309" width="0.0241%" height="15" fill="rgb(219,203,20)" fg:x="141051" fg:w="175"/><text x="19.6943%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (110 samples, 0.02%)</title><rect x="19.5478%" y="309" width="0.0152%" height="15" fill="rgb(234,128,8)" fg:x="141802" fg:w="110"/><text x="19.7978%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (782 samples, 0.11%)</title><rect x="19.4684%" y="325" width="0.1078%" height="15" fill="rgb(248,202,8)" fg:x="141226" fg:w="782"/><text x="19.7184%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (96 samples, 0.01%)</title><rect x="19.5630%" y="309" width="0.0132%" height="15" fill="rgb(206,104,37)" fg:x="141912" fg:w="96"/><text x="19.8130%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,339 samples, 0.32%)</title><rect x="19.3710%" y="341" width="0.3224%" height="15" fill="rgb(223,8,27)" fg:x="140519" fg:w="2339"/><text x="19.6210%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (850 samples, 0.12%)</title><rect x="19.5762%" y="325" width="0.1172%" height="15" fill="rgb(216,217,28)" fg:x="142008" fg:w="850"/><text x="19.8262%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (716 samples, 0.10%)</title><rect x="19.5947%" y="309" width="0.0987%" height="15" fill="rgb(249,199,1)" fg:x="142142" fg:w="716"/><text x="19.8447%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (200 samples, 0.03%)</title><rect x="19.6658%" y="293" width="0.0276%" height="15" fill="rgb(240,85,17)" fg:x="142658" fg:w="200"/><text x="19.9158%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,526 samples, 2.28%)</title><rect x="17.4186%" y="389" width="2.2782%" height="15" fill="rgb(206,108,45)" fg:x="126356" fg:w="16526"/><text x="17.6686%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,934 samples, 0.96%)</title><rect x="18.7409%" y="373" width="0.9559%" height="15" fill="rgb(245,210,41)" fg:x="135948" fg:w="6934"/><text x="18.9909%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,375 samples, 0.88%)</title><rect x="18.8179%" y="357" width="0.8788%" height="15" fill="rgb(206,13,37)" fg:x="136507" fg:w="6375"/><text x="19.0679%" y="367.50"></text></g><g><title>__clone3 (39,708 samples, 5.47%)</title><rect x="14.2561%" y="629" width="5.4739%" height="15" fill="rgb(250,61,18)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="639.50">__clone3</text></g><g><title>start_thread (39,708 samples, 5.47%)</title><rect x="14.2561%" y="613" width="5.4739%" height="15" fill="rgb(235,172,48)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (39,708 samples, 5.47%)</title><rect x="14.2561%" y="597" width="5.4739%" height="15" fill="rgb(249,201,17)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (39,708 samples, 5.47%)</title><rect x="14.2561%" y="581" width="5.4739%" height="15" fill="rgb(219,208,6)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (39,708 samples, 5.47%)</title><rect x="14.2561%" y="565" width="5.4739%" height="15" fill="rgb(248,31,23)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (39,708 samples, 5.47%)</title><rect x="14.2561%" y="549" width="5.4739%" height="15" fill="rgb(245,15,42)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (39,708 samples, 5.47%)</title><rect x="14.2561%" y="533" width="5.4739%" height="15" fill="rgb(222,217,39)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="543.50">std::pa..</text></g><g><title>__rust_try (39,708 samples, 5.47%)</title><rect x="14.2561%" y="517" width="5.4739%" height="15" fill="rgb(210,219,27)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (39,708 samples, 5.47%)</title><rect x="14.2561%" y="501" width="5.4739%" height="15" fill="rgb(252,166,36)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (39,708 samples, 5.47%)</title><rect x="14.2561%" y="485" width="5.4739%" height="15" fill="rgb(245,132,34)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (39,708 samples, 5.47%)</title><rect x="14.2561%" y="469" width="5.4739%" height="15" fill="rgb(236,54,3)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (39,708 samples, 5.47%)</title><rect x="14.2561%" y="453" width="5.4739%" height="15" fill="rgb(241,173,43)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (39,708 samples, 5.47%)</title><rect x="14.2561%" y="437" width="5.4739%" height="15" fill="rgb(215,190,9)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (39,708 samples, 5.47%)</title><rect x="14.2561%" y="421" width="5.4739%" height="15" fill="rgb(242,101,16)" fg:x="103415" fg:w="39708"/><text x="14.5061%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (16,811 samples, 2.32%)</title><rect x="17.4125%" y="405" width="2.3174%" height="15" fill="rgb(223,190,21)" fg:x="126312" fg:w="16811"/><text x="17.6625%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (217 samples, 0.03%)</title><rect x="19.7000%" y="389" width="0.0299%" height="15" fill="rgb(215,228,25)" fg:x="142906" fg:w="217"/><text x="19.9500%" y="399.50"></text></g><g><title>worker-11 (45,941 samples, 6.33%)</title><rect x="13.4052%" y="645" width="6.3331%" height="15" fill="rgb(225,36,22)" fg:x="97243" fg:w="45941"/><text x="13.6552%" y="655.50">worker-11</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (188 samples, 0.03%)</title><rect x="19.7480%" y="629" width="0.0259%" height="15" fill="rgb(251,106,46)" fg:x="143254" fg:w="188"/><text x="19.9980%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (80 samples, 0.01%)</title><rect x="19.7775%" y="613" width="0.0110%" height="15" fill="rgb(208,90,1)" fg:x="143468" fg:w="80"/><text x="20.0275%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (80 samples, 0.01%)</title><rect x="19.7775%" y="597" width="0.0110%" height="15" fill="rgb(243,10,4)" fg:x="143468" fg:w="80"/><text x="20.0275%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (101 samples, 0.01%)</title><rect x="19.7885%" y="613" width="0.0139%" height="15" fill="rgb(212,137,27)" fg:x="143548" fg:w="101"/><text x="20.0385%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.01%)</title><rect x="19.8590%" y="613" width="0.0116%" height="15" fill="rgb(231,220,49)" fg:x="144059" fg:w="84"/><text x="20.1090%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (158 samples, 0.02%)</title><rect x="19.8765%" y="613" width="0.0218%" height="15" fill="rgb(237,96,20)" fg:x="144186" fg:w="158"/><text x="20.1265%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (150 samples, 0.02%)</title><rect x="19.9156%" y="613" width="0.0207%" height="15" fill="rgb(239,229,30)" fg:x="144470" fg:w="150"/><text x="20.1656%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (86 samples, 0.01%)</title><rect x="19.9245%" y="597" width="0.0119%" height="15" fill="rgb(219,65,33)" fg:x="144534" fg:w="86"/><text x="20.1745%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (106 samples, 0.01%)</title><rect x="19.9363%" y="613" width="0.0146%" height="15" fill="rgb(243,134,7)" fg:x="144620" fg:w="106"/><text x="20.1863%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (83 samples, 0.01%)</title><rect x="19.9693%" y="613" width="0.0114%" height="15" fill="rgb(216,177,54)" fg:x="144859" fg:w="83"/><text x="20.2193%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (83 samples, 0.01%)</title><rect x="19.9844%" y="613" width="0.0114%" height="15" fill="rgb(211,160,20)" fg:x="144969" fg:w="83"/><text x="20.2344%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (125 samples, 0.02%)</title><rect x="20.0368%" y="613" width="0.0172%" height="15" fill="rgb(239,85,39)" fg:x="145349" fg:w="125"/><text x="20.2868%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (116 samples, 0.02%)</title><rect x="20.0630%" y="613" width="0.0160%" height="15" fill="rgb(232,125,22)" fg:x="145539" fg:w="116"/><text x="20.3130%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (95 samples, 0.01%)</title><rect x="20.0875%" y="613" width="0.0131%" height="15" fill="rgb(244,57,34)" fg:x="145717" fg:w="95"/><text x="20.3375%" y="623.50"></text></g><g><title>[anon] (2,665 samples, 0.37%)</title><rect x="19.7775%" y="629" width="0.3674%" height="15" fill="rgb(214,203,32)" fg:x="143468" fg:w="2665"/><text x="20.0275%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (167 samples, 0.02%)</title><rect x="20.1533%" y="613" width="0.0230%" height="15" fill="rgb(207,58,43)" fg:x="146194" fg:w="167"/><text x="20.4033%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (76 samples, 0.01%)</title><rect x="20.1807%" y="613" width="0.0105%" height="15" fill="rgb(215,193,15)" fg:x="146393" fg:w="76"/><text x="20.4307%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (122 samples, 0.02%)</title><rect x="20.1912%" y="613" width="0.0168%" height="15" fill="rgb(232,15,44)" fg:x="146469" fg:w="122"/><text x="20.4412%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (82 samples, 0.01%)</title><rect x="20.2177%" y="613" width="0.0113%" height="15" fill="rgb(212,3,48)" fg:x="146661" fg:w="82"/><text x="20.4677%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (76 samples, 0.01%)</title><rect x="20.2290%" y="613" width="0.0105%" height="15" fill="rgb(218,128,7)" fg:x="146743" fg:w="76"/><text x="20.4790%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (198 samples, 0.03%)</title><rect x="20.2401%" y="613" width="0.0273%" height="15" fill="rgb(226,216,39)" fg:x="146824" fg:w="198"/><text x="20.4901%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (198 samples, 0.03%)</title><rect x="20.2401%" y="597" width="0.0273%" height="15" fill="rgb(243,47,51)" fg:x="146824" fg:w="198"/><text x="20.4901%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (198 samples, 0.03%)</title><rect x="20.2401%" y="581" width="0.0273%" height="15" fill="rgb(241,183,40)" fg:x="146824" fg:w="198"/><text x="20.4901%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (82 samples, 0.01%)</title><rect x="20.2561%" y="565" width="0.0113%" height="15" fill="rgb(231,217,32)" fg:x="146940" fg:w="82"/><text x="20.5061%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (82 samples, 0.01%)</title><rect x="20.2920%" y="613" width="0.0113%" height="15" fill="rgb(229,61,38)" fg:x="147200" fg:w="82"/><text x="20.5420%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (146 samples, 0.02%)</title><rect x="20.3045%" y="613" width="0.0201%" height="15" fill="rgb(225,210,5)" fg:x="147291" fg:w="146"/><text x="20.5545%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (75 samples, 0.01%)</title><rect x="20.3246%" y="613" width="0.0103%" height="15" fill="rgb(231,79,45)" fg:x="147437" fg:w="75"/><text x="20.5746%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (167 samples, 0.02%)</title><rect x="20.3463%" y="613" width="0.0230%" height="15" fill="rgb(224,100,7)" fg:x="147594" fg:w="167"/><text x="20.5963%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (114 samples, 0.02%)</title><rect x="20.3776%" y="613" width="0.0157%" height="15" fill="rgb(241,198,18)" fg:x="147821" fg:w="114"/><text x="20.6276%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (87 samples, 0.01%)</title><rect x="20.4253%" y="613" width="0.0120%" height="15" fill="rgb(252,97,53)" fg:x="148167" fg:w="87"/><text x="20.6753%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (101 samples, 0.01%)</title><rect x="20.4552%" y="613" width="0.0139%" height="15" fill="rgb(220,88,7)" fg:x="148384" fg:w="101"/><text x="20.7052%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (187 samples, 0.03%)</title><rect x="20.4691%" y="613" width="0.0258%" height="15" fill="rgb(213,176,14)" fg:x="148485" fg:w="187"/><text x="20.7191%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (155 samples, 0.02%)</title><rect x="20.4735%" y="597" width="0.0214%" height="15" fill="rgb(246,73,7)" fg:x="148517" fg:w="155"/><text x="20.7235%" y="607.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (112 samples, 0.02%)</title><rect x="20.4949%" y="613" width="0.0154%" height="15" fill="rgb(245,64,36)" fg:x="148672" fg:w="112"/><text x="20.7449%" y="623.50"></text></g><g><title>one_brc::process_lines (330 samples, 0.05%)</title><rect x="20.5201%" y="613" width="0.0455%" height="15" fill="rgb(245,80,10)" fg:x="148855" fg:w="330"/><text x="20.7701%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (81 samples, 0.01%)</title><rect x="20.5870%" y="613" width="0.0112%" height="15" fill="rgb(232,107,50)" fg:x="149340" fg:w="81"/><text x="20.8370%" y="623.50"></text></g><g><title>[unknown] (3,315 samples, 0.46%)</title><rect x="20.1449%" y="629" width="0.4570%" height="15" fill="rgb(253,3,0)" fg:x="146133" fg:w="3315"/><text x="20.3949%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (136 samples, 0.02%)</title><rect x="20.9417%" y="325" width="0.0187%" height="15" fill="rgb(212,99,53)" fg:x="151913" fg:w="136"/><text x="21.1917%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (317 samples, 0.04%)</title><rect x="20.9650%" y="293" width="0.0437%" height="15" fill="rgb(249,111,54)" fg:x="152082" fg:w="317"/><text x="21.2150%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (148 samples, 0.02%)</title><rect x="20.9883%" y="277" width="0.0204%" height="15" fill="rgb(249,55,30)" fg:x="152251" fg:w="148"/><text x="21.2383%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (126 samples, 0.02%)</title><rect x="20.9913%" y="261" width="0.0174%" height="15" fill="rgb(237,47,42)" fg:x="152273" fg:w="126"/><text x="21.2413%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (124 samples, 0.02%)</title><rect x="20.9916%" y="245" width="0.0171%" height="15" fill="rgb(211,20,18)" fg:x="152275" fg:w="124"/><text x="21.2416%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (348 samples, 0.05%)</title><rect x="20.9608%" y="325" width="0.0480%" height="15" fill="rgb(231,203,46)" fg:x="152052" fg:w="348"/><text x="21.2108%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (343 samples, 0.05%)</title><rect x="20.9615%" y="309" width="0.0473%" height="15" fill="rgb(237,142,3)" fg:x="152057" fg:w="343"/><text x="21.2115%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (246 samples, 0.03%)</title><rect x="21.0569%" y="277" width="0.0339%" height="15" fill="rgb(241,107,1)" fg:x="152749" fg:w="246"/><text x="21.3069%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (648 samples, 0.09%)</title><rect x="21.0088%" y="325" width="0.0893%" height="15" fill="rgb(229,83,13)" fg:x="152400" fg:w="648"/><text x="21.2588%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (564 samples, 0.08%)</title><rect x="21.0204%" y="309" width="0.0777%" height="15" fill="rgb(241,91,40)" fg:x="152484" fg:w="564"/><text x="21.2704%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (564 samples, 0.08%)</title><rect x="21.0204%" y="293" width="0.0777%" height="15" fill="rgb(225,3,45)" fg:x="152484" fg:w="564"/><text x="21.2704%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (899 samples, 0.12%)</title><rect x="21.0981%" y="325" width="0.1239%" height="15" fill="rgb(244,223,14)" fg:x="153048" fg:w="899"/><text x="21.3481%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (783 samples, 0.11%)</title><rect x="21.1141%" y="309" width="0.1079%" height="15" fill="rgb(224,124,37)" fg:x="153164" fg:w="783"/><text x="21.3641%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (312 samples, 0.04%)</title><rect x="21.1791%" y="293" width="0.0430%" height="15" fill="rgb(251,171,30)" fg:x="153635" fg:w="312"/><text x="21.4291%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (246 samples, 0.03%)</title><rect x="21.1882%" y="277" width="0.0339%" height="15" fill="rgb(236,46,54)" fg:x="153701" fg:w="246"/><text x="21.4382%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (238 samples, 0.03%)</title><rect x="21.1893%" y="261" width="0.0328%" height="15" fill="rgb(245,213,5)" fg:x="153709" fg:w="238"/><text x="21.4393%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (79 samples, 0.01%)</title><rect x="21.3323%" y="293" width="0.0109%" height="15" fill="rgb(230,144,27)" fg:x="154747" fg:w="79"/><text x="21.5823%" y="303.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (103 samples, 0.01%)</title><rect x="21.3479%" y="293" width="0.0142%" height="15" fill="rgb(220,86,6)" fg:x="154860" fg:w="103"/><text x="21.5979%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,883 samples, 0.26%)</title><rect x="21.2241%" y="325" width="0.2596%" height="15" fill="rgb(240,20,13)" fg:x="153962" fg:w="1883"/><text x="21.4741%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,752 samples, 0.24%)</title><rect x="21.2422%" y="309" width="0.2415%" height="15" fill="rgb(217,89,34)" fg:x="154093" fg:w="1752"/><text x="21.4922%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (882 samples, 0.12%)</title><rect x="21.3621%" y="293" width="0.1216%" height="15" fill="rgb(229,13,5)" fg:x="154963" fg:w="882"/><text x="21.6121%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,195 samples, 0.72%)</title><rect x="20.7750%" y="341" width="0.7161%" height="15" fill="rgb(244,67,35)" fg:x="150704" fg:w="5195"/><text x="21.0250%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,717 samples, 0.79%)</title><rect x="20.7235%" y="373" width="0.7881%" height="15" fill="rgb(221,40,2)" fg:x="150330" fg:w="5717"/><text x="20.9735%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,711 samples, 0.79%)</title><rect x="20.7243%" y="357" width="0.7873%" height="15" fill="rgb(237,157,21)" fg:x="150336" fg:w="5711"/><text x="20.9743%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (148 samples, 0.02%)</title><rect x="21.4912%" y="341" width="0.0204%" height="15" fill="rgb(222,94,11)" fg:x="155899" fg:w="148"/><text x="21.7412%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (148 samples, 0.02%)</title><rect x="21.4912%" y="325" width="0.0204%" height="15" fill="rgb(249,113,6)" fg:x="155899" fg:w="148"/><text x="21.7412%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (102 samples, 0.01%)</title><rect x="21.4975%" y="309" width="0.0141%" height="15" fill="rgb(238,137,36)" fg:x="155945" fg:w="102"/><text x="21.7475%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (77 samples, 0.01%)</title><rect x="21.5009%" y="293" width="0.0106%" height="15" fill="rgb(210,102,26)" fg:x="155970" fg:w="77"/><text x="21.7509%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (512 samples, 0.07%)</title><rect x="21.8824%" y="181" width="0.0706%" height="15" fill="rgb(218,30,30)" fg:x="158737" fg:w="512"/><text x="22.1324%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,364 samples, 0.19%)</title><rect x="21.7760%" y="229" width="0.1880%" height="15" fill="rgb(214,67,26)" fg:x="157965" fg:w="1364"/><text x="22.0260%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,150 samples, 0.16%)</title><rect x="21.8055%" y="213" width="0.1585%" height="15" fill="rgb(251,9,53)" fg:x="158179" fg:w="1150"/><text x="22.0555%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,118 samples, 0.15%)</title><rect x="21.8099%" y="197" width="0.1541%" height="15" fill="rgb(228,204,25)" fg:x="158211" fg:w="1118"/><text x="22.0599%" y="207.50"></text></g><g><title>core::mem::size_of_val (80 samples, 0.01%)</title><rect x="21.9530%" y="181" width="0.0110%" height="15" fill="rgb(207,153,8)" fg:x="159249" fg:w="80"/><text x="22.2030%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (356 samples, 0.05%)</title><rect x="21.9696%" y="181" width="0.0491%" height="15" fill="rgb(242,9,16)" fg:x="159370" fg:w="356"/><text x="22.2196%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (271 samples, 0.04%)</title><rect x="21.9814%" y="165" width="0.0374%" height="15" fill="rgb(217,211,10)" fg:x="159455" fg:w="271"/><text x="22.2314%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (257 samples, 0.04%)</title><rect x="21.9833%" y="149" width="0.0354%" height="15" fill="rgb(219,228,52)" fg:x="159469" fg:w="257"/><text x="22.2333%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,654 samples, 0.37%)</title><rect x="21.6708%" y="261" width="0.3659%" height="15" fill="rgb(231,92,29)" fg:x="157202" fg:w="2654"/><text x="21.9208%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,654 samples, 0.37%)</title><rect x="21.6708%" y="245" width="0.3659%" height="15" fill="rgb(232,8,23)" fg:x="157202" fg:w="2654"/><text x="21.9208%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (527 samples, 0.07%)</title><rect x="21.9640%" y="229" width="0.0726%" height="15" fill="rgb(216,211,34)" fg:x="159329" fg:w="527"/><text x="22.2140%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (527 samples, 0.07%)</title><rect x="21.9640%" y="213" width="0.0726%" height="15" fill="rgb(236,151,0)" fg:x="159329" fg:w="527"/><text x="22.2140%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (486 samples, 0.07%)</title><rect x="21.9696%" y="197" width="0.0670%" height="15" fill="rgb(209,168,3)" fg:x="159370" fg:w="486"/><text x="22.2196%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (130 samples, 0.02%)</title><rect x="22.0187%" y="181" width="0.0179%" height="15" fill="rgb(208,129,28)" fg:x="159726" fg:w="130"/><text x="22.2687%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (130 samples, 0.02%)</title><rect x="22.0187%" y="165" width="0.0179%" height="15" fill="rgb(229,78,22)" fg:x="159726" fg:w="130"/><text x="22.2687%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,211 samples, 0.44%)</title><rect x="21.6260%" y="277" width="0.4426%" height="15" fill="rgb(228,187,13)" fg:x="156877" fg:w="3211"/><text x="21.8760%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (230 samples, 0.03%)</title><rect x="22.0369%" y="261" width="0.0317%" height="15" fill="rgb(240,119,24)" fg:x="159858" fg:w="230"/><text x="22.2869%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (230 samples, 0.03%)</title><rect x="22.0369%" y="245" width="0.0317%" height="15" fill="rgb(209,194,42)" fg:x="159858" fg:w="230"/><text x="22.2869%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (230 samples, 0.03%)</title><rect x="22.0369%" y="229" width="0.0317%" height="15" fill="rgb(247,200,46)" fg:x="159858" fg:w="230"/><text x="22.2869%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (108 samples, 0.01%)</title><rect x="22.1671%" y="245" width="0.0149%" height="15" fill="rgb(218,76,16)" fg:x="160802" fg:w="108"/><text x="22.4171%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (224 samples, 0.03%)</title><rect x="22.2602%" y="165" width="0.0309%" height="15" fill="rgb(225,21,48)" fg:x="161478" fg:w="224"/><text x="22.5102%" y="175.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,267 samples, 0.73%)</title><rect x="21.5655%" y="325" width="0.7261%" height="15" fill="rgb(239,223,50)" fg:x="156438" fg:w="5267"/><text x="21.8155%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,945 samples, 0.68%)</title><rect x="21.6098%" y="309" width="0.6817%" height="15" fill="rgb(244,45,21)" fg:x="156760" fg:w="4945"/><text x="21.8598%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,942 samples, 0.68%)</title><rect x="21.6103%" y="293" width="0.6813%" height="15" fill="rgb(232,33,43)" fg:x="156763" fg:w="4942"/><text x="21.8603%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,617 samples, 0.22%)</title><rect x="22.0686%" y="277" width="0.2229%" height="15" fill="rgb(209,8,3)" fg:x="160088" fg:w="1617"/><text x="22.3186%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,524 samples, 0.21%)</title><rect x="22.0814%" y="261" width="0.2101%" height="15" fill="rgb(214,25,53)" fg:x="160181" fg:w="1524"/><text x="22.3314%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (795 samples, 0.11%)</title><rect x="22.1819%" y="245" width="0.1096%" height="15" fill="rgb(254,186,54)" fg:x="160910" fg:w="795"/><text x="22.4319%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (784 samples, 0.11%)</title><rect x="22.1835%" y="229" width="0.1081%" height="15" fill="rgb(208,174,49)" fg:x="160921" fg:w="784"/><text x="22.4335%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (699 samples, 0.10%)</title><rect x="22.1952%" y="213" width="0.0964%" height="15" fill="rgb(233,191,51)" fg:x="161006" fg:w="699"/><text x="22.4452%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (309 samples, 0.04%)</title><rect x="22.2489%" y="197" width="0.0426%" height="15" fill="rgb(222,134,10)" fg:x="161396" fg:w="309"/><text x="22.4989%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (227 samples, 0.03%)</title><rect x="22.2602%" y="181" width="0.0313%" height="15" fill="rgb(230,226,20)" fg:x="161478" fg:w="227"/><text x="22.5102%" y="191.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,397 samples, 0.74%)</title><rect x="21.5477%" y="341" width="0.7440%" height="15" fill="rgb(251,111,25)" fg:x="156309" fg:w="5397"/><text x="21.7977%" y="351.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11,480 samples, 1.58%)</title><rect x="20.7093%" y="405" width="1.5826%" height="15" fill="rgb(224,40,46)" fg:x="150227" fg:w="11480"/><text x="20.9593%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,471 samples, 1.58%)</title><rect x="20.7105%" y="389" width="1.5813%" height="15" fill="rgb(236,108,47)" fg:x="150236" fg:w="11471"/><text x="20.9605%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,660 samples, 0.78%)</title><rect x="21.5116%" y="373" width="0.7802%" height="15" fill="rgb(234,93,0)" fg:x="156047" fg:w="5660"/><text x="21.7616%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,455 samples, 0.75%)</title><rect x="21.5398%" y="357" width="0.7520%" height="15" fill="rgb(224,213,32)" fg:x="156252" fg:w="5455"/><text x="21.7898%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (365 samples, 0.05%)</title><rect x="22.2925%" y="405" width="0.0503%" height="15" fill="rgb(251,11,48)" fg:x="161712" fg:w="365"/><text x="22.5425%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (199 samples, 0.03%)</title><rect x="22.3428%" y="405" width="0.0274%" height="15" fill="rgb(236,173,5)" fg:x="162077" fg:w="199"/><text x="22.5928%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (170 samples, 0.02%)</title><rect x="22.4042%" y="341" width="0.0234%" height="15" fill="rgb(230,95,12)" fg:x="162522" fg:w="170"/><text x="22.6542%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (221 samples, 0.03%)</title><rect x="22.4277%" y="341" width="0.0305%" height="15" fill="rgb(232,209,1)" fg:x="162693" fg:w="221"/><text x="22.6777%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (482 samples, 0.07%)</title><rect x="22.3973%" y="357" width="0.0664%" height="15" fill="rgb(232,6,1)" fg:x="162472" fg:w="482"/><text x="22.6473%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (141 samples, 0.02%)</title><rect x="22.4763%" y="341" width="0.0194%" height="15" fill="rgb(210,224,50)" fg:x="163045" fg:w="141"/><text x="22.7263%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (354 samples, 0.05%)</title><rect x="22.5255%" y="309" width="0.0488%" height="15" fill="rgb(228,127,35)" fg:x="163402" fg:w="354"/><text x="22.7755%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (74 samples, 0.01%)</title><rect x="22.5641%" y="293" width="0.0102%" height="15" fill="rgb(245,102,45)" fg:x="163682" fg:w="74"/><text x="22.8141%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (448 samples, 0.06%)</title><rect x="22.5129%" y="325" width="0.0618%" height="15" fill="rgb(214,1,49)" fg:x="163311" fg:w="448"/><text x="22.7629%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (813 samples, 0.11%)</title><rect x="22.4637%" y="357" width="0.1121%" height="15" fill="rgb(226,163,40)" fg:x="162954" fg:w="813"/><text x="22.7137%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (581 samples, 0.08%)</title><rect x="22.4957%" y="341" width="0.0801%" height="15" fill="rgb(239,212,28)" fg:x="163186" fg:w="581"/><text x="22.7457%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,493 samples, 0.21%)</title><rect x="22.3702%" y="405" width="0.2058%" height="15" fill="rgb(220,20,13)" fg:x="162276" fg:w="1493"/><text x="22.6202%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,462 samples, 0.20%)</title><rect x="22.3745%" y="389" width="0.2015%" height="15" fill="rgb(210,164,35)" fg:x="162307" fg:w="1462"/><text x="22.6245%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,414 samples, 0.19%)</title><rect x="22.3811%" y="373" width="0.1949%" height="15" fill="rgb(248,109,41)" fg:x="162355" fg:w="1414"/><text x="22.6311%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (86 samples, 0.01%)</title><rect x="22.7680%" y="261" width="0.0119%" height="15" fill="rgb(238,23,50)" fg:x="165161" fg:w="86"/><text x="23.0180%" y="271.50"></text></g><g><title>core::char::methods::encode_utf8_raw (775 samples, 0.11%)</title><rect x="22.6731%" y="357" width="0.1068%" height="15" fill="rgb(211,48,49)" fg:x="164473" fg:w="775"/><text x="22.9231%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (320 samples, 0.04%)</title><rect x="22.7358%" y="341" width="0.0441%" height="15" fill="rgb(223,36,21)" fg:x="164928" fg:w="320"/><text x="22.9858%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (308 samples, 0.04%)</title><rect x="22.7375%" y="325" width="0.0425%" height="15" fill="rgb(207,123,46)" fg:x="164940" fg:w="308"/><text x="22.9875%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (279 samples, 0.04%)</title><rect x="22.7415%" y="309" width="0.0385%" height="15" fill="rgb(240,218,32)" fg:x="164969" fg:w="279"/><text x="22.9915%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (103 samples, 0.01%)</title><rect x="22.7657%" y="293" width="0.0142%" height="15" fill="rgb(252,5,43)" fg:x="165145" fg:w="103"/><text x="23.0157%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (87 samples, 0.01%)</title><rect x="22.7680%" y="277" width="0.0120%" height="15" fill="rgb(252,84,19)" fg:x="165161" fg:w="87"/><text x="23.0180%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (838 samples, 0.12%)</title><rect x="22.6646%" y="373" width="0.1155%" height="15" fill="rgb(243,152,39)" fg:x="164411" fg:w="838"/><text x="22.9146%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,104 samples, 0.15%)</title><rect x="22.6322%" y="389" width="0.1522%" height="15" fill="rgb(234,160,15)" fg:x="164176" fg:w="1104"/><text x="22.8822%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (118 samples, 0.02%)</title><rect x="22.9330%" y="373" width="0.0163%" height="15" fill="rgb(237,34,20)" fg:x="166358" fg:w="118"/><text x="23.1830%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (145 samples, 0.02%)</title><rect x="22.9771%" y="325" width="0.0200%" height="15" fill="rgb(229,97,13)" fg:x="166678" fg:w="145"/><text x="23.2271%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (123 samples, 0.02%)</title><rect x="22.9801%" y="309" width="0.0170%" height="15" fill="rgb(234,71,50)" fg:x="166700" fg:w="123"/><text x="23.2301%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (123 samples, 0.02%)</title><rect x="22.9801%" y="293" width="0.0170%" height="15" fill="rgb(253,155,4)" fg:x="166700" fg:w="123"/><text x="23.2301%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (341 samples, 0.05%)</title><rect x="22.9503%" y="373" width="0.0470%" height="15" fill="rgb(222,185,37)" fg:x="166484" fg:w="341"/><text x="23.2003%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (341 samples, 0.05%)</title><rect x="22.9503%" y="357" width="0.0470%" height="15" fill="rgb(251,177,13)" fg:x="166484" fg:w="341"/><text x="23.2003%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (307 samples, 0.04%)</title><rect x="22.9550%" y="341" width="0.0423%" height="15" fill="rgb(250,179,40)" fg:x="166518" fg:w="307"/><text x="23.2050%" y="351.50"></text></g><g><title>__memcmp_evex_movbe (170 samples, 0.02%)</title><rect x="23.0434%" y="325" width="0.0234%" height="15" fill="rgb(242,44,2)" fg:x="167159" fg:w="170"/><text x="23.2934%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (557 samples, 0.08%)</title><rect x="22.9973%" y="373" width="0.0768%" height="15" fill="rgb(216,177,13)" fg:x="166825" fg:w="557"/><text x="23.2473%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (473 samples, 0.07%)</title><rect x="23.0089%" y="357" width="0.0652%" height="15" fill="rgb(216,106,43)" fg:x="166909" fg:w="473"/><text x="23.2589%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (473 samples, 0.07%)</title><rect x="23.0089%" y="341" width="0.0652%" height="15" fill="rgb(216,183,2)" fg:x="166909" fg:w="473"/><text x="23.2589%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (894 samples, 0.12%)</title><rect x="23.0741%" y="373" width="0.1232%" height="15" fill="rgb(249,75,3)" fg:x="167382" fg:w="894"/><text x="23.3241%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (794 samples, 0.11%)</title><rect x="23.0879%" y="357" width="0.1095%" height="15" fill="rgb(219,67,39)" fg:x="167482" fg:w="794"/><text x="23.3379%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (312 samples, 0.04%)</title><rect x="23.1544%" y="341" width="0.0430%" height="15" fill="rgb(253,228,2)" fg:x="167964" fg:w="312"/><text x="23.4044%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (256 samples, 0.04%)</title><rect x="23.1621%" y="325" width="0.0353%" height="15" fill="rgb(235,138,27)" fg:x="168020" fg:w="256"/><text x="23.4121%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (249 samples, 0.03%)</title><rect x="23.1630%" y="309" width="0.0343%" height="15" fill="rgb(236,97,51)" fg:x="168027" fg:w="249"/><text x="23.4130%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned (146 samples, 0.02%)</title><rect x="23.2107%" y="357" width="0.0201%" height="15" fill="rgb(240,80,30)" fg:x="168373" fg:w="146"/><text x="23.4607%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (103 samples, 0.01%)</title><rect x="23.2167%" y="341" width="0.0142%" height="15" fill="rgb(230,178,19)" fg:x="168416" fg:w="103"/><text x="23.4667%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,178 samples, 0.30%)</title><rect x="23.2008%" y="373" width="0.3002%" height="15" fill="rgb(210,190,27)" fg:x="168301" fg:w="2178"/><text x="23.4508%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,960 samples, 0.27%)</title><rect x="23.2309%" y="357" width="0.2702%" height="15" fill="rgb(222,107,31)" fg:x="168519" fg:w="1960"/><text x="23.4809%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,172 samples, 0.71%)</title><rect x="22.7936%" y="389" width="0.7130%" height="15" fill="rgb(216,127,34)" fg:x="165347" fg:w="5172"/><text x="23.0436%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (256 samples, 0.04%)</title><rect x="23.5067%" y="373" width="0.0353%" height="15" fill="rgb(234,116,52)" fg:x="170520" fg:w="256"/><text x="23.7567%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (204 samples, 0.03%)</title><rect x="23.5139%" y="357" width="0.0281%" height="15" fill="rgb(222,124,15)" fg:x="170572" fg:w="204"/><text x="23.7639%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (132 samples, 0.02%)</title><rect x="23.5238%" y="341" width="0.0182%" height="15" fill="rgb(231,179,28)" fg:x="170644" fg:w="132"/><text x="23.7738%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (130 samples, 0.02%)</title><rect x="23.5241%" y="325" width="0.0179%" height="15" fill="rgb(226,93,45)" fg:x="170646" fg:w="130"/><text x="23.7741%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (74 samples, 0.01%)</title><rect x="23.5430%" y="341" width="0.0102%" height="15" fill="rgb(215,8,51)" fg:x="170783" fg:w="74"/><text x="23.7930%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (7,186 samples, 0.99%)</title><rect x="22.5761%" y="405" width="0.9906%" height="15" fill="rgb(223,106,5)" fg:x="163769" fg:w="7186"/><text x="22.8261%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (435 samples, 0.06%)</title><rect x="23.5067%" y="389" width="0.0600%" height="15" fill="rgb(250,191,5)" fg:x="170520" fg:w="435"/><text x="23.7567%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (179 samples, 0.02%)</title><rect x="23.5420%" y="373" width="0.0247%" height="15" fill="rgb(242,132,44)" fg:x="170776" fg:w="179"/><text x="23.7920%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (179 samples, 0.02%)</title><rect x="23.5420%" y="357" width="0.0247%" height="15" fill="rgb(251,152,29)" fg:x="170776" fg:w="179"/><text x="23.7920%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (98 samples, 0.01%)</title><rect x="23.5532%" y="341" width="0.0135%" height="15" fill="rgb(218,179,5)" fg:x="170857" fg:w="98"/><text x="23.8032%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (98 samples, 0.01%)</title><rect x="23.5532%" y="325" width="0.0135%" height="15" fill="rgb(227,67,19)" fg:x="170857" fg:w="98"/><text x="23.8032%" y="335.50"></text></g><g><title>one_brc::round_towards_positive (665 samples, 0.09%)</title><rect x="23.5667%" y="405" width="0.0917%" height="15" fill="rgb(233,119,31)" fg:x="170955" fg:w="665"/><text x="23.8167%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (170 samples, 0.02%)</title><rect x="23.6349%" y="389" width="0.0234%" height="15" fill="rgb(241,120,22)" fg:x="171450" fg:w="170"/><text x="23.8849%" y="399.50"></text></g><g><title>__round (141 samples, 0.02%)</title><rect x="23.6389%" y="373" width="0.0194%" height="15" fill="rgb(224,102,30)" fg:x="171479" fg:w="141"/><text x="23.8889%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (111 samples, 0.02%)</title><rect x="23.7655%" y="357" width="0.0153%" height="15" fill="rgb(210,164,37)" fg:x="172397" fg:w="111"/><text x="24.0155%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (566 samples, 0.08%)</title><rect x="23.7198%" y="389" width="0.0780%" height="15" fill="rgb(226,191,16)" fg:x="172066" fg:w="566"/><text x="23.9698%" y="399.50"></text></g><g><title>one_brc::Measurement::record (463 samples, 0.06%)</title><rect x="23.7340%" y="373" width="0.0638%" height="15" fill="rgb(214,40,45)" fg:x="172169" fg:w="463"/><text x="23.9840%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (124 samples, 0.02%)</title><rect x="23.7808%" y="357" width="0.0171%" height="15" fill="rgb(244,29,26)" fg:x="172508" fg:w="124"/><text x="24.0308%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (99 samples, 0.01%)</title><rect x="23.8156%" y="325" width="0.0136%" height="15" fill="rgb(216,16,5)" fg:x="172761" fg:w="99"/><text x="24.0656%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (196 samples, 0.03%)</title><rect x="23.8057%" y="341" width="0.0270%" height="15" fill="rgb(249,76,35)" fg:x="172689" fg:w="196"/><text x="24.0557%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (212 samples, 0.03%)</title><rect x="23.8041%" y="357" width="0.0292%" height="15" fill="rgb(207,11,44)" fg:x="172677" fg:w="212"/><text x="24.0541%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,272 samples, 0.18%)</title><rect x="23.6583%" y="405" width="0.1753%" height="15" fill="rgb(228,190,49)" fg:x="171620" fg:w="1272"/><text x="23.9083%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (260 samples, 0.04%)</title><rect x="23.7979%" y="389" width="0.0358%" height="15" fill="rgb(214,173,12)" fg:x="172632" fg:w="260"/><text x="24.0479%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (257 samples, 0.04%)</title><rect x="23.7983%" y="373" width="0.0354%" height="15" fill="rgb(218,26,35)" fg:x="172635" fg:w="257"/><text x="24.0483%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (85 samples, 0.01%)</title><rect x="23.8739%" y="325" width="0.0117%" height="15" fill="rgb(220,200,19)" fg:x="173184" fg:w="85"/><text x="24.1239%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (150 samples, 0.02%)</title><rect x="23.8683%" y="341" width="0.0207%" height="15" fill="rgb(239,95,49)" fg:x="173143" fg:w="150"/><text x="24.1183%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (442 samples, 0.06%)</title><rect x="23.8337%" y="405" width="0.0609%" height="15" fill="rgb(235,85,53)" fg:x="172892" fg:w="442"/><text x="24.0837%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (280 samples, 0.04%)</title><rect x="23.8560%" y="389" width="0.0386%" height="15" fill="rgb(233,133,31)" fg:x="173054" fg:w="280"/><text x="24.1060%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (198 samples, 0.03%)</title><rect x="23.8673%" y="373" width="0.0273%" height="15" fill="rgb(218,25,20)" fg:x="173136" fg:w="198"/><text x="24.1173%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (197 samples, 0.03%)</title><rect x="23.8675%" y="357" width="0.0272%" height="15" fill="rgb(252,210,38)" fg:x="173137" fg:w="197"/><text x="24.1175%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (271 samples, 0.04%)</title><rect x="24.1133%" y="277" width="0.0374%" height="15" fill="rgb(242,134,21)" fg:x="174920" fg:w="271"/><text x="24.3633%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (898 samples, 0.12%)</title><rect x="24.0296%" y="293" width="0.1238%" height="15" fill="rgb(213,28,48)" fg:x="174313" fg:w="898"/><text x="24.2796%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (752 samples, 0.10%)</title><rect x="24.3890%" y="277" width="0.1037%" height="15" fill="rgb(250,196,2)" fg:x="176920" fg:w="752"/><text x="24.6390%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,508 samples, 0.35%)</title><rect x="24.1534%" y="293" width="0.3457%" height="15" fill="rgb(227,5,17)" fg:x="175211" fg:w="2508"/><text x="24.4034%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,731 samples, 0.51%)</title><rect x="23.9849%" y="309" width="0.5143%" height="15" fill="rgb(221,226,24)" fg:x="173989" fg:w="3731"/><text x="24.2349%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,779 samples, 0.52%)</title><rect x="23.9791%" y="341" width="0.5209%" height="15" fill="rgb(211,5,48)" fg:x="173947" fg:w="3779"/><text x="24.2291%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,737 samples, 0.52%)</title><rect x="23.9849%" y="325" width="0.5152%" height="15" fill="rgb(219,150,6)" fg:x="173989" fg:w="3737"/><text x="24.2349%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (393 samples, 0.05%)</title><rect x="24.5089%" y="325" width="0.0542%" height="15" fill="rgb(251,46,16)" fg:x="177790" fg:w="393"/><text x="24.7589%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (392 samples, 0.05%)</title><rect x="24.5636%" y="309" width="0.0540%" height="15" fill="rgb(220,204,40)" fg:x="178187" fg:w="392"/><text x="24.8136%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (459 samples, 0.06%)</title><rect x="24.6441%" y="293" width="0.0633%" height="15" fill="rgb(211,85,2)" fg:x="178771" fg:w="459"/><text x="24.8941%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (146 samples, 0.02%)</title><rect x="24.7074%" y="293" width="0.0201%" height="15" fill="rgb(229,17,7)" fg:x="179230" fg:w="146"/><text x="24.9574%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (833 samples, 0.11%)</title><rect x="24.6177%" y="309" width="0.1148%" height="15" fill="rgb(239,72,28)" fg:x="178579" fg:w="833"/><text x="24.8677%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,274 samples, 0.18%)</title><rect x="24.5631%" y="325" width="0.1756%" height="15" fill="rgb(230,47,54)" fg:x="178183" fg:w="1274"/><text x="24.8131%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,782 samples, 0.25%)</title><rect x="24.5001%" y="341" width="0.2457%" height="15" fill="rgb(214,50,8)" fg:x="177726" fg:w="1782"/><text x="24.7501%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (150 samples, 0.02%)</title><rect x="24.8665%" y="213" width="0.0207%" height="15" fill="rgb(216,198,43)" fg:x="180384" fg:w="150"/><text x="25.1165%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (421 samples, 0.06%)</title><rect x="24.8301%" y="229" width="0.0580%" height="15" fill="rgb(234,20,35)" fg:x="180120" fg:w="421"/><text x="25.0801%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (122 samples, 0.02%)</title><rect x="24.9535%" y="213" width="0.0168%" height="15" fill="rgb(254,45,19)" fg:x="181015" fg:w="122"/><text x="25.2035%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (655 samples, 0.09%)</title><rect x="24.8881%" y="229" width="0.0903%" height="15" fill="rgb(219,14,44)" fg:x="180541" fg:w="655"/><text x="25.1381%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,580 samples, 0.22%)</title><rect x="24.7715%" y="245" width="0.2178%" height="15" fill="rgb(217,220,26)" fg:x="179695" fg:w="1580"/><text x="25.0215%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (165 samples, 0.02%)</title><rect x="25.0632%" y="213" width="0.0227%" height="15" fill="rgb(213,158,28)" fg:x="181811" fg:w="165"/><text x="25.3132%" y="223.50"></text></g><g><title>core::cmp::min (533 samples, 0.07%)</title><rect x="25.0862%" y="213" width="0.0735%" height="15" fill="rgb(252,51,52)" fg:x="181978" fg:w="533"/><text x="25.3362%" y="223.50"></text></g><g><title>core::cmp::Ord::min (533 samples, 0.07%)</title><rect x="25.0862%" y="197" width="0.0735%" height="15" fill="rgb(246,89,16)" fg:x="181978" fg:w="533"/><text x="25.3362%" y="207.50"></text></g><g><title>core::cmp::min_by (512 samples, 0.07%)</title><rect x="25.0891%" y="181" width="0.0706%" height="15" fill="rgb(216,158,49)" fg:x="181999" fg:w="512"/><text x="25.3391%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (157 samples, 0.02%)</title><rect x="25.1381%" y="165" width="0.0216%" height="15" fill="rgb(236,107,19)" fg:x="182354" fg:w="157"/><text x="25.3881%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (113 samples, 0.02%)</title><rect x="25.1441%" y="149" width="0.0156%" height="15" fill="rgb(228,185,30)" fg:x="182398" fg:w="113"/><text x="25.3941%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (485 samples, 0.07%)</title><rect x="25.1597%" y="213" width="0.0669%" height="15" fill="rgb(246,134,8)" fg:x="182511" fg:w="485"/><text x="25.4097%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,371 samples, 0.46%)</title><rect x="24.7675%" y="293" width="0.4647%" height="15" fill="rgb(214,143,50)" fg:x="179666" fg:w="3371"/><text x="25.0175%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,345 samples, 0.46%)</title><rect x="24.7711%" y="277" width="0.4611%" height="15" fill="rgb(228,75,8)" fg:x="179692" fg:w="3345"/><text x="25.0211%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,345 samples, 0.46%)</title><rect x="24.7711%" y="261" width="0.4611%" height="15" fill="rgb(207,175,4)" fg:x="179692" fg:w="3345"/><text x="25.0211%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,762 samples, 0.24%)</title><rect x="24.9893%" y="245" width="0.2429%" height="15" fill="rgb(205,108,24)" fg:x="181275" fg:w="1762"/><text x="25.2393%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,706 samples, 0.24%)</title><rect x="24.9970%" y="229" width="0.2352%" height="15" fill="rgb(244,120,49)" fg:x="181331" fg:w="1706"/><text x="25.2470%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (9,285 samples, 1.28%)</title><rect x="23.9524%" y="373" width="1.2800%" height="15" fill="rgb(223,47,38)" fg:x="173753" fg:w="9285"/><text x="24.2024%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,228 samples, 1.27%)</title><rect x="23.9602%" y="357" width="1.2721%" height="15" fill="rgb(229,179,11)" fg:x="173810" fg:w="9228"/><text x="24.2102%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,530 samples, 0.49%)</title><rect x="24.7457%" y="341" width="0.4866%" height="15" fill="rgb(231,122,1)" fg:x="179508" fg:w="3530"/><text x="24.9957%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,502 samples, 0.48%)</title><rect x="24.7496%" y="325" width="0.4828%" height="15" fill="rgb(245,119,9)" fg:x="179536" fg:w="3502"/><text x="24.9996%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,434 samples, 0.47%)</title><rect x="24.7590%" y="309" width="0.4734%" height="15" fill="rgb(241,163,25)" fg:x="179604" fg:w="3434"/><text x="25.0090%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (113 samples, 0.02%)</title><rect x="25.2838%" y="325" width="0.0156%" height="15" fill="rgb(217,214,3)" fg:x="183411" fg:w="113"/><text x="25.5338%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (237 samples, 0.03%)</title><rect x="25.2668%" y="341" width="0.0327%" height="15" fill="rgb(240,86,28)" fg:x="183288" fg:w="237"/><text x="25.5168%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (390 samples, 0.05%)</title><rect x="25.2534%" y="357" width="0.0538%" height="15" fill="rgb(215,47,9)" fg:x="183191" fg:w="390"/><text x="25.5034%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (110 samples, 0.02%)</title><rect x="25.3896%" y="341" width="0.0152%" height="15" fill="rgb(252,25,45)" fg:x="184179" fg:w="110"/><text x="25.6396%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (164 samples, 0.02%)</title><rect x="25.4799%" y="309" width="0.0226%" height="15" fill="rgb(251,164,9)" fg:x="184834" fg:w="164"/><text x="25.7299%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (593 samples, 0.08%)</title><rect x="25.4431%" y="325" width="0.0817%" height="15" fill="rgb(233,194,0)" fg:x="184567" fg:w="593"/><text x="25.6931%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (162 samples, 0.02%)</title><rect x="25.5025%" y="309" width="0.0223%" height="15" fill="rgb(249,111,24)" fg:x="184998" fg:w="162"/><text x="25.7525%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (132 samples, 0.02%)</title><rect x="25.5067%" y="293" width="0.0182%" height="15" fill="rgb(250,223,3)" fg:x="185028" fg:w="132"/><text x="25.7567%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (896 samples, 0.12%)</title><rect x="25.4048%" y="341" width="0.1235%" height="15" fill="rgb(236,178,37)" fg:x="184289" fg:w="896"/><text x="25.6548%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (126 samples, 0.02%)</title><rect x="25.5574%" y="293" width="0.0174%" height="15" fill="rgb(241,158,50)" fg:x="185396" fg:w="126"/><text x="25.8074%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (199 samples, 0.03%)</title><rect x="25.5478%" y="309" width="0.0274%" height="15" fill="rgb(213,121,41)" fg:x="185326" fg:w="199"/><text x="25.7978%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (211 samples, 0.03%)</title><rect x="25.5468%" y="325" width="0.0291%" height="15" fill="rgb(240,92,3)" fg:x="185319" fg:w="211"/><text x="25.7968%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (122 samples, 0.02%)</title><rect x="25.5968%" y="293" width="0.0168%" height="15" fill="rgb(205,123,3)" fg:x="185682" fg:w="122"/><text x="25.8468%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (244 samples, 0.03%)</title><rect x="25.5802%" y="309" width="0.0336%" height="15" fill="rgb(205,97,47)" fg:x="185561" fg:w="244"/><text x="25.8302%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (298 samples, 0.04%)</title><rect x="25.5759%" y="325" width="0.0411%" height="15" fill="rgb(247,152,14)" fg:x="185530" fg:w="298"/><text x="25.8259%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (226 samples, 0.03%)</title><rect x="25.7057%" y="229" width="0.0312%" height="15" fill="rgb(248,195,53)" fg:x="186472" fg:w="226"/><text x="25.9557%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (578 samples, 0.08%)</title><rect x="25.6633%" y="277" width="0.0797%" height="15" fill="rgb(226,201,16)" fg:x="186164" fg:w="578"/><text x="25.9133%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (517 samples, 0.07%)</title><rect x="25.6717%" y="261" width="0.0713%" height="15" fill="rgb(205,98,0)" fg:x="186225" fg:w="517"/><text x="25.9217%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (517 samples, 0.07%)</title><rect x="25.6717%" y="245" width="0.0713%" height="15" fill="rgb(214,191,48)" fg:x="186225" fg:w="517"/><text x="25.9217%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,592 samples, 0.22%)</title><rect x="25.5314%" y="341" width="0.2195%" height="15" fill="rgb(237,112,39)" fg:x="185207" fg:w="1592"/><text x="25.7814%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (971 samples, 0.13%)</title><rect x="25.6170%" y="325" width="0.1339%" height="15" fill="rgb(247,203,27)" fg:x="185828" fg:w="971"/><text x="25.8670%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (896 samples, 0.12%)</title><rect x="25.6273%" y="309" width="0.1235%" height="15" fill="rgb(235,124,28)" fg:x="185903" fg:w="896"/><text x="25.8773%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (673 samples, 0.09%)</title><rect x="25.6580%" y="293" width="0.0928%" height="15" fill="rgb(208,207,46)" fg:x="186126" fg:w="673"/><text x="25.9080%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (823 samples, 0.11%)</title><rect x="25.7653%" y="341" width="0.1135%" height="15" fill="rgb(234,176,4)" fg:x="186904" fg:w="823"/><text x="26.0153%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (709 samples, 0.10%)</title><rect x="25.7810%" y="325" width="0.0977%" height="15" fill="rgb(230,133,28)" fg:x="187018" fg:w="709"/><text x="26.0310%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (181 samples, 0.02%)</title><rect x="25.8538%" y="309" width="0.0250%" height="15" fill="rgb(211,137,40)" fg:x="187546" fg:w="181"/><text x="26.1038%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (447 samples, 0.06%)</title><rect x="25.9128%" y="325" width="0.0616%" height="15" fill="rgb(254,35,13)" fg:x="187974" fg:w="447"/><text x="26.1628%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (187 samples, 0.03%)</title><rect x="25.9486%" y="309" width="0.0258%" height="15" fill="rgb(225,49,51)" fg:x="188234" fg:w="187"/><text x="26.1986%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (125 samples, 0.02%)</title><rect x="26.0549%" y="309" width="0.0172%" height="15" fill="rgb(251,10,15)" fg:x="189005" fg:w="125"/><text x="26.3049%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (804 samples, 0.11%)</title><rect x="25.9744%" y="325" width="0.1108%" height="15" fill="rgb(228,207,15)" fg:x="188421" fg:w="804"/><text x="26.2244%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (95 samples, 0.01%)</title><rect x="26.0722%" y="309" width="0.0131%" height="15" fill="rgb(241,99,19)" fg:x="189130" fg:w="95"/><text x="26.3222%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,311 samples, 0.32%)</title><rect x="25.8787%" y="341" width="0.3186%" height="15" fill="rgb(207,104,49)" fg:x="187727" fg:w="2311"/><text x="26.1287%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (813 samples, 0.11%)</title><rect x="26.0852%" y="325" width="0.1121%" height="15" fill="rgb(234,99,18)" fg:x="189225" fg:w="813"/><text x="26.3352%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (684 samples, 0.09%)</title><rect x="26.1030%" y="309" width="0.0943%" height="15" fill="rgb(213,191,49)" fg:x="189354" fg:w="684"/><text x="26.3530%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (205 samples, 0.03%)</title><rect x="26.1691%" y="293" width="0.0283%" height="15" fill="rgb(210,226,19)" fg:x="189833" fg:w="205"/><text x="26.4191%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,681 samples, 2.30%)</title><rect x="23.9015%" y="389" width="2.2995%" height="15" fill="rgb(229,97,18)" fg:x="173384" fg:w="16681"/><text x="24.1515%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,027 samples, 0.97%)</title><rect x="25.2324%" y="373" width="0.9687%" height="15" fill="rgb(211,167,15)" fg:x="183038" fg:w="7027"/><text x="25.4824%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,432 samples, 0.89%)</title><rect x="25.3144%" y="357" width="0.8867%" height="15" fill="rgb(210,169,34)" fg:x="183633" fg:w="6432"/><text x="25.5644%" y="367.50"></text></g><g><title>__clone3 (40,901 samples, 5.64%)</title><rect x="20.6019%" y="629" width="5.6383%" height="15" fill="rgb(241,121,31)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="639.50">__clone3</text></g><g><title>start_thread (40,901 samples, 5.64%)</title><rect x="20.6019%" y="613" width="5.6383%" height="15" fill="rgb(232,40,11)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (40,901 samples, 5.64%)</title><rect x="20.6019%" y="597" width="5.6383%" height="15" fill="rgb(205,86,26)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (40,901 samples, 5.64%)</title><rect x="20.6019%" y="581" width="5.6383%" height="15" fill="rgb(231,126,28)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (40,901 samples, 5.64%)</title><rect x="20.6019%" y="565" width="5.6383%" height="15" fill="rgb(219,221,18)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (40,901 samples, 5.64%)</title><rect x="20.6019%" y="549" width="5.6383%" height="15" fill="rgb(211,40,0)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (40,901 samples, 5.64%)</title><rect x="20.6019%" y="533" width="5.6383%" height="15" fill="rgb(239,85,43)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="543.50">std::pa..</text></g><g><title>__rust_try (40,901 samples, 5.64%)</title><rect x="20.6019%" y="517" width="5.6383%" height="15" fill="rgb(231,55,21)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (40,901 samples, 5.64%)</title><rect x="20.6019%" y="501" width="5.6383%" height="15" fill="rgb(225,184,43)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40,901 samples, 5.64%)</title><rect x="20.6019%" y="485" width="5.6383%" height="15" fill="rgb(251,158,41)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (40,901 samples, 5.64%)</title><rect x="20.6019%" y="469" width="5.6383%" height="15" fill="rgb(234,159,37)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (40,901 samples, 5.64%)</title><rect x="20.6019%" y="453" width="5.6383%" height="15" fill="rgb(216,204,22)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (40,901 samples, 5.64%)</title><rect x="20.6019%" y="437" width="5.6383%" height="15" fill="rgb(214,17,3)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (40,901 samples, 5.64%)</title><rect x="20.6019%" y="421" width="5.6383%" height="15" fill="rgb(212,111,17)" fg:x="149448" fg:w="40901"/><text x="20.8519%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (17,015 samples, 2.35%)</title><rect x="23.8946%" y="405" width="2.3456%" height="15" fill="rgb(221,157,24)" fg:x="173334" fg:w="17015"/><text x="24.1446%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (246 samples, 0.03%)</title><rect x="26.2063%" y="389" width="0.0339%" height="15" fill="rgb(252,16,13)" fg:x="190103" fg:w="246"/><text x="26.4563%" y="399.50"></text></g><g><title>worker-12 (47,257 samples, 6.51%)</title><rect x="19.7384%" y="645" width="6.5145%" height="15" fill="rgb(221,62,2)" fg:x="143184" fg:w="47257"/><text x="19.9884%" y="655.50">worker-12</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (177 samples, 0.02%)</title><rect x="26.2602%" y="629" width="0.0244%" height="15" fill="rgb(247,87,22)" fg:x="190494" fg:w="177"/><text x="26.5102%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (83 samples, 0.01%)</title><rect x="26.2889%" y="613" width="0.0114%" height="15" fill="rgb(215,73,9)" fg:x="190702" fg:w="83"/><text x="26.5389%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (83 samples, 0.01%)</title><rect x="26.2889%" y="597" width="0.0114%" height="15" fill="rgb(207,175,33)" fg:x="190702" fg:w="83"/><text x="26.5389%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (106 samples, 0.01%)</title><rect x="26.3003%" y="613" width="0.0146%" height="15" fill="rgb(243,129,54)" fg:x="190785" fg:w="106"/><text x="26.5503%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 0.01%)</title><rect x="26.3731%" y="613" width="0.0127%" height="15" fill="rgb(227,119,45)" fg:x="191313" fg:w="92"/><text x="26.6231%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (161 samples, 0.02%)</title><rect x="26.3909%" y="613" width="0.0222%" height="15" fill="rgb(205,109,36)" fg:x="191442" fg:w="161"/><text x="26.6409%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (148 samples, 0.02%)</title><rect x="26.4297%" y="613" width="0.0204%" height="15" fill="rgb(205,6,39)" fg:x="191724" fg:w="148"/><text x="26.6797%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (84 samples, 0.01%)</title><rect x="26.4386%" y="597" width="0.0116%" height="15" fill="rgb(221,32,16)" fg:x="191788" fg:w="84"/><text x="26.6886%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (93 samples, 0.01%)</title><rect x="26.4501%" y="613" width="0.0128%" height="15" fill="rgb(228,144,50)" fg:x="191872" fg:w="93"/><text x="26.7001%" y="623.50"></text></g><g><title>__memcpy_evex_unaligned_erms (86 samples, 0.01%)</title><rect x="26.4630%" y="613" width="0.0119%" height="15" fill="rgb(229,201,53)" fg:x="191965" fg:w="86"/><text x="26.7130%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85 samples, 0.01%)</title><rect x="26.4846%" y="613" width="0.0117%" height="15" fill="rgb(249,153,27)" fg:x="192122" fg:w="85"/><text x="26.7346%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (75 samples, 0.01%)</title><rect x="26.5202%" y="613" width="0.0103%" height="15" fill="rgb(227,106,25)" fg:x="192380" fg:w="75"/><text x="26.7702%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (107 samples, 0.01%)</title><rect x="26.5533%" y="613" width="0.0148%" height="15" fill="rgb(230,65,29)" fg:x="192620" fg:w="107"/><text x="26.8033%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (78 samples, 0.01%)</title><rect x="26.5680%" y="613" width="0.0108%" height="15" fill="rgb(221,57,46)" fg:x="192727" fg:w="78"/><text x="26.8180%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (122 samples, 0.02%)</title><rect x="26.5788%" y="613" width="0.0168%" height="15" fill="rgb(229,161,17)" fg:x="192805" fg:w="122"/><text x="26.8288%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (74 samples, 0.01%)</title><rect x="26.5956%" y="613" width="0.0102%" height="15" fill="rgb(222,213,11)" fg:x="192927" fg:w="74"/><text x="26.8456%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (85 samples, 0.01%)</title><rect x="26.6058%" y="613" width="0.0117%" height="15" fill="rgb(235,35,13)" fg:x="193001" fg:w="85"/><text x="26.8558%" y="623.50"></text></g><g><title>[anon] (2,689 samples, 0.37%)</title><rect x="26.2889%" y="629" width="0.3707%" height="15" fill="rgb(233,158,34)" fg:x="190702" fg:w="2689"/><text x="26.5389%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (174 samples, 0.02%)</title><rect x="26.6669%" y="613" width="0.0240%" height="15" fill="rgb(215,151,48)" fg:x="193444" fg:w="174"/><text x="26.9169%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (105 samples, 0.01%)</title><rect x="26.7056%" y="613" width="0.0145%" height="15" fill="rgb(229,84,14)" fg:x="193725" fg:w="105"/><text x="26.9556%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (76 samples, 0.01%)</title><rect x="26.7310%" y="613" width="0.0105%" height="15" fill="rgb(229,68,14)" fg:x="193909" fg:w="76"/><text x="26.9810%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (87 samples, 0.01%)</title><rect x="26.7414%" y="613" width="0.0120%" height="15" fill="rgb(243,106,26)" fg:x="193985" fg:w="87"/><text x="26.9914%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (187 samples, 0.03%)</title><rect x="26.7537%" y="613" width="0.0258%" height="15" fill="rgb(206,45,38)" fg:x="194074" fg:w="187"/><text x="27.0037%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (186 samples, 0.03%)</title><rect x="26.7538%" y="597" width="0.0256%" height="15" fill="rgb(226,6,15)" fg:x="194075" fg:w="186"/><text x="27.0038%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (186 samples, 0.03%)</title><rect x="26.7538%" y="581" width="0.0256%" height="15" fill="rgb(232,22,54)" fg:x="194075" fg:w="186"/><text x="27.0038%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (85 samples, 0.01%)</title><rect x="26.7678%" y="565" width="0.0117%" height="15" fill="rgb(229,222,32)" fg:x="194176" fg:w="85"/><text x="27.0178%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (91 samples, 0.01%)</title><rect x="26.8064%" y="613" width="0.0125%" height="15" fill="rgb(228,62,29)" fg:x="194456" fg:w="91"/><text x="27.0564%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (129 samples, 0.02%)</title><rect x="26.8203%" y="613" width="0.0178%" height="15" fill="rgb(251,103,34)" fg:x="194557" fg:w="129"/><text x="27.0703%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (97 samples, 0.01%)</title><rect x="26.8381%" y="613" width="0.0134%" height="15" fill="rgb(233,12,30)" fg:x="194686" fg:w="97"/><text x="27.0881%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (171 samples, 0.02%)</title><rect x="26.8640%" y="613" width="0.0236%" height="15" fill="rgb(238,52,0)" fg:x="194874" fg:w="171"/><text x="27.1140%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (119 samples, 0.02%)</title><rect x="26.8983%" y="613" width="0.0164%" height="15" fill="rgb(223,98,5)" fg:x="195123" fg:w="119"/><text x="27.1483%" y="623.50"></text></g><g><title>core::num::dec2flt::dec2flt (76 samples, 0.01%)</title><rect x="26.9042%" y="597" width="0.0105%" height="15" fill="rgb(228,75,37)" fg:x="195166" fg:w="76"/><text x="27.1542%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (76 samples, 0.01%)</title><rect x="26.9339%" y="613" width="0.0105%" height="15" fill="rgb(205,115,49)" fg:x="195381" fg:w="76"/><text x="27.1839%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (119 samples, 0.02%)</title><rect x="26.9497%" y="613" width="0.0164%" height="15" fill="rgb(250,154,43)" fg:x="195496" fg:w="119"/><text x="27.1997%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (120 samples, 0.02%)</title><rect x="26.9832%" y="613" width="0.0165%" height="15" fill="rgb(226,43,29)" fg:x="195739" fg:w="120"/><text x="27.2332%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (193 samples, 0.03%)</title><rect x="26.9998%" y="613" width="0.0266%" height="15" fill="rgb(249,228,39)" fg:x="195859" fg:w="193"/><text x="27.2498%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (163 samples, 0.02%)</title><rect x="27.0039%" y="597" width="0.0225%" height="15" fill="rgb(216,79,43)" fg:x="195889" fg:w="163"/><text x="27.2539%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (86 samples, 0.01%)</title><rect x="27.0145%" y="581" width="0.0119%" height="15" fill="rgb(228,95,12)" fg:x="195966" fg:w="86"/><text x="27.2645%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (118 samples, 0.02%)</title><rect x="27.0264%" y="613" width="0.0163%" height="15" fill="rgb(249,221,15)" fg:x="196052" fg:w="118"/><text x="27.2764%" y="623.50"></text></g><g><title>one_brc::process_lines (319 samples, 0.04%)</title><rect x="27.0537%" y="613" width="0.0440%" height="15" fill="rgb(233,34,13)" fg:x="196250" fg:w="319"/><text x="27.3037%" y="623.50"></text></g><g><title>[unknown] (3,427 samples, 0.47%)</title><rect x="26.6595%" y="629" width="0.4724%" height="15" fill="rgb(214,103,39)" fg:x="193391" fg:w="3427"/><text x="26.9095%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (142 samples, 0.02%)</title><rect x="27.4486%" y="325" width="0.0196%" height="15" fill="rgb(251,126,39)" fg:x="199115" fg:w="142"/><text x="27.6986%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (186 samples, 0.03%)</title><rect x="27.4945%" y="277" width="0.0256%" height="15" fill="rgb(214,216,36)" fg:x="199448" fg:w="186"/><text x="27.7445%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (153 samples, 0.02%)</title><rect x="27.4991%" y="261" width="0.0211%" height="15" fill="rgb(220,221,8)" fg:x="199481" fg:w="153"/><text x="27.7491%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (152 samples, 0.02%)</title><rect x="27.4992%" y="245" width="0.0210%" height="15" fill="rgb(240,216,3)" fg:x="199482" fg:w="152"/><text x="27.7492%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (343 samples, 0.05%)</title><rect x="27.4730%" y="293" width="0.0473%" height="15" fill="rgb(232,218,17)" fg:x="199292" fg:w="343"/><text x="27.7230%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (377 samples, 0.05%)</title><rect x="27.4685%" y="325" width="0.0520%" height="15" fill="rgb(229,163,45)" fg:x="199259" fg:w="377"/><text x="27.7185%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (376 samples, 0.05%)</title><rect x="27.4686%" y="309" width="0.0518%" height="15" fill="rgb(231,110,42)" fg:x="199260" fg:w="376"/><text x="27.7186%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (274 samples, 0.04%)</title><rect x="27.5688%" y="277" width="0.0378%" height="15" fill="rgb(208,170,48)" fg:x="199987" fg:w="274"/><text x="27.8188%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (670 samples, 0.09%)</title><rect x="27.5204%" y="325" width="0.0924%" height="15" fill="rgb(239,116,25)" fg:x="199636" fg:w="670"/><text x="27.7704%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (579 samples, 0.08%)</title><rect x="27.5330%" y="309" width="0.0798%" height="15" fill="rgb(219,200,50)" fg:x="199727" fg:w="579"/><text x="27.7830%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (579 samples, 0.08%)</title><rect x="27.5330%" y="293" width="0.0798%" height="15" fill="rgb(245,200,0)" fg:x="199727" fg:w="579"/><text x="27.7830%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (333 samples, 0.05%)</title><rect x="27.6921%" y="293" width="0.0459%" height="15" fill="rgb(245,119,33)" fg:x="200881" fg:w="333"/><text x="27.9421%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (275 samples, 0.04%)</title><rect x="27.7001%" y="277" width="0.0379%" height="15" fill="rgb(231,125,12)" fg:x="200939" fg:w="275"/><text x="27.9501%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (261 samples, 0.04%)</title><rect x="27.7020%" y="261" width="0.0360%" height="15" fill="rgb(216,96,41)" fg:x="200953" fg:w="261"/><text x="27.9520%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (910 samples, 0.13%)</title><rect x="27.6128%" y="325" width="0.1254%" height="15" fill="rgb(248,43,45)" fg:x="200306" fg:w="910"/><text x="27.8628%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (806 samples, 0.11%)</title><rect x="27.6271%" y="309" width="0.1111%" height="15" fill="rgb(217,222,7)" fg:x="200410" fg:w="806"/><text x="27.8771%" y="319.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (96 samples, 0.01%)</title><rect x="27.8567%" y="293" width="0.0132%" height="15" fill="rgb(233,28,6)" fg:x="202075" fg:w="96"/><text x="28.1067%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,760 samples, 0.24%)</title><rect x="27.7411%" y="325" width="0.2426%" height="15" fill="rgb(231,218,15)" fg:x="201237" fg:w="1760"/><text x="27.9911%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,637 samples, 0.23%)</title><rect x="27.7581%" y="309" width="0.2257%" height="15" fill="rgb(226,171,48)" fg:x="201360" fg:w="1637"/><text x="28.0081%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (826 samples, 0.11%)</title><rect x="27.8699%" y="293" width="0.1139%" height="15" fill="rgb(235,201,9)" fg:x="202171" fg:w="826"/><text x="28.1199%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,015 samples, 0.69%)</title><rect x="27.2978%" y="341" width="0.6913%" height="15" fill="rgb(217,80,15)" fg:x="198021" fg:w="5015"/><text x="27.5478%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,523 samples, 0.76%)</title><rect x="27.2483%" y="373" width="0.7614%" height="15" fill="rgb(219,152,8)" fg:x="197662" fg:w="5523"/><text x="27.4983%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,517 samples, 0.76%)</title><rect x="27.2491%" y="357" width="0.7605%" height="15" fill="rgb(243,107,38)" fg:x="197668" fg:w="5517"/><text x="27.4991%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (149 samples, 0.02%)</title><rect x="27.9891%" y="341" width="0.0205%" height="15" fill="rgb(231,17,5)" fg:x="203036" fg:w="149"/><text x="28.2391%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (149 samples, 0.02%)</title><rect x="27.9891%" y="325" width="0.0205%" height="15" fill="rgb(209,25,54)" fg:x="203036" fg:w="149"/><text x="28.2391%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (94 samples, 0.01%)</title><rect x="27.9967%" y="309" width="0.0130%" height="15" fill="rgb(219,0,2)" fg:x="203091" fg:w="94"/><text x="28.2467%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (527 samples, 0.07%)</title><rect x="28.3658%" y="181" width="0.0726%" height="15" fill="rgb(246,9,5)" fg:x="205768" fg:w="527"/><text x="28.6158%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,342 samples, 0.18%)</title><rect x="28.2621%" y="229" width="0.1850%" height="15" fill="rgb(226,159,4)" fg:x="205016" fg:w="1342"/><text x="28.5121%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,132 samples, 0.16%)</title><rect x="28.2910%" y="213" width="0.1560%" height="15" fill="rgb(219,175,34)" fg:x="205226" fg:w="1132"/><text x="28.5410%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,096 samples, 0.15%)</title><rect x="28.2960%" y="197" width="0.1511%" height="15" fill="rgb(236,10,46)" fg:x="205262" fg:w="1096"/><text x="28.5460%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (360 samples, 0.05%)</title><rect x="28.4545%" y="181" width="0.0496%" height="15" fill="rgb(240,211,16)" fg:x="206412" fg:w="360"/><text x="28.7045%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (271 samples, 0.04%)</title><rect x="28.4668%" y="165" width="0.0374%" height="15" fill="rgb(205,3,43)" fg:x="206501" fg:w="271"/><text x="28.7168%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (257 samples, 0.04%)</title><rect x="28.4687%" y="149" width="0.0354%" height="15" fill="rgb(245,7,22)" fg:x="206515" fg:w="257"/><text x="28.7187%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,599 samples, 0.36%)</title><rect x="28.1624%" y="261" width="0.3583%" height="15" fill="rgb(239,132,32)" fg:x="204293" fg:w="2599"/><text x="28.4124%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,599 samples, 0.36%)</title><rect x="28.1624%" y="245" width="0.3583%" height="15" fill="rgb(228,202,34)" fg:x="204293" fg:w="2599"/><text x="28.4124%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (534 samples, 0.07%)</title><rect x="28.4471%" y="229" width="0.0736%" height="15" fill="rgb(254,200,22)" fg:x="206358" fg:w="534"/><text x="28.6971%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (534 samples, 0.07%)</title><rect x="28.4471%" y="213" width="0.0736%" height="15" fill="rgb(219,10,39)" fg:x="206358" fg:w="534"/><text x="28.6971%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (480 samples, 0.07%)</title><rect x="28.4545%" y="197" width="0.0662%" height="15" fill="rgb(226,210,39)" fg:x="206412" fg:w="480"/><text x="28.7045%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (120 samples, 0.02%)</title><rect x="28.5042%" y="181" width="0.0165%" height="15" fill="rgb(208,219,16)" fg:x="206772" fg:w="120"/><text x="28.7542%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (120 samples, 0.02%)</title><rect x="28.5042%" y="165" width="0.0165%" height="15" fill="rgb(216,158,51)" fg:x="206772" fg:w="120"/><text x="28.7542%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,164 samples, 0.44%)</title><rect x="28.1187%" y="277" width="0.4362%" height="15" fill="rgb(233,14,44)" fg:x="203976" fg:w="3164"/><text x="28.3687%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (247 samples, 0.03%)</title><rect x="28.5208%" y="261" width="0.0340%" height="15" fill="rgb(237,97,39)" fg:x="206893" fg:w="247"/><text x="28.7708%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (247 samples, 0.03%)</title><rect x="28.5208%" y="245" width="0.0340%" height="15" fill="rgb(218,198,43)" fg:x="206893" fg:w="247"/><text x="28.7708%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (247 samples, 0.03%)</title><rect x="28.5208%" y="229" width="0.0340%" height="15" fill="rgb(231,104,20)" fg:x="206893" fg:w="247"/><text x="28.7708%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts (73 samples, 0.01%)</title><rect x="28.5448%" y="213" width="0.0101%" height="15" fill="rgb(254,36,13)" fg:x="207067" fg:w="73"/><text x="28.7948%" y="223.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (73 samples, 0.01%)</title><rect x="28.5448%" y="197" width="0.0101%" height="15" fill="rgb(248,14,50)" fg:x="207067" fg:w="73"/><text x="28.7948%" y="207.50"></text></g><g><title>core::char::methods::len_utf8 (113 samples, 0.02%)</title><rect x="28.6506%" y="245" width="0.0156%" height="15" fill="rgb(217,107,29)" fg:x="207834" fg:w="113"/><text x="28.9006%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (233 samples, 0.03%)</title><rect x="28.7413%" y="165" width="0.0321%" height="15" fill="rgb(251,169,33)" fg:x="208492" fg:w="233"/><text x="28.9913%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (301 samples, 0.04%)</title><rect x="28.7331%" y="197" width="0.0415%" height="15" fill="rgb(217,108,32)" fg:x="208433" fg:w="301"/><text x="28.9831%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (242 samples, 0.03%)</title><rect x="28.7413%" y="181" width="0.0334%" height="15" fill="rgb(219,66,42)" fg:x="208492" fg:w="242"/><text x="28.9913%" y="191.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,300 samples, 0.73%)</title><rect x="28.0444%" y="341" width="0.7306%" height="15" fill="rgb(206,180,7)" fg:x="203437" fg:w="5300"/><text x="28.2944%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,185 samples, 0.71%)</title><rect x="28.0603%" y="325" width="0.7148%" height="15" fill="rgb(208,226,31)" fg:x="203552" fg:w="5185"/><text x="28.3103%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,866 samples, 0.67%)</title><rect x="28.1042%" y="309" width="0.6708%" height="15" fill="rgb(218,26,49)" fg:x="203871" fg:w="4866"/><text x="28.3542%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,864 samples, 0.67%)</title><rect x="28.1045%" y="293" width="0.6705%" height="15" fill="rgb(233,197,48)" fg:x="203873" fg:w="4864"/><text x="28.3545%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,597 samples, 0.22%)</title><rect x="28.5549%" y="277" width="0.2202%" height="15" fill="rgb(252,181,51)" fg:x="207140" fg:w="1597"/><text x="28.8049%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,495 samples, 0.21%)</title><rect x="28.5689%" y="261" width="0.2061%" height="15" fill="rgb(253,90,19)" fg:x="207242" fg:w="1495"/><text x="28.8189%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (790 samples, 0.11%)</title><rect x="28.6661%" y="245" width="0.1089%" height="15" fill="rgb(215,171,30)" fg:x="207947" fg:w="790"/><text x="28.9161%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (775 samples, 0.11%)</title><rect x="28.6682%" y="229" width="0.1068%" height="15" fill="rgb(214,222,9)" fg:x="207962" fg:w="775"/><text x="28.9182%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (690 samples, 0.10%)</title><rect x="28.6799%" y="213" width="0.0951%" height="15" fill="rgb(223,3,22)" fg:x="208047" fg:w="690"/><text x="28.9299%" y="223.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11,172 samples, 1.54%)</title><rect x="27.2352%" y="405" width="1.5401%" height="15" fill="rgb(225,196,46)" fg:x="197567" fg:w="11172"/><text x="27.4852%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,167 samples, 1.54%)</title><rect x="27.2359%" y="389" width="1.5394%" height="15" fill="rgb(209,110,37)" fg:x="197572" fg:w="11167"/><text x="27.4859%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,553 samples, 0.77%)</title><rect x="28.0098%" y="373" width="0.7655%" height="15" fill="rgb(249,89,12)" fg:x="203186" fg:w="5553"/><text x="28.2598%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,349 samples, 0.74%)</title><rect x="28.0379%" y="357" width="0.7374%" height="15" fill="rgb(226,27,33)" fg:x="203390" fg:w="5349"/><text x="28.2879%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (341 samples, 0.05%)</title><rect x="28.7764%" y="405" width="0.0470%" height="15" fill="rgb(213,82,22)" fg:x="208747" fg:w="341"/><text x="29.0264%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (218 samples, 0.03%)</title><rect x="28.8234%" y="405" width="0.0301%" height="15" fill="rgb(248,140,0)" fg:x="209088" fg:w="218"/><text x="29.0734%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (160 samples, 0.02%)</title><rect x="28.8912%" y="341" width="0.0221%" height="15" fill="rgb(228,106,3)" fg:x="209580" fg:w="160"/><text x="29.1412%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (253 samples, 0.03%)</title><rect x="28.9134%" y="341" width="0.0349%" height="15" fill="rgb(209,23,37)" fg:x="209741" fg:w="253"/><text x="29.1634%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (484 samples, 0.07%)</title><rect x="28.8852%" y="357" width="0.0667%" height="15" fill="rgb(241,93,50)" fg:x="209536" fg:w="484"/><text x="29.1352%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (117 samples, 0.02%)</title><rect x="28.9640%" y="341" width="0.0161%" height="15" fill="rgb(253,46,43)" fg:x="210108" fg:w="117"/><text x="29.2140%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (318 samples, 0.04%)</title><rect x="29.0021%" y="309" width="0.0438%" height="15" fill="rgb(226,206,43)" fg:x="210384" fg:w="318"/><text x="29.2521%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (373 samples, 0.05%)</title><rect x="28.9949%" y="325" width="0.0514%" height="15" fill="rgb(217,54,7)" fg:x="210332" fg:w="373"/><text x="29.2449%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (691 samples, 0.10%)</title><rect x="28.9519%" y="357" width="0.0953%" height="15" fill="rgb(223,5,52)" fg:x="210020" fg:w="691"/><text x="29.2019%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (486 samples, 0.07%)</title><rect x="28.9802%" y="341" width="0.0670%" height="15" fill="rgb(206,52,46)" fg:x="210225" fg:w="486"/><text x="29.2302%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,406 samples, 0.19%)</title><rect x="28.8535%" y="405" width="0.1938%" height="15" fill="rgb(253,136,11)" fg:x="209306" fg:w="1406"/><text x="29.1035%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,375 samples, 0.19%)</title><rect x="28.8577%" y="389" width="0.1895%" height="15" fill="rgb(208,106,33)" fg:x="209337" fg:w="1375"/><text x="29.1077%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,328 samples, 0.18%)</title><rect x="28.8642%" y="373" width="0.1831%" height="15" fill="rgb(206,54,4)" fg:x="209384" fg:w="1328"/><text x="29.1142%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (114 samples, 0.02%)</title><rect x="29.2167%" y="293" width="0.0157%" height="15" fill="rgb(213,3,15)" fg:x="211941" fg:w="114"/><text x="29.4667%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (82 samples, 0.01%)</title><rect x="29.2211%" y="277" width="0.0113%" height="15" fill="rgb(252,211,39)" fg:x="211973" fg:w="82"/><text x="29.4711%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (82 samples, 0.01%)</title><rect x="29.2211%" y="261" width="0.0113%" height="15" fill="rgb(223,6,36)" fg:x="211973" fg:w="82"/><text x="29.4711%" y="271.50"></text></g><g><title>core::char::methods::encode_utf8_raw (724 samples, 0.10%)</title><rect x="29.1328%" y="357" width="0.0998%" height="15" fill="rgb(252,169,45)" fg:x="211332" fg:w="724"/><text x="29.3828%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (328 samples, 0.05%)</title><rect x="29.1874%" y="341" width="0.0452%" height="15" fill="rgb(212,48,26)" fg:x="211728" fg:w="328"/><text x="29.4374%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (320 samples, 0.04%)</title><rect x="29.1885%" y="325" width="0.0441%" height="15" fill="rgb(251,102,48)" fg:x="211736" fg:w="320"/><text x="29.4385%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (294 samples, 0.04%)</title><rect x="29.1920%" y="309" width="0.0405%" height="15" fill="rgb(243,208,16)" fg:x="211762" fg:w="294"/><text x="29.4420%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (771 samples, 0.11%)</title><rect x="29.1266%" y="373" width="0.1063%" height="15" fill="rgb(219,96,24)" fg:x="211287" fg:w="771"/><text x="29.3766%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,031 samples, 0.14%)</title><rect x="29.0943%" y="389" width="0.1421%" height="15" fill="rgb(219,33,29)" fg:x="211053" fg:w="1031"/><text x="29.3443%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (140 samples, 0.02%)</title><rect x="29.3830%" y="373" width="0.0193%" height="15" fill="rgb(223,176,5)" fg:x="213147" fg:w="140"/><text x="29.6330%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (139 samples, 0.02%)</title><rect x="29.4307%" y="325" width="0.0192%" height="15" fill="rgb(228,140,14)" fg:x="213493" fg:w="139"/><text x="29.6807%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (104 samples, 0.01%)</title><rect x="29.4355%" y="309" width="0.0143%" height="15" fill="rgb(217,179,31)" fg:x="213528" fg:w="104"/><text x="29.6855%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (104 samples, 0.01%)</title><rect x="29.4355%" y="293" width="0.0143%" height="15" fill="rgb(230,9,30)" fg:x="213528" fg:w="104"/><text x="29.6855%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (339 samples, 0.05%)</title><rect x="29.4039%" y="373" width="0.0467%" height="15" fill="rgb(230,136,20)" fg:x="213299" fg:w="339"/><text x="29.6539%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (338 samples, 0.05%)</title><rect x="29.4041%" y="357" width="0.0466%" height="15" fill="rgb(215,210,22)" fg:x="213300" fg:w="338"/><text x="29.6541%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (307 samples, 0.04%)</title><rect x="29.4083%" y="341" width="0.0423%" height="15" fill="rgb(218,43,5)" fg:x="213331" fg:w="307"/><text x="29.6583%" y="351.50"></text></g><g><title>__memcmp_evex_movbe (187 samples, 0.03%)</title><rect x="29.5007%" y="325" width="0.0258%" height="15" fill="rgb(216,11,5)" fg:x="214001" fg:w="187"/><text x="29.7507%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (595 samples, 0.08%)</title><rect x="29.4507%" y="373" width="0.0820%" height="15" fill="rgb(209,82,29)" fg:x="213638" fg:w="595"/><text x="29.7007%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (527 samples, 0.07%)</title><rect x="29.4600%" y="357" width="0.0726%" height="15" fill="rgb(244,115,12)" fg:x="213706" fg:w="527"/><text x="29.7100%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (527 samples, 0.07%)</title><rect x="29.4600%" y="341" width="0.0726%" height="15" fill="rgb(222,82,18)" fg:x="213706" fg:w="527"/><text x="29.7100%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (321 samples, 0.04%)</title><rect x="29.6046%" y="341" width="0.0443%" height="15" fill="rgb(249,227,8)" fg:x="214755" fg:w="321"/><text x="29.8546%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (259 samples, 0.04%)</title><rect x="29.6132%" y="325" width="0.0357%" height="15" fill="rgb(253,141,45)" fg:x="214817" fg:w="259"/><text x="29.8632%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (250 samples, 0.03%)</title><rect x="29.6144%" y="309" width="0.0345%" height="15" fill="rgb(234,184,4)" fg:x="214826" fg:w="250"/><text x="29.8644%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (844 samples, 0.12%)</title><rect x="29.5327%" y="373" width="0.1163%" height="15" fill="rgb(218,194,23)" fg:x="214233" fg:w="844"/><text x="29.7827%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (770 samples, 0.11%)</title><rect x="29.5429%" y="357" width="0.1061%" height="15" fill="rgb(235,66,41)" fg:x="214307" fg:w="770"/><text x="29.7929%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_aligned (144 samples, 0.02%)</title><rect x="29.6625%" y="357" width="0.0199%" height="15" fill="rgb(245,217,1)" fg:x="215175" fg:w="144"/><text x="29.9125%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (97 samples, 0.01%)</title><rect x="29.6690%" y="341" width="0.0134%" height="15" fill="rgb(229,91,1)" fg:x="215222" fg:w="97"/><text x="29.9190%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,067 samples, 0.28%)</title><rect x="29.6527%" y="373" width="0.2849%" height="15" fill="rgb(207,101,30)" fg:x="215104" fg:w="2067"/><text x="29.9027%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,852 samples, 0.26%)</title><rect x="29.6824%" y="357" width="0.2553%" height="15" fill="rgb(223,82,49)" fg:x="215319" fg:w="1852"/><text x="29.9324%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,060 samples, 0.70%)</title><rect x="29.2455%" y="389" width="0.6975%" height="15" fill="rgb(218,167,17)" fg:x="212150" fg:w="5060"/><text x="29.4955%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (236 samples, 0.03%)</title><rect x="29.9432%" y="373" width="0.0325%" height="15" fill="rgb(208,103,14)" fg:x="217211" fg:w="236"/><text x="30.1932%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (168 samples, 0.02%)</title><rect x="29.9526%" y="357" width="0.0232%" height="15" fill="rgb(238,20,8)" fg:x="217279" fg:w="168"/><text x="30.2026%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (106 samples, 0.01%)</title><rect x="29.9611%" y="341" width="0.0146%" height="15" fill="rgb(218,80,54)" fg:x="217341" fg:w="106"/><text x="30.2111%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (100 samples, 0.01%)</title><rect x="29.9620%" y="325" width="0.0138%" height="15" fill="rgb(240,144,17)" fg:x="217347" fg:w="100"/><text x="30.2120%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,893 samples, 0.95%)</title><rect x="29.0473%" y="405" width="0.9502%" height="15" fill="rgb(245,27,50)" fg:x="210712" fg:w="6893"/><text x="29.2973%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (394 samples, 0.05%)</title><rect x="29.9432%" y="389" width="0.0543%" height="15" fill="rgb(251,51,7)" fg:x="217211" fg:w="394"/><text x="30.1932%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (158 samples, 0.02%)</title><rect x="29.9757%" y="373" width="0.0218%" height="15" fill="rgb(245,217,29)" fg:x="217447" fg:w="158"/><text x="30.2257%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (158 samples, 0.02%)</title><rect x="29.9757%" y="357" width="0.0218%" height="15" fill="rgb(221,176,29)" fg:x="217447" fg:w="158"/><text x="30.2257%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (81 samples, 0.01%)</title><rect x="29.9864%" y="341" width="0.0112%" height="15" fill="rgb(212,180,24)" fg:x="217524" fg:w="81"/><text x="30.2364%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (81 samples, 0.01%)</title><rect x="29.9864%" y="325" width="0.0112%" height="15" fill="rgb(254,24,2)" fg:x="217524" fg:w="81"/><text x="30.2364%" y="335.50"></text></g><g><title>one_brc::round_towards_positive (666 samples, 0.09%)</title><rect x="29.9975%" y="405" width="0.0918%" height="15" fill="rgb(230,100,2)" fg:x="217605" fg:w="666"/><text x="30.2475%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (186 samples, 0.03%)</title><rect x="30.0637%" y="389" width="0.0256%" height="15" fill="rgb(219,142,25)" fg:x="218085" fg:w="186"/><text x="30.3137%" y="399.50"></text></g><g><title>__round (158 samples, 0.02%)</title><rect x="30.0675%" y="373" width="0.0218%" height="15" fill="rgb(240,73,43)" fg:x="218113" fg:w="158"/><text x="30.3175%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (80 samples, 0.01%)</title><rect x="30.1997%" y="357" width="0.0110%" height="15" fill="rgb(214,114,15)" fg:x="219072" fg:w="80"/><text x="30.4497%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (607 samples, 0.08%)</title><rect x="30.1498%" y="389" width="0.0837%" height="15" fill="rgb(207,130,4)" fg:x="218710" fg:w="607"/><text x="30.3998%" y="399.50"></text></g><g><title>one_brc::Measurement::record (506 samples, 0.07%)</title><rect x="30.1638%" y="373" width="0.0698%" height="15" fill="rgb(221,25,40)" fg:x="218811" fg:w="506"/><text x="30.4138%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (165 samples, 0.02%)</title><rect x="30.2108%" y="357" width="0.0227%" height="15" fill="rgb(241,184,7)" fg:x="219152" fg:w="165"/><text x="30.4608%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (96 samples, 0.01%)</title><rect x="30.2491%" y="325" width="0.0132%" height="15" fill="rgb(235,159,4)" fg:x="219430" fg:w="96"/><text x="30.4991%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (180 samples, 0.02%)</title><rect x="30.2407%" y="341" width="0.0248%" height="15" fill="rgb(214,87,48)" fg:x="219369" fg:w="180"/><text x="30.4907%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (194 samples, 0.03%)</title><rect x="30.2393%" y="357" width="0.0267%" height="15" fill="rgb(246,198,24)" fg:x="219359" fg:w="194"/><text x="30.4893%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,288 samples, 0.18%)</title><rect x="30.0893%" y="405" width="0.1776%" height="15" fill="rgb(209,66,40)" fg:x="218271" fg:w="1288"/><text x="30.3393%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (242 samples, 0.03%)</title><rect x="30.2335%" y="389" width="0.0334%" height="15" fill="rgb(233,147,39)" fg:x="219317" fg:w="242"/><text x="30.4835%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (239 samples, 0.03%)</title><rect x="30.2339%" y="373" width="0.0329%" height="15" fill="rgb(231,145,52)" fg:x="219320" fg:w="239"/><text x="30.4839%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (93 samples, 0.01%)</title><rect x="30.3122%" y="325" width="0.0128%" height="15" fill="rgb(206,20,26)" fg:x="219888" fg:w="93"/><text x="30.5622%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (152 samples, 0.02%)</title><rect x="30.3077%" y="341" width="0.0210%" height="15" fill="rgb(238,220,4)" fg:x="219855" fg:w="152"/><text x="30.5577%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (489 samples, 0.07%)</title><rect x="30.2669%" y="405" width="0.0674%" height="15" fill="rgb(252,195,42)" fg:x="219559" fg:w="489"/><text x="30.5169%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (291 samples, 0.04%)</title><rect x="30.2942%" y="389" width="0.0401%" height="15" fill="rgb(209,10,6)" fg:x="219757" fg:w="291"/><text x="30.5442%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (204 samples, 0.03%)</title><rect x="30.3062%" y="373" width="0.0281%" height="15" fill="rgb(229,3,52)" fg:x="219844" fg:w="204"/><text x="30.5562%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (202 samples, 0.03%)</title><rect x="30.3064%" y="357" width="0.0278%" height="15" fill="rgb(253,49,37)" fg:x="219846" fg:w="202"/><text x="30.5564%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (269 samples, 0.04%)</title><rect x="30.5575%" y="277" width="0.0371%" height="15" fill="rgb(240,103,49)" fg:x="221667" fg:w="269"/><text x="30.8075%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (900 samples, 0.12%)</title><rect x="30.4716%" y="293" width="0.1241%" height="15" fill="rgb(250,182,30)" fg:x="221044" fg:w="900"/><text x="30.7216%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (802 samples, 0.11%)</title><rect x="30.8239%" y="277" width="0.1106%" height="15" fill="rgb(248,8,30)" fg:x="223600" fg:w="802"/><text x="31.0739%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,492 samples, 0.34%)</title><rect x="30.5957%" y="293" width="0.3435%" height="15" fill="rgb(237,120,30)" fg:x="221944" fg:w="2492"/><text x="30.8457%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,727 samples, 0.51%)</title><rect x="30.4257%" y="309" width="0.5138%" height="15" fill="rgb(221,146,34)" fg:x="220711" fg:w="3727"/><text x="30.6757%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,731 samples, 0.51%)</title><rect x="30.4257%" y="325" width="0.5143%" height="15" fill="rgb(242,55,13)" fg:x="220711" fg:w="3731"/><text x="30.6757%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,753 samples, 0.52%)</title><rect x="30.4228%" y="341" width="0.5174%" height="15" fill="rgb(242,112,31)" fg:x="220690" fg:w="3753"/><text x="30.6728%" y="351.50"></text></g><g><title>__memcpy_evex_unaligned_erms (416 samples, 0.06%)</title><rect x="30.9491%" y="325" width="0.0573%" height="15" fill="rgb(249,192,27)" fg:x="224508" fg:w="416"/><text x="31.1991%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (398 samples, 0.05%)</title><rect x="31.0073%" y="309" width="0.0549%" height="15" fill="rgb(208,204,44)" fg:x="224930" fg:w="398"/><text x="31.2573%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (492 samples, 0.07%)</title><rect x="31.0863%" y="293" width="0.0678%" height="15" fill="rgb(208,93,54)" fg:x="225503" fg:w="492"/><text x="31.3363%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (141 samples, 0.02%)</title><rect x="31.1541%" y="293" width="0.0194%" height="15" fill="rgb(242,1,31)" fg:x="225995" fg:w="141"/><text x="31.4041%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (835 samples, 0.12%)</title><rect x="31.0622%" y="309" width="0.1151%" height="15" fill="rgb(241,83,25)" fg:x="225328" fg:w="835"/><text x="31.3122%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,289 samples, 0.18%)</title><rect x="31.0065%" y="325" width="0.1777%" height="15" fill="rgb(205,169,50)" fg:x="224924" fg:w="1289"/><text x="31.2565%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,816 samples, 0.25%)</title><rect x="30.9402%" y="341" width="0.2503%" height="15" fill="rgb(239,186,37)" fg:x="224443" fg:w="1816"/><text x="31.1902%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (398 samples, 0.05%)</title><rect x="31.2780%" y="229" width="0.0549%" height="15" fill="rgb(205,221,10)" fg:x="226894" fg:w="398"/><text x="31.5280%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (129 samples, 0.02%)</title><rect x="31.3151%" y="213" width="0.0178%" height="15" fill="rgb(218,196,15)" fg:x="227163" fg:w="129"/><text x="31.5651%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (123 samples, 0.02%)</title><rect x="31.3976%" y="213" width="0.0170%" height="15" fill="rgb(218,196,35)" fg:x="227761" fg:w="123"/><text x="31.6476%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (652 samples, 0.09%)</title><rect x="31.3330%" y="229" width="0.0899%" height="15" fill="rgb(233,63,24)" fg:x="227293" fg:w="652"/><text x="31.5830%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,545 samples, 0.21%)</title><rect x="31.2189%" y="245" width="0.2130%" height="15" fill="rgb(225,8,4)" fg:x="226465" fg:w="1545"/><text x="31.4689%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (146 samples, 0.02%)</title><rect x="31.5014%" y="213" width="0.0201%" height="15" fill="rgb(234,105,35)" fg:x="228514" fg:w="146"/><text x="31.7514%" y="223.50"></text></g><g><title>core::cmp::min (483 samples, 0.07%)</title><rect x="31.5224%" y="213" width="0.0666%" height="15" fill="rgb(236,21,32)" fg:x="228667" fg:w="483"/><text x="31.7724%" y="223.50"></text></g><g><title>core::cmp::Ord::min (483 samples, 0.07%)</title><rect x="31.5224%" y="197" width="0.0666%" height="15" fill="rgb(228,109,6)" fg:x="228667" fg:w="483"/><text x="31.7724%" y="207.50"></text></g><g><title>core::cmp::min_by (458 samples, 0.06%)</title><rect x="31.5259%" y="181" width="0.0631%" height="15" fill="rgb(229,215,31)" fg:x="228692" fg:w="458"/><text x="31.7759%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (146 samples, 0.02%)</title><rect x="31.5689%" y="165" width="0.0201%" height="15" fill="rgb(221,52,54)" fg:x="229004" fg:w="146"/><text x="31.8189%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (111 samples, 0.02%)</title><rect x="31.5737%" y="149" width="0.0153%" height="15" fill="rgb(252,129,43)" fg:x="229039" fg:w="111"/><text x="31.8237%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (468 samples, 0.06%)</title><rect x="31.5890%" y="213" width="0.0645%" height="15" fill="rgb(248,183,27)" fg:x="229150" fg:w="468"/><text x="31.8390%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (9,168 samples, 1.26%)</title><rect x="30.3949%" y="373" width="1.2638%" height="15" fill="rgb(250,0,22)" fg:x="220488" fg:w="9168"/><text x="30.6449%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,115 samples, 1.26%)</title><rect x="30.4023%" y="357" width="1.2565%" height="15" fill="rgb(213,166,10)" fg:x="220541" fg:w="9115"/><text x="30.6523%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,397 samples, 0.47%)</title><rect x="31.1905%" y="341" width="0.4683%" height="15" fill="rgb(207,163,36)" fg:x="226259" fg:w="3397"/><text x="31.4405%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,375 samples, 0.47%)</title><rect x="31.1935%" y="325" width="0.4653%" height="15" fill="rgb(208,122,22)" fg:x="226281" fg:w="3375"/><text x="31.4435%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,302 samples, 0.46%)</title><rect x="31.2036%" y="309" width="0.4552%" height="15" fill="rgb(207,104,49)" fg:x="226354" fg:w="3302"/><text x="31.4536%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,227 samples, 0.44%)</title><rect x="31.2139%" y="293" width="0.4449%" height="15" fill="rgb(248,211,50)" fg:x="226429" fg:w="3227"/><text x="31.4639%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,191 samples, 0.44%)</title><rect x="31.2189%" y="277" width="0.4399%" height="15" fill="rgb(217,13,45)" fg:x="226465" fg:w="3191"/><text x="31.4689%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,191 samples, 0.44%)</title><rect x="31.2189%" y="261" width="0.4399%" height="15" fill="rgb(211,216,49)" fg:x="226465" fg:w="3191"/><text x="31.4689%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,646 samples, 0.23%)</title><rect x="31.4319%" y="245" width="0.2269%" height="15" fill="rgb(221,58,53)" fg:x="228010" fg:w="1646"/><text x="31.6819%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,595 samples, 0.22%)</title><rect x="31.4389%" y="229" width="0.2199%" height="15" fill="rgb(220,112,41)" fg:x="228061" fg:w="1595"/><text x="31.6889%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (135 samples, 0.02%)</title><rect x="31.7098%" y="325" width="0.0186%" height="15" fill="rgb(236,38,28)" fg:x="230026" fg:w="135"/><text x="31.9598%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (267 samples, 0.04%)</title><rect x="31.6919%" y="341" width="0.0368%" height="15" fill="rgb(227,195,22)" fg:x="229896" fg:w="267"/><text x="31.9419%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (416 samples, 0.06%)</title><rect x="31.6789%" y="357" width="0.0573%" height="15" fill="rgb(214,55,33)" fg:x="229802" fg:w="416"/><text x="31.9289%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (115 samples, 0.02%)</title><rect x="31.8128%" y="341" width="0.0159%" height="15" fill="rgb(248,80,13)" fg:x="230773" fg:w="115"/><text x="32.0628%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (160 samples, 0.02%)</title><rect x="31.9039%" y="309" width="0.0221%" height="15" fill="rgb(238,52,6)" fg:x="231434" fg:w="160"/><text x="32.1539%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (569 samples, 0.08%)</title><rect x="31.8693%" y="325" width="0.0784%" height="15" fill="rgb(224,198,47)" fg:x="231183" fg:w="569"/><text x="32.1193%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (158 samples, 0.02%)</title><rect x="31.9259%" y="309" width="0.0218%" height="15" fill="rgb(233,171,20)" fg:x="231594" fg:w="158"/><text x="32.1759%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (137 samples, 0.02%)</title><rect x="31.9288%" y="293" width="0.0189%" height="15" fill="rgb(241,30,25)" fg:x="231615" fg:w="137"/><text x="32.1788%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (893 samples, 0.12%)</title><rect x="31.8286%" y="341" width="0.1231%" height="15" fill="rgb(207,171,38)" fg:x="230888" fg:w="893"/><text x="32.0786%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (103 samples, 0.01%)</title><rect x="31.9786%" y="293" width="0.0142%" height="15" fill="rgb(234,70,1)" fg:x="231976" fg:w="103"/><text x="32.2286%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (178 samples, 0.02%)</title><rect x="31.9687%" y="309" width="0.0245%" height="15" fill="rgb(232,178,18)" fg:x="231904" fg:w="178"/><text x="32.2187%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (193 samples, 0.03%)</title><rect x="31.9674%" y="325" width="0.0266%" height="15" fill="rgb(241,78,40)" fg:x="231895" fg:w="193"/><text x="32.2174%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (235 samples, 0.03%)</title><rect x="31.9989%" y="309" width="0.0324%" height="15" fill="rgb(222,35,25)" fg:x="232123" fg:w="235"/><text x="32.2489%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (113 samples, 0.02%)</title><rect x="32.0157%" y="293" width="0.0156%" height="15" fill="rgb(207,92,16)" fg:x="232245" fg:w="113"/><text x="32.2657%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (298 samples, 0.04%)</title><rect x="31.9940%" y="325" width="0.0411%" height="15" fill="rgb(216,59,51)" fg:x="232088" fg:w="298"/><text x="32.2440%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (238 samples, 0.03%)</title><rect x="32.1217%" y="229" width="0.0328%" height="15" fill="rgb(213,80,28)" fg:x="233014" fg:w="238"/><text x="32.3717%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (561 samples, 0.08%)</title><rect x="32.0827%" y="277" width="0.0773%" height="15" fill="rgb(220,93,7)" fg:x="232731" fg:w="561"/><text x="32.3327%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (494 samples, 0.07%)</title><rect x="32.0919%" y="261" width="0.0681%" height="15" fill="rgb(225,24,44)" fg:x="232798" fg:w="494"/><text x="32.3419%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (494 samples, 0.07%)</title><rect x="32.0919%" y="245" width="0.0681%" height="15" fill="rgb(243,74,40)" fg:x="232798" fg:w="494"/><text x="32.3419%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,565 samples, 0.22%)</title><rect x="31.9541%" y="341" width="0.2157%" height="15" fill="rgb(228,39,7)" fg:x="231798" fg:w="1565"/><text x="32.2041%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (976 samples, 0.13%)</title><rect x="32.0353%" y="325" width="0.1345%" height="15" fill="rgb(227,79,8)" fg:x="232387" fg:w="976"/><text x="32.2853%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (901 samples, 0.12%)</title><rect x="32.0456%" y="309" width="0.1242%" height="15" fill="rgb(236,58,11)" fg:x="232462" fg:w="901"/><text x="32.2956%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (660 samples, 0.09%)</title><rect x="32.0788%" y="293" width="0.0910%" height="15" fill="rgb(249,63,35)" fg:x="232703" fg:w="660"/><text x="32.3288%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (827 samples, 0.11%)</title><rect x="32.1839%" y="341" width="0.1140%" height="15" fill="rgb(252,114,16)" fg:x="233465" fg:w="827"/><text x="32.4339%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (727 samples, 0.10%)</title><rect x="32.1977%" y="325" width="0.1002%" height="15" fill="rgb(254,151,24)" fg:x="233565" fg:w="727"/><text x="32.4477%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (175 samples, 0.02%)</title><rect x="32.2737%" y="309" width="0.0241%" height="15" fill="rgb(253,54,39)" fg:x="234117" fg:w="175"/><text x="32.5237%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (492 samples, 0.07%)</title><rect x="32.3345%" y="325" width="0.0678%" height="15" fill="rgb(243,25,45)" fg:x="234558" fg:w="492"/><text x="32.5845%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (201 samples, 0.03%)</title><rect x="32.3747%" y="309" width="0.0277%" height="15" fill="rgb(234,134,9)" fg:x="234849" fg:w="201"/><text x="32.6247%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (128 samples, 0.02%)</title><rect x="32.4858%" y="309" width="0.0176%" height="15" fill="rgb(227,166,31)" fg:x="235655" fg:w="128"/><text x="32.7358%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (807 samples, 0.11%)</title><rect x="32.4024%" y="325" width="0.1112%" height="15" fill="rgb(245,143,41)" fg:x="235050" fg:w="807"/><text x="32.6524%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (74 samples, 0.01%)</title><rect x="32.5034%" y="309" width="0.0102%" height="15" fill="rgb(238,181,32)" fg:x="235783" fg:w="74"/><text x="32.7534%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,442 samples, 0.34%)</title><rect x="32.2979%" y="341" width="0.3366%" height="15" fill="rgb(224,113,18)" fg:x="234292" fg:w="2442"/><text x="32.5479%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (877 samples, 0.12%)</title><rect x="32.5136%" y="325" width="0.1209%" height="15" fill="rgb(240,229,28)" fg:x="235857" fg:w="877"/><text x="32.7636%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (724 samples, 0.10%)</title><rect x="32.5347%" y="309" width="0.0998%" height="15" fill="rgb(250,185,3)" fg:x="236010" fg:w="724"/><text x="32.7847%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (203 samples, 0.03%)</title><rect x="32.6065%" y="293" width="0.0280%" height="15" fill="rgb(212,59,25)" fg:x="236531" fg:w="203"/><text x="32.8565%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,682 samples, 2.30%)</title><rect x="30.3404%" y="389" width="2.2997%" height="15" fill="rgb(221,87,20)" fg:x="220092" fg:w="16682"/><text x="30.5904%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,118 samples, 0.98%)</title><rect x="31.6588%" y="373" width="0.9812%" height="15" fill="rgb(213,74,28)" fg:x="229656" fg:w="7118"/><text x="31.9088%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,528 samples, 0.90%)</title><rect x="31.7401%" y="357" width="0.8999%" height="15" fill="rgb(224,132,34)" fg:x="230246" fg:w="6528"/><text x="31.9901%" y="367.50"></text></g><g><title>__clone3 (40,198 samples, 5.54%)</title><rect x="27.1320%" y="629" width="5.5414%" height="15" fill="rgb(222,101,24)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="639.50">__clone3</text></g><g><title>start_thread (40,198 samples, 5.54%)</title><rect x="27.1320%" y="613" width="5.5414%" height="15" fill="rgb(254,142,4)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (40,198 samples, 5.54%)</title><rect x="27.1320%" y="597" width="5.5414%" height="15" fill="rgb(230,229,49)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (40,198 samples, 5.54%)</title><rect x="27.1320%" y="581" width="5.5414%" height="15" fill="rgb(238,70,47)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (40,198 samples, 5.54%)</title><rect x="27.1320%" y="565" width="5.5414%" height="15" fill="rgb(231,160,17)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (40,198 samples, 5.54%)</title><rect x="27.1320%" y="549" width="5.5414%" height="15" fill="rgb(218,68,53)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (40,198 samples, 5.54%)</title><rect x="27.1320%" y="533" width="5.5414%" height="15" fill="rgb(236,111,10)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="543.50">std::pa..</text></g><g><title>__rust_try (40,198 samples, 5.54%)</title><rect x="27.1320%" y="517" width="5.5414%" height="15" fill="rgb(224,34,41)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (40,198 samples, 5.54%)</title><rect x="27.1320%" y="501" width="5.5414%" height="15" fill="rgb(241,118,19)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40,198 samples, 5.54%)</title><rect x="27.1320%" y="485" width="5.5414%" height="15" fill="rgb(238,129,25)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (40,198 samples, 5.54%)</title><rect x="27.1320%" y="469" width="5.5414%" height="15" fill="rgb(238,22,31)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (40,198 samples, 5.54%)</title><rect x="27.1320%" y="453" width="5.5414%" height="15" fill="rgb(222,174,48)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (40,198 samples, 5.54%)</title><rect x="27.1320%" y="437" width="5.5414%" height="15" fill="rgb(206,152,40)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (40,198 samples, 5.54%)</title><rect x="27.1320%" y="421" width="5.5414%" height="15" fill="rgb(218,99,54)" fg:x="196818" fg:w="40198"/><text x="27.3820%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (16,968 samples, 2.34%)</title><rect x="30.3343%" y="405" width="2.3391%" height="15" fill="rgb(220,174,26)" fg:x="220048" fg:w="16968"/><text x="30.5843%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (208 samples, 0.03%)</title><rect x="32.6447%" y="389" width="0.0287%" height="15" fill="rgb(245,116,9)" fg:x="236808" fg:w="208"/><text x="32.8947%" y="399.50"></text></g><g><title>worker-13 (46,654 samples, 6.43%)</title><rect x="26.2529%" y="645" width="6.4314%" height="15" fill="rgb(209,72,35)" fg:x="190441" fg:w="46654"/><text x="26.5029%" y="655.50">worker-13</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (197 samples, 0.03%)</title><rect x="32.6923%" y="629" width="0.0272%" height="15" fill="rgb(226,126,21)" fg:x="237153" fg:w="197"/><text x="32.9423%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (77 samples, 0.01%)</title><rect x="32.7243%" y="613" width="0.0106%" height="15" fill="rgb(227,192,1)" fg:x="237385" fg:w="77"/><text x="32.9743%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (76 samples, 0.01%)</title><rect x="32.7244%" y="597" width="0.0105%" height="15" fill="rgb(237,180,29)" fg:x="237386" fg:w="76"/><text x="32.9744%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (115 samples, 0.02%)</title><rect x="32.7349%" y="613" width="0.0159%" height="15" fill="rgb(230,197,35)" fg:x="237462" fg:w="115"/><text x="32.9849%" y="623.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (74 samples, 0.01%)</title><rect x="32.7547%" y="613" width="0.0102%" height="15" fill="rgb(246,193,31)" fg:x="237606" fg:w="74"/><text x="33.0047%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.01%)</title><rect x="32.8105%" y="613" width="0.0124%" height="15" fill="rgb(241,36,4)" fg:x="238011" fg:w="90"/><text x="33.0605%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (175 samples, 0.02%)</title><rect x="32.8285%" y="613" width="0.0241%" height="15" fill="rgb(241,130,17)" fg:x="238141" fg:w="175"/><text x="33.0785%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (151 samples, 0.02%)</title><rect x="32.8700%" y="613" width="0.0208%" height="15" fill="rgb(206,137,32)" fg:x="238442" fg:w="151"/><text x="33.1200%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (86 samples, 0.01%)</title><rect x="32.8789%" y="597" width="0.0119%" height="15" fill="rgb(237,228,51)" fg:x="238507" fg:w="86"/><text x="33.1289%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (104 samples, 0.01%)</title><rect x="32.8908%" y="613" width="0.0143%" height="15" fill="rgb(243,6,42)" fg:x="238593" fg:w="104"/><text x="33.1408%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (90 samples, 0.01%)</title><rect x="32.9764%" y="613" width="0.0124%" height="15" fill="rgb(251,74,28)" fg:x="239214" fg:w="90"/><text x="33.2264%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (104 samples, 0.01%)</title><rect x="32.9888%" y="613" width="0.0143%" height="15" fill="rgb(218,20,49)" fg:x="239304" fg:w="104"/><text x="33.2388%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (106 samples, 0.01%)</title><rect x="33.0124%" y="613" width="0.0146%" height="15" fill="rgb(238,28,14)" fg:x="239475" fg:w="106"/><text x="33.2624%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (82 samples, 0.01%)</title><rect x="33.0270%" y="613" width="0.0113%" height="15" fill="rgb(229,40,46)" fg:x="239581" fg:w="82"/><text x="33.2770%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (75 samples, 0.01%)</title><rect x="33.0383%" y="613" width="0.0103%" height="15" fill="rgb(244,195,20)" fg:x="239663" fg:w="75"/><text x="33.2883%" y="623.50"></text></g><g><title>[anon] (2,653 samples, 0.37%)</title><rect x="32.7243%" y="629" width="0.3657%" height="15" fill="rgb(253,56,35)" fg:x="237385" fg:w="2653"/><text x="32.9743%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (168 samples, 0.02%)</title><rect x="33.0994%" y="613" width="0.0232%" height="15" fill="rgb(210,149,44)" fg:x="240106" fg:w="168"/><text x="33.3494%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (92 samples, 0.01%)</title><rect x="33.1283%" y="613" width="0.0127%" height="15" fill="rgb(240,135,12)" fg:x="240316" fg:w="92"/><text x="33.3783%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (118 samples, 0.02%)</title><rect x="33.1410%" y="613" width="0.0163%" height="15" fill="rgb(251,24,50)" fg:x="240408" fg:w="118"/><text x="33.3910%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (81 samples, 0.01%)</title><rect x="33.1688%" y="613" width="0.0112%" height="15" fill="rgb(243,200,47)" fg:x="240610" fg:w="81"/><text x="33.4188%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (187 samples, 0.03%)</title><rect x="33.1894%" y="613" width="0.0258%" height="15" fill="rgb(224,166,26)" fg:x="240759" fg:w="187"/><text x="33.4394%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (187 samples, 0.03%)</title><rect x="33.1894%" y="597" width="0.0258%" height="15" fill="rgb(233,0,47)" fg:x="240759" fg:w="187"/><text x="33.4394%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (187 samples, 0.03%)</title><rect x="33.1894%" y="581" width="0.0258%" height="15" fill="rgb(253,80,5)" fg:x="240759" fg:w="187"/><text x="33.4394%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (84 samples, 0.01%)</title><rect x="33.2036%" y="565" width="0.0116%" height="15" fill="rgb(214,133,25)" fg:x="240862" fg:w="84"/><text x="33.4536%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (93 samples, 0.01%)</title><rect x="33.2437%" y="613" width="0.0128%" height="15" fill="rgb(209,27,14)" fg:x="241153" fg:w="93"/><text x="33.4937%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (134 samples, 0.02%)</title><rect x="33.2583%" y="613" width="0.0185%" height="15" fill="rgb(219,102,51)" fg:x="241259" fg:w="134"/><text x="33.5083%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (155 samples, 0.02%)</title><rect x="33.2974%" y="613" width="0.0214%" height="15" fill="rgb(237,18,16)" fg:x="241543" fg:w="155"/><text x="33.5474%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (95 samples, 0.01%)</title><rect x="33.3279%" y="613" width="0.0131%" height="15" fill="rgb(241,85,17)" fg:x="241764" fg:w="95"/><text x="33.5779%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (102 samples, 0.01%)</title><rect x="33.3731%" y="613" width="0.0141%" height="15" fill="rgb(236,90,42)" fg:x="242092" fg:w="102"/><text x="33.6231%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (112 samples, 0.02%)</title><rect x="33.4032%" y="613" width="0.0154%" height="15" fill="rgb(249,57,21)" fg:x="242310" fg:w="112"/><text x="33.6532%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (200 samples, 0.03%)</title><rect x="33.4186%" y="613" width="0.0276%" height="15" fill="rgb(243,12,36)" fg:x="242422" fg:w="200"/><text x="33.6686%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (180 samples, 0.02%)</title><rect x="33.4214%" y="597" width="0.0248%" height="15" fill="rgb(253,128,47)" fg:x="242442" fg:w="180"/><text x="33.6714%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (106 samples, 0.01%)</title><rect x="33.4316%" y="581" width="0.0146%" height="15" fill="rgb(207,33,20)" fg:x="242516" fg:w="106"/><text x="33.6816%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (138 samples, 0.02%)</title><rect x="33.4462%" y="613" width="0.0190%" height="15" fill="rgb(233,215,35)" fg:x="242622" fg:w="138"/><text x="33.6962%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (77 samples, 0.01%)</title><rect x="33.4546%" y="597" width="0.0106%" height="15" fill="rgb(249,188,52)" fg:x="242683" fg:w="77"/><text x="33.7046%" y="607.50"></text></g><g><title>one_brc::process_lines (316 samples, 0.04%)</title><rect x="33.4769%" y="613" width="0.0436%" height="15" fill="rgb(225,12,32)" fg:x="242845" fg:w="316"/><text x="33.7269%" y="623.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (86 samples, 0.01%)</title><rect x="33.5380%" y="613" width="0.0119%" height="15" fill="rgb(247,98,14)" fg:x="243288" fg:w="86"/><text x="33.7880%" y="623.50"></text></g><g><title>[unknown] (3,423 samples, 0.47%)</title><rect x="33.0900%" y="629" width="0.4719%" height="15" fill="rgb(247,219,48)" fg:x="240038" fg:w="3423"/><text x="33.3400%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (131 samples, 0.02%)</title><rect x="33.8841%" y="325" width="0.0181%" height="15" fill="rgb(253,60,48)" fg:x="245799" fg:w="131"/><text x="34.1341%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (390 samples, 0.05%)</title><rect x="33.9025%" y="325" width="0.0538%" height="15" fill="rgb(245,15,52)" fg:x="245932" fg:w="390"/><text x="34.1525%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (387 samples, 0.05%)</title><rect x="33.9029%" y="309" width="0.0533%" height="15" fill="rgb(220,133,28)" fg:x="245935" fg:w="387"/><text x="34.1529%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (354 samples, 0.05%)</title><rect x="33.9074%" y="293" width="0.0488%" height="15" fill="rgb(217,180,4)" fg:x="245968" fg:w="354"/><text x="34.1574%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (170 samples, 0.02%)</title><rect x="33.9328%" y="277" width="0.0234%" height="15" fill="rgb(251,24,1)" fg:x="246152" fg:w="170"/><text x="34.1828%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (138 samples, 0.02%)</title><rect x="33.9372%" y="261" width="0.0190%" height="15" fill="rgb(212,185,49)" fg:x="246184" fg:w="138"/><text x="34.1872%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (133 samples, 0.02%)</title><rect x="33.9379%" y="245" width="0.0183%" height="15" fill="rgb(215,175,22)" fg:x="246189" fg:w="133"/><text x="34.1879%" y="255.50"></text></g><g><title>__memcmp_evex_movbe (259 samples, 0.04%)</title><rect x="34.0026%" y="277" width="0.0357%" height="15" fill="rgb(250,205,14)" fg:x="246658" fg:w="259"/><text x="34.2526%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (646 samples, 0.09%)</title><rect x="33.9562%" y="325" width="0.0891%" height="15" fill="rgb(225,211,22)" fg:x="246322" fg:w="646"/><text x="34.2062%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (572 samples, 0.08%)</title><rect x="33.9664%" y="309" width="0.0789%" height="15" fill="rgb(251,179,42)" fg:x="246396" fg:w="572"/><text x="34.2164%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (572 samples, 0.08%)</title><rect x="33.9664%" y="293" width="0.0789%" height="15" fill="rgb(208,216,51)" fg:x="246396" fg:w="572"/><text x="34.2164%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (354 samples, 0.05%)</title><rect x="34.1291%" y="293" width="0.0488%" height="15" fill="rgb(235,36,11)" fg:x="247576" fg:w="354"/><text x="34.3791%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (284 samples, 0.04%)</title><rect x="34.1388%" y="277" width="0.0392%" height="15" fill="rgb(213,189,28)" fg:x="247646" fg:w="284"/><text x="34.3888%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (279 samples, 0.04%)</title><rect x="34.1395%" y="261" width="0.0385%" height="15" fill="rgb(227,203,42)" fg:x="247651" fg:w="279"/><text x="34.3895%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (963 samples, 0.13%)</title><rect x="34.0453%" y="325" width="0.1328%" height="15" fill="rgb(244,72,36)" fg:x="246968" fg:w="963"/><text x="34.2953%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (857 samples, 0.12%)</title><rect x="34.0599%" y="309" width="0.1181%" height="15" fill="rgb(213,53,17)" fg:x="247074" fg:w="857"/><text x="34.3099%" y="319.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (89 samples, 0.01%)</title><rect x="34.2994%" y="293" width="0.0123%" height="15" fill="rgb(207,167,3)" fg:x="248811" fg:w="89"/><text x="34.5494%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,727 samples, 0.24%)</title><rect x="34.1825%" y="325" width="0.2381%" height="15" fill="rgb(216,98,30)" fg:x="247963" fg:w="1727"/><text x="34.4325%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,602 samples, 0.22%)</title><rect x="34.1997%" y="309" width="0.2208%" height="15" fill="rgb(236,123,15)" fg:x="248088" fg:w="1602"/><text x="34.4497%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (790 samples, 0.11%)</title><rect x="34.3116%" y="293" width="0.1089%" height="15" fill="rgb(248,81,50)" fg:x="248900" fg:w="790"/><text x="34.5616%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,096 samples, 0.70%)</title><rect x="33.7248%" y="341" width="0.7025%" height="15" fill="rgb(214,120,4)" fg:x="244643" fg:w="5096"/><text x="33.9748%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,601 samples, 0.77%)</title><rect x="33.6778%" y="373" width="0.7721%" height="15" fill="rgb(208,179,34)" fg:x="244302" fg:w="5601"/><text x="33.9278%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,598 samples, 0.77%)</title><rect x="33.6782%" y="357" width="0.7717%" height="15" fill="rgb(227,140,7)" fg:x="244305" fg:w="5598"/><text x="33.9282%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (164 samples, 0.02%)</title><rect x="34.4273%" y="341" width="0.0226%" height="15" fill="rgb(214,22,6)" fg:x="249739" fg:w="164"/><text x="34.6773%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (164 samples, 0.02%)</title><rect x="34.4273%" y="325" width="0.0226%" height="15" fill="rgb(207,137,27)" fg:x="249739" fg:w="164"/><text x="34.6773%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (105 samples, 0.01%)</title><rect x="34.4354%" y="309" width="0.0145%" height="15" fill="rgb(210,8,46)" fg:x="249798" fg:w="105"/><text x="34.6854%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (76 samples, 0.01%)</title><rect x="34.4394%" y="293" width="0.0105%" height="15" fill="rgb(240,16,54)" fg:x="249827" fg:w="76"/><text x="34.6894%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (524 samples, 0.07%)</title><rect x="34.8109%" y="181" width="0.0722%" height="15" fill="rgb(211,209,29)" fg:x="252522" fg:w="524"/><text x="35.0609%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,346 samples, 0.19%)</title><rect x="34.7088%" y="229" width="0.1856%" height="15" fill="rgb(226,228,24)" fg:x="251781" fg:w="1346"/><text x="34.9588%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,171 samples, 0.16%)</title><rect x="34.7329%" y="213" width="0.1614%" height="15" fill="rgb(222,84,9)" fg:x="251956" fg:w="1171"/><text x="34.9829%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,128 samples, 0.16%)</title><rect x="34.7388%" y="197" width="0.1555%" height="15" fill="rgb(234,203,30)" fg:x="251999" fg:w="1128"/><text x="34.9888%" y="207.50"></text></g><g><title>core::mem::size_of_val (81 samples, 0.01%)</title><rect x="34.8832%" y="181" width="0.0112%" height="15" fill="rgb(238,109,14)" fg:x="253046" fg:w="81"/><text x="35.1332%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (348 samples, 0.05%)</title><rect x="34.8996%" y="181" width="0.0480%" height="15" fill="rgb(233,206,34)" fg:x="253165" fg:w="348"/><text x="35.1496%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (254 samples, 0.04%)</title><rect x="34.9125%" y="165" width="0.0350%" height="15" fill="rgb(220,167,47)" fg:x="253259" fg:w="254"/><text x="35.1625%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (240 samples, 0.03%)</title><rect x="34.9145%" y="149" width="0.0331%" height="15" fill="rgb(238,105,10)" fg:x="253273" fg:w="240"/><text x="35.1645%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,568 samples, 0.35%)</title><rect x="34.6091%" y="261" width="0.3540%" height="15" fill="rgb(213,227,17)" fg:x="251058" fg:w="2568"/><text x="34.8591%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,568 samples, 0.35%)</title><rect x="34.6091%" y="245" width="0.3540%" height="15" fill="rgb(217,132,38)" fg:x="251058" fg:w="2568"/><text x="34.8591%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (499 samples, 0.07%)</title><rect x="34.8943%" y="229" width="0.0688%" height="15" fill="rgb(242,146,4)" fg:x="253127" fg:w="499"/><text x="35.1443%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (499 samples, 0.07%)</title><rect x="34.8943%" y="213" width="0.0688%" height="15" fill="rgb(212,61,9)" fg:x="253127" fg:w="499"/><text x="35.1443%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (461 samples, 0.06%)</title><rect x="34.8996%" y="197" width="0.0636%" height="15" fill="rgb(247,126,22)" fg:x="253165" fg:w="461"/><text x="35.1496%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (113 samples, 0.02%)</title><rect x="34.9475%" y="181" width="0.0156%" height="15" fill="rgb(220,196,2)" fg:x="253513" fg:w="113"/><text x="35.1975%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (113 samples, 0.02%)</title><rect x="34.9475%" y="165" width="0.0156%" height="15" fill="rgb(208,46,4)" fg:x="253513" fg:w="113"/><text x="35.1975%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,112 samples, 0.43%)</title><rect x="34.5651%" y="277" width="0.4290%" height="15" fill="rgb(252,104,46)" fg:x="250739" fg:w="3112"/><text x="34.8151%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (225 samples, 0.03%)</title><rect x="34.9631%" y="261" width="0.0310%" height="15" fill="rgb(237,152,48)" fg:x="253626" fg:w="225"/><text x="35.2131%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (225 samples, 0.03%)</title><rect x="34.9631%" y="245" width="0.0310%" height="15" fill="rgb(221,59,37)" fg:x="253626" fg:w="225"/><text x="35.2131%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (225 samples, 0.03%)</title><rect x="34.9631%" y="229" width="0.0310%" height="15" fill="rgb(209,202,51)" fg:x="253626" fg:w="225"/><text x="35.2131%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (114 samples, 0.02%)</title><rect x="35.0898%" y="245" width="0.0157%" height="15" fill="rgb(228,81,30)" fg:x="254545" fg:w="114"/><text x="35.3398%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (252 samples, 0.03%)</title><rect x="35.1834%" y="165" width="0.0347%" height="15" fill="rgb(227,42,39)" fg:x="255224" fg:w="252"/><text x="35.4334%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (326 samples, 0.04%)</title><rect x="35.1743%" y="197" width="0.0449%" height="15" fill="rgb(221,26,2)" fg:x="255158" fg:w="326"/><text x="35.4243%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (260 samples, 0.04%)</title><rect x="35.1834%" y="181" width="0.0358%" height="15" fill="rgb(254,61,31)" fg:x="255224" fg:w="260"/><text x="35.4334%" y="191.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,201 samples, 0.72%)</title><rect x="34.5024%" y="325" width="0.7170%" height="15" fill="rgb(222,173,38)" fg:x="250284" fg:w="5201"/><text x="34.7524%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,864 samples, 0.67%)</title><rect x="34.5489%" y="309" width="0.6705%" height="15" fill="rgb(218,50,12)" fg:x="250621" fg:w="4864"/><text x="34.7989%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,863 samples, 0.67%)</title><rect x="34.5490%" y="293" width="0.6704%" height="15" fill="rgb(223,88,40)" fg:x="250622" fg:w="4863"/><text x="34.7990%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,634 samples, 0.23%)</title><rect x="34.9941%" y="277" width="0.2253%" height="15" fill="rgb(237,54,19)" fg:x="253851" fg:w="1634"/><text x="35.2441%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,543 samples, 0.21%)</title><rect x="35.0067%" y="261" width="0.2127%" height="15" fill="rgb(251,129,25)" fg:x="253942" fg:w="1543"/><text x="35.2567%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (826 samples, 0.11%)</title><rect x="35.1055%" y="245" width="0.1139%" height="15" fill="rgb(238,97,19)" fg:x="254659" fg:w="826"/><text x="35.3555%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (813 samples, 0.11%)</title><rect x="35.1073%" y="229" width="0.1121%" height="15" fill="rgb(240,169,18)" fg:x="254672" fg:w="813"/><text x="35.3573%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (722 samples, 0.10%)</title><rect x="35.1199%" y="213" width="0.0995%" height="15" fill="rgb(230,187,49)" fg:x="254763" fg:w="722"/><text x="35.3699%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,273 samples, 1.55%)</title><rect x="33.6655%" y="389" width="1.5540%" height="15" fill="rgb(209,44,26)" fg:x="244213" fg:w="11273"/><text x="33.9155%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,583 samples, 0.77%)</title><rect x="34.4499%" y="373" width="0.7696%" height="15" fill="rgb(244,0,6)" fg:x="249903" fg:w="5583"/><text x="34.6999%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,393 samples, 0.74%)</title><rect x="34.4761%" y="357" width="0.7434%" height="15" fill="rgb(248,18,21)" fg:x="250093" fg:w="5393"/><text x="34.7261%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,339 samples, 0.74%)</title><rect x="34.4835%" y="341" width="0.7360%" height="15" fill="rgb(245,180,19)" fg:x="250147" fg:w="5339"/><text x="34.7335%" y="351.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11,279 samples, 1.55%)</title><rect x="33.6648%" y="405" width="1.5548%" height="15" fill="rgb(252,118,36)" fg:x="244208" fg:w="11279"/><text x="33.9148%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (346 samples, 0.05%)</title><rect x="35.2202%" y="405" width="0.0477%" height="15" fill="rgb(210,224,19)" fg:x="255491" fg:w="346"/><text x="35.4702%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (187 samples, 0.03%)</title><rect x="35.2679%" y="405" width="0.0258%" height="15" fill="rgb(218,30,24)" fg:x="255837" fg:w="187"/><text x="35.5179%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (160 samples, 0.02%)</title><rect x="35.3309%" y="341" width="0.0221%" height="15" fill="rgb(219,75,50)" fg:x="256294" fg:w="160"/><text x="35.5809%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (257 samples, 0.04%)</title><rect x="35.3532%" y="341" width="0.0354%" height="15" fill="rgb(234,72,50)" fg:x="256456" fg:w="257"/><text x="35.6032%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (504 samples, 0.07%)</title><rect x="35.3232%" y="357" width="0.0695%" height="15" fill="rgb(219,100,48)" fg:x="256238" fg:w="504"/><text x="35.5732%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (113 samples, 0.02%)</title><rect x="35.4067%" y="341" width="0.0156%" height="15" fill="rgb(253,5,41)" fg:x="256844" fg:w="113"/><text x="35.6567%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (323 samples, 0.04%)</title><rect x="35.4464%" y="309" width="0.0445%" height="15" fill="rgb(247,181,11)" fg:x="257132" fg:w="323"/><text x="35.6964%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (396 samples, 0.05%)</title><rect x="35.4368%" y="325" width="0.0546%" height="15" fill="rgb(222,223,25)" fg:x="257062" fg:w="396"/><text x="35.6868%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (721 samples, 0.10%)</title><rect x="35.3927%" y="357" width="0.0994%" height="15" fill="rgb(214,198,28)" fg:x="256742" fg:w="721"/><text x="35.6427%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (506 samples, 0.07%)</title><rect x="35.4223%" y="341" width="0.0698%" height="15" fill="rgb(230,46,43)" fg:x="256957" fg:w="506"/><text x="35.6723%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,440 samples, 0.20%)</title><rect x="35.2937%" y="405" width="0.1985%" height="15" fill="rgb(233,65,53)" fg:x="256024" fg:w="1440"/><text x="35.5437%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,413 samples, 0.19%)</title><rect x="35.2974%" y="389" width="0.1948%" height="15" fill="rgb(221,121,27)" fg:x="256051" fg:w="1413"/><text x="35.5474%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,369 samples, 0.19%)</title><rect x="35.3035%" y="373" width="0.1887%" height="15" fill="rgb(247,70,47)" fg:x="256095" fg:w="1369"/><text x="35.5535%" y="383.50"></text></g><g><title>core::char::methods::encode_utf8_raw (755 samples, 0.10%)</title><rect x="35.5876%" y="357" width="0.1041%" height="15" fill="rgb(228,85,35)" fg:x="258156" fg:w="755"/><text x="35.8376%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (320 samples, 0.04%)</title><rect x="35.6476%" y="341" width="0.0441%" height="15" fill="rgb(209,50,18)" fg:x="258591" fg:w="320"/><text x="35.8976%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (304 samples, 0.04%)</title><rect x="35.6498%" y="325" width="0.0419%" height="15" fill="rgb(250,19,35)" fg:x="258607" fg:w="304"/><text x="35.8998%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (281 samples, 0.04%)</title><rect x="35.6529%" y="309" width="0.0387%" height="15" fill="rgb(253,107,29)" fg:x="258630" fg:w="281"/><text x="35.9029%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (101 samples, 0.01%)</title><rect x="35.6778%" y="293" width="0.0139%" height="15" fill="rgb(252,179,29)" fg:x="258810" fg:w="101"/><text x="35.9278%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (83 samples, 0.01%)</title><rect x="35.6802%" y="277" width="0.0114%" height="15" fill="rgb(238,194,6)" fg:x="258828" fg:w="83"/><text x="35.9302%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (83 samples, 0.01%)</title><rect x="35.6802%" y="261" width="0.0114%" height="15" fill="rgb(238,164,29)" fg:x="258828" fg:w="83"/><text x="35.9302%" y="271.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (826 samples, 0.11%)</title><rect x="35.5784%" y="373" width="0.1139%" height="15" fill="rgb(224,25,9)" fg:x="258089" fg:w="826"/><text x="35.8284%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,069 samples, 0.15%)</title><rect x="35.5480%" y="389" width="0.1474%" height="15" fill="rgb(244,153,23)" fg:x="257869" fg:w="1069"/><text x="35.7980%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (147 samples, 0.02%)</title><rect x="35.8463%" y="373" width="0.0203%" height="15" fill="rgb(212,203,14)" fg:x="260033" fg:w="147"/><text x="36.0963%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (150 samples, 0.02%)</title><rect x="35.8925%" y="325" width="0.0207%" height="15" fill="rgb(220,164,20)" fg:x="260368" fg:w="150"/><text x="36.1425%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (128 samples, 0.02%)</title><rect x="35.8956%" y="309" width="0.0176%" height="15" fill="rgb(222,203,48)" fg:x="260390" fg:w="128"/><text x="36.1456%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (125 samples, 0.02%)</title><rect x="35.8960%" y="293" width="0.0172%" height="15" fill="rgb(215,159,22)" fg:x="260393" fg:w="125"/><text x="36.1460%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (329 samples, 0.05%)</title><rect x="35.8680%" y="373" width="0.0454%" height="15" fill="rgb(216,183,47)" fg:x="260190" fg:w="329"/><text x="36.1180%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (329 samples, 0.05%)</title><rect x="35.8680%" y="357" width="0.0454%" height="15" fill="rgb(229,195,25)" fg:x="260190" fg:w="329"/><text x="36.1180%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (304 samples, 0.04%)</title><rect x="35.8714%" y="341" width="0.0419%" height="15" fill="rgb(224,132,51)" fg:x="260215" fg:w="304"/><text x="36.1214%" y="351.50"></text></g><g><title>__memcmp_evex_movbe (190 samples, 0.03%)</title><rect x="35.9670%" y="325" width="0.0262%" height="15" fill="rgb(240,63,7)" fg:x="260908" fg:w="190"/><text x="36.2170%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (628 samples, 0.09%)</title><rect x="35.9133%" y="373" width="0.0866%" height="15" fill="rgb(249,182,41)" fg:x="260519" fg:w="628"/><text x="36.1633%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (545 samples, 0.08%)</title><rect x="35.9248%" y="357" width="0.0751%" height="15" fill="rgb(243,47,26)" fg:x="260602" fg:w="545"/><text x="36.1748%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (545 samples, 0.08%)</title><rect x="35.9248%" y="341" width="0.0751%" height="15" fill="rgb(233,48,2)" fg:x="260602" fg:w="545"/><text x="36.1748%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (302 samples, 0.04%)</title><rect x="36.0693%" y="341" width="0.0416%" height="15" fill="rgb(244,165,34)" fg:x="261650" fg:w="302"/><text x="36.3193%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (246 samples, 0.03%)</title><rect x="36.0770%" y="325" width="0.0339%" height="15" fill="rgb(207,89,7)" fg:x="261706" fg:w="246"/><text x="36.3270%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (239 samples, 0.03%)</title><rect x="36.0779%" y="309" width="0.0329%" height="15" fill="rgb(244,117,36)" fg:x="261713" fg:w="239"/><text x="36.3279%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (730 samples, 0.10%)</title><rect x="36.0104%" y="357" width="0.1006%" height="15" fill="rgb(226,144,34)" fg:x="261223" fg:w="730"/><text x="36.2604%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (807 samples, 0.11%)</title><rect x="35.9999%" y="373" width="0.1112%" height="15" fill="rgb(213,23,19)" fg:x="261147" fg:w="807"/><text x="36.2499%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned (127 samples, 0.02%)</title><rect x="36.1210%" y="357" width="0.0175%" height="15" fill="rgb(217,75,12)" fg:x="262025" fg:w="127"/><text x="36.3710%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (92 samples, 0.01%)</title><rect x="36.1258%" y="341" width="0.0127%" height="15" fill="rgb(224,159,17)" fg:x="262060" fg:w="92"/><text x="36.3758%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,018 samples, 0.28%)</title><rect x="36.1139%" y="373" width="0.2782%" height="15" fill="rgb(217,118,1)" fg:x="261974" fg:w="2018"/><text x="36.3639%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,840 samples, 0.25%)</title><rect x="36.1385%" y="357" width="0.2536%" height="15" fill="rgb(232,180,48)" fg:x="262152" fg:w="1840"/><text x="36.3885%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,031 samples, 0.69%)</title><rect x="35.7053%" y="389" width="0.6935%" height="15" fill="rgb(230,27,33)" fg:x="259010" fg:w="5031"/><text x="35.9553%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (226 samples, 0.03%)</title><rect x="36.3993%" y="373" width="0.0312%" height="15" fill="rgb(205,31,21)" fg:x="264044" fg:w="226"/><text x="36.6493%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="36.4082%" y="357" width="0.0222%" height="15" fill="rgb(253,59,4)" fg:x="264109" fg:w="161"/><text x="36.6582%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (111 samples, 0.02%)</title><rect x="36.4151%" y="341" width="0.0153%" height="15" fill="rgb(224,201,9)" fg:x="264159" fg:w="111"/><text x="36.6651%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (105 samples, 0.01%)</title><rect x="36.4160%" y="325" width="0.0145%" height="15" fill="rgb(229,206,30)" fg:x="264165" fg:w="105"/><text x="36.6660%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (73 samples, 0.01%)</title><rect x="36.4315%" y="341" width="0.0101%" height="15" fill="rgb(212,67,47)" fg:x="264278" fg:w="73"/><text x="36.6815%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,971 samples, 0.96%)</title><rect x="35.4922%" y="405" width="0.9610%" height="15" fill="rgb(211,96,50)" fg:x="257464" fg:w="6971"/><text x="35.7422%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (391 samples, 0.05%)</title><rect x="36.3993%" y="389" width="0.0539%" height="15" fill="rgb(252,114,18)" fg:x="264044" fg:w="391"/><text x="36.6493%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (165 samples, 0.02%)</title><rect x="36.4304%" y="373" width="0.0227%" height="15" fill="rgb(223,58,37)" fg:x="264270" fg:w="165"/><text x="36.6804%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (165 samples, 0.02%)</title><rect x="36.4304%" y="357" width="0.0227%" height="15" fill="rgb(237,70,4)" fg:x="264270" fg:w="165"/><text x="36.6804%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (83 samples, 0.01%)</title><rect x="36.4417%" y="341" width="0.0114%" height="15" fill="rgb(244,85,46)" fg:x="264352" fg:w="83"/><text x="36.6917%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (82 samples, 0.01%)</title><rect x="36.4419%" y="325" width="0.0113%" height="15" fill="rgb(223,39,52)" fg:x="264353" fg:w="82"/><text x="36.6919%" y="335.50"></text></g><g><title>one_brc::round_towards_positive (667 samples, 0.09%)</title><rect x="36.4532%" y="405" width="0.0919%" height="15" fill="rgb(218,200,14)" fg:x="264435" fg:w="667"/><text x="36.7032%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (188 samples, 0.03%)</title><rect x="36.5192%" y="389" width="0.0259%" height="15" fill="rgb(208,171,16)" fg:x="264914" fg:w="188"/><text x="36.7692%" y="399.50"></text></g><g><title>__round (167 samples, 0.02%)</title><rect x="36.5221%" y="373" width="0.0230%" height="15" fill="rgb(234,200,18)" fg:x="264935" fg:w="167"/><text x="36.7721%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (105 samples, 0.01%)</title><rect x="36.6561%" y="357" width="0.0145%" height="15" fill="rgb(228,45,11)" fg:x="265907" fg:w="105"/><text x="36.9061%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (594 samples, 0.08%)</title><rect x="36.6051%" y="389" width="0.0819%" height="15" fill="rgb(237,182,11)" fg:x="265537" fg:w="594"/><text x="36.8551%" y="399.50"></text></g><g><title>one_brc::Measurement::record (488 samples, 0.07%)</title><rect x="36.6197%" y="373" width="0.0673%" height="15" fill="rgb(241,175,49)" fg:x="265643" fg:w="488"/><text x="36.8697%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (119 samples, 0.02%)</title><rect x="36.6706%" y="357" width="0.0164%" height="15" fill="rgb(247,38,35)" fg:x="266012" fg:w="119"/><text x="36.9206%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (91 samples, 0.01%)</title><rect x="36.7017%" y="325" width="0.0125%" height="15" fill="rgb(228,39,49)" fg:x="266238" fg:w="91"/><text x="36.9517%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (180 samples, 0.02%)</title><rect x="36.6928%" y="341" width="0.0248%" height="15" fill="rgb(226,101,26)" fg:x="266173" fg:w="180"/><text x="36.9428%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (202 samples, 0.03%)</title><rect x="36.6910%" y="357" width="0.0278%" height="15" fill="rgb(206,141,19)" fg:x="266160" fg:w="202"/><text x="36.9410%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,264 samples, 0.17%)</title><rect x="36.5451%" y="405" width="0.1742%" height="15" fill="rgb(211,200,13)" fg:x="265102" fg:w="1264"/><text x="36.7951%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (235 samples, 0.03%)</title><rect x="36.6870%" y="389" width="0.0324%" height="15" fill="rgb(241,121,6)" fg:x="266131" fg:w="235"/><text x="36.9370%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (234 samples, 0.03%)</title><rect x="36.6871%" y="373" width="0.0323%" height="15" fill="rgb(234,221,29)" fg:x="266132" fg:w="234"/><text x="36.9371%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (90 samples, 0.01%)</title><rect x="36.7582%" y="325" width="0.0124%" height="15" fill="rgb(229,136,5)" fg:x="266648" fg:w="90"/><text x="37.0082%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (153 samples, 0.02%)</title><rect x="36.7536%" y="341" width="0.0211%" height="15" fill="rgb(238,36,11)" fg:x="266614" fg:w="153"/><text x="37.0036%" y="351.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (287 samples, 0.04%)</title><rect x="36.7418%" y="389" width="0.0396%" height="15" fill="rgb(251,55,41)" fg:x="266529" fg:w="287"/><text x="36.9918%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (218 samples, 0.03%)</title><rect x="36.7514%" y="373" width="0.0301%" height="15" fill="rgb(242,34,40)" fg:x="266598" fg:w="218"/><text x="37.0014%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (214 samples, 0.03%)</title><rect x="36.7519%" y="357" width="0.0295%" height="15" fill="rgb(215,42,17)" fg:x="266602" fg:w="214"/><text x="37.0019%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (451 samples, 0.06%)</title><rect x="36.7194%" y="405" width="0.0622%" height="15" fill="rgb(207,44,46)" fg:x="266366" fg:w="451"/><text x="36.9694%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (270 samples, 0.04%)</title><rect x="36.9973%" y="277" width="0.0372%" height="15" fill="rgb(211,206,28)" fg:x="268382" fg:w="270"/><text x="37.2473%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (852 samples, 0.12%)</title><rect x="36.9190%" y="293" width="0.1175%" height="15" fill="rgb(237,167,16)" fg:x="267814" fg:w="852"/><text x="37.1690%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (788 samples, 0.11%)</title><rect x="37.2781%" y="277" width="0.1086%" height="15" fill="rgb(233,66,6)" fg:x="270419" fg:w="788"/><text x="37.5281%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,580 samples, 0.36%)</title><rect x="37.0364%" y="293" width="0.3557%" height="15" fill="rgb(246,123,29)" fg:x="268666" fg:w="2580"/><text x="37.2864%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,796 samples, 0.52%)</title><rect x="36.8691%" y="309" width="0.5233%" height="15" fill="rgb(209,62,40)" fg:x="267452" fg:w="3796"/><text x="37.1191%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,824 samples, 0.53%)</title><rect x="36.8658%" y="341" width="0.5272%" height="15" fill="rgb(218,4,25)" fg:x="267428" fg:w="3824"/><text x="37.1158%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,800 samples, 0.52%)</title><rect x="36.8691%" y="325" width="0.5238%" height="15" fill="rgb(253,91,49)" fg:x="267452" fg:w="3800"/><text x="37.1191%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (410 samples, 0.06%)</title><rect x="37.4059%" y="325" width="0.0565%" height="15" fill="rgb(228,155,29)" fg:x="271346" fg:w="410"/><text x="37.6559%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (399 samples, 0.06%)</title><rect x="37.4634%" y="309" width="0.0550%" height="15" fill="rgb(243,57,37)" fg:x="271763" fg:w="399"/><text x="37.7134%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (496 samples, 0.07%)</title><rect x="37.5426%" y="293" width="0.0684%" height="15" fill="rgb(244,167,17)" fg:x="272338" fg:w="496"/><text x="37.7926%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (146 samples, 0.02%)</title><rect x="37.6110%" y="293" width="0.0201%" height="15" fill="rgb(207,181,38)" fg:x="272834" fg:w="146"/><text x="37.8610%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (850 samples, 0.12%)</title><rect x="37.5184%" y="309" width="0.1172%" height="15" fill="rgb(211,8,23)" fg:x="272162" fg:w="850"/><text x="37.7684%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,308 samples, 0.18%)</title><rect x="37.4624%" y="325" width="0.1803%" height="15" fill="rgb(235,11,44)" fg:x="271756" fg:w="1308"/><text x="37.7124%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,860 samples, 0.26%)</title><rect x="37.3929%" y="341" width="0.2564%" height="15" fill="rgb(248,18,52)" fg:x="271252" fg:w="1860"/><text x="37.6429%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (124 samples, 0.02%)</title><rect x="37.7635%" y="213" width="0.0171%" height="15" fill="rgb(208,4,7)" fg:x="273940" fg:w="124"/><text x="38.0135%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (369 samples, 0.05%)</title><rect x="37.7300%" y="229" width="0.0509%" height="15" fill="rgb(240,17,39)" fg:x="273697" fg:w="369"/><text x="37.9800%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (107 samples, 0.01%)</title><rect x="37.8506%" y="213" width="0.0148%" height="15" fill="rgb(207,170,3)" fg:x="274572" fg:w="107"/><text x="38.1006%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (682 samples, 0.09%)</title><rect x="37.7814%" y="229" width="0.0940%" height="15" fill="rgb(236,100,52)" fg:x="274070" fg:w="682"/><text x="38.0314%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,542 samples, 0.21%)</title><rect x="37.6717%" y="245" width="0.2126%" height="15" fill="rgb(246,78,51)" fg:x="273274" fg:w="1542"/><text x="37.9217%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (129 samples, 0.02%)</title><rect x="37.9573%" y="213" width="0.0178%" height="15" fill="rgb(211,17,15)" fg:x="275346" fg:w="129"/><text x="38.2073%" y="223.50"></text></g><g><title>core::cmp::min (504 samples, 0.07%)</title><rect x="37.9755%" y="213" width="0.0695%" height="15" fill="rgb(209,59,46)" fg:x="275478" fg:w="504"/><text x="38.2255%" y="223.50"></text></g><g><title>core::cmp::Ord::min (504 samples, 0.07%)</title><rect x="37.9755%" y="197" width="0.0695%" height="15" fill="rgb(210,92,25)" fg:x="275478" fg:w="504"/><text x="38.2255%" y="207.50"></text></g><g><title>core::cmp::min_by (482 samples, 0.07%)</title><rect x="37.9785%" y="181" width="0.0664%" height="15" fill="rgb(238,174,52)" fg:x="275500" fg:w="482"/><text x="38.2285%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (140 samples, 0.02%)</title><rect x="38.0257%" y="165" width="0.0193%" height="15" fill="rgb(230,73,7)" fg:x="275842" fg:w="140"/><text x="38.2757%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (93 samples, 0.01%)</title><rect x="38.0321%" y="149" width="0.0128%" height="15" fill="rgb(243,124,40)" fg:x="275889" fg:w="93"/><text x="38.2821%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (458 samples, 0.06%)</title><rect x="38.0450%" y="213" width="0.0631%" height="15" fill="rgb(244,170,11)" fg:x="275982" fg:w="458"/><text x="38.2950%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (9,247 samples, 1.27%)</title><rect x="36.8382%" y="373" width="1.2747%" height="15" fill="rgb(207,114,54)" fg:x="267228" fg:w="9247"/><text x="37.0882%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,186 samples, 1.27%)</title><rect x="36.8466%" y="357" width="1.2663%" height="15" fill="rgb(205,42,20)" fg:x="267289" fg:w="9186"/><text x="37.0966%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,363 samples, 0.46%)</title><rect x="37.6493%" y="341" width="0.4636%" height="15" fill="rgb(230,30,28)" fg:x="273112" fg:w="3363"/><text x="37.8993%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,336 samples, 0.46%)</title><rect x="37.6531%" y="325" width="0.4599%" height="15" fill="rgb(205,73,54)" fg:x="273139" fg:w="3336"/><text x="37.9031%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,279 samples, 0.45%)</title><rect x="37.6609%" y="309" width="0.4520%" height="15" fill="rgb(254,227,23)" fg:x="273196" fg:w="3279"/><text x="37.9109%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,221 samples, 0.44%)</title><rect x="37.6689%" y="293" width="0.4440%" height="15" fill="rgb(228,202,34)" fg:x="273254" fg:w="3221"/><text x="37.9189%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,201 samples, 0.44%)</title><rect x="37.6717%" y="277" width="0.4413%" height="15" fill="rgb(222,225,37)" fg:x="273274" fg:w="3201"/><text x="37.9217%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,201 samples, 0.44%)</title><rect x="37.6717%" y="261" width="0.4413%" height="15" fill="rgb(221,14,54)" fg:x="273274" fg:w="3201"/><text x="37.9217%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,659 samples, 0.23%)</title><rect x="37.8842%" y="245" width="0.2287%" height="15" fill="rgb(254,102,2)" fg:x="274816" fg:w="1659"/><text x="38.1342%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,612 samples, 0.22%)</title><rect x="37.8907%" y="229" width="0.2222%" height="15" fill="rgb(232,104,17)" fg:x="274863" fg:w="1612"/><text x="38.1407%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (98 samples, 0.01%)</title><rect x="38.1643%" y="325" width="0.0135%" height="15" fill="rgb(250,220,14)" fg:x="276848" fg:w="98"/><text x="38.4143%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (223 samples, 0.03%)</title><rect x="38.1473%" y="341" width="0.0307%" height="15" fill="rgb(241,158,9)" fg:x="276724" fg:w="223"/><text x="38.3973%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (377 samples, 0.05%)</title><rect x="38.1337%" y="357" width="0.0520%" height="15" fill="rgb(246,9,43)" fg:x="276626" fg:w="377"/><text x="38.3837%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (125 samples, 0.02%)</title><rect x="38.2657%" y="341" width="0.0172%" height="15" fill="rgb(206,73,33)" fg:x="277583" fg:w="125"/><text x="38.5157%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (178 samples, 0.02%)</title><rect x="38.3600%" y="309" width="0.0245%" height="15" fill="rgb(222,79,8)" fg:x="278267" fg:w="178"/><text x="38.6100%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (649 samples, 0.09%)</title><rect x="38.3221%" y="325" width="0.0895%" height="15" fill="rgb(234,8,54)" fg:x="277992" fg:w="649"/><text x="38.5721%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (196 samples, 0.03%)</title><rect x="38.3845%" y="309" width="0.0270%" height="15" fill="rgb(209,134,38)" fg:x="278445" fg:w="196"/><text x="38.6345%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (162 samples, 0.02%)</title><rect x="38.3892%" y="293" width="0.0223%" height="15" fill="rgb(230,127,29)" fg:x="278479" fg:w="162"/><text x="38.6392%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (956 samples, 0.13%)</title><rect x="38.2829%" y="341" width="0.1318%" height="15" fill="rgb(242,44,41)" fg:x="277708" fg:w="956"/><text x="38.5329%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (177 samples, 0.02%)</title><rect x="38.4318%" y="309" width="0.0244%" height="15" fill="rgb(222,56,43)" fg:x="278788" fg:w="177"/><text x="38.6818%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (113 samples, 0.02%)</title><rect x="38.4406%" y="293" width="0.0156%" height="15" fill="rgb(238,39,47)" fg:x="278852" fg:w="113"/><text x="38.6906%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (187 samples, 0.03%)</title><rect x="38.4310%" y="325" width="0.0258%" height="15" fill="rgb(226,79,43)" fg:x="278782" fg:w="187"/><text x="38.6810%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (238 samples, 0.03%)</title><rect x="38.4624%" y="309" width="0.0328%" height="15" fill="rgb(242,105,53)" fg:x="279010" fg:w="238"/><text x="38.7124%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (120 samples, 0.02%)</title><rect x="38.4787%" y="293" width="0.0165%" height="15" fill="rgb(251,132,46)" fg:x="279128" fg:w="120"/><text x="38.7287%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (305 samples, 0.04%)</title><rect x="38.4567%" y="325" width="0.0420%" height="15" fill="rgb(231,77,14)" fg:x="278969" fg:w="305"/><text x="38.7067%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (241 samples, 0.03%)</title><rect x="38.5896%" y="229" width="0.0332%" height="15" fill="rgb(240,135,9)" fg:x="279933" fg:w="241"/><text x="38.8396%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (589 samples, 0.08%)</title><rect x="38.5459%" y="277" width="0.0812%" height="15" fill="rgb(248,109,14)" fg:x="279616" fg:w="589"/><text x="38.7959%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (541 samples, 0.07%)</title><rect x="38.5525%" y="261" width="0.0746%" height="15" fill="rgb(227,146,52)" fg:x="279664" fg:w="541"/><text x="38.8025%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (541 samples, 0.07%)</title><rect x="38.5525%" y="245" width="0.0746%" height="15" fill="rgb(232,54,3)" fg:x="279664" fg:w="541"/><text x="38.8025%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,590 samples, 0.22%)</title><rect x="38.4166%" y="341" width="0.2192%" height="15" fill="rgb(229,201,43)" fg:x="278678" fg:w="1590"/><text x="38.6666%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (994 samples, 0.14%)</title><rect x="38.4988%" y="325" width="0.1370%" height="15" fill="rgb(252,161,33)" fg:x="279274" fg:w="994"/><text x="38.7488%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (913 samples, 0.13%)</title><rect x="38.5099%" y="309" width="0.1259%" height="15" fill="rgb(226,146,40)" fg:x="279355" fg:w="913"/><text x="38.7599%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (693 samples, 0.10%)</title><rect x="38.5403%" y="293" width="0.0955%" height="15" fill="rgb(219,47,25)" fg:x="279575" fg:w="693"/><text x="38.7903%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (808 samples, 0.11%)</title><rect x="38.6485%" y="341" width="0.1114%" height="15" fill="rgb(250,135,13)" fg:x="280360" fg:w="808"/><text x="38.8985%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (689 samples, 0.09%)</title><rect x="38.6649%" y="325" width="0.0950%" height="15" fill="rgb(219,229,18)" fg:x="280479" fg:w="689"/><text x="38.9149%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (169 samples, 0.02%)</title><rect x="38.7366%" y="309" width="0.0233%" height="15" fill="rgb(217,152,27)" fg:x="280999" fg:w="169"/><text x="38.9866%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (439 samples, 0.06%)</title><rect x="38.7948%" y="325" width="0.0605%" height="15" fill="rgb(225,71,47)" fg:x="281421" fg:w="439"/><text x="39.0448%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (180 samples, 0.02%)</title><rect x="38.8305%" y="309" width="0.0248%" height="15" fill="rgb(220,139,14)" fg:x="281680" fg:w="180"/><text x="39.0805%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (77 samples, 0.01%)</title><rect x="38.9412%" y="309" width="0.0106%" height="15" fill="rgb(247,54,32)" fg:x="282483" fg:w="77"/><text x="39.1912%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (792 samples, 0.11%)</title><rect x="38.8553%" y="325" width="0.1092%" height="15" fill="rgb(252,131,39)" fg:x="281860" fg:w="792"/><text x="39.1053%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (92 samples, 0.01%)</title><rect x="38.9518%" y="309" width="0.0127%" height="15" fill="rgb(210,108,39)" fg:x="282560" fg:w="92"/><text x="39.2018%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,342 samples, 0.32%)</title><rect x="38.7599%" y="341" width="0.3229%" height="15" fill="rgb(205,23,29)" fg:x="281168" fg:w="2342"/><text x="39.0099%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (858 samples, 0.12%)</title><rect x="38.9644%" y="325" width="0.1183%" height="15" fill="rgb(246,139,46)" fg:x="282652" fg:w="858"/><text x="39.2144%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (711 samples, 0.10%)</title><rect x="38.9847%" y="309" width="0.0980%" height="15" fill="rgb(250,81,26)" fg:x="282799" fg:w="711"/><text x="39.2347%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (197 samples, 0.03%)</title><rect x="39.0556%" y="293" width="0.0272%" height="15" fill="rgb(214,104,7)" fg:x="283313" fg:w="197"/><text x="39.3056%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,684 samples, 2.30%)</title><rect x="36.7871%" y="389" width="2.2999%" height="15" fill="rgb(233,189,8)" fg:x="266857" fg:w="16684"/><text x="37.0371%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,066 samples, 0.97%)</title><rect x="38.1129%" y="373" width="0.9741%" height="15" fill="rgb(228,141,17)" fg:x="276475" fg:w="7066"/><text x="38.3629%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,499 samples, 0.90%)</title><rect x="38.1911%" y="357" width="0.8959%" height="15" fill="rgb(247,157,1)" fg:x="277042" fg:w="6499"/><text x="38.4411%" y="367.50"></text></g><g><title>__clone3 (40,304 samples, 5.56%)</title><rect x="33.5618%" y="629" width="5.5560%" height="15" fill="rgb(249,225,5)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="639.50">__clone3</text></g><g><title>start_thread (40,304 samples, 5.56%)</title><rect x="33.5618%" y="613" width="5.5560%" height="15" fill="rgb(242,55,13)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (40,304 samples, 5.56%)</title><rect x="33.5618%" y="597" width="5.5560%" height="15" fill="rgb(230,49,50)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (40,304 samples, 5.56%)</title><rect x="33.5618%" y="581" width="5.5560%" height="15" fill="rgb(241,111,38)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (40,304 samples, 5.56%)</title><rect x="33.5618%" y="565" width="5.5560%" height="15" fill="rgb(252,155,4)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (40,304 samples, 5.56%)</title><rect x="33.5618%" y="549" width="5.5560%" height="15" fill="rgb(212,69,32)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (40,304 samples, 5.56%)</title><rect x="33.5618%" y="533" width="5.5560%" height="15" fill="rgb(243,107,47)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="543.50">std::pa..</text></g><g><title>__rust_try (40,304 samples, 5.56%)</title><rect x="33.5618%" y="517" width="5.5560%" height="15" fill="rgb(247,130,12)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (40,304 samples, 5.56%)</title><rect x="33.5618%" y="501" width="5.5560%" height="15" fill="rgb(233,74,16)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40,304 samples, 5.56%)</title><rect x="33.5618%" y="485" width="5.5560%" height="15" fill="rgb(208,58,18)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (40,304 samples, 5.56%)</title><rect x="33.5618%" y="469" width="5.5560%" height="15" fill="rgb(242,225,1)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (40,304 samples, 5.56%)</title><rect x="33.5618%" y="453" width="5.5560%" height="15" fill="rgb(249,39,40)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (40,304 samples, 5.56%)</title><rect x="33.5618%" y="437" width="5.5560%" height="15" fill="rgb(207,72,44)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (40,304 samples, 5.56%)</title><rect x="33.5618%" y="421" width="5.5560%" height="15" fill="rgb(215,193,12)" fg:x="243461" fg:w="40304"/><text x="33.8118%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (16,948 samples, 2.34%)</title><rect x="36.7815%" y="405" width="2.3363%" height="15" fill="rgb(248,41,39)" fg:x="266817" fg:w="16948"/><text x="37.0315%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (199 samples, 0.03%)</title><rect x="39.0904%" y="389" width="0.0274%" height="15" fill="rgb(253,85,4)" fg:x="283566" fg:w="199"/><text x="39.3404%" y="399.50"></text></g><g><title>worker-14 (46,745 samples, 6.44%)</title><rect x="32.6843%" y="645" width="6.4439%" height="15" fill="rgb(243,70,31)" fg:x="237095" fg:w="46745"/><text x="32.9343%" y="655.50">worker-14</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (197 samples, 0.03%)</title><rect x="39.1384%" y="629" width="0.0272%" height="15" fill="rgb(253,195,26)" fg:x="283914" fg:w="197"/><text x="39.3884%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (116 samples, 0.02%)</title><rect x="39.1785%" y="613" width="0.0160%" height="15" fill="rgb(243,42,11)" fg:x="284205" fg:w="116"/><text x="39.4285%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (77 samples, 0.01%)</title><rect x="39.2072%" y="613" width="0.0106%" height="15" fill="rgb(239,66,17)" fg:x="284413" fg:w="77"/><text x="39.4572%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.01%)</title><rect x="39.2577%" y="613" width="0.0117%" height="15" fill="rgb(217,132,21)" fg:x="284779" fg:w="85"/><text x="39.5077%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (165 samples, 0.02%)</title><rect x="39.2741%" y="613" width="0.0227%" height="15" fill="rgb(252,202,21)" fg:x="284898" fg:w="165"/><text x="39.5241%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (161 samples, 0.02%)</title><rect x="39.3125%" y="613" width="0.0222%" height="15" fill="rgb(233,98,36)" fg:x="285177" fg:w="161"/><text x="39.5625%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (98 samples, 0.01%)</title><rect x="39.3212%" y="597" width="0.0135%" height="15" fill="rgb(216,153,54)" fg:x="285240" fg:w="98"/><text x="39.5712%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (105 samples, 0.01%)</title><rect x="39.3347%" y="613" width="0.0145%" height="15" fill="rgb(250,99,7)" fg:x="285338" fg:w="105"/><text x="39.5847%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (73 samples, 0.01%)</title><rect x="39.3808%" y="613" width="0.0101%" height="15" fill="rgb(207,56,50)" fg:x="285672" fg:w="73"/><text x="39.6308%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (74 samples, 0.01%)</title><rect x="39.4020%" y="613" width="0.0102%" height="15" fill="rgb(244,61,34)" fg:x="285826" fg:w="74"/><text x="39.6520%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (77 samples, 0.01%)</title><rect x="39.4232%" y="613" width="0.0106%" height="15" fill="rgb(241,50,38)" fg:x="285980" fg:w="77"/><text x="39.6732%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (128 samples, 0.02%)</title><rect x="39.4338%" y="613" width="0.0176%" height="15" fill="rgb(212,166,30)" fg:x="286057" fg:w="128"/><text x="39.6838%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (76 samples, 0.01%)</title><rect x="39.4515%" y="613" width="0.0105%" height="15" fill="rgb(249,127,32)" fg:x="286185" fg:w="76"/><text x="39.7015%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (130 samples, 0.02%)</title><rect x="39.4620%" y="613" width="0.0179%" height="15" fill="rgb(209,103,0)" fg:x="286261" fg:w="130"/><text x="39.7120%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (102 samples, 0.01%)</title><rect x="39.4887%" y="613" width="0.0141%" height="15" fill="rgb(238,209,51)" fg:x="286455" fg:w="102"/><text x="39.7387%" y="623.50"></text></g><g><title>[anon] (2,714 samples, 0.37%)</title><rect x="39.1690%" y="629" width="0.3741%" height="15" fill="rgb(237,56,23)" fg:x="284136" fg:w="2714"/><text x="39.4190%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (173 samples, 0.02%)</title><rect x="39.5499%" y="613" width="0.0238%" height="15" fill="rgb(215,153,46)" fg:x="286899" fg:w="173"/><text x="39.7999%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (84 samples, 0.01%)</title><rect x="39.5778%" y="613" width="0.0116%" height="15" fill="rgb(224,49,31)" fg:x="287101" fg:w="84"/><text x="39.8278%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (124 samples, 0.02%)</title><rect x="39.5893%" y="613" width="0.0171%" height="15" fill="rgb(250,18,42)" fg:x="287185" fg:w="124"/><text x="39.8393%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (80 samples, 0.01%)</title><rect x="39.6173%" y="613" width="0.0110%" height="15" fill="rgb(215,176,39)" fg:x="287388" fg:w="80"/><text x="39.8673%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (200 samples, 0.03%)</title><rect x="39.6379%" y="613" width="0.0276%" height="15" fill="rgb(223,77,29)" fg:x="287537" fg:w="200"/><text x="39.8879%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (200 samples, 0.03%)</title><rect x="39.6379%" y="597" width="0.0276%" height="15" fill="rgb(234,94,52)" fg:x="287537" fg:w="200"/><text x="39.8879%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (200 samples, 0.03%)</title><rect x="39.6379%" y="581" width="0.0276%" height="15" fill="rgb(220,154,50)" fg:x="287537" fg:w="200"/><text x="39.8879%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (83 samples, 0.01%)</title><rect x="39.6540%" y="565" width="0.0114%" height="15" fill="rgb(212,11,10)" fg:x="287654" fg:w="83"/><text x="39.9040%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (103 samples, 0.01%)</title><rect x="39.6969%" y="613" width="0.0142%" height="15" fill="rgb(205,166,19)" fg:x="287965" fg:w="103"/><text x="39.9469%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (131 samples, 0.02%)</title><rect x="39.7119%" y="613" width="0.0181%" height="15" fill="rgb(244,198,16)" fg:x="288074" fg:w="131"/><text x="39.9619%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (181 samples, 0.02%)</title><rect x="39.7498%" y="613" width="0.0250%" height="15" fill="rgb(219,69,12)" fg:x="288349" fg:w="181"/><text x="39.9998%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (97 samples, 0.01%)</title><rect x="39.7837%" y="613" width="0.0134%" height="15" fill="rgb(245,30,7)" fg:x="288595" fg:w="97"/><text x="40.0337%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (86 samples, 0.01%)</title><rect x="39.8189%" y="613" width="0.0119%" height="15" fill="rgb(218,221,48)" fg:x="288850" fg:w="86"/><text x="40.0689%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (82 samples, 0.01%)</title><rect x="39.8372%" y="613" width="0.0113%" height="15" fill="rgb(216,66,15)" fg:x="288983" fg:w="82"/><text x="40.0872%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (96 samples, 0.01%)</title><rect x="39.8667%" y="613" width="0.0132%" height="15" fill="rgb(226,122,50)" fg:x="289197" fg:w="96"/><text x="40.1167%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (210 samples, 0.03%)</title><rect x="39.8799%" y="613" width="0.0289%" height="15" fill="rgb(239,156,16)" fg:x="289293" fg:w="210"/><text x="40.1299%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (171 samples, 0.02%)</title><rect x="39.8853%" y="597" width="0.0236%" height="15" fill="rgb(224,27,38)" fg:x="289332" fg:w="171"/><text x="40.1353%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (91 samples, 0.01%)</title><rect x="39.8963%" y="581" width="0.0125%" height="15" fill="rgb(224,39,27)" fg:x="289412" fg:w="91"/><text x="40.1463%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (127 samples, 0.02%)</title><rect x="39.9089%" y="613" width="0.0175%" height="15" fill="rgb(215,92,29)" fg:x="289503" fg:w="127"/><text x="40.1589%" y="623.50"></text></g><g><title>one_brc::process_lines (282 samples, 0.04%)</title><rect x="39.9378%" y="613" width="0.0389%" height="15" fill="rgb(207,159,16)" fg:x="289713" fg:w="282"/><text x="40.1878%" y="623.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (73 samples, 0.01%)</title><rect x="39.9923%" y="613" width="0.0101%" height="15" fill="rgb(238,163,47)" fg:x="290108" fg:w="73"/><text x="40.2423%" y="623.50"></text></g><g><title>[unknown] (3,417 samples, 0.47%)</title><rect x="39.5432%" y="629" width="0.4710%" height="15" fill="rgb(219,91,49)" fg:x="286850" fg:w="3417"/><text x="39.7932%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (128 samples, 0.02%)</title><rect x="40.3490%" y="325" width="0.0176%" height="15" fill="rgb(227,167,31)" fg:x="292696" fg:w="128"/><text x="40.5990%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (411 samples, 0.06%)</title><rect x="40.3667%" y="325" width="0.0567%" height="15" fill="rgb(234,80,54)" fg:x="292824" fg:w="411"/><text x="40.6167%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (411 samples, 0.06%)</title><rect x="40.3667%" y="309" width="0.0567%" height="15" fill="rgb(212,114,2)" fg:x="292824" fg:w="411"/><text x="40.6167%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (359 samples, 0.05%)</title><rect x="40.3739%" y="293" width="0.0495%" height="15" fill="rgb(234,50,24)" fg:x="292876" fg:w="359"/><text x="40.6239%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (183 samples, 0.03%)</title><rect x="40.3981%" y="277" width="0.0252%" height="15" fill="rgb(221,68,8)" fg:x="293052" fg:w="183"/><text x="40.6481%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (145 samples, 0.02%)</title><rect x="40.4034%" y="261" width="0.0200%" height="15" fill="rgb(254,180,31)" fg:x="293090" fg:w="145"/><text x="40.6534%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (139 samples, 0.02%)</title><rect x="40.4042%" y="245" width="0.0192%" height="15" fill="rgb(247,130,50)" fg:x="293096" fg:w="139"/><text x="40.6542%" y="255.50"></text></g><g><title>__memcmp_evex_movbe (305 samples, 0.04%)</title><rect x="40.4679%" y="277" width="0.0420%" height="15" fill="rgb(211,109,4)" fg:x="293558" fg:w="305"/><text x="40.7179%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (681 samples, 0.09%)</title><rect x="40.4233%" y="325" width="0.0939%" height="15" fill="rgb(238,50,21)" fg:x="293235" fg:w="681"/><text x="40.6733%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (599 samples, 0.08%)</title><rect x="40.4347%" y="309" width="0.0826%" height="15" fill="rgb(225,57,45)" fg:x="293317" fg:w="599"/><text x="40.6847%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (599 samples, 0.08%)</title><rect x="40.4347%" y="293" width="0.0826%" height="15" fill="rgb(209,196,50)" fg:x="293317" fg:w="599"/><text x="40.6847%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (330 samples, 0.05%)</title><rect x="40.5977%" y="293" width="0.0455%" height="15" fill="rgb(242,140,13)" fg:x="294500" fg:w="330"/><text x="40.8477%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (273 samples, 0.04%)</title><rect x="40.6056%" y="277" width="0.0376%" height="15" fill="rgb(217,111,7)" fg:x="294557" fg:w="273"/><text x="40.8556%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (259 samples, 0.04%)</title><rect x="40.6075%" y="261" width="0.0357%" height="15" fill="rgb(253,193,51)" fg:x="294571" fg:w="259"/><text x="40.8575%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (917 samples, 0.13%)</title><rect x="40.5172%" y="325" width="0.1264%" height="15" fill="rgb(252,70,29)" fg:x="293916" fg:w="917"/><text x="40.7672%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (797 samples, 0.11%)</title><rect x="40.5338%" y="309" width="0.1099%" height="15" fill="rgb(232,127,12)" fg:x="294036" fg:w="797"/><text x="40.7838%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (78 samples, 0.01%)</title><rect x="40.7545%" y="293" width="0.0108%" height="15" fill="rgb(211,180,21)" fg:x="295637" fg:w="78"/><text x="41.0045%" y="303.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (76 samples, 0.01%)</title><rect x="40.7687%" y="293" width="0.0105%" height="15" fill="rgb(229,72,13)" fg:x="295740" fg:w="76"/><text x="41.0187%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,783 samples, 0.25%)</title><rect x="40.6471%" y="325" width="0.2458%" height="15" fill="rgb(240,211,49)" fg:x="294858" fg:w="1783"/><text x="40.8971%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,667 samples, 0.23%)</title><rect x="40.6631%" y="309" width="0.2298%" height="15" fill="rgb(219,149,40)" fg:x="294974" fg:w="1667"/><text x="40.9131%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (825 samples, 0.11%)</title><rect x="40.7791%" y="293" width="0.1137%" height="15" fill="rgb(210,127,46)" fg:x="295816" fg:w="825"/><text x="41.0291%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,182 samples, 0.71%)</title><rect x="40.1849%" y="341" width="0.7144%" height="15" fill="rgb(220,106,7)" fg:x="291505" fg:w="5182"/><text x="40.4349%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,701 samples, 0.79%)</title><rect x="40.1347%" y="373" width="0.7859%" height="15" fill="rgb(249,31,22)" fg:x="291141" fg:w="5701"/><text x="40.3847%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,692 samples, 0.78%)</title><rect x="40.1359%" y="357" width="0.7847%" height="15" fill="rgb(253,1,49)" fg:x="291150" fg:w="5692"/><text x="40.3859%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (154 samples, 0.02%)</title><rect x="40.8994%" y="341" width="0.0212%" height="15" fill="rgb(227,144,33)" fg:x="296688" fg:w="154"/><text x="41.1494%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (154 samples, 0.02%)</title><rect x="40.8994%" y="325" width="0.0212%" height="15" fill="rgb(249,163,44)" fg:x="296688" fg:w="154"/><text x="41.1494%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (96 samples, 0.01%)</title><rect x="40.9073%" y="309" width="0.0132%" height="15" fill="rgb(234,15,39)" fg:x="296746" fg:w="96"/><text x="41.1573%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (553 samples, 0.08%)</title><rect x="41.2789%" y="181" width="0.0762%" height="15" fill="rgb(207,66,16)" fg:x="299441" fg:w="553"/><text x="41.5289%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,468 samples, 0.20%)</title><rect x="41.1664%" y="229" width="0.2024%" height="15" fill="rgb(233,112,24)" fg:x="298625" fg:w="1468"/><text x="41.4164%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,260 samples, 0.17%)</title><rect x="41.1950%" y="213" width="0.1737%" height="15" fill="rgb(230,90,22)" fg:x="298833" fg:w="1260"/><text x="41.4450%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,208 samples, 0.17%)</title><rect x="41.2022%" y="197" width="0.1665%" height="15" fill="rgb(229,61,13)" fg:x="298885" fg:w="1208"/><text x="41.4522%" y="207.50"></text></g><g><title>core::mem::size_of_val (99 samples, 0.01%)</title><rect x="41.3551%" y="181" width="0.0136%" height="15" fill="rgb(225,57,24)" fg:x="299994" fg:w="99"/><text x="41.6051%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (314 samples, 0.04%)</title><rect x="41.3744%" y="181" width="0.0433%" height="15" fill="rgb(208,169,48)" fg:x="300134" fg:w="314"/><text x="41.6244%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (235 samples, 0.03%)</title><rect x="41.3853%" y="165" width="0.0324%" height="15" fill="rgb(244,218,51)" fg:x="300213" fg:w="235"/><text x="41.6353%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (224 samples, 0.03%)</title><rect x="41.3868%" y="149" width="0.0309%" height="15" fill="rgb(214,148,10)" fg:x="300224" fg:w="224"/><text x="41.6368%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,629 samples, 0.36%)</title><rect x="41.0682%" y="261" width="0.3624%" height="15" fill="rgb(225,174,27)" fg:x="297913" fg:w="2629"/><text x="41.3182%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,629 samples, 0.36%)</title><rect x="41.0682%" y="245" width="0.3624%" height="15" fill="rgb(230,96,26)" fg:x="297913" fg:w="2629"/><text x="41.3182%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (449 samples, 0.06%)</title><rect x="41.3687%" y="229" width="0.0619%" height="15" fill="rgb(232,10,30)" fg:x="300093" fg:w="449"/><text x="41.6187%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (449 samples, 0.06%)</title><rect x="41.3687%" y="213" width="0.0619%" height="15" fill="rgb(222,8,50)" fg:x="300093" fg:w="449"/><text x="41.6187%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (408 samples, 0.06%)</title><rect x="41.3744%" y="197" width="0.0562%" height="15" fill="rgb(213,81,27)" fg:x="300134" fg:w="408"/><text x="41.6244%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (94 samples, 0.01%)</title><rect x="41.4177%" y="181" width="0.0130%" height="15" fill="rgb(245,50,10)" fg:x="300448" fg:w="94"/><text x="41.6677%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (94 samples, 0.01%)</title><rect x="41.4177%" y="165" width="0.0130%" height="15" fill="rgb(216,100,18)" fg:x="300448" fg:w="94"/><text x="41.6677%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,199 samples, 0.44%)</title><rect x="41.0227%" y="277" width="0.4410%" height="15" fill="rgb(236,147,54)" fg:x="297583" fg:w="3199"/><text x="41.2727%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (240 samples, 0.03%)</title><rect x="41.4306%" y="261" width="0.0331%" height="15" fill="rgb(205,143,26)" fg:x="300542" fg:w="240"/><text x="41.6806%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (240 samples, 0.03%)</title><rect x="41.4306%" y="245" width="0.0331%" height="15" fill="rgb(236,26,9)" fg:x="300542" fg:w="240"/><text x="41.6806%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (240 samples, 0.03%)</title><rect x="41.4306%" y="229" width="0.0331%" height="15" fill="rgb(221,165,53)" fg:x="300542" fg:w="240"/><text x="41.6806%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (109 samples, 0.02%)</title><rect x="41.5627%" y="245" width="0.0150%" height="15" fill="rgb(214,110,17)" fg:x="301500" fg:w="109"/><text x="41.8127%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (226 samples, 0.03%)</title><rect x="41.6577%" y="165" width="0.0312%" height="15" fill="rgb(237,197,12)" fg:x="302189" fg:w="226"/><text x="41.9077%" y="175.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,236 samples, 0.72%)</title><rect x="40.9680%" y="325" width="0.7218%" height="15" fill="rgb(205,84,17)" fg:x="297186" fg:w="5236"/><text x="41.2180%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,944 samples, 0.68%)</title><rect x="41.0083%" y="309" width="0.6815%" height="15" fill="rgb(237,18,45)" fg:x="297478" fg:w="4944"/><text x="41.2583%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,940 samples, 0.68%)</title><rect x="41.0088%" y="293" width="0.6810%" height="15" fill="rgb(221,87,14)" fg:x="297482" fg:w="4940"/><text x="41.2588%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,640 samples, 0.23%)</title><rect x="41.4637%" y="277" width="0.2261%" height="15" fill="rgb(238,186,15)" fg:x="300782" fg:w="1640"/><text x="41.7137%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,543 samples, 0.21%)</title><rect x="41.4771%" y="261" width="0.2127%" height="15" fill="rgb(208,115,11)" fg:x="300879" fg:w="1543"/><text x="41.7271%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (813 samples, 0.11%)</title><rect x="41.5777%" y="245" width="0.1121%" height="15" fill="rgb(254,175,0)" fg:x="301609" fg:w="813"/><text x="41.8277%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (801 samples, 0.11%)</title><rect x="41.5794%" y="229" width="0.1104%" height="15" fill="rgb(227,24,42)" fg:x="301621" fg:w="801"/><text x="41.8294%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (731 samples, 0.10%)</title><rect x="41.5890%" y="213" width="0.1008%" height="15" fill="rgb(223,211,37)" fg:x="301691" fg:w="731"/><text x="41.8390%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (305 samples, 0.04%)</title><rect x="41.6478%" y="197" width="0.0420%" height="15" fill="rgb(235,49,27)" fg:x="302117" fg:w="305"/><text x="41.8978%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (233 samples, 0.03%)</title><rect x="41.6577%" y="181" width="0.0321%" height="15" fill="rgb(254,97,51)" fg:x="302189" fg:w="233"/><text x="41.9077%" y="191.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11,401 samples, 1.57%)</title><rect x="40.1183%" y="405" width="1.5717%" height="15" fill="rgb(249,51,40)" fg:x="291022" fg:w="11401"/><text x="40.3683%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,396 samples, 1.57%)</title><rect x="40.1190%" y="389" width="1.5710%" height="15" fill="rgb(210,128,45)" fg:x="291027" fg:w="11396"/><text x="40.3690%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,581 samples, 0.77%)</title><rect x="40.9206%" y="373" width="0.7694%" height="15" fill="rgb(224,137,50)" fg:x="296842" fg:w="5581"/><text x="41.1706%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,431 samples, 0.75%)</title><rect x="40.9413%" y="357" width="0.7487%" height="15" fill="rgb(242,15,9)" fg:x="296992" fg:w="5431"/><text x="41.1913%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,352 samples, 0.74%)</title><rect x="40.9522%" y="341" width="0.7378%" height="15" fill="rgb(233,187,41)" fg:x="297071" fg:w="5352"/><text x="41.2022%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (364 samples, 0.05%)</title><rect x="41.6902%" y="405" width="0.0502%" height="15" fill="rgb(227,2,29)" fg:x="302425" fg:w="364"/><text x="41.9402%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (187 samples, 0.03%)</title><rect x="41.7404%" y="405" width="0.0258%" height="15" fill="rgb(222,70,3)" fg:x="302789" fg:w="187"/><text x="41.9904%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (163 samples, 0.02%)</title><rect x="41.8035%" y="341" width="0.0225%" height="15" fill="rgb(213,11,42)" fg:x="303247" fg:w="163"/><text x="42.0535%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (255 samples, 0.04%)</title><rect x="41.8260%" y="341" width="0.0352%" height="15" fill="rgb(225,150,9)" fg:x="303410" fg:w="255"/><text x="42.0760%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (510 samples, 0.07%)</title><rect x="41.7971%" y="357" width="0.0703%" height="15" fill="rgb(230,162,45)" fg:x="303200" fg:w="510"/><text x="42.0471%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (144 samples, 0.02%)</title><rect x="41.8800%" y="341" width="0.0199%" height="15" fill="rgb(222,14,52)" fg:x="303802" fg:w="144"/><text x="42.1300%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (323 samples, 0.04%)</title><rect x="41.9266%" y="309" width="0.0445%" height="15" fill="rgb(254,198,14)" fg:x="304140" fg:w="323"/><text x="42.1766%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (403 samples, 0.06%)</title><rect x="41.9162%" y="325" width="0.0556%" height="15" fill="rgb(220,217,30)" fg:x="304064" fg:w="403"/><text x="42.1662%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (765 samples, 0.11%)</title><rect x="41.8674%" y="357" width="0.1055%" height="15" fill="rgb(215,146,41)" fg:x="303710" fg:w="765"/><text x="42.1174%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (529 samples, 0.07%)</title><rect x="41.8999%" y="341" width="0.0729%" height="15" fill="rgb(217,27,36)" fg:x="303946" fg:w="529"/><text x="42.1499%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,501 samples, 0.21%)</title><rect x="41.7662%" y="405" width="0.2069%" height="15" fill="rgb(219,218,39)" fg:x="302976" fg:w="1501"/><text x="42.0162%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,464 samples, 0.20%)</title><rect x="41.7713%" y="389" width="0.2018%" height="15" fill="rgb(219,4,42)" fg:x="303013" fg:w="1464"/><text x="42.0213%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,424 samples, 0.20%)</title><rect x="41.7768%" y="373" width="0.1963%" height="15" fill="rgb(249,119,36)" fg:x="303053" fg:w="1424"/><text x="42.0268%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (92 samples, 0.01%)</title><rect x="42.1633%" y="261" width="0.0127%" height="15" fill="rgb(209,23,33)" fg:x="305857" fg:w="92"/><text x="42.4133%" y="271.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (857 samples, 0.12%)</title><rect x="42.0580%" y="373" width="0.1181%" height="15" fill="rgb(211,10,0)" fg:x="305093" fg:w="857"/><text x="42.3080%" y="383.50"></text></g><g><title>core::char::methods::encode_utf8_raw (781 samples, 0.11%)</title><rect x="42.0685%" y="357" width="0.1077%" height="15" fill="rgb(208,99,37)" fg:x="305169" fg:w="781"/><text x="42.3185%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (358 samples, 0.05%)</title><rect x="42.1268%" y="341" width="0.0494%" height="15" fill="rgb(213,132,31)" fg:x="305592" fg:w="358"/><text x="42.3768%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (346 samples, 0.05%)</title><rect x="42.1285%" y="325" width="0.0477%" height="15" fill="rgb(243,129,40)" fg:x="305604" fg:w="346"/><text x="42.3785%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (330 samples, 0.05%)</title><rect x="42.1307%" y="309" width="0.0455%" height="15" fill="rgb(210,66,33)" fg:x="305620" fg:w="330"/><text x="42.3807%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (129 samples, 0.02%)</title><rect x="42.1584%" y="293" width="0.0178%" height="15" fill="rgb(209,189,4)" fg:x="305821" fg:w="129"/><text x="42.4084%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (93 samples, 0.01%)</title><rect x="42.1633%" y="277" width="0.0128%" height="15" fill="rgb(214,107,37)" fg:x="305857" fg:w="93"/><text x="42.4133%" y="287.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,115 samples, 0.15%)</title><rect x="42.0249%" y="389" width="0.1537%" height="15" fill="rgb(245,88,54)" fg:x="304853" fg:w="1115"/><text x="42.2749%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (78 samples, 0.01%)</title><rect x="42.1786%" y="389" width="0.0108%" height="15" fill="rgb(205,146,20)" fg:x="305968" fg:w="78"/><text x="42.4286%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (130 samples, 0.02%)</title><rect x="42.3333%" y="373" width="0.0179%" height="15" fill="rgb(220,161,25)" fg:x="307090" fg:w="130"/><text x="42.5833%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (173 samples, 0.02%)</title><rect x="42.3778%" y="325" width="0.0238%" height="15" fill="rgb(215,152,15)" fg:x="307413" fg:w="173"/><text x="42.6278%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (133 samples, 0.02%)</title><rect x="42.3833%" y="309" width="0.0183%" height="15" fill="rgb(233,192,44)" fg:x="307453" fg:w="133"/><text x="42.6333%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (133 samples, 0.02%)</title><rect x="42.3833%" y="293" width="0.0183%" height="15" fill="rgb(240,170,46)" fg:x="307453" fg:w="133"/><text x="42.6333%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (360 samples, 0.05%)</title><rect x="42.3522%" y="373" width="0.0496%" height="15" fill="rgb(207,104,33)" fg:x="307227" fg:w="360"/><text x="42.6022%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (359 samples, 0.05%)</title><rect x="42.3523%" y="357" width="0.0495%" height="15" fill="rgb(219,21,39)" fg:x="307228" fg:w="359"/><text x="42.6023%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (325 samples, 0.04%)</title><rect x="42.3570%" y="341" width="0.0448%" height="15" fill="rgb(214,133,29)" fg:x="307262" fg:w="325"/><text x="42.6070%" y="351.50"></text></g><g><title>__memcmp_evex_movbe (204 samples, 0.03%)</title><rect x="42.4450%" y="325" width="0.0281%" height="15" fill="rgb(226,93,6)" fg:x="307900" fg:w="204"/><text x="42.6950%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (567 samples, 0.08%)</title><rect x="42.4018%" y="373" width="0.0782%" height="15" fill="rgb(252,222,34)" fg:x="307587" fg:w="567"/><text x="42.6518%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (512 samples, 0.07%)</title><rect x="42.4094%" y="357" width="0.0706%" height="15" fill="rgb(252,92,48)" fg:x="307642" fg:w="512"/><text x="42.6594%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (512 samples, 0.07%)</title><rect x="42.4094%" y="341" width="0.0706%" height="15" fill="rgb(245,223,24)" fg:x="307642" fg:w="512"/><text x="42.6594%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (309 samples, 0.04%)</title><rect x="42.5559%" y="341" width="0.0426%" height="15" fill="rgb(205,176,3)" fg:x="308705" fg:w="309"/><text x="42.8059%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (244 samples, 0.03%)</title><rect x="42.5649%" y="325" width="0.0336%" height="15" fill="rgb(235,151,15)" fg:x="308770" fg:w="244"/><text x="42.8149%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (237 samples, 0.03%)</title><rect x="42.5659%" y="309" width="0.0327%" height="15" fill="rgb(237,209,11)" fg:x="308777" fg:w="237"/><text x="42.8159%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (769 samples, 0.11%)</title><rect x="42.4928%" y="357" width="0.1060%" height="15" fill="rgb(243,227,24)" fg:x="308247" fg:w="769"/><text x="42.7428%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (863 samples, 0.12%)</title><rect x="42.4800%" y="373" width="0.1190%" height="15" fill="rgb(239,193,16)" fg:x="308154" fg:w="863"/><text x="42.7300%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned (151 samples, 0.02%)</title><rect x="42.6104%" y="357" width="0.0208%" height="15" fill="rgb(231,27,9)" fg:x="309100" fg:w="151"/><text x="42.8604%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (113 samples, 0.02%)</title><rect x="42.6156%" y="341" width="0.0156%" height="15" fill="rgb(219,169,10)" fg:x="309138" fg:w="113"/><text x="42.8656%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,192 samples, 0.30%)</title><rect x="42.6029%" y="373" width="0.3022%" height="15" fill="rgb(244,229,43)" fg:x="309046" fg:w="2192"/><text x="42.8529%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,987 samples, 0.27%)</title><rect x="42.6312%" y="357" width="0.2739%" height="15" fill="rgb(254,38,20)" fg:x="309251" fg:w="1987"/><text x="42.8812%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,243 samples, 0.72%)</title><rect x="42.1894%" y="389" width="0.7228%" height="15" fill="rgb(250,47,30)" fg:x="306046" fg:w="5243"/><text x="42.4394%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (221 samples, 0.03%)</title><rect x="42.9123%" y="373" width="0.0305%" height="15" fill="rgb(224,124,36)" fg:x="311290" fg:w="221"/><text x="43.1623%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (167 samples, 0.02%)</title><rect x="42.9197%" y="357" width="0.0230%" height="15" fill="rgb(246,68,51)" fg:x="311344" fg:w="167"/><text x="43.1697%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (106 samples, 0.01%)</title><rect x="42.9281%" y="341" width="0.0146%" height="15" fill="rgb(253,43,49)" fg:x="311405" fg:w="106"/><text x="43.1781%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (99 samples, 0.01%)</title><rect x="42.9291%" y="325" width="0.0136%" height="15" fill="rgb(219,54,36)" fg:x="311412" fg:w="99"/><text x="43.1791%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (7,195 samples, 0.99%)</title><rect x="41.9731%" y="405" width="0.9919%" height="15" fill="rgb(227,133,34)" fg:x="304477" fg:w="7195"/><text x="42.2231%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (382 samples, 0.05%)</title><rect x="42.9123%" y="389" width="0.0527%" height="15" fill="rgb(247,227,15)" fg:x="311290" fg:w="382"/><text x="43.1623%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="42.9427%" y="373" width="0.0222%" height="15" fill="rgb(229,96,14)" fg:x="311511" fg:w="161"/><text x="43.1927%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="42.9427%" y="357" width="0.0222%" height="15" fill="rgb(220,79,17)" fg:x="311511" fg:w="161"/><text x="43.1927%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (84 samples, 0.01%)</title><rect x="42.9534%" y="341" width="0.0116%" height="15" fill="rgb(205,131,53)" fg:x="311588" fg:w="84"/><text x="43.2034%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (83 samples, 0.01%)</title><rect x="42.9535%" y="325" width="0.0114%" height="15" fill="rgb(209,50,29)" fg:x="311589" fg:w="83"/><text x="43.2035%" y="335.50"></text></g><g><title>one_brc::round_towards_positive (669 samples, 0.09%)</title><rect x="42.9649%" y="405" width="0.0922%" height="15" fill="rgb(245,86,46)" fg:x="311672" fg:w="669"/><text x="43.2149%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (182 samples, 0.03%)</title><rect x="43.0321%" y="389" width="0.0251%" height="15" fill="rgb(235,66,46)" fg:x="312159" fg:w="182"/><text x="43.2821%" y="399.50"></text></g><g><title>__round (160 samples, 0.02%)</title><rect x="43.0351%" y="373" width="0.0221%" height="15" fill="rgb(232,148,31)" fg:x="312181" fg:w="160"/><text x="43.2851%" y="383.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (574 samples, 0.08%)</title><rect x="43.1164%" y="389" width="0.0791%" height="15" fill="rgb(217,149,8)" fg:x="312771" fg:w="574"/><text x="43.3664%" y="399.50"></text></g><g><title>one_brc::Measurement::record (481 samples, 0.07%)</title><rect x="43.1293%" y="373" width="0.0663%" height="15" fill="rgb(209,183,11)" fg:x="312864" fg:w="481"/><text x="43.3793%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (142 samples, 0.02%)</title><rect x="43.1760%" y="357" width="0.0196%" height="15" fill="rgb(208,55,20)" fg:x="313203" fg:w="142"/><text x="43.4260%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (87 samples, 0.01%)</title><rect x="43.2106%" y="325" width="0.0120%" height="15" fill="rgb(218,39,14)" fg:x="313454" fg:w="87"/><text x="43.4606%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (160 samples, 0.02%)</title><rect x="43.2027%" y="341" width="0.0221%" height="15" fill="rgb(216,169,33)" fg:x="313397" fg:w="160"/><text x="43.4527%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (179 samples, 0.02%)</title><rect x="43.2007%" y="357" width="0.0247%" height="15" fill="rgb(233,80,24)" fg:x="313382" fg:w="179"/><text x="43.4507%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,221 samples, 0.17%)</title><rect x="43.0572%" y="405" width="0.1683%" height="15" fill="rgb(213,179,31)" fg:x="312341" fg:w="1221"/><text x="43.3072%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (217 samples, 0.03%)</title><rect x="43.1956%" y="389" width="0.0299%" height="15" fill="rgb(209,19,5)" fg:x="313345" fg:w="217"/><text x="43.4456%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (210 samples, 0.03%)</title><rect x="43.1965%" y="373" width="0.0289%" height="15" fill="rgb(219,18,35)" fg:x="313352" fg:w="210"/><text x="43.4465%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (137 samples, 0.02%)</title><rect x="43.2633%" y="341" width="0.0189%" height="15" fill="rgb(209,169,16)" fg:x="313836" fg:w="137"/><text x="43.5133%" y="351.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (270 samples, 0.04%)</title><rect x="43.2514%" y="389" width="0.0372%" height="15" fill="rgb(245,90,51)" fg:x="313750" fg:w="270"/><text x="43.5014%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (200 samples, 0.03%)</title><rect x="43.2611%" y="373" width="0.0276%" height="15" fill="rgb(220,99,45)" fg:x="313820" fg:w="200"/><text x="43.5111%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (195 samples, 0.03%)</title><rect x="43.2617%" y="357" width="0.0269%" height="15" fill="rgb(249,89,25)" fg:x="313825" fg:w="195"/><text x="43.5117%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (459 samples, 0.06%)</title><rect x="43.2255%" y="405" width="0.0633%" height="15" fill="rgb(239,193,0)" fg:x="313562" fg:w="459"/><text x="43.4755%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (280 samples, 0.04%)</title><rect x="43.5057%" y="277" width="0.0386%" height="15" fill="rgb(231,126,1)" fg:x="315595" fg:w="280"/><text x="43.7557%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (873 samples, 0.12%)</title><rect x="43.4259%" y="293" width="0.1203%" height="15" fill="rgb(243,166,3)" fg:x="315016" fg:w="873"/><text x="43.6759%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (783 samples, 0.11%)</title><rect x="43.7812%" y="277" width="0.1079%" height="15" fill="rgb(223,22,34)" fg:x="317593" fg:w="783"/><text x="44.0312%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,523 samples, 0.35%)</title><rect x="43.5463%" y="293" width="0.3478%" height="15" fill="rgb(251,52,51)" fg:x="315889" fg:w="2523"/><text x="43.7963%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,748 samples, 0.52%)</title><rect x="43.3782%" y="309" width="0.5167%" height="15" fill="rgb(221,165,28)" fg:x="314670" fg:w="3748"/><text x="43.6282%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,793 samples, 0.52%)</title><rect x="43.3731%" y="341" width="0.5229%" height="15" fill="rgb(218,121,47)" fg:x="314633" fg:w="3793"/><text x="43.6231%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,756 samples, 0.52%)</title><rect x="43.3782%" y="325" width="0.5178%" height="15" fill="rgb(209,120,9)" fg:x="314670" fg:w="3756"/><text x="43.6282%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (399 samples, 0.06%)</title><rect x="43.9063%" y="325" width="0.0550%" height="15" fill="rgb(236,68,12)" fg:x="318501" fg:w="399"/><text x="44.1563%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (424 samples, 0.06%)</title><rect x="43.9618%" y="309" width="0.0584%" height="15" fill="rgb(225,194,26)" fg:x="318903" fg:w="424"/><text x="44.2118%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (495 samples, 0.07%)</title><rect x="44.0468%" y="293" width="0.0682%" height="15" fill="rgb(231,84,39)" fg:x="319520" fg:w="495"/><text x="44.2968%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (119 samples, 0.02%)</title><rect x="44.1151%" y="293" width="0.0164%" height="15" fill="rgb(210,11,45)" fg:x="320015" fg:w="119"/><text x="44.3651%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (848 samples, 0.12%)</title><rect x="44.0202%" y="309" width="0.1169%" height="15" fill="rgb(224,54,52)" fg:x="319327" fg:w="848"/><text x="44.2702%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,324 samples, 0.18%)</title><rect x="43.9613%" y="325" width="0.1825%" height="15" fill="rgb(238,102,14)" fg:x="318900" fg:w="1324"/><text x="44.2113%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,843 samples, 0.25%)</title><rect x="43.8960%" y="341" width="0.2541%" height="15" fill="rgb(243,160,52)" fg:x="318426" fg:w="1843"/><text x="44.1460%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (150 samples, 0.02%)</title><rect x="44.2810%" y="213" width="0.0207%" height="15" fill="rgb(216,114,19)" fg:x="321219" fg:w="150"/><text x="44.5310%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (442 samples, 0.06%)</title><rect x="44.2416%" y="229" width="0.0609%" height="15" fill="rgb(244,166,37)" fg:x="320933" fg:w="442"/><text x="44.4916%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119 samples, 0.02%)</title><rect x="44.3677%" y="213" width="0.0164%" height="15" fill="rgb(246,29,44)" fg:x="321848" fg:w="119"/><text x="44.6177%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (649 samples, 0.09%)</title><rect x="44.3025%" y="229" width="0.0895%" height="15" fill="rgb(215,56,53)" fg:x="321375" fg:w="649"/><text x="44.5525%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,634 samples, 0.23%)</title><rect x="44.1783%" y="245" width="0.2253%" height="15" fill="rgb(217,60,2)" fg:x="320474" fg:w="1634"/><text x="44.4283%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (140 samples, 0.02%)</title><rect x="44.4715%" y="213" width="0.0193%" height="15" fill="rgb(207,26,24)" fg:x="322601" fg:w="140"/><text x="44.7215%" y="223.50"></text></g><g><title>core::cmp::min (507 samples, 0.07%)</title><rect x="44.4910%" y="213" width="0.0699%" height="15" fill="rgb(252,210,15)" fg:x="322742" fg:w="507"/><text x="44.7410%" y="223.50"></text></g><g><title>core::cmp::Ord::min (507 samples, 0.07%)</title><rect x="44.4910%" y="197" width="0.0699%" height="15" fill="rgb(253,209,26)" fg:x="322742" fg:w="507"/><text x="44.7410%" y="207.50"></text></g><g><title>core::cmp::min_by (486 samples, 0.07%)</title><rect x="44.4939%" y="181" width="0.0670%" height="15" fill="rgb(238,170,14)" fg:x="322763" fg:w="486"/><text x="44.7439%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (144 samples, 0.02%)</title><rect x="44.5410%" y="165" width="0.0199%" height="15" fill="rgb(216,178,15)" fg:x="323105" fg:w="144"/><text x="44.7910%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (100 samples, 0.01%)</title><rect x="44.5471%" y="149" width="0.0138%" height="15" fill="rgb(250,197,2)" fg:x="323149" fg:w="100"/><text x="44.7971%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (510 samples, 0.07%)</title><rect x="44.5609%" y="213" width="0.0703%" height="15" fill="rgb(212,70,42)" fg:x="323249" fg:w="510"/><text x="44.8109%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,321 samples, 0.46%)</title><rect x="44.1778%" y="261" width="0.4578%" height="15" fill="rgb(227,213,9)" fg:x="320470" fg:w="3321"/><text x="44.4278%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,683 samples, 0.23%)</title><rect x="44.4036%" y="245" width="0.2320%" height="15" fill="rgb(245,99,25)" fg:x="322108" fg:w="1683"/><text x="44.6536%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,647 samples, 0.23%)</title><rect x="44.4085%" y="229" width="0.2270%" height="15" fill="rgb(250,82,29)" fg:x="322144" fg:w="1647"/><text x="44.6585%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,351 samples, 0.46%)</title><rect x="44.1738%" y="293" width="0.4619%" height="15" fill="rgb(241,226,54)" fg:x="320441" fg:w="3351"/><text x="44.4238%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,322 samples, 0.46%)</title><rect x="44.1778%" y="277" width="0.4579%" height="15" fill="rgb(221,99,41)" fg:x="320470" fg:w="3322"/><text x="44.4278%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (9,344 samples, 1.29%)</title><rect x="43.3479%" y="373" width="1.2881%" height="15" fill="rgb(213,90,21)" fg:x="314450" fg:w="9344"/><text x="43.5979%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,308 samples, 1.28%)</title><rect x="43.3529%" y="357" width="1.2831%" height="15" fill="rgb(205,208,24)" fg:x="314486" fg:w="9308"/><text x="43.6029%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,525 samples, 0.49%)</title><rect x="44.1501%" y="341" width="0.4859%" height="15" fill="rgb(246,31,12)" fg:x="320269" fg:w="3525"/><text x="44.4001%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,501 samples, 0.48%)</title><rect x="44.1534%" y="325" width="0.4826%" height="15" fill="rgb(213,154,6)" fg:x="320293" fg:w="3501"/><text x="44.4034%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,415 samples, 0.47%)</title><rect x="44.1652%" y="309" width="0.4708%" height="15" fill="rgb(222,163,29)" fg:x="320379" fg:w="3415"/><text x="44.4152%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (104 samples, 0.01%)</title><rect x="44.6869%" y="325" width="0.0143%" height="15" fill="rgb(227,201,8)" fg:x="324163" fg:w="104"/><text x="44.9369%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (228 samples, 0.03%)</title><rect x="44.6699%" y="341" width="0.0314%" height="15" fill="rgb(233,9,32)" fg:x="324040" fg:w="228"/><text x="44.9199%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (371 samples, 0.05%)</title><rect x="44.6581%" y="357" width="0.0511%" height="15" fill="rgb(217,54,24)" fg:x="323954" fg:w="371"/><text x="44.9081%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (122 samples, 0.02%)</title><rect x="44.7849%" y="341" width="0.0168%" height="15" fill="rgb(235,192,0)" fg:x="324874" fg:w="122"/><text x="45.0349%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (179 samples, 0.02%)</title><rect x="44.8817%" y="309" width="0.0247%" height="15" fill="rgb(235,45,9)" fg:x="325576" fg:w="179"/><text x="45.1317%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (637 samples, 0.09%)</title><rect x="44.8421%" y="325" width="0.0878%" height="15" fill="rgb(246,42,40)" fg:x="325289" fg:w="637"/><text x="45.0921%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (171 samples, 0.02%)</title><rect x="44.9063%" y="309" width="0.0236%" height="15" fill="rgb(248,111,24)" fg:x="325755" fg:w="171"/><text x="45.1563%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (142 samples, 0.02%)</title><rect x="44.9103%" y="293" width="0.0196%" height="15" fill="rgb(249,65,22)" fg:x="325784" fg:w="142"/><text x="45.1603%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (945 samples, 0.13%)</title><rect x="44.8017%" y="341" width="0.1303%" height="15" fill="rgb(238,111,51)" fg:x="324996" fg:w="945"/><text x="45.0517%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (127 samples, 0.02%)</title><rect x="44.9564%" y="293" width="0.0175%" height="15" fill="rgb(250,118,22)" fg:x="326118" fg:w="127"/><text x="45.2064%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (197 samples, 0.03%)</title><rect x="44.9473%" y="309" width="0.0272%" height="15" fill="rgb(234,84,26)" fg:x="326052" fg:w="197"/><text x="45.1973%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (205 samples, 0.03%)</title><rect x="44.9467%" y="325" width="0.0283%" height="15" fill="rgb(243,172,12)" fg:x="326048" fg:w="205"/><text x="45.1967%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (118 samples, 0.02%)</title><rect x="44.9991%" y="293" width="0.0163%" height="15" fill="rgb(236,150,49)" fg:x="326428" fg:w="118"/><text x="45.2491%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (265 samples, 0.04%)</title><rect x="44.9793%" y="309" width="0.0365%" height="15" fill="rgb(225,197,26)" fg:x="326284" fg:w="265"/><text x="45.2293%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (328 samples, 0.05%)</title><rect x="44.9750%" y="325" width="0.0452%" height="15" fill="rgb(214,17,42)" fg:x="326253" fg:w="328"/><text x="45.2250%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (238 samples, 0.03%)</title><rect x="45.1135%" y="229" width="0.0328%" height="15" fill="rgb(224,165,40)" fg:x="327258" fg:w="238"/><text x="45.3635%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (627 samples, 0.09%)</title><rect x="45.0654%" y="277" width="0.0864%" height="15" fill="rgb(246,100,4)" fg:x="326909" fg:w="627"/><text x="45.3154%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (546 samples, 0.08%)</title><rect x="45.0766%" y="261" width="0.0753%" height="15" fill="rgb(222,103,0)" fg:x="326990" fg:w="546"/><text x="45.3266%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (546 samples, 0.08%)</title><rect x="45.0766%" y="245" width="0.0753%" height="15" fill="rgb(227,189,26)" fg:x="326990" fg:w="546"/><text x="45.3266%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,632 samples, 0.22%)</title><rect x="44.9343%" y="341" width="0.2250%" height="15" fill="rgb(214,202,17)" fg:x="325958" fg:w="1632"/><text x="45.1843%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1,007 samples, 0.14%)</title><rect x="45.0205%" y="325" width="0.1388%" height="15" fill="rgb(229,111,3)" fg:x="326583" fg:w="1007"/><text x="45.2705%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (941 samples, 0.13%)</title><rect x="45.0296%" y="309" width="0.1297%" height="15" fill="rgb(229,172,15)" fg:x="326649" fg:w="941"/><text x="45.2796%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (715 samples, 0.10%)</title><rect x="45.0607%" y="293" width="0.0986%" height="15" fill="rgb(230,224,35)" fg:x="326875" fg:w="715"/><text x="45.3107%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (854 samples, 0.12%)</title><rect x="45.1742%" y="341" width="0.1177%" height="15" fill="rgb(251,141,6)" fg:x="327698" fg:w="854"/><text x="45.4242%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (744 samples, 0.10%)</title><rect x="45.1893%" y="325" width="0.1026%" height="15" fill="rgb(225,208,6)" fg:x="327808" fg:w="744"/><text x="45.4393%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (207 samples, 0.03%)</title><rect x="45.2634%" y="309" width="0.0285%" height="15" fill="rgb(246,181,16)" fg:x="328345" fg:w="207"/><text x="45.5134%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (439 samples, 0.06%)</title><rect x="45.3301%" y="325" width="0.0605%" height="15" fill="rgb(227,129,36)" fg:x="328829" fg:w="439"/><text x="45.5801%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (175 samples, 0.02%)</title><rect x="45.3665%" y="309" width="0.0241%" height="15" fill="rgb(248,117,24)" fg:x="329093" fg:w="175"/><text x="45.6165%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (110 samples, 0.02%)</title><rect x="45.4788%" y="309" width="0.0152%" height="15" fill="rgb(214,185,35)" fg:x="329908" fg:w="110"/><text x="45.7288%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (859 samples, 0.12%)</title><rect x="45.3906%" y="325" width="0.1184%" height="15" fill="rgb(236,150,34)" fg:x="329268" fg:w="859"/><text x="45.6406%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (109 samples, 0.02%)</title><rect x="45.4940%" y="309" width="0.0150%" height="15" fill="rgb(243,228,27)" fg:x="330018" fg:w="109"/><text x="45.7440%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,452 samples, 0.34%)</title><rect x="45.2919%" y="341" width="0.3380%" height="15" fill="rgb(245,77,44)" fg:x="328552" fg:w="2452"/><text x="45.5419%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (877 samples, 0.12%)</title><rect x="45.5090%" y="325" width="0.1209%" height="15" fill="rgb(235,214,42)" fg:x="330127" fg:w="877"/><text x="45.7590%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (713 samples, 0.10%)</title><rect x="45.5316%" y="309" width="0.0983%" height="15" fill="rgb(221,74,3)" fg:x="330291" fg:w="713"/><text x="45.7816%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (191 samples, 0.03%)</title><rect x="45.6036%" y="293" width="0.0263%" height="15" fill="rgb(206,121,29)" fg:x="330813" fg:w="191"/><text x="45.8536%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,958 samples, 2.34%)</title><rect x="43.2963%" y="389" width="2.3377%" height="15" fill="rgb(249,131,53)" fg:x="314076" fg:w="16958"/><text x="43.5463%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,240 samples, 1.00%)</title><rect x="44.6360%" y="373" width="0.9981%" height="15" fill="rgb(236,170,29)" fg:x="323794" fg:w="7240"/><text x="44.8860%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,668 samples, 0.92%)</title><rect x="44.7149%" y="357" width="0.9192%" height="15" fill="rgb(247,96,15)" fg:x="324366" fg:w="6668"/><text x="44.9649%" y="367.50"></text></g><g><title>__clone3 (41,004 samples, 5.65%)</title><rect x="40.0142%" y="629" width="5.6525%" height="15" fill="rgb(211,210,7)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="639.50">__clone3</text></g><g><title>start_thread (41,004 samples, 5.65%)</title><rect x="40.0142%" y="613" width="5.6525%" height="15" fill="rgb(240,88,50)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (41,004 samples, 5.65%)</title><rect x="40.0142%" y="597" width="5.6525%" height="15" fill="rgb(209,229,26)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (41,004 samples, 5.65%)</title><rect x="40.0142%" y="581" width="5.6525%" height="15" fill="rgb(210,68,23)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (41,004 samples, 5.65%)</title><rect x="40.0142%" y="565" width="5.6525%" height="15" fill="rgb(229,180,13)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (41,004 samples, 5.65%)</title><rect x="40.0142%" y="549" width="5.6525%" height="15" fill="rgb(236,53,44)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (41,004 samples, 5.65%)</title><rect x="40.0142%" y="533" width="5.6525%" height="15" fill="rgb(244,214,29)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="543.50">std::pa..</text></g><g><title>__rust_try (41,004 samples, 5.65%)</title><rect x="40.0142%" y="517" width="5.6525%" height="15" fill="rgb(220,75,29)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (41,004 samples, 5.65%)</title><rect x="40.0142%" y="501" width="5.6525%" height="15" fill="rgb(214,183,37)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (41,004 samples, 5.65%)</title><rect x="40.0142%" y="485" width="5.6525%" height="15" fill="rgb(239,117,29)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (41,004 samples, 5.65%)</title><rect x="40.0142%" y="469" width="5.6525%" height="15" fill="rgb(237,171,35)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (41,004 samples, 5.65%)</title><rect x="40.0142%" y="453" width="5.6525%" height="15" fill="rgb(229,178,53)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (41,004 samples, 5.65%)</title><rect x="40.0142%" y="437" width="5.6525%" height="15" fill="rgb(210,102,19)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (41,004 samples, 5.65%)</title><rect x="40.0142%" y="421" width="5.6525%" height="15" fill="rgb(235,127,22)" fg:x="290267" fg:w="41004"/><text x="40.2642%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (17,250 samples, 2.38%)</title><rect x="43.2888%" y="405" width="2.3780%" height="15" fill="rgb(244,31,31)" fg:x="314021" fg:w="17250"/><text x="43.5388%" y="415.50">st..</text></g><g><title>std::collections::hash::map::map_entry (209 samples, 0.03%)</title><rect x="45.6379%" y="389" width="0.0288%" height="15" fill="rgb(231,43,21)" fg:x="331062" fg:w="209"/><text x="45.8879%" y="399.50"></text></g><g><title>worker-15 (47,521 samples, 6.55%)</title><rect x="39.1282%" y="645" width="6.5509%" height="15" fill="rgb(217,131,35)" fg:x="283840" fg:w="47521"/><text x="39.3782%" y="655.50">worker-15</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (166 samples, 0.02%)</title><rect x="45.6849%" y="629" width="0.0229%" height="15" fill="rgb(221,149,4)" fg:x="331403" fg:w="166"/><text x="45.9349%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (93 samples, 0.01%)</title><rect x="45.7166%" y="613" width="0.0128%" height="15" fill="rgb(232,170,28)" fg:x="331633" fg:w="93"/><text x="45.9666%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (122 samples, 0.02%)</title><rect x="45.7825%" y="613" width="0.0168%" height="15" fill="rgb(238,56,10)" fg:x="332111" fg:w="122"/><text x="46.0325%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (98 samples, 0.01%)</title><rect x="45.8116%" y="613" width="0.0135%" height="15" fill="rgb(235,196,14)" fg:x="332322" fg:w="98"/><text x="46.0616%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (83 samples, 0.01%)</title><rect x="45.8902%" y="613" width="0.0114%" height="15" fill="rgb(216,45,48)" fg:x="332892" fg:w="83"/><text x="46.1402%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (94 samples, 0.01%)</title><rect x="45.9016%" y="613" width="0.0130%" height="15" fill="rgb(238,213,17)" fg:x="332975" fg:w="94"/><text x="46.1516%" y="623.50"></text></g><g><title>[anon] (1,825 samples, 0.25%)</title><rect x="45.7110%" y="629" width="0.2516%" height="15" fill="rgb(212,13,2)" fg:x="331592" fg:w="1825"/><text x="45.9610%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (192 samples, 0.03%)</title><rect x="45.9711%" y="613" width="0.0265%" height="15" fill="rgb(240,114,20)" fg:x="333479" fg:w="192"/><text x="46.2211%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (103 samples, 0.01%)</title><rect x="46.0147%" y="613" width="0.0142%" height="15" fill="rgb(228,41,40)" fg:x="333795" fg:w="103"/><text x="46.2647%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (193 samples, 0.03%)</title><rect x="46.0597%" y="613" width="0.0266%" height="15" fill="rgb(244,132,35)" fg:x="334122" fg:w="193"/><text x="46.3097%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (169 samples, 0.02%)</title><rect x="46.0631%" y="597" width="0.0233%" height="15" fill="rgb(253,189,4)" fg:x="334146" fg:w="169"/><text x="46.3131%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (169 samples, 0.02%)</title><rect x="46.0631%" y="581" width="0.0233%" height="15" fill="rgb(224,37,19)" fg:x="334146" fg:w="169"/><text x="46.3131%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (79 samples, 0.01%)</title><rect x="46.0755%" y="565" width="0.0109%" height="15" fill="rgb(235,223,18)" fg:x="334236" fg:w="79"/><text x="46.3255%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (97 samples, 0.01%)</title><rect x="46.1305%" y="613" width="0.0134%" height="15" fill="rgb(235,163,25)" fg:x="334635" fg:w="97"/><text x="46.3805%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (111 samples, 0.02%)</title><rect x="46.1456%" y="613" width="0.0153%" height="15" fill="rgb(217,145,28)" fg:x="334745" fg:w="111"/><text x="46.3956%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (184 samples, 0.03%)</title><rect x="46.1811%" y="613" width="0.0254%" height="15" fill="rgb(223,223,32)" fg:x="335002" fg:w="184"/><text x="46.4311%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (85 samples, 0.01%)</title><rect x="46.2162%" y="613" width="0.0117%" height="15" fill="rgb(227,189,39)" fg:x="335257" fg:w="85"/><text x="46.4662%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (135 samples, 0.02%)</title><rect x="46.2279%" y="613" width="0.0186%" height="15" fill="rgb(248,10,22)" fg:x="335342" fg:w="135"/><text x="46.4779%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (83 samples, 0.01%)</title><rect x="46.2718%" y="613" width="0.0114%" height="15" fill="rgb(248,46,39)" fg:x="335660" fg:w="83"/><text x="46.5218%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (80 samples, 0.01%)</title><rect x="46.3003%" y="613" width="0.0110%" height="15" fill="rgb(248,113,48)" fg:x="335867" fg:w="80"/><text x="46.5503%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (183 samples, 0.03%)</title><rect x="46.3113%" y="613" width="0.0252%" height="15" fill="rgb(245,16,25)" fg:x="335947" fg:w="183"/><text x="46.5613%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (152 samples, 0.02%)</title><rect x="46.3156%" y="597" width="0.0210%" height="15" fill="rgb(249,152,16)" fg:x="335978" fg:w="152"/><text x="46.5656%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (79 samples, 0.01%)</title><rect x="46.3257%" y="581" width="0.0109%" height="15" fill="rgb(250,16,1)" fg:x="336051" fg:w="79"/><text x="46.5757%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (117 samples, 0.02%)</title><rect x="46.3366%" y="613" width="0.0161%" height="15" fill="rgb(249,138,3)" fg:x="336130" fg:w="117"/><text x="46.5866%" y="623.50"></text></g><g><title>one_brc::process_lines (261 samples, 0.04%)</title><rect x="46.3636%" y="613" width="0.0360%" height="15" fill="rgb(227,71,41)" fg:x="336326" fg:w="261"/><text x="46.6136%" y="623.50"></text></g><g><title>[unknown] (3,425 samples, 0.47%)</title><rect x="45.9626%" y="629" width="0.4721%" height="15" fill="rgb(209,184,23)" fg:x="333417" fg:w="3425"/><text x="46.2126%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (116 samples, 0.02%)</title><rect x="46.7137%" y="325" width="0.0160%" height="15" fill="rgb(223,215,31)" fg:x="338866" fg:w="116"/><text x="46.9637%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (329 samples, 0.05%)</title><rect x="46.7300%" y="325" width="0.0454%" height="15" fill="rgb(210,146,28)" fg:x="338984" fg:w="329"/><text x="46.9800%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (329 samples, 0.05%)</title><rect x="46.7300%" y="309" width="0.0454%" height="15" fill="rgb(209,183,41)" fg:x="338984" fg:w="329"/><text x="46.9800%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (295 samples, 0.04%)</title><rect x="46.7347%" y="293" width="0.0407%" height="15" fill="rgb(209,224,45)" fg:x="339018" fg:w="295"/><text x="46.9847%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (134 samples, 0.02%)</title><rect x="46.7569%" y="277" width="0.0185%" height="15" fill="rgb(224,209,51)" fg:x="339179" fg:w="134"/><text x="47.0069%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (109 samples, 0.02%)</title><rect x="46.7603%" y="261" width="0.0150%" height="15" fill="rgb(223,17,39)" fg:x="339204" fg:w="109"/><text x="47.0103%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (107 samples, 0.01%)</title><rect x="46.7606%" y="245" width="0.0148%" height="15" fill="rgb(234,204,37)" fg:x="339206" fg:w="107"/><text x="47.0106%" y="255.50"></text></g><g><title>__memcmp_evex_movbe (232 samples, 0.03%)</title><rect x="46.8166%" y="277" width="0.0320%" height="15" fill="rgb(236,120,5)" fg:x="339612" fg:w="232"/><text x="47.0666%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (575 samples, 0.08%)</title><rect x="46.7753%" y="325" width="0.0793%" height="15" fill="rgb(248,97,27)" fg:x="339313" fg:w="575"/><text x="47.0253%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (501 samples, 0.07%)</title><rect x="46.7855%" y="309" width="0.0691%" height="15" fill="rgb(240,66,17)" fg:x="339387" fg:w="501"/><text x="47.0355%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (501 samples, 0.07%)</title><rect x="46.7855%" y="293" width="0.0691%" height="15" fill="rgb(210,79,3)" fg:x="339387" fg:w="501"/><text x="47.0355%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (280 samples, 0.04%)</title><rect x="46.9216%" y="293" width="0.0386%" height="15" fill="rgb(214,176,27)" fg:x="340374" fg:w="280"/><text x="47.1716%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (228 samples, 0.03%)</title><rect x="46.9288%" y="277" width="0.0314%" height="15" fill="rgb(235,185,3)" fg:x="340426" fg:w="228"/><text x="47.1788%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (223 samples, 0.03%)</title><rect x="46.9295%" y="261" width="0.0307%" height="15" fill="rgb(227,24,12)" fg:x="340431" fg:w="223"/><text x="47.1795%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (768 samples, 0.11%)</title><rect x="46.8546%" y="325" width="0.1059%" height="15" fill="rgb(252,169,48)" fg:x="339888" fg:w="768"/><text x="47.1046%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (678 samples, 0.09%)</title><rect x="46.8670%" y="309" width="0.0935%" height="15" fill="rgb(212,65,1)" fg:x="339978" fg:w="678"/><text x="47.1170%" y="319.50"></text></g><g><title>core::slice::memchr::memchr (1,503 samples, 0.21%)</title><rect x="46.9630%" y="325" width="0.2072%" height="15" fill="rgb(242,39,24)" fg:x="340674" fg:w="1503"/><text x="47.2130%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,411 samples, 0.19%)</title><rect x="46.9756%" y="309" width="0.1945%" height="15" fill="rgb(249,32,23)" fg:x="340766" fg:w="1411"/><text x="47.2256%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (718 samples, 0.10%)</title><rect x="47.0712%" y="293" width="0.0990%" height="15" fill="rgb(251,195,23)" fg:x="341459" fg:w="718"/><text x="47.3212%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,330 samples, 0.60%)</title><rect x="46.5782%" y="341" width="0.5969%" height="15" fill="rgb(236,174,8)" fg:x="337883" fg:w="4330"/><text x="46.8282%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,735 samples, 0.65%)</title><rect x="46.5421%" y="373" width="0.6527%" height="15" fill="rgb(220,197,8)" fg:x="337621" fg:w="4735"/><text x="46.7921%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (4,730 samples, 0.65%)</title><rect x="46.5428%" y="357" width="0.6520%" height="15" fill="rgb(240,108,37)" fg:x="337626" fg:w="4730"/><text x="46.7928%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (143 samples, 0.02%)</title><rect x="47.1751%" y="341" width="0.0197%" height="15" fill="rgb(232,176,24)" fg:x="342213" fg:w="143"/><text x="47.4251%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (143 samples, 0.02%)</title><rect x="47.1751%" y="325" width="0.0197%" height="15" fill="rgb(243,35,29)" fg:x="342213" fg:w="143"/><text x="47.4251%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (82 samples, 0.01%)</title><rect x="47.1835%" y="309" width="0.0113%" height="15" fill="rgb(210,37,18)" fg:x="342274" fg:w="82"/><text x="47.4335%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (445 samples, 0.06%)</title><rect x="47.5013%" y="181" width="0.0613%" height="15" fill="rgb(224,184,40)" fg:x="344579" fg:w="445"/><text x="47.7513%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,150 samples, 0.16%)</title><rect x="47.4133%" y="229" width="0.1585%" height="15" fill="rgb(236,39,29)" fg:x="343941" fg:w="1150"/><text x="47.6633%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (972 samples, 0.13%)</title><rect x="47.4379%" y="213" width="0.1340%" height="15" fill="rgb(232,48,39)" fg:x="344119" fg:w="972"/><text x="47.6879%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (946 samples, 0.13%)</title><rect x="47.4414%" y="197" width="0.1304%" height="15" fill="rgb(236,34,42)" fg:x="344145" fg:w="946"/><text x="47.6914%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (286 samples, 0.04%)</title><rect x="47.5779%" y="181" width="0.0394%" height="15" fill="rgb(243,106,37)" fg:x="345135" fg:w="286"/><text x="47.8279%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (211 samples, 0.03%)</title><rect x="47.5883%" y="165" width="0.0291%" height="15" fill="rgb(218,96,6)" fg:x="345210" fg:w="211"/><text x="47.8383%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (198 samples, 0.03%)</title><rect x="47.5901%" y="149" width="0.0273%" height="15" fill="rgb(235,130,12)" fg:x="345223" fg:w="198"/><text x="47.8401%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,226 samples, 0.31%)</title><rect x="47.3222%" y="261" width="0.3069%" height="15" fill="rgb(231,95,0)" fg:x="343280" fg:w="2226"/><text x="47.5722%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,226 samples, 0.31%)</title><rect x="47.3222%" y="245" width="0.3069%" height="15" fill="rgb(228,12,23)" fg:x="343280" fg:w="2226"/><text x="47.5722%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (415 samples, 0.06%)</title><rect x="47.5719%" y="229" width="0.0572%" height="15" fill="rgb(216,12,1)" fg:x="345091" fg:w="415"/><text x="47.8219%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (415 samples, 0.06%)</title><rect x="47.5719%" y="213" width="0.0572%" height="15" fill="rgb(219,59,3)" fg:x="345091" fg:w="415"/><text x="47.8219%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (371 samples, 0.05%)</title><rect x="47.5779%" y="197" width="0.0511%" height="15" fill="rgb(215,208,46)" fg:x="345135" fg:w="371"/><text x="47.8279%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (85 samples, 0.01%)</title><rect x="47.6173%" y="181" width="0.0117%" height="15" fill="rgb(254,224,29)" fg:x="345421" fg:w="85"/><text x="47.8673%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (85 samples, 0.01%)</title><rect x="47.6173%" y="165" width="0.0117%" height="15" fill="rgb(232,14,29)" fg:x="345421" fg:w="85"/><text x="47.8673%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (2,693 samples, 0.37%)</title><rect x="47.2865%" y="277" width="0.3712%" height="15" fill="rgb(208,45,52)" fg:x="343021" fg:w="2693"/><text x="47.5365%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (208 samples, 0.03%)</title><rect x="47.6291%" y="261" width="0.0287%" height="15" fill="rgb(234,191,28)" fg:x="345506" fg:w="208"/><text x="47.8791%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (208 samples, 0.03%)</title><rect x="47.6291%" y="245" width="0.0287%" height="15" fill="rgb(244,67,43)" fg:x="345506" fg:w="208"/><text x="47.8791%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (208 samples, 0.03%)</title><rect x="47.6291%" y="229" width="0.0287%" height="15" fill="rgb(236,189,24)" fg:x="345506" fg:w="208"/><text x="47.8791%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (85 samples, 0.01%)</title><rect x="47.7436%" y="245" width="0.0117%" height="15" fill="rgb(239,214,33)" fg:x="346337" fg:w="85"/><text x="47.9936%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (203 samples, 0.03%)</title><rect x="47.8223%" y="165" width="0.0280%" height="15" fill="rgb(226,176,41)" fg:x="346908" fg:w="203"/><text x="48.0723%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (260 samples, 0.04%)</title><rect x="47.8156%" y="197" width="0.0358%" height="15" fill="rgb(248,47,8)" fg:x="346859" fg:w="260"/><text x="48.0656%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (211 samples, 0.03%)</title><rect x="47.8223%" y="181" width="0.0291%" height="15" fill="rgb(218,81,44)" fg:x="346908" fg:w="211"/><text x="48.0723%" y="191.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,471 samples, 0.62%)</title><rect x="47.2352%" y="325" width="0.6163%" height="15" fill="rgb(213,98,6)" fg:x="342649" fg:w="4471"/><text x="47.4852%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,210 samples, 0.58%)</title><rect x="47.2712%" y="309" width="0.5804%" height="15" fill="rgb(222,85,22)" fg:x="342910" fg:w="4210"/><text x="47.5212%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,208 samples, 0.58%)</title><rect x="47.2715%" y="293" width="0.5801%" height="15" fill="rgb(239,46,39)" fg:x="342912" fg:w="4208"/><text x="47.5215%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,406 samples, 0.19%)</title><rect x="47.6577%" y="277" width="0.1938%" height="15" fill="rgb(237,12,29)" fg:x="345714" fg:w="1406"/><text x="47.9077%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,294 samples, 0.18%)</title><rect x="47.6732%" y="261" width="0.1784%" height="15" fill="rgb(214,77,8)" fg:x="345826" fg:w="1294"/><text x="47.9232%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (698 samples, 0.10%)</title><rect x="47.7553%" y="245" width="0.0962%" height="15" fill="rgb(217,168,37)" fg:x="346422" fg:w="698"/><text x="48.0053%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (691 samples, 0.10%)</title><rect x="47.7563%" y="229" width="0.0953%" height="15" fill="rgb(221,217,23)" fg:x="346429" fg:w="691"/><text x="48.0063%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (619 samples, 0.09%)</title><rect x="47.7662%" y="213" width="0.0853%" height="15" fill="rgb(243,229,36)" fg:x="346501" fg:w="619"/><text x="48.0162%" y="223.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (9,609 samples, 1.32%)</title><rect x="46.5271%" y="405" width="1.3246%" height="15" fill="rgb(251,163,40)" fg:x="337512" fg:w="9609"/><text x="46.7771%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,600 samples, 1.32%)</title><rect x="46.5283%" y="389" width="1.3234%" height="15" fill="rgb(237,222,12)" fg:x="337521" fg:w="9600"/><text x="46.7783%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,765 samples, 0.66%)</title><rect x="47.1948%" y="373" width="0.6569%" height="15" fill="rgb(248,132,6)" fg:x="342356" fg:w="4765"/><text x="47.4448%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,634 samples, 0.64%)</title><rect x="47.2129%" y="357" width="0.6388%" height="15" fill="rgb(227,167,50)" fg:x="342487" fg:w="4634"/><text x="47.4629%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4,583 samples, 0.63%)</title><rect x="47.2199%" y="341" width="0.6318%" height="15" fill="rgb(242,84,37)" fg:x="342538" fg:w="4583"/><text x="47.4699%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (322 samples, 0.04%)</title><rect x="47.8520%" y="405" width="0.0444%" height="15" fill="rgb(212,4,50)" fg:x="347123" fg:w="322"/><text x="48.1020%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (174 samples, 0.02%)</title><rect x="47.8964%" y="405" width="0.0240%" height="15" fill="rgb(230,228,32)" fg:x="347445" fg:w="174"/><text x="48.1464%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (133 samples, 0.02%)</title><rect x="47.9467%" y="341" width="0.0183%" height="15" fill="rgb(248,217,23)" fg:x="347810" fg:w="133"/><text x="48.1967%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (205 samples, 0.03%)</title><rect x="47.9653%" y="341" width="0.0283%" height="15" fill="rgb(238,197,32)" fg:x="347945" fg:w="205"/><text x="48.2153%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (401 samples, 0.06%)</title><rect x="47.9413%" y="357" width="0.0553%" height="15" fill="rgb(236,106,1)" fg:x="347771" fg:w="401"/><text x="48.1913%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (128 samples, 0.02%)</title><rect x="48.0079%" y="341" width="0.0176%" height="15" fill="rgb(219,228,13)" fg:x="348254" fg:w="128"/><text x="48.2579%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (273 samples, 0.04%)</title><rect x="48.0474%" y="309" width="0.0376%" height="15" fill="rgb(238,30,35)" fg:x="348541" fg:w="273"/><text x="48.2974%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (335 samples, 0.05%)</title><rect x="48.0396%" y="325" width="0.0462%" height="15" fill="rgb(236,70,23)" fg:x="348484" fg:w="335"/><text x="48.2896%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (649 samples, 0.09%)</title><rect x="47.9966%" y="357" width="0.0895%" height="15" fill="rgb(249,104,48)" fg:x="348172" fg:w="649"/><text x="48.2466%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (439 samples, 0.06%)</title><rect x="48.0255%" y="341" width="0.0605%" height="15" fill="rgb(254,117,50)" fg:x="348382" fg:w="439"/><text x="48.2755%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,204 samples, 0.17%)</title><rect x="47.9203%" y="405" width="0.1660%" height="15" fill="rgb(223,152,4)" fg:x="347619" fg:w="1204"/><text x="48.1703%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,185 samples, 0.16%)</title><rect x="47.9230%" y="389" width="0.1634%" height="15" fill="rgb(245,6,2)" fg:x="347638" fg:w="1185"/><text x="48.1730%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,159 samples, 0.16%)</title><rect x="47.9266%" y="373" width="0.1598%" height="15" fill="rgb(249,150,24)" fg:x="347664" fg:w="1159"/><text x="48.1766%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (85 samples, 0.01%)</title><rect x="48.2494%" y="261" width="0.0117%" height="15" fill="rgb(228,185,42)" fg:x="350006" fg:w="85"/><text x="48.4994%" y="271.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (716 samples, 0.10%)</title><rect x="48.1627%" y="373" width="0.0987%" height="15" fill="rgb(226,39,33)" fg:x="349377" fg:w="716"/><text x="48.4127%" y="383.50"></text></g><g><title>core::char::methods::encode_utf8_raw (667 samples, 0.09%)</title><rect x="48.1694%" y="357" width="0.0919%" height="15" fill="rgb(221,166,19)" fg:x="349426" fg:w="667"/><text x="48.4194%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (314 samples, 0.04%)</title><rect x="48.2181%" y="341" width="0.0433%" height="15" fill="rgb(209,109,2)" fg:x="349779" fg:w="314"/><text x="48.4681%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (302 samples, 0.04%)</title><rect x="48.2198%" y="325" width="0.0416%" height="15" fill="rgb(252,216,26)" fg:x="349791" fg:w="302"/><text x="48.4698%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (278 samples, 0.04%)</title><rect x="48.2231%" y="309" width="0.0383%" height="15" fill="rgb(227,173,36)" fg:x="349815" fg:w="278"/><text x="48.4731%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (113 samples, 0.02%)</title><rect x="48.2458%" y="293" width="0.0156%" height="15" fill="rgb(209,90,7)" fg:x="349980" fg:w="113"/><text x="48.4958%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (87 samples, 0.01%)</title><rect x="48.2494%" y="277" width="0.0120%" height="15" fill="rgb(250,194,11)" fg:x="350006" fg:w="87"/><text x="48.4994%" y="287.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (954 samples, 0.13%)</title><rect x="48.1329%" y="389" width="0.1315%" height="15" fill="rgb(220,72,50)" fg:x="349161" fg:w="954"/><text x="48.3829%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (130 samples, 0.02%)</title><rect x="48.3917%" y="373" width="0.0179%" height="15" fill="rgb(222,106,48)" fg:x="351038" fg:w="130"/><text x="48.6417%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (120 samples, 0.02%)</title><rect x="48.4337%" y="325" width="0.0165%" height="15" fill="rgb(216,220,45)" fg:x="351343" fg:w="120"/><text x="48.6837%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (96 samples, 0.01%)</title><rect x="48.4370%" y="309" width="0.0132%" height="15" fill="rgb(234,112,18)" fg:x="351367" fg:w="96"/><text x="48.6870%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (92 samples, 0.01%)</title><rect x="48.4376%" y="293" width="0.0127%" height="15" fill="rgb(206,179,9)" fg:x="351371" fg:w="92"/><text x="48.6876%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (286 samples, 0.04%)</title><rect x="48.4110%" y="373" width="0.0394%" height="15" fill="rgb(215,115,40)" fg:x="351178" fg:w="286"/><text x="48.6610%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (286 samples, 0.04%)</title><rect x="48.4110%" y="357" width="0.0394%" height="15" fill="rgb(222,69,34)" fg:x="351178" fg:w="286"/><text x="48.6610%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (259 samples, 0.04%)</title><rect x="48.4147%" y="341" width="0.0357%" height="15" fill="rgb(209,161,10)" fg:x="351205" fg:w="259"/><text x="48.6647%" y="351.50"></text></g><g><title>__memcmp_evex_movbe (167 samples, 0.02%)</title><rect x="48.4917%" y="325" width="0.0230%" height="15" fill="rgb(217,6,38)" fg:x="351764" fg:w="167"/><text x="48.7417%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (504 samples, 0.07%)</title><rect x="48.4504%" y="373" width="0.0695%" height="15" fill="rgb(229,229,48)" fg:x="351464" fg:w="504"/><text x="48.7004%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (434 samples, 0.06%)</title><rect x="48.4600%" y="357" width="0.0598%" height="15" fill="rgb(225,21,28)" fg:x="351534" fg:w="434"/><text x="48.7100%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (434 samples, 0.06%)</title><rect x="48.4600%" y="341" width="0.0598%" height="15" fill="rgb(206,33,13)" fg:x="351534" fg:w="434"/><text x="48.7100%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (716 samples, 0.10%)</title><rect x="48.5321%" y="357" width="0.0987%" height="15" fill="rgb(242,178,17)" fg:x="352057" fg:w="716"/><text x="48.7821%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (273 samples, 0.04%)</title><rect x="48.5932%" y="341" width="0.0376%" height="15" fill="rgb(220,162,5)" fg:x="352500" fg:w="273"/><text x="48.8432%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (210 samples, 0.03%)</title><rect x="48.6019%" y="325" width="0.0289%" height="15" fill="rgb(210,33,43)" fg:x="352563" fg:w="210"/><text x="48.8519%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (202 samples, 0.03%)</title><rect x="48.6030%" y="309" width="0.0278%" height="15" fill="rgb(216,116,54)" fg:x="352571" fg:w="202"/><text x="48.8530%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (806 samples, 0.11%)</title><rect x="48.5199%" y="373" width="0.1111%" height="15" fill="rgb(249,92,24)" fg:x="351968" fg:w="806"/><text x="48.7699%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned (118 samples, 0.02%)</title><rect x="48.6397%" y="357" width="0.0163%" height="15" fill="rgb(231,189,14)" fg:x="352837" fg:w="118"/><text x="48.8897%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (89 samples, 0.01%)</title><rect x="48.6437%" y="341" width="0.0123%" height="15" fill="rgb(230,8,41)" fg:x="352866" fg:w="89"/><text x="48.8937%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (1,721 samples, 0.24%)</title><rect x="48.6333%" y="373" width="0.2372%" height="15" fill="rgb(249,7,27)" fg:x="352791" fg:w="1721"/><text x="48.8833%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,557 samples, 0.21%)</title><rect x="48.6559%" y="357" width="0.2146%" height="15" fill="rgb(232,86,5)" fg:x="352955" fg:w="1557"/><text x="48.9059%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,381 samples, 0.60%)</title><rect x="48.2726%" y="389" width="0.6039%" height="15" fill="rgb(224,175,18)" fg:x="350174" fg:w="4381"/><text x="48.5226%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (199 samples, 0.03%)</title><rect x="48.8766%" y="373" width="0.0274%" height="15" fill="rgb(220,129,12)" fg:x="354556" fg:w="199"/><text x="49.1266%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (149 samples, 0.02%)</title><rect x="48.8835%" y="357" width="0.0205%" height="15" fill="rgb(210,19,36)" fg:x="354606" fg:w="149"/><text x="49.1335%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (109 samples, 0.02%)</title><rect x="48.8890%" y="341" width="0.0150%" height="15" fill="rgb(219,96,14)" fg:x="354646" fg:w="109"/><text x="49.1390%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (106 samples, 0.01%)</title><rect x="48.8895%" y="325" width="0.0146%" height="15" fill="rgb(249,106,1)" fg:x="354649" fg:w="106"/><text x="49.1395%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,064 samples, 0.84%)</title><rect x="48.0863%" y="405" width="0.8359%" height="15" fill="rgb(249,155,20)" fg:x="348823" fg:w="6064"/><text x="48.3363%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (331 samples, 0.05%)</title><rect x="48.8766%" y="389" width="0.0456%" height="15" fill="rgb(244,168,9)" fg:x="354556" fg:w="331"/><text x="49.1266%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (132 samples, 0.02%)</title><rect x="48.9041%" y="373" width="0.0182%" height="15" fill="rgb(216,23,50)" fg:x="354755" fg:w="132"/><text x="49.1541%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (132 samples, 0.02%)</title><rect x="48.9041%" y="357" width="0.0182%" height="15" fill="rgb(224,219,20)" fg:x="354755" fg:w="132"/><text x="49.1541%" y="367.50"></text></g><g><title>one_brc::round_towards_positive (567 samples, 0.08%)</title><rect x="48.9223%" y="405" width="0.0782%" height="15" fill="rgb(222,156,15)" fg:x="354887" fg:w="567"/><text x="49.1723%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (137 samples, 0.02%)</title><rect x="48.9815%" y="389" width="0.0189%" height="15" fill="rgb(231,97,17)" fg:x="355317" fg:w="137"/><text x="49.2315%" y="399.50"></text></g><g><title>__round (111 samples, 0.02%)</title><rect x="48.9851%" y="373" width="0.0153%" height="15" fill="rgb(218,70,48)" fg:x="355343" fg:w="111"/><text x="49.2351%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (79 samples, 0.01%)</title><rect x="49.0906%" y="357" width="0.0109%" height="15" fill="rgb(212,196,52)" fg:x="356108" fg:w="79"/><text x="49.3406%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (510 samples, 0.07%)</title><rect x="49.0488%" y="389" width="0.0703%" height="15" fill="rgb(243,203,18)" fg:x="355805" fg:w="510"/><text x="49.2988%" y="399.50"></text></g><g><title>one_brc::Measurement::record (423 samples, 0.06%)</title><rect x="49.0608%" y="373" width="0.0583%" height="15" fill="rgb(252,125,41)" fg:x="355892" fg:w="423"/><text x="49.3108%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (128 samples, 0.02%)</title><rect x="49.1015%" y="357" width="0.0176%" height="15" fill="rgb(223,180,33)" fg:x="356187" fg:w="128"/><text x="49.3515%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (83 samples, 0.01%)</title><rect x="49.1340%" y="325" width="0.0114%" height="15" fill="rgb(254,159,46)" fg:x="356423" fg:w="83"/><text x="49.3840%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (173 samples, 0.02%)</title><rect x="49.1256%" y="341" width="0.0238%" height="15" fill="rgb(254,38,10)" fg:x="356362" fg:w="173"/><text x="49.3756%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (194 samples, 0.03%)</title><rect x="49.1239%" y="357" width="0.0267%" height="15" fill="rgb(208,217,32)" fg:x="356350" fg:w="194"/><text x="49.3739%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,092 samples, 0.15%)</title><rect x="49.0004%" y="405" width="0.1505%" height="15" fill="rgb(221,120,13)" fg:x="355454" fg:w="1092"/><text x="49.2504%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (231 samples, 0.03%)</title><rect x="49.1191%" y="389" width="0.0318%" height="15" fill="rgb(246,54,52)" fg:x="356315" fg:w="231"/><text x="49.3691%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (227 samples, 0.03%)</title><rect x="49.1197%" y="373" width="0.0313%" height="15" fill="rgb(242,34,25)" fg:x="356319" fg:w="227"/><text x="49.3697%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (77 samples, 0.01%)</title><rect x="49.1880%" y="325" width="0.0106%" height="15" fill="rgb(247,209,9)" fg:x="356815" fg:w="77"/><text x="49.4380%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (132 samples, 0.02%)</title><rect x="49.1828%" y="341" width="0.0182%" height="15" fill="rgb(228,71,26)" fg:x="356777" fg:w="132"/><text x="49.4328%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (399 samples, 0.06%)</title><rect x="49.1510%" y="405" width="0.0550%" height="15" fill="rgb(222,145,49)" fg:x="356546" fg:w="399"/><text x="49.4010%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (239 samples, 0.03%)</title><rect x="49.1730%" y="389" width="0.0329%" height="15" fill="rgb(218,121,17)" fg:x="356706" fg:w="239"/><text x="49.4230%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (179 samples, 0.02%)</title><rect x="49.1813%" y="373" width="0.0247%" height="15" fill="rgb(244,50,7)" fg:x="356766" fg:w="179"/><text x="49.4313%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (173 samples, 0.02%)</title><rect x="49.1821%" y="357" width="0.0238%" height="15" fill="rgb(246,229,37)" fg:x="356772" fg:w="173"/><text x="49.4321%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (231 samples, 0.03%)</title><rect x="49.3882%" y="277" width="0.0318%" height="15" fill="rgb(225,18,5)" fg:x="358267" fg:w="231"/><text x="49.6382%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (736 samples, 0.10%)</title><rect x="49.3202%" y="293" width="0.1015%" height="15" fill="rgb(213,204,8)" fg:x="357774" fg:w="736"/><text x="49.5702%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (661 samples, 0.09%)</title><rect x="49.6150%" y="277" width="0.0911%" height="15" fill="rgb(238,103,6)" fg:x="359912" fg:w="661"/><text x="49.8650%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,084 samples, 0.29%)</title><rect x="49.4217%" y="293" width="0.2873%" height="15" fill="rgb(222,25,35)" fg:x="358510" fg:w="2084"/><text x="49.6717%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,120 samples, 0.43%)</title><rect x="49.2790%" y="309" width="0.4301%" height="15" fill="rgb(213,203,35)" fg:x="357475" fg:w="3120"/><text x="49.5290%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,158 samples, 0.44%)</title><rect x="49.2748%" y="341" width="0.4353%" height="15" fill="rgb(221,79,53)" fg:x="357444" fg:w="3158"/><text x="49.5248%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,127 samples, 0.43%)</title><rect x="49.2790%" y="325" width="0.4311%" height="15" fill="rgb(243,200,35)" fg:x="357475" fg:w="3127"/><text x="49.5290%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (338 samples, 0.05%)</title><rect x="49.7173%" y="325" width="0.0466%" height="15" fill="rgb(248,60,25)" fg:x="360654" fg:w="338"/><text x="49.9673%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (362 samples, 0.05%)</title><rect x="49.7643%" y="309" width="0.0499%" height="15" fill="rgb(227,53,46)" fg:x="360995" fg:w="362"/><text x="50.0143%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (402 samples, 0.06%)</title><rect x="49.8391%" y="293" width="0.0554%" height="15" fill="rgb(216,120,32)" fg:x="361538" fg:w="402"/><text x="50.0891%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (112 samples, 0.02%)</title><rect x="49.8945%" y="293" width="0.0154%" height="15" fill="rgb(220,134,1)" fg:x="361940" fg:w="112"/><text x="50.1445%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (723 samples, 0.10%)</title><rect x="49.8142%" y="309" width="0.0997%" height="15" fill="rgb(237,168,5)" fg:x="361357" fg:w="723"/><text x="50.0642%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,138 samples, 0.16%)</title><rect x="49.7639%" y="325" width="0.1569%" height="15" fill="rgb(231,100,33)" fg:x="360992" fg:w="1138"/><text x="50.0139%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,574 samples, 0.22%)</title><rect x="49.7101%" y="341" width="0.2170%" height="15" fill="rgb(236,177,47)" fg:x="360602" fg:w="1574"/><text x="49.9601%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (110 samples, 0.02%)</title><rect x="50.0328%" y="213" width="0.0152%" height="15" fill="rgb(235,7,49)" fg:x="362943" fg:w="110"/><text x="50.2828%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (356 samples, 0.05%)</title><rect x="49.9996%" y="229" width="0.0491%" height="15" fill="rgb(232,119,22)" fg:x="362702" fg:w="356"/><text x="50.2496%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (98 samples, 0.01%)</title><rect x="50.0977%" y="213" width="0.0135%" height="15" fill="rgb(254,73,53)" fg:x="363414" fg:w="98"/><text x="50.3477%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (513 samples, 0.07%)</title><rect x="50.0487%" y="229" width="0.0707%" height="15" fill="rgb(251,35,20)" fg:x="363058" fg:w="513"/><text x="50.2987%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,315 samples, 0.18%)</title><rect x="49.9472%" y="245" width="0.1813%" height="15" fill="rgb(241,119,20)" fg:x="362322" fg:w="1315"/><text x="50.1972%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 0.02%)</title><rect x="50.1871%" y="213" width="0.0168%" height="15" fill="rgb(207,102,14)" fg:x="364062" fg:w="122"/><text x="50.4371%" y="223.50"></text></g><g><title>core::cmp::min (445 samples, 0.06%)</title><rect x="50.2040%" y="213" width="0.0613%" height="15" fill="rgb(248,201,50)" fg:x="364185" fg:w="445"/><text x="50.4540%" y="223.50"></text></g><g><title>core::cmp::Ord::min (445 samples, 0.06%)</title><rect x="50.2040%" y="197" width="0.0613%" height="15" fill="rgb(222,185,44)" fg:x="364185" fg:w="445"/><text x="50.4540%" y="207.50"></text></g><g><title>core::cmp::min_by (426 samples, 0.06%)</title><rect x="50.2066%" y="181" width="0.0587%" height="15" fill="rgb(218,107,18)" fg:x="364204" fg:w="426"/><text x="50.4566%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (126 samples, 0.02%)</title><rect x="50.2480%" y="165" width="0.0174%" height="15" fill="rgb(237,177,39)" fg:x="364504" fg:w="126"/><text x="50.4980%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (91 samples, 0.01%)</title><rect x="50.2528%" y="149" width="0.0125%" height="15" fill="rgb(246,69,6)" fg:x="364539" fg:w="91"/><text x="50.5028%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (401 samples, 0.06%)</title><rect x="50.2654%" y="213" width="0.0553%" height="15" fill="rgb(234,208,37)" fg:x="364630" fg:w="401"/><text x="50.5154%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (7,765 samples, 1.07%)</title><rect x="49.2546%" y="373" width="1.0704%" height="15" fill="rgb(225,4,6)" fg:x="357298" fg:w="7765"/><text x="49.5046%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,722 samples, 1.06%)</title><rect x="49.2606%" y="357" width="1.0645%" height="15" fill="rgb(233,45,0)" fg:x="357341" fg:w="7722"/><text x="49.5106%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,887 samples, 0.40%)</title><rect x="49.9271%" y="341" width="0.3980%" height="15" fill="rgb(226,136,5)" fg:x="362176" fg:w="2887"/><text x="50.1771%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,869 samples, 0.40%)</title><rect x="49.9296%" y="325" width="0.3955%" height="15" fill="rgb(211,91,47)" fg:x="362194" fg:w="2869"/><text x="50.1796%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,803 samples, 0.39%)</title><rect x="49.9387%" y="309" width="0.3864%" height="15" fill="rgb(242,88,51)" fg:x="362260" fg:w="2803"/><text x="50.1887%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,756 samples, 0.38%)</title><rect x="49.9451%" y="293" width="0.3799%" height="15" fill="rgb(230,91,28)" fg:x="362307" fg:w="2756"/><text x="50.1951%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,741 samples, 0.38%)</title><rect x="49.9472%" y="277" width="0.3779%" height="15" fill="rgb(254,186,29)" fg:x="362322" fg:w="2741"/><text x="50.1972%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,741 samples, 0.38%)</title><rect x="49.9472%" y="261" width="0.3779%" height="15" fill="rgb(238,6,4)" fg:x="362322" fg:w="2741"/><text x="50.1972%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,426 samples, 0.20%)</title><rect x="50.1285%" y="245" width="0.1966%" height="15" fill="rgb(221,151,16)" fg:x="363637" fg:w="1426"/><text x="50.3785%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,390 samples, 0.19%)</title><rect x="50.1334%" y="229" width="0.1916%" height="15" fill="rgb(251,143,52)" fg:x="363673" fg:w="1390"/><text x="50.3834%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (196 samples, 0.03%)</title><rect x="50.3551%" y="341" width="0.0270%" height="15" fill="rgb(206,90,15)" fg:x="365281" fg:w="196"/><text x="50.6051%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (90 samples, 0.01%)</title><rect x="50.3697%" y="325" width="0.0124%" height="15" fill="rgb(218,35,8)" fg:x="365387" fg:w="90"/><text x="50.6197%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (320 samples, 0.04%)</title><rect x="50.3448%" y="357" width="0.0441%" height="15" fill="rgb(239,215,6)" fg:x="365206" fg:w="320"/><text x="50.5948%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (101 samples, 0.01%)</title><rect x="50.4574%" y="341" width="0.0139%" height="15" fill="rgb(245,116,39)" fg:x="366023" fg:w="101"/><text x="50.7074%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (127 samples, 0.02%)</title><rect x="50.5316%" y="309" width="0.0175%" height="15" fill="rgb(242,65,28)" fg:x="366561" fg:w="127"/><text x="50.7816%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (498 samples, 0.07%)</title><rect x="50.5007%" y="325" width="0.0687%" height="15" fill="rgb(252,132,53)" fg:x="366337" fg:w="498"/><text x="50.7507%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (147 samples, 0.02%)</title><rect x="50.5491%" y="309" width="0.0203%" height="15" fill="rgb(224,159,50)" fg:x="366688" fg:w="147"/><text x="50.7991%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (121 samples, 0.02%)</title><rect x="50.5527%" y="293" width="0.0167%" height="15" fill="rgb(224,93,4)" fg:x="366714" fg:w="121"/><text x="50.8027%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (734 samples, 0.10%)</title><rect x="50.4713%" y="341" width="0.1012%" height="15" fill="rgb(208,81,34)" fg:x="366124" fg:w="734"/><text x="50.7213%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (96 samples, 0.01%)</title><rect x="50.5959%" y="293" width="0.0132%" height="15" fill="rgb(233,92,54)" fg:x="367028" fg:w="96"/><text x="50.8459%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (153 samples, 0.02%)</title><rect x="50.5882%" y="309" width="0.0211%" height="15" fill="rgb(237,21,14)" fg:x="366972" fg:w="153"/><text x="50.8382%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (164 samples, 0.02%)</title><rect x="50.5877%" y="325" width="0.0226%" height="15" fill="rgb(249,128,51)" fg:x="366968" fg:w="164"/><text x="50.8377%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (97 samples, 0.01%)</title><rect x="50.6310%" y="293" width="0.0134%" height="15" fill="rgb(223,129,24)" fg:x="367282" fg:w="97"/><text x="50.8810%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (220 samples, 0.03%)</title><rect x="50.6141%" y="309" width="0.0303%" height="15" fill="rgb(231,168,25)" fg:x="367160" fg:w="220"/><text x="50.8641%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (269 samples, 0.04%)</title><rect x="50.6103%" y="325" width="0.0371%" height="15" fill="rgb(224,39,20)" fg:x="367132" fg:w="269"/><text x="50.8603%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (201 samples, 0.03%)</title><rect x="50.7266%" y="229" width="0.0277%" height="15" fill="rgb(225,152,53)" fg:x="367976" fg:w="201"/><text x="50.9766%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (502 samples, 0.07%)</title><rect x="50.6897%" y="277" width="0.0692%" height="15" fill="rgb(252,17,24)" fg:x="367708" fg:w="502"/><text x="50.9397%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (449 samples, 0.06%)</title><rect x="50.6970%" y="261" width="0.0619%" height="15" fill="rgb(250,114,30)" fg:x="367761" fg:w="449"/><text x="50.9470%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (449 samples, 0.06%)</title><rect x="50.6970%" y="245" width="0.0619%" height="15" fill="rgb(229,5,4)" fg:x="367761" fg:w="449"/><text x="50.9470%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,403 samples, 0.19%)</title><rect x="50.5748%" y="341" width="0.1934%" height="15" fill="rgb(225,176,49)" fg:x="366875" fg:w="1403"/><text x="50.8248%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (877 samples, 0.12%)</title><rect x="50.6474%" y="325" width="0.1209%" height="15" fill="rgb(224,221,49)" fg:x="367401" fg:w="877"/><text x="50.8974%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (808 samples, 0.11%)</title><rect x="50.6569%" y="309" width="0.1114%" height="15" fill="rgb(253,169,27)" fg:x="367470" fg:w="808"/><text x="50.9069%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (604 samples, 0.08%)</title><rect x="50.6850%" y="293" width="0.0833%" height="15" fill="rgb(211,206,16)" fg:x="367674" fg:w="604"/><text x="50.9350%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (711 samples, 0.10%)</title><rect x="50.7785%" y="341" width="0.0980%" height="15" fill="rgb(244,87,35)" fg:x="368352" fg:w="711"/><text x="51.0285%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (603 samples, 0.08%)</title><rect x="50.7933%" y="325" width="0.0831%" height="15" fill="rgb(246,28,10)" fg:x="368460" fg:w="603"/><text x="51.0433%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (160 samples, 0.02%)</title><rect x="50.8544%" y="309" width="0.0221%" height="15" fill="rgb(229,12,44)" fg:x="368903" fg:w="160"/><text x="51.1044%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (365 samples, 0.05%)</title><rect x="50.9101%" y="325" width="0.0503%" height="15" fill="rgb(210,145,37)" fg:x="369307" fg:w="365"/><text x="51.1601%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (148 samples, 0.02%)</title><rect x="50.9400%" y="309" width="0.0204%" height="15" fill="rgb(227,112,52)" fg:x="369524" fg:w="148"/><text x="51.1900%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (85 samples, 0.01%)</title><rect x="51.0298%" y="309" width="0.0117%" height="15" fill="rgb(238,155,34)" fg:x="370175" fg:w="85"/><text x="51.2798%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (655 samples, 0.09%)</title><rect x="50.9604%" y="325" width="0.0903%" height="15" fill="rgb(239,226,36)" fg:x="369672" fg:w="655"/><text x="51.2104%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,997 samples, 0.28%)</title><rect x="50.8765%" y="341" width="0.2753%" height="15" fill="rgb(230,16,23)" fg:x="369063" fg:w="1997"/><text x="51.1265%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (733 samples, 0.10%)</title><rect x="51.0507%" y="325" width="0.1010%" height="15" fill="rgb(236,171,36)" fg:x="370327" fg:w="733"/><text x="51.3007%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (605 samples, 0.08%)</title><rect x="51.0684%" y="309" width="0.0834%" height="15" fill="rgb(221,22,14)" fg:x="370455" fg:w="605"/><text x="51.3184%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (168 samples, 0.02%)</title><rect x="51.1286%" y="293" width="0.0232%" height="15" fill="rgb(242,43,11)" fg:x="370892" fg:w="168"/><text x="51.3786%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (14,102 samples, 1.94%)</title><rect x="49.2111%" y="389" width="1.9440%" height="15" fill="rgb(232,69,23)" fg:x="356982" fg:w="14102"/><text x="49.4611%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,021 samples, 0.83%)</title><rect x="50.3251%" y="373" width="0.8300%" height="15" fill="rgb(216,180,54)" fg:x="365063" fg:w="6021"/><text x="50.5751%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,524 samples, 0.76%)</title><rect x="50.3936%" y="357" width="0.7615%" height="15" fill="rgb(216,5,24)" fg:x="365560" fg:w="5524"/><text x="50.6436%" y="367.50"></text></g><g><title>__clone3 (34,457 samples, 4.75%)</title><rect x="46.4347%" y="629" width="4.7500%" height="15" fill="rgb(225,89,9)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="639.50">__clon..</text></g><g><title>start_thread (34,457 samples, 4.75%)</title><rect x="46.4347%" y="613" width="4.7500%" height="15" fill="rgb(243,75,33)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="623.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (34,457 samples, 4.75%)</title><rect x="46.4347%" y="597" width="4.7500%" height="15" fill="rgb(247,141,45)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="607.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (34,457 samples, 4.75%)</title><rect x="46.4347%" y="581" width="4.7500%" height="15" fill="rgb(232,177,36)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="591.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (34,457 samples, 4.75%)</title><rect x="46.4347%" y="565" width="4.7500%" height="15" fill="rgb(219,125,36)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="575.50">std::t..</text></g><g><title>std::panic::catch_unwind (34,457 samples, 4.75%)</title><rect x="46.4347%" y="549" width="4.7500%" height="15" fill="rgb(227,94,9)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="559.50">std::p..</text></g><g><title>std::panicking::try (34,457 samples, 4.75%)</title><rect x="46.4347%" y="533" width="4.7500%" height="15" fill="rgb(240,34,52)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="543.50">std::p..</text></g><g><title>__rust_try (34,457 samples, 4.75%)</title><rect x="46.4347%" y="517" width="4.7500%" height="15" fill="rgb(216,45,12)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="527.50">__rust..</text></g><g><title>std::panicking::try::do_call (34,457 samples, 4.75%)</title><rect x="46.4347%" y="501" width="4.7500%" height="15" fill="rgb(246,21,19)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="511.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (34,457 samples, 4.75%)</title><rect x="46.4347%" y="485" width="4.7500%" height="15" fill="rgb(213,98,42)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="495.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (34,457 samples, 4.75%)</title><rect x="46.4347%" y="469" width="4.7500%" height="15" fill="rgb(250,136,47)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="479.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (34,457 samples, 4.75%)</title><rect x="46.4347%" y="453" width="4.7500%" height="15" fill="rgb(251,124,27)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="463.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (34,457 samples, 4.75%)</title><rect x="46.4347%" y="437" width="4.7500%" height="15" fill="rgb(229,180,14)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="447.50">one_br..</text></g><g><title>one_brc::process_lines (34,457 samples, 4.75%)</title><rect x="46.4347%" y="421" width="4.7500%" height="15" fill="rgb(245,216,25)" fg:x="336842" fg:w="34457"/><text x="46.6847%" y="431.50">one_br..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (14,354 samples, 1.98%)</title><rect x="49.2060%" y="405" width="1.9787%" height="15" fill="rgb(251,43,5)" fg:x="356945" fg:w="14354"/><text x="49.4560%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (188 samples, 0.03%)</title><rect x="51.1588%" y="389" width="0.0259%" height="15" fill="rgb(250,128,24)" fg:x="371111" fg:w="188"/><text x="51.4088%" y="399.50"></text></g><g><title>worker-1 (40,019 samples, 5.52%)</title><rect x="45.6791%" y="645" width="5.5167%" height="15" fill="rgb(217,117,27)" fg:x="331361" fg:w="40019"/><text x="45.9291%" y="655.50">worker-1</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (152 samples, 0.02%)</title><rect x="51.2033%" y="629" width="0.0210%" height="15" fill="rgb(245,147,4)" fg:x="371434" fg:w="152"/><text x="51.4533%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (76 samples, 0.01%)</title><rect x="51.2277%" y="613" width="0.0105%" height="15" fill="rgb(242,201,35)" fg:x="371611" fg:w="76"/><text x="51.4777%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (76 samples, 0.01%)</title><rect x="51.2277%" y="597" width="0.0105%" height="15" fill="rgb(218,181,1)" fg:x="371611" fg:w="76"/><text x="51.4777%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (109 samples, 0.02%)</title><rect x="51.2382%" y="613" width="0.0150%" height="15" fill="rgb(222,6,29)" fg:x="371687" fg:w="109"/><text x="51.4882%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (83 samples, 0.01%)</title><rect x="51.2643%" y="613" width="0.0114%" height="15" fill="rgb(208,186,3)" fg:x="371876" fg:w="83"/><text x="51.5143%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.01%)</title><rect x="51.3118%" y="613" width="0.0109%" height="15" fill="rgb(216,36,26)" fg:x="372221" fg:w="79"/><text x="51.5618%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (141 samples, 0.02%)</title><rect x="51.3257%" y="613" width="0.0194%" height="15" fill="rgb(248,201,23)" fg:x="372322" fg:w="141"/><text x="51.5757%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (107 samples, 0.01%)</title><rect x="51.3616%" y="613" width="0.0148%" height="15" fill="rgb(251,170,31)" fg:x="372582" fg:w="107"/><text x="51.6116%" y="623.50"></text></g><g><title>__memcmp_evex_movbe (86 samples, 0.01%)</title><rect x="51.3763%" y="613" width="0.0119%" height="15" fill="rgb(207,110,25)" fg:x="372689" fg:w="86"/><text x="51.6263%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (73 samples, 0.01%)</title><rect x="51.4152%" y="613" width="0.0101%" height="15" fill="rgb(250,54,15)" fg:x="372971" fg:w="73"/><text x="51.6652%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (82 samples, 0.01%)</title><rect x="51.4542%" y="613" width="0.0113%" height="15" fill="rgb(227,68,33)" fg:x="373254" fg:w="82"/><text x="51.7042%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (110 samples, 0.02%)</title><rect x="51.4655%" y="613" width="0.0152%" height="15" fill="rgb(238,34,41)" fg:x="373336" fg:w="110"/><text x="51.7155%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (113 samples, 0.02%)</title><rect x="51.4892%" y="613" width="0.0156%" height="15" fill="rgb(220,11,15)" fg:x="373508" fg:w="113"/><text x="51.7392%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (77 samples, 0.01%)</title><rect x="51.5135%" y="613" width="0.0106%" height="15" fill="rgb(246,111,35)" fg:x="373684" fg:w="77"/><text x="51.7635%" y="623.50"></text></g><g><title>[anon] (2,376 samples, 0.33%)</title><rect x="51.2277%" y="629" width="0.3275%" height="15" fill="rgb(209,88,53)" fg:x="371611" fg:w="2376"/><text x="51.4777%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (142 samples, 0.02%)</title><rect x="51.5615%" y="613" width="0.0196%" height="15" fill="rgb(231,185,47)" fg:x="374032" fg:w="142"/><text x="51.8115%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (81 samples, 0.01%)</title><rect x="51.5849%" y="613" width="0.0112%" height="15" fill="rgb(233,154,1)" fg:x="374202" fg:w="81"/><text x="51.8349%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (119 samples, 0.02%)</title><rect x="51.5961%" y="613" width="0.0164%" height="15" fill="rgb(225,15,46)" fg:x="374283" fg:w="119"/><text x="51.8461%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (174 samples, 0.02%)</title><rect x="51.6432%" y="613" width="0.0240%" height="15" fill="rgb(211,135,41)" fg:x="374625" fg:w="174"/><text x="51.8932%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (174 samples, 0.02%)</title><rect x="51.6432%" y="597" width="0.0240%" height="15" fill="rgb(208,54,0)" fg:x="374625" fg:w="174"/><text x="51.8932%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (174 samples, 0.02%)</title><rect x="51.6432%" y="581" width="0.0240%" height="15" fill="rgb(244,136,14)" fg:x="374625" fg:w="174"/><text x="51.8932%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (82 samples, 0.01%)</title><rect x="51.6559%" y="565" width="0.0113%" height="15" fill="rgb(241,56,14)" fg:x="374717" fg:w="82"/><text x="51.9059%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (102 samples, 0.01%)</title><rect x="51.6930%" y="613" width="0.0141%" height="15" fill="rgb(205,80,24)" fg:x="374986" fg:w="102"/><text x="51.9430%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (118 samples, 0.02%)</title><rect x="51.7091%" y="613" width="0.0163%" height="15" fill="rgb(220,57,4)" fg:x="375103" fg:w="118"/><text x="51.9591%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (131 samples, 0.02%)</title><rect x="51.7438%" y="613" width="0.0181%" height="15" fill="rgb(226,193,50)" fg:x="375355" fg:w="131"/><text x="51.9938%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (88 samples, 0.01%)</title><rect x="51.7725%" y="613" width="0.0121%" height="15" fill="rgb(231,168,22)" fg:x="375563" fg:w="88"/><text x="52.0225%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (93 samples, 0.01%)</title><rect x="51.8180%" y="613" width="0.0128%" height="15" fill="rgb(254,215,14)" fg:x="375893" fg:w="93"/><text x="52.0680%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (103 samples, 0.01%)</title><rect x="51.8461%" y="613" width="0.0142%" height="15" fill="rgb(211,115,16)" fg:x="376097" fg:w="103"/><text x="52.0961%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (181 samples, 0.02%)</title><rect x="51.8603%" y="613" width="0.0250%" height="15" fill="rgb(236,210,16)" fg:x="376200" fg:w="181"/><text x="52.1103%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (154 samples, 0.02%)</title><rect x="51.8640%" y="597" width="0.0212%" height="15" fill="rgb(221,94,12)" fg:x="376227" fg:w="154"/><text x="52.1140%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (93 samples, 0.01%)</title><rect x="51.8725%" y="581" width="0.0128%" height="15" fill="rgb(235,218,49)" fg:x="376288" fg:w="93"/><text x="52.1225%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (110 samples, 0.02%)</title><rect x="51.8853%" y="613" width="0.0152%" height="15" fill="rgb(217,114,14)" fg:x="376381" fg:w="110"/><text x="52.1353%" y="623.50"></text></g><g><title>one_brc::process_lines (288 samples, 0.04%)</title><rect x="51.9093%" y="613" width="0.0397%" height="15" fill="rgb(216,145,22)" fg:x="376555" fg:w="288"/><text x="52.1593%" y="623.50"></text></g><g><title>[unknown] (3,072 samples, 0.42%)</title><rect x="51.5553%" y="629" width="0.4235%" height="15" fill="rgb(217,112,39)" fg:x="373987" fg:w="3072"/><text x="51.8053%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (119 samples, 0.02%)</title><rect x="52.2641%" y="325" width="0.0164%" height="15" fill="rgb(225,85,32)" fg:x="379129" fg:w="119"/><text x="52.5141%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (159 samples, 0.02%)</title><rect x="52.3077%" y="277" width="0.0219%" height="15" fill="rgb(245,209,47)" fg:x="379445" fg:w="159"/><text x="52.5577%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (135 samples, 0.02%)</title><rect x="52.3110%" y="261" width="0.0186%" height="15" fill="rgb(218,220,15)" fg:x="379469" fg:w="135"/><text x="52.5610%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (131 samples, 0.02%)</title><rect x="52.3115%" y="245" width="0.0181%" height="15" fill="rgb(222,202,31)" fg:x="379473" fg:w="131"/><text x="52.5615%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (351 samples, 0.05%)</title><rect x="52.2815%" y="325" width="0.0484%" height="15" fill="rgb(243,203,4)" fg:x="379255" fg:w="351"/><text x="52.5315%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (350 samples, 0.05%)</title><rect x="52.2816%" y="309" width="0.0482%" height="15" fill="rgb(237,92,17)" fg:x="379256" fg:w="350"/><text x="52.5316%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (323 samples, 0.04%)</title><rect x="52.2853%" y="293" width="0.0445%" height="15" fill="rgb(231,119,7)" fg:x="379283" fg:w="323"/><text x="52.5353%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (214 samples, 0.03%)</title><rect x="52.3742%" y="277" width="0.0295%" height="15" fill="rgb(237,82,41)" fg:x="379928" fg:w="214"/><text x="52.6242%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (591 samples, 0.08%)</title><rect x="52.3299%" y="325" width="0.0815%" height="15" fill="rgb(226,81,48)" fg:x="379606" fg:w="591"/><text x="52.5799%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (525 samples, 0.07%)</title><rect x="52.3390%" y="309" width="0.0724%" height="15" fill="rgb(234,70,51)" fg:x="379672" fg:w="525"/><text x="52.5890%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (525 samples, 0.07%)</title><rect x="52.3390%" y="293" width="0.0724%" height="15" fill="rgb(251,86,4)" fg:x="379672" fg:w="525"/><text x="52.5890%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (878 samples, 0.12%)</title><rect x="52.4113%" y="325" width="0.1210%" height="15" fill="rgb(244,144,28)" fg:x="380197" fg:w="878"/><text x="52.6613%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (763 samples, 0.11%)</title><rect x="52.4272%" y="309" width="0.1052%" height="15" fill="rgb(232,161,39)" fg:x="380312" fg:w="763"/><text x="52.6772%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (311 samples, 0.04%)</title><rect x="52.4895%" y="293" width="0.0429%" height="15" fill="rgb(247,34,51)" fg:x="380764" fg:w="311"/><text x="52.7395%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (252 samples, 0.03%)</title><rect x="52.4976%" y="277" width="0.0347%" height="15" fill="rgb(225,132,2)" fg:x="380823" fg:w="252"/><text x="52.7476%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (241 samples, 0.03%)</title><rect x="52.4991%" y="261" width="0.0332%" height="15" fill="rgb(209,159,44)" fg:x="380834" fg:w="241"/><text x="52.7491%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (73 samples, 0.01%)</title><rect x="52.6293%" y="293" width="0.0101%" height="15" fill="rgb(251,214,1)" fg:x="381778" fg:w="73"/><text x="52.8793%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,605 samples, 0.22%)</title><rect x="52.5355%" y="325" width="0.2213%" height="15" fill="rgb(247,84,47)" fg:x="381098" fg:w="1605"/><text x="52.7855%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,499 samples, 0.21%)</title><rect x="52.5501%" y="309" width="0.2066%" height="15" fill="rgb(240,111,43)" fg:x="381204" fg:w="1499"/><text x="52.8001%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (759 samples, 0.10%)</title><rect x="52.6522%" y="293" width="0.1046%" height="15" fill="rgb(215,214,35)" fg:x="381944" fg:w="759"/><text x="52.9022%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,598 samples, 0.63%)</title><rect x="52.1278%" y="341" width="0.6338%" height="15" fill="rgb(248,207,23)" fg:x="378140" fg:w="4598"/><text x="52.3778%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,047 samples, 0.70%)</title><rect x="52.0859%" y="373" width="0.6957%" height="15" fill="rgb(214,186,4)" fg:x="377836" fg:w="5047"/><text x="52.3359%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,041 samples, 0.69%)</title><rect x="52.0867%" y="357" width="0.6949%" height="15" fill="rgb(220,133,22)" fg:x="377842" fg:w="5041"/><text x="52.3367%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (143 samples, 0.02%)</title><rect x="52.7619%" y="341" width="0.0197%" height="15" fill="rgb(239,134,19)" fg:x="382740" fg:w="143"/><text x="53.0119%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (143 samples, 0.02%)</title><rect x="52.7619%" y="325" width="0.0197%" height="15" fill="rgb(250,140,9)" fg:x="382740" fg:w="143"/><text x="53.0119%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (94 samples, 0.01%)</title><rect x="52.7686%" y="309" width="0.0130%" height="15" fill="rgb(225,59,14)" fg:x="382789" fg:w="94"/><text x="53.0186%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (472 samples, 0.07%)</title><rect x="53.1100%" y="181" width="0.0651%" height="15" fill="rgb(214,152,51)" fg:x="385265" fg:w="472"/><text x="53.3600%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,280 samples, 0.18%)</title><rect x="53.0114%" y="229" width="0.1765%" height="15" fill="rgb(251,227,43)" fg:x="384550" fg:w="1280"/><text x="53.2614%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,086 samples, 0.15%)</title><rect x="53.0381%" y="213" width="0.1497%" height="15" fill="rgb(241,96,17)" fg:x="384744" fg:w="1086"/><text x="53.2881%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,045 samples, 0.14%)</title><rect x="53.0438%" y="197" width="0.1441%" height="15" fill="rgb(234,198,43)" fg:x="384785" fg:w="1045"/><text x="53.2938%" y="207.50"></text></g><g><title>core::mem::size_of_val (93 samples, 0.01%)</title><rect x="53.1750%" y="181" width="0.0128%" height="15" fill="rgb(220,108,29)" fg:x="385737" fg:w="93"/><text x="53.4250%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (314 samples, 0.04%)</title><rect x="53.1938%" y="181" width="0.0433%" height="15" fill="rgb(226,163,33)" fg:x="385873" fg:w="314"/><text x="53.4438%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (232 samples, 0.03%)</title><rect x="53.2051%" y="165" width="0.0320%" height="15" fill="rgb(205,194,45)" fg:x="385955" fg:w="232"/><text x="53.4551%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (216 samples, 0.03%)</title><rect x="53.2073%" y="149" width="0.0298%" height="15" fill="rgb(206,143,44)" fg:x="385971" fg:w="216"/><text x="53.4573%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,426 samples, 0.33%)</title><rect x="52.9188%" y="261" width="0.3344%" height="15" fill="rgb(236,136,36)" fg:x="383878" fg:w="2426"/><text x="53.1688%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,426 samples, 0.33%)</title><rect x="52.9188%" y="245" width="0.3344%" height="15" fill="rgb(249,172,42)" fg:x="383878" fg:w="2426"/><text x="53.1688%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (474 samples, 0.07%)</title><rect x="53.1879%" y="229" width="0.0653%" height="15" fill="rgb(216,139,23)" fg:x="385830" fg:w="474"/><text x="53.4379%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (474 samples, 0.07%)</title><rect x="53.1879%" y="213" width="0.0653%" height="15" fill="rgb(207,166,20)" fg:x="385830" fg:w="474"/><text x="53.4379%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (431 samples, 0.06%)</title><rect x="53.1938%" y="197" width="0.0594%" height="15" fill="rgb(210,209,22)" fg:x="385873" fg:w="431"/><text x="53.4438%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (117 samples, 0.02%)</title><rect x="53.2371%" y="181" width="0.0161%" height="15" fill="rgb(232,118,20)" fg:x="386187" fg:w="117"/><text x="53.4871%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (117 samples, 0.02%)</title><rect x="53.2371%" y="165" width="0.0161%" height="15" fill="rgb(238,113,42)" fg:x="386187" fg:w="117"/><text x="53.4871%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (2,919 samples, 0.40%)</title><rect x="52.8789%" y="277" width="0.4024%" height="15" fill="rgb(231,42,5)" fg:x="383589" fg:w="2919"/><text x="53.1289%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (204 samples, 0.03%)</title><rect x="53.2532%" y="261" width="0.0281%" height="15" fill="rgb(243,166,24)" fg:x="386304" fg:w="204"/><text x="53.5032%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (204 samples, 0.03%)</title><rect x="53.2532%" y="245" width="0.0281%" height="15" fill="rgb(237,226,12)" fg:x="386304" fg:w="204"/><text x="53.5032%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (204 samples, 0.03%)</title><rect x="53.2532%" y="229" width="0.0281%" height="15" fill="rgb(229,133,24)" fg:x="386304" fg:w="204"/><text x="53.5032%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (101 samples, 0.01%)</title><rect x="53.3672%" y="245" width="0.0139%" height="15" fill="rgb(238,33,43)" fg:x="387131" fg:w="101"/><text x="53.6172%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (230 samples, 0.03%)</title><rect x="53.4517%" y="165" width="0.0317%" height="15" fill="rgb(227,59,38)" fg:x="387744" fg:w="230"/><text x="53.7017%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (312 samples, 0.04%)</title><rect x="53.4414%" y="197" width="0.0430%" height="15" fill="rgb(230,97,0)" fg:x="387669" fg:w="312"/><text x="53.6914%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (237 samples, 0.03%)</title><rect x="53.4517%" y="181" width="0.0327%" height="15" fill="rgb(250,173,50)" fg:x="387744" fg:w="237"/><text x="53.7017%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (672 samples, 0.09%)</title><rect x="53.3919%" y="213" width="0.0926%" height="15" fill="rgb(240,15,50)" fg:x="387310" fg:w="672"/><text x="53.6419%" y="223.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4,900 samples, 0.68%)</title><rect x="52.8092%" y="341" width="0.6755%" height="15" fill="rgb(221,93,22)" fg:x="383083" fg:w="4900"/><text x="53.0592%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,767 samples, 0.66%)</title><rect x="52.8275%" y="325" width="0.6571%" height="15" fill="rgb(245,180,53)" fg:x="383216" fg:w="4767"/><text x="53.0775%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,488 samples, 0.62%)</title><rect x="52.8660%" y="309" width="0.6187%" height="15" fill="rgb(231,88,51)" fg:x="383495" fg:w="4488"/><text x="53.1160%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,487 samples, 0.62%)</title><rect x="52.8661%" y="293" width="0.6185%" height="15" fill="rgb(240,58,21)" fg:x="383496" fg:w="4487"/><text x="53.1161%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,475 samples, 0.20%)</title><rect x="53.2813%" y="277" width="0.2033%" height="15" fill="rgb(237,21,10)" fg:x="386508" fg:w="1475"/><text x="53.5313%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,397 samples, 0.19%)</title><rect x="53.2921%" y="261" width="0.1926%" height="15" fill="rgb(218,43,11)" fg:x="386586" fg:w="1397"/><text x="53.5421%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (751 samples, 0.10%)</title><rect x="53.3811%" y="245" width="0.1035%" height="15" fill="rgb(218,221,29)" fg:x="387232" fg:w="751"/><text x="53.6311%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (744 samples, 0.10%)</title><rect x="53.3821%" y="229" width="0.1026%" height="15" fill="rgb(214,118,42)" fg:x="387239" fg:w="744"/><text x="53.6321%" y="239.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (10,245 samples, 1.41%)</title><rect x="52.0725%" y="405" width="1.4123%" height="15" fill="rgb(251,200,26)" fg:x="377739" fg:w="10245"/><text x="52.3225%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,235 samples, 1.41%)</title><rect x="52.0739%" y="389" width="1.4109%" height="15" fill="rgb(237,101,39)" fg:x="377749" fg:w="10235"/><text x="52.3239%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,101 samples, 0.70%)</title><rect x="52.7816%" y="373" width="0.7032%" height="15" fill="rgb(251,117,11)" fg:x="382883" fg:w="5101"/><text x="53.0316%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,953 samples, 0.68%)</title><rect x="52.8020%" y="357" width="0.6828%" height="15" fill="rgb(216,223,23)" fg:x="383031" fg:w="4953"/><text x="53.0520%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (344 samples, 0.05%)</title><rect x="53.4851%" y="405" width="0.0474%" height="15" fill="rgb(251,54,12)" fg:x="387986" fg:w="344"/><text x="53.7351%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (185 samples, 0.03%)</title><rect x="53.5325%" y="405" width="0.0255%" height="15" fill="rgb(254,176,54)" fg:x="388330" fg:w="185"/><text x="53.7825%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (170 samples, 0.02%)</title><rect x="53.5890%" y="341" width="0.0234%" height="15" fill="rgb(210,32,8)" fg:x="388740" fg:w="170"/><text x="53.8390%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (184 samples, 0.03%)</title><rect x="53.6129%" y="341" width="0.0254%" height="15" fill="rgb(235,52,38)" fg:x="388913" fg:w="184"/><text x="53.8629%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (426 samples, 0.06%)</title><rect x="53.5838%" y="357" width="0.0587%" height="15" fill="rgb(231,4,44)" fg:x="388702" fg:w="426"/><text x="53.8338%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (122 samples, 0.02%)</title><rect x="53.6552%" y="341" width="0.0168%" height="15" fill="rgb(249,2,32)" fg:x="389220" fg:w="122"/><text x="53.9052%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (296 samples, 0.04%)</title><rect x="53.6971%" y="309" width="0.0408%" height="15" fill="rgb(224,65,26)" fg:x="389524" fg:w="296"/><text x="53.9471%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (372 samples, 0.05%)</title><rect x="53.6874%" y="325" width="0.0513%" height="15" fill="rgb(250,73,40)" fg:x="389454" fg:w="372"/><text x="53.9374%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (701 samples, 0.10%)</title><rect x="53.6425%" y="357" width="0.0966%" height="15" fill="rgb(253,177,16)" fg:x="389128" fg:w="701"/><text x="53.8925%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (487 samples, 0.07%)</title><rect x="53.6720%" y="341" width="0.0671%" height="15" fill="rgb(217,32,34)" fg:x="389342" fg:w="487"/><text x="53.9220%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,315 samples, 0.18%)</title><rect x="53.5580%" y="405" width="0.1813%" height="15" fill="rgb(212,7,10)" fg:x="388515" fg:w="1315"/><text x="53.8080%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,289 samples, 0.18%)</title><rect x="53.5616%" y="389" width="0.1777%" height="15" fill="rgb(245,89,8)" fg:x="388541" fg:w="1289"/><text x="53.8116%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,255 samples, 0.17%)</title><rect x="53.5663%" y="373" width="0.1730%" height="15" fill="rgb(237,16,53)" fg:x="388575" fg:w="1255"/><text x="53.8163%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (92 samples, 0.01%)</title><rect x="53.9012%" y="261" width="0.0127%" height="15" fill="rgb(250,204,30)" fg:x="391005" fg:w="92"/><text x="54.1512%" y="271.50"></text></g><g><title>core::char::methods::encode_utf8_raw (673 samples, 0.09%)</title><rect x="53.8214%" y="357" width="0.0928%" height="15" fill="rgb(208,77,27)" fg:x="390426" fg:w="673"/><text x="54.0714%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (286 samples, 0.04%)</title><rect x="53.8748%" y="341" width="0.0394%" height="15" fill="rgb(250,204,28)" fg:x="390813" fg:w="286"/><text x="54.1248%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (279 samples, 0.04%)</title><rect x="53.8757%" y="325" width="0.0385%" height="15" fill="rgb(244,63,21)" fg:x="390820" fg:w="279"/><text x="54.1257%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (265 samples, 0.04%)</title><rect x="53.8777%" y="309" width="0.0365%" height="15" fill="rgb(236,85,44)" fg:x="390834" fg:w="265"/><text x="54.1277%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (114 samples, 0.02%)</title><rect x="53.8985%" y="293" width="0.0157%" height="15" fill="rgb(215,98,4)" fg:x="390985" fg:w="114"/><text x="54.1485%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (94 samples, 0.01%)</title><rect x="53.9012%" y="277" width="0.0130%" height="15" fill="rgb(235,38,11)" fg:x="391005" fg:w="94"/><text x="54.1512%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (710 samples, 0.10%)</title><rect x="53.8165%" y="373" width="0.0979%" height="15" fill="rgb(254,186,25)" fg:x="390390" fg:w="710"/><text x="54.0665%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (942 samples, 0.13%)</title><rect x="53.7885%" y="389" width="0.1299%" height="15" fill="rgb(225,55,31)" fg:x="390187" fg:w="942"/><text x="54.0385%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (114 samples, 0.02%)</title><rect x="54.0483%" y="373" width="0.0157%" height="15" fill="rgb(211,15,21)" fg:x="392072" fg:w="114"/><text x="54.2983%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (320 samples, 0.04%)</title><rect x="54.0651%" y="373" width="0.0441%" height="15" fill="rgb(215,187,41)" fg:x="392194" fg:w="320"/><text x="54.3151%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (318 samples, 0.04%)</title><rect x="54.0654%" y="357" width="0.0438%" height="15" fill="rgb(248,69,32)" fg:x="392196" fg:w="318"/><text x="54.3154%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (272 samples, 0.04%)</title><rect x="54.0718%" y="341" width="0.0375%" height="15" fill="rgb(252,102,52)" fg:x="392242" fg:w="272"/><text x="54.3218%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (131 samples, 0.02%)</title><rect x="54.0912%" y="325" width="0.0181%" height="15" fill="rgb(253,140,32)" fg:x="392383" fg:w="131"/><text x="54.3412%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (106 samples, 0.01%)</title><rect x="54.0946%" y="309" width="0.0146%" height="15" fill="rgb(216,56,42)" fg:x="392408" fg:w="106"/><text x="54.3446%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (104 samples, 0.01%)</title><rect x="54.0949%" y="293" width="0.0143%" height="15" fill="rgb(216,184,14)" fg:x="392410" fg:w="104"/><text x="54.3449%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (185 samples, 0.03%)</title><rect x="54.1570%" y="325" width="0.0255%" height="15" fill="rgb(237,187,27)" fg:x="392860" fg:w="185"/><text x="54.4070%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (561 samples, 0.08%)</title><rect x="54.1093%" y="373" width="0.0773%" height="15" fill="rgb(219,65,3)" fg:x="392514" fg:w="561"/><text x="54.3593%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (502 samples, 0.07%)</title><rect x="54.1174%" y="357" width="0.0692%" height="15" fill="rgb(245,83,25)" fg:x="392573" fg:w="502"/><text x="54.3674%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (502 samples, 0.07%)</title><rect x="54.1174%" y="341" width="0.0692%" height="15" fill="rgb(214,205,45)" fg:x="392573" fg:w="502"/><text x="54.3674%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (808 samples, 0.11%)</title><rect x="54.1866%" y="373" width="0.1114%" height="15" fill="rgb(241,20,18)" fg:x="393075" fg:w="808"/><text x="54.4366%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (722 samples, 0.10%)</title><rect x="54.1985%" y="357" width="0.0995%" height="15" fill="rgb(232,163,23)" fg:x="393161" fg:w="722"/><text x="54.4485%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (287 samples, 0.04%)</title><rect x="54.2584%" y="341" width="0.0396%" height="15" fill="rgb(214,5,46)" fg:x="393596" fg:w="287"/><text x="54.5084%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (238 samples, 0.03%)</title><rect x="54.2652%" y="325" width="0.0328%" height="15" fill="rgb(229,78,17)" fg:x="393645" fg:w="238"/><text x="54.5152%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (232 samples, 0.03%)</title><rect x="54.2660%" y="309" width="0.0320%" height="15" fill="rgb(248,89,10)" fg:x="393651" fg:w="232"/><text x="54.5160%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned (124 samples, 0.02%)</title><rect x="54.3068%" y="357" width="0.0171%" height="15" fill="rgb(248,54,15)" fg:x="393947" fg:w="124"/><text x="54.5568%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (92 samples, 0.01%)</title><rect x="54.3112%" y="341" width="0.0127%" height="15" fill="rgb(223,116,6)" fg:x="393979" fg:w="92"/><text x="54.5612%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (1,860 samples, 0.26%)</title><rect x="54.3003%" y="373" width="0.2564%" height="15" fill="rgb(205,125,38)" fg:x="393900" fg:w="1860"/><text x="54.5503%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,689 samples, 0.23%)</title><rect x="54.3239%" y="357" width="0.2328%" height="15" fill="rgb(251,78,38)" fg:x="394071" fg:w="1689"/><text x="54.5739%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,613 samples, 0.64%)</title><rect x="53.9270%" y="389" width="0.6359%" height="15" fill="rgb(253,78,28)" fg:x="391192" fg:w="4613"/><text x="54.1770%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (210 samples, 0.03%)</title><rect x="54.5629%" y="373" width="0.0289%" height="15" fill="rgb(209,120,3)" fg:x="395805" fg:w="210"/><text x="54.8129%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (155 samples, 0.02%)</title><rect x="54.5705%" y="357" width="0.0214%" height="15" fill="rgb(238,229,9)" fg:x="395860" fg:w="155"/><text x="54.8205%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (113 samples, 0.02%)</title><rect x="54.5763%" y="341" width="0.0156%" height="15" fill="rgb(253,159,18)" fg:x="395902" fg:w="113"/><text x="54.8263%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (111 samples, 0.02%)</title><rect x="54.5766%" y="325" width="0.0153%" height="15" fill="rgb(244,42,34)" fg:x="395904" fg:w="111"/><text x="54.8266%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,325 samples, 0.87%)</title><rect x="53.7393%" y="405" width="0.8719%" height="15" fill="rgb(224,8,7)" fg:x="389830" fg:w="6325"/><text x="53.9893%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (350 samples, 0.05%)</title><rect x="54.5629%" y="389" width="0.0482%" height="15" fill="rgb(210,201,45)" fg:x="395805" fg:w="350"/><text x="54.8129%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (140 samples, 0.02%)</title><rect x="54.5919%" y="373" width="0.0193%" height="15" fill="rgb(252,185,21)" fg:x="396015" fg:w="140"/><text x="54.8419%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (140 samples, 0.02%)</title><rect x="54.5919%" y="357" width="0.0193%" height="15" fill="rgb(223,131,1)" fg:x="396015" fg:w="140"/><text x="54.8419%" y="367.50"></text></g><g><title>one_brc::round_towards_positive (606 samples, 0.08%)</title><rect x="54.6112%" y="405" width="0.0835%" height="15" fill="rgb(245,141,16)" fg:x="396155" fg:w="606"/><text x="54.8612%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (153 samples, 0.02%)</title><rect x="54.6736%" y="389" width="0.0211%" height="15" fill="rgb(229,55,45)" fg:x="396608" fg:w="153"/><text x="54.9236%" y="399.50"></text></g><g><title>__round (137 samples, 0.02%)</title><rect x="54.6758%" y="373" width="0.0189%" height="15" fill="rgb(208,92,15)" fg:x="396624" fg:w="137"/><text x="54.9258%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (82 samples, 0.01%)</title><rect x="54.7929%" y="357" width="0.0113%" height="15" fill="rgb(234,185,47)" fg:x="397473" fg:w="82"/><text x="55.0429%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (545 samples, 0.08%)</title><rect x="54.7500%" y="389" width="0.0751%" height="15" fill="rgb(253,104,50)" fg:x="397162" fg:w="545"/><text x="55.0000%" y="399.50"></text></g><g><title>one_brc::Measurement::record (458 samples, 0.06%)</title><rect x="54.7620%" y="373" width="0.0631%" height="15" fill="rgb(205,70,7)" fg:x="397249" fg:w="458"/><text x="55.0120%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (152 samples, 0.02%)</title><rect x="54.8042%" y="357" width="0.0210%" height="15" fill="rgb(240,178,43)" fg:x="397555" fg:w="152"/><text x="55.0542%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (82 samples, 0.01%)</title><rect x="54.8366%" y="325" width="0.0113%" height="15" fill="rgb(214,112,2)" fg:x="397790" fg:w="82"/><text x="55.0866%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (156 samples, 0.02%)</title><rect x="54.8297%" y="341" width="0.0215%" height="15" fill="rgb(206,46,17)" fg:x="397740" fg:w="156"/><text x="55.0797%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (175 samples, 0.02%)</title><rect x="54.8275%" y="357" width="0.0241%" height="15" fill="rgb(225,220,16)" fg:x="397724" fg:w="175"/><text x="55.0775%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,140 samples, 0.16%)</title><rect x="54.6947%" y="405" width="0.1572%" height="15" fill="rgb(238,65,40)" fg:x="396761" fg:w="1140"/><text x="54.9447%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (194 samples, 0.03%)</title><rect x="54.8251%" y="389" width="0.0267%" height="15" fill="rgb(230,151,21)" fg:x="397707" fg:w="194"/><text x="55.0751%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (192 samples, 0.03%)</title><rect x="54.8254%" y="373" width="0.0265%" height="15" fill="rgb(218,58,49)" fg:x="397709" fg:w="192"/><text x="55.0754%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (79 samples, 0.01%)</title><rect x="54.8919%" y="325" width="0.0109%" height="15" fill="rgb(219,179,14)" fg:x="398191" fg:w="79"/><text x="55.1419%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (123 samples, 0.02%)</title><rect x="54.8877%" y="341" width="0.0170%" height="15" fill="rgb(223,72,1)" fg:x="398161" fg:w="123"/><text x="55.1377%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (431 samples, 0.06%)</title><rect x="54.8519%" y="405" width="0.0594%" height="15" fill="rgb(238,126,10)" fg:x="397901" fg:w="431"/><text x="55.1019%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (257 samples, 0.04%)</title><rect x="54.8759%" y="389" width="0.0354%" height="15" fill="rgb(224,206,38)" fg:x="398075" fg:w="257"/><text x="55.1259%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (179 samples, 0.02%)</title><rect x="54.8866%" y="373" width="0.0247%" height="15" fill="rgb(212,201,54)" fg:x="398153" fg:w="179"/><text x="55.1366%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (176 samples, 0.02%)</title><rect x="54.8870%" y="357" width="0.0243%" height="15" fill="rgb(218,154,48)" fg:x="398156" fg:w="176"/><text x="55.1370%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (262 samples, 0.04%)</title><rect x="55.1062%" y="277" width="0.0361%" height="15" fill="rgb(232,93,24)" fg:x="399746" fg:w="262"/><text x="55.3562%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (792 samples, 0.11%)</title><rect x="55.0347%" y="293" width="0.1092%" height="15" fill="rgb(245,30,21)" fg:x="399227" fg:w="792"/><text x="55.2847%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (733 samples, 0.10%)</title><rect x="55.3521%" y="277" width="0.1010%" height="15" fill="rgb(242,148,29)" fg:x="401530" fg:w="733"/><text x="55.6021%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,377 samples, 0.47%)</title><rect x="54.9928%" y="309" width="0.4655%" height="15" fill="rgb(244,153,54)" fg:x="398923" fg:w="3377"/><text x="55.2428%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,281 samples, 0.31%)</title><rect x="55.1438%" y="293" width="0.3144%" height="15" fill="rgb(252,87,22)" fg:x="400019" fg:w="2281"/><text x="55.3938%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,408 samples, 0.47%)</title><rect x="54.9889%" y="341" width="0.4698%" height="15" fill="rgb(210,51,29)" fg:x="398895" fg:w="3408"/><text x="55.2389%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,380 samples, 0.47%)</title><rect x="54.9928%" y="325" width="0.4659%" height="15" fill="rgb(242,136,47)" fg:x="398923" fg:w="3380"/><text x="55.2428%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (349 samples, 0.05%)</title><rect x="55.4662%" y="325" width="0.0481%" height="15" fill="rgb(238,68,4)" fg:x="402357" fg:w="349"/><text x="55.7162%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (380 samples, 0.05%)</title><rect x="55.5147%" y="309" width="0.0524%" height="15" fill="rgb(242,161,30)" fg:x="402709" fg:w="380"/><text x="55.7647%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (410 samples, 0.06%)</title><rect x="55.5916%" y="293" width="0.0565%" height="15" fill="rgb(218,58,44)" fg:x="403267" fg:w="410"/><text x="55.8416%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (116 samples, 0.02%)</title><rect x="55.6481%" y="293" width="0.0160%" height="15" fill="rgb(252,125,32)" fg:x="403677" fg:w="116"/><text x="55.8981%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (732 samples, 0.10%)</title><rect x="55.5671%" y="309" width="0.1009%" height="15" fill="rgb(219,178,0)" fg:x="403089" fg:w="732"/><text x="55.8171%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,157 samples, 0.16%)</title><rect x="55.5143%" y="325" width="0.1595%" height="15" fill="rgb(213,152,7)" fg:x="402706" fg:w="1157"/><text x="55.7643%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,603 samples, 0.22%)</title><rect x="55.4587%" y="341" width="0.2210%" height="15" fill="rgb(249,109,34)" fg:x="402303" fg:w="1603"/><text x="55.7087%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (131 samples, 0.02%)</title><rect x="55.7930%" y="213" width="0.0181%" height="15" fill="rgb(232,96,21)" fg:x="404728" fg:w="131"/><text x="56.0430%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (399 samples, 0.06%)</title><rect x="55.7569%" y="229" width="0.0550%" height="15" fill="rgb(228,27,39)" fg:x="404466" fg:w="399"/><text x="56.0069%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (89 samples, 0.01%)</title><rect x="55.8687%" y="213" width="0.0123%" height="15" fill="rgb(211,182,52)" fg:x="405277" fg:w="89"/><text x="56.1187%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (562 samples, 0.08%)</title><rect x="55.8119%" y="229" width="0.0775%" height="15" fill="rgb(234,178,38)" fg:x="404865" fg:w="562"/><text x="56.0619%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,434 samples, 0.20%)</title><rect x="55.7024%" y="245" width="0.1977%" height="15" fill="rgb(221,111,3)" fg:x="404071" fg:w="1434"/><text x="55.9524%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (99 samples, 0.01%)</title><rect x="55.9627%" y="213" width="0.0136%" height="15" fill="rgb(228,175,21)" fg:x="405959" fg:w="99"/><text x="56.2127%" y="223.50"></text></g><g><title>core::cmp::min (411 samples, 0.06%)</title><rect x="55.9763%" y="213" width="0.0567%" height="15" fill="rgb(228,174,43)" fg:x="406058" fg:w="411"/><text x="56.2263%" y="223.50"></text></g><g><title>core::cmp::Ord::min (411 samples, 0.06%)</title><rect x="55.9763%" y="197" width="0.0567%" height="15" fill="rgb(211,191,0)" fg:x="406058" fg:w="411"/><text x="56.2263%" y="207.50"></text></g><g><title>core::cmp::min_by (398 samples, 0.05%)</title><rect x="55.9781%" y="181" width="0.0549%" height="15" fill="rgb(253,117,3)" fg:x="406071" fg:w="398"/><text x="56.2281%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (130 samples, 0.02%)</title><rect x="56.0151%" y="165" width="0.0179%" height="15" fill="rgb(241,127,19)" fg:x="406339" fg:w="130"/><text x="56.2651%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (92 samples, 0.01%)</title><rect x="56.0203%" y="149" width="0.0127%" height="15" fill="rgb(218,103,12)" fg:x="406377" fg:w="92"/><text x="56.2703%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (472 samples, 0.07%)</title><rect x="56.0330%" y="213" width="0.0651%" height="15" fill="rgb(236,214,43)" fg:x="406469" fg:w="472"/><text x="56.2830%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (8,230 samples, 1.13%)</title><rect x="54.9682%" y="373" width="1.1345%" height="15" fill="rgb(244,144,19)" fg:x="398745" fg:w="8230"/><text x="55.2182%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,185 samples, 1.13%)</title><rect x="54.9744%" y="357" width="1.1283%" height="15" fill="rgb(246,188,10)" fg:x="398790" fg:w="8185"/><text x="55.2244%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,069 samples, 0.42%)</title><rect x="55.6797%" y="341" width="0.4231%" height="15" fill="rgb(212,193,33)" fg:x="403906" fg:w="3069"/><text x="55.9297%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,048 samples, 0.42%)</title><rect x="55.6826%" y="325" width="0.4202%" height="15" fill="rgb(241,51,29)" fg:x="403927" fg:w="3048"/><text x="55.9326%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,981 samples, 0.41%)</title><rect x="55.6918%" y="309" width="0.4109%" height="15" fill="rgb(211,58,19)" fg:x="403994" fg:w="2981"/><text x="55.9418%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,933 samples, 0.40%)</title><rect x="55.6984%" y="293" width="0.4043%" height="15" fill="rgb(229,111,26)" fg:x="404042" fg:w="2933"/><text x="55.9484%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,909 samples, 0.40%)</title><rect x="55.7017%" y="277" width="0.4010%" height="15" fill="rgb(213,115,40)" fg:x="404066" fg:w="2909"/><text x="55.9517%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,909 samples, 0.40%)</title><rect x="55.7017%" y="261" width="0.4010%" height="15" fill="rgb(209,56,44)" fg:x="404066" fg:w="2909"/><text x="55.9517%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,470 samples, 0.20%)</title><rect x="55.9001%" y="245" width="0.2026%" height="15" fill="rgb(230,108,32)" fg:x="405505" fg:w="1470"/><text x="56.1501%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,432 samples, 0.20%)</title><rect x="55.9054%" y="229" width="0.1974%" height="15" fill="rgb(216,165,31)" fg:x="405543" fg:w="1432"/><text x="56.1554%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (111 samples, 0.02%)</title><rect x="56.1496%" y="325" width="0.0153%" height="15" fill="rgb(218,122,21)" fg:x="407315" fg:w="111"/><text x="56.3996%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (230 samples, 0.03%)</title><rect x="56.1334%" y="341" width="0.0317%" height="15" fill="rgb(223,224,47)" fg:x="407197" fg:w="230"/><text x="56.3834%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (366 samples, 0.05%)</title><rect x="56.1208%" y="357" width="0.0505%" height="15" fill="rgb(238,102,44)" fg:x="407106" fg:w="366"/><text x="56.3708%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (86 samples, 0.01%)</title><rect x="56.2412%" y="341" width="0.0119%" height="15" fill="rgb(236,46,40)" fg:x="407979" fg:w="86"/><text x="56.4912%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (167 samples, 0.02%)</title><rect x="56.3193%" y="309" width="0.0230%" height="15" fill="rgb(247,202,50)" fg:x="408546" fg:w="167"/><text x="56.5693%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (573 samples, 0.08%)</title><rect x="56.2860%" y="325" width="0.0790%" height="15" fill="rgb(209,99,20)" fg:x="408304" fg:w="573"/><text x="56.5360%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (164 samples, 0.02%)</title><rect x="56.3423%" y="309" width="0.0226%" height="15" fill="rgb(252,27,34)" fg:x="408713" fg:w="164"/><text x="56.5923%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (126 samples, 0.02%)</title><rect x="56.3476%" y="293" width="0.0174%" height="15" fill="rgb(215,206,23)" fg:x="408751" fg:w="126"/><text x="56.5976%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (827 samples, 0.11%)</title><rect x="56.2530%" y="341" width="0.1140%" height="15" fill="rgb(212,135,36)" fg:x="408065" fg:w="827"/><text x="56.5030%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (107 samples, 0.01%)</title><rect x="56.3898%" y="293" width="0.0148%" height="15" fill="rgb(240,189,1)" fg:x="409057" fg:w="107"/><text x="56.6398%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (165 samples, 0.02%)</title><rect x="56.3823%" y="309" width="0.0227%" height="15" fill="rgb(242,56,20)" fg:x="409003" fg:w="165"/><text x="56.6323%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (177 samples, 0.02%)</title><rect x="56.3814%" y="325" width="0.0244%" height="15" fill="rgb(247,132,33)" fg:x="408996" fg:w="177"/><text x="56.6314%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (100 samples, 0.01%)</title><rect x="56.4251%" y="293" width="0.0138%" height="15" fill="rgb(208,149,11)" fg:x="409313" fg:w="100"/><text x="56.6751%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (207 samples, 0.03%)</title><rect x="56.4104%" y="309" width="0.0285%" height="15" fill="rgb(211,33,11)" fg:x="409207" fg:w="207"/><text x="56.6604%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (265 samples, 0.04%)</title><rect x="56.4058%" y="325" width="0.0365%" height="15" fill="rgb(221,29,38)" fg:x="409173" fg:w="265"/><text x="56.6558%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (221 samples, 0.03%)</title><rect x="56.5238%" y="229" width="0.0305%" height="15" fill="rgb(206,182,49)" fg:x="410029" fg:w="221"/><text x="56.7738%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (544 samples, 0.07%)</title><rect x="56.4841%" y="277" width="0.0750%" height="15" fill="rgb(216,140,1)" fg:x="409741" fg:w="544"/><text x="56.7341%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (475 samples, 0.07%)</title><rect x="56.4936%" y="261" width="0.0655%" height="15" fill="rgb(232,57,40)" fg:x="409810" fg:w="475"/><text x="56.7436%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (475 samples, 0.07%)</title><rect x="56.4936%" y="245" width="0.0655%" height="15" fill="rgb(224,186,18)" fg:x="409810" fg:w="475"/><text x="56.7436%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,438 samples, 0.20%)</title><rect x="56.3695%" y="341" width="0.1982%" height="15" fill="rgb(215,121,11)" fg:x="408910" fg:w="1438"/><text x="56.6195%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (910 samples, 0.13%)</title><rect x="56.4423%" y="325" width="0.1254%" height="15" fill="rgb(245,147,10)" fg:x="409438" fg:w="910"/><text x="56.6923%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (852 samples, 0.12%)</title><rect x="56.4503%" y="309" width="0.1175%" height="15" fill="rgb(238,153,13)" fg:x="409496" fg:w="852"/><text x="56.7003%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (656 samples, 0.09%)</title><rect x="56.4773%" y="293" width="0.0904%" height="15" fill="rgb(233,108,0)" fg:x="409692" fg:w="656"/><text x="56.7273%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (712 samples, 0.10%)</title><rect x="56.5803%" y="341" width="0.0982%" height="15" fill="rgb(212,157,17)" fg:x="410439" fg:w="712"/><text x="56.8303%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (604 samples, 0.08%)</title><rect x="56.5952%" y="325" width="0.0833%" height="15" fill="rgb(225,213,38)" fg:x="410547" fg:w="604"/><text x="56.8452%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (145 samples, 0.02%)</title><rect x="56.6584%" y="309" width="0.0200%" height="15" fill="rgb(248,16,11)" fg:x="411006" fg:w="145"/><text x="56.9084%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (394 samples, 0.05%)</title><rect x="56.7067%" y="325" width="0.0543%" height="15" fill="rgb(241,33,4)" fg:x="411356" fg:w="394"/><text x="56.9567%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (151 samples, 0.02%)</title><rect x="56.7402%" y="309" width="0.0208%" height="15" fill="rgb(222,26,43)" fg:x="411599" fg:w="151"/><text x="56.9902%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (116 samples, 0.02%)</title><rect x="56.8352%" y="309" width="0.0160%" height="15" fill="rgb(243,29,36)" fg:x="412288" fg:w="116"/><text x="57.0852%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (722 samples, 0.10%)</title><rect x="56.7610%" y="325" width="0.0995%" height="15" fill="rgb(241,9,27)" fg:x="411750" fg:w="722"/><text x="57.0110%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,062 samples, 0.28%)</title><rect x="56.6784%" y="341" width="0.2843%" height="15" fill="rgb(205,117,26)" fg:x="411151" fg:w="2062"/><text x="56.9284%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (741 samples, 0.10%)</title><rect x="56.8605%" y="325" width="0.1021%" height="15" fill="rgb(209,80,39)" fg:x="412472" fg:w="741"/><text x="57.1105%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (618 samples, 0.09%)</title><rect x="56.8775%" y="309" width="0.0852%" height="15" fill="rgb(239,155,6)" fg:x="412595" fg:w="618"/><text x="57.1275%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (179 samples, 0.02%)</title><rect x="56.9380%" y="293" width="0.0247%" height="15" fill="rgb(212,104,12)" fg:x="413034" fg:w="179"/><text x="57.1880%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (14,870 samples, 2.05%)</title><rect x="54.9168%" y="389" width="2.0499%" height="15" fill="rgb(234,204,3)" fg:x="398372" fg:w="14870"/><text x="55.1668%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,267 samples, 0.86%)</title><rect x="56.1028%" y="373" width="0.8639%" height="15" fill="rgb(251,218,7)" fg:x="406975" fg:w="6267"/><text x="56.3528%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,729 samples, 0.79%)</title><rect x="56.1769%" y="357" width="0.7898%" height="15" fill="rgb(221,81,32)" fg:x="407513" fg:w="5729"/><text x="56.4269%" y="367.50"></text></g><g><title>__clone3 (36,375 samples, 5.01%)</title><rect x="51.9787%" y="629" width="5.0144%" height="15" fill="rgb(214,152,26)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="639.50">__clon..</text></g><g><title>start_thread (36,375 samples, 5.01%)</title><rect x="51.9787%" y="613" width="5.0144%" height="15" fill="rgb(223,22,3)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="623.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36,375 samples, 5.01%)</title><rect x="51.9787%" y="597" width="5.0144%" height="15" fill="rgb(207,174,7)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="607.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (36,375 samples, 5.01%)</title><rect x="51.9787%" y="581" width="5.0144%" height="15" fill="rgb(224,19,52)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="591.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (36,375 samples, 5.01%)</title><rect x="51.9787%" y="565" width="5.0144%" height="15" fill="rgb(228,24,14)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="575.50">std::t..</text></g><g><title>std::panic::catch_unwind (36,375 samples, 5.01%)</title><rect x="51.9787%" y="549" width="5.0144%" height="15" fill="rgb(230,153,43)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="559.50">std::p..</text></g><g><title>std::panicking::try (36,375 samples, 5.01%)</title><rect x="51.9787%" y="533" width="5.0144%" height="15" fill="rgb(231,106,12)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="543.50">std::p..</text></g><g><title>__rust_try (36,375 samples, 5.01%)</title><rect x="51.9787%" y="517" width="5.0144%" height="15" fill="rgb(215,92,2)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="527.50">__rust..</text></g><g><title>std::panicking::try::do_call (36,375 samples, 5.01%)</title><rect x="51.9787%" y="501" width="5.0144%" height="15" fill="rgb(249,143,25)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="511.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36,375 samples, 5.01%)</title><rect x="51.9787%" y="485" width="5.0144%" height="15" fill="rgb(252,7,35)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="495.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (36,375 samples, 5.01%)</title><rect x="51.9787%" y="469" width="5.0144%" height="15" fill="rgb(216,69,40)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="479.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (36,375 samples, 5.01%)</title><rect x="51.9787%" y="453" width="5.0144%" height="15" fill="rgb(240,36,33)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="463.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (36,375 samples, 5.01%)</title><rect x="51.9787%" y="437" width="5.0144%" height="15" fill="rgb(231,128,14)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="447.50">one_br..</text></g><g><title>one_brc::process_lines (36,375 samples, 5.01%)</title><rect x="51.9787%" y="421" width="5.0144%" height="15" fill="rgb(245,143,14)" fg:x="377059" fg:w="36375"/><text x="52.2287%" y="431.50">one_br..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (15,102 samples, 2.08%)</title><rect x="54.9113%" y="405" width="2.0819%" height="15" fill="rgb(222,130,28)" fg:x="398332" fg:w="15102"/><text x="55.1613%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (172 samples, 0.02%)</title><rect x="56.9694%" y="389" width="0.0237%" height="15" fill="rgb(212,10,48)" fg:x="413262" fg:w="172"/><text x="57.2194%" y="399.50"></text></g><g><title>worker-2 (42,118 samples, 5.81%)</title><rect x="51.1959%" y="645" width="5.8061%" height="15" fill="rgb(254,118,45)" fg:x="371380" fg:w="42118"/><text x="51.4459%" y="655.50">worker-2</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (182 samples, 0.03%)</title><rect x="57.0087%" y="629" width="0.0251%" height="15" fill="rgb(228,6,45)" fg:x="413547" fg:w="182"/><text x="57.2587%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (77 samples, 0.01%)</title><rect x="57.0378%" y="613" width="0.0106%" height="15" fill="rgb(241,18,35)" fg:x="413758" fg:w="77"/><text x="57.2878%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (77 samples, 0.01%)</title><rect x="57.0378%" y="597" width="0.0106%" height="15" fill="rgb(227,214,53)" fg:x="413758" fg:w="77"/><text x="57.2878%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (93 samples, 0.01%)</title><rect x="57.0484%" y="613" width="0.0128%" height="15" fill="rgb(224,107,51)" fg:x="413835" fg:w="93"/><text x="57.2984%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (143 samples, 0.02%)</title><rect x="57.1289%" y="613" width="0.0197%" height="15" fill="rgb(248,60,28)" fg:x="414419" fg:w="143"/><text x="57.3789%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (132 samples, 0.02%)</title><rect x="57.1612%" y="613" width="0.0182%" height="15" fill="rgb(249,101,23)" fg:x="414653" fg:w="132"/><text x="57.4112%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (77 samples, 0.01%)</title><rect x="57.1688%" y="597" width="0.0106%" height="15" fill="rgb(228,51,19)" fg:x="414708" fg:w="77"/><text x="57.4188%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (80 samples, 0.01%)</title><rect x="57.1794%" y="613" width="0.0110%" height="15" fill="rgb(213,20,6)" fg:x="414785" fg:w="80"/><text x="57.4294%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 0.01%)</title><rect x="57.2083%" y="613" width="0.0109%" height="15" fill="rgb(212,124,10)" fg:x="414995" fg:w="79"/><text x="57.4583%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (78 samples, 0.01%)</title><rect x="57.2243%" y="613" width="0.0108%" height="15" fill="rgb(248,3,40)" fg:x="415111" fg:w="78"/><text x="57.4743%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (77 samples, 0.01%)</title><rect x="57.2471%" y="613" width="0.0106%" height="15" fill="rgb(223,178,23)" fg:x="415276" fg:w="77"/><text x="57.4971%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (87 samples, 0.01%)</title><rect x="57.2671%" y="613" width="0.0120%" height="15" fill="rgb(240,132,45)" fg:x="415421" fg:w="87"/><text x="57.5171%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (93 samples, 0.01%)</title><rect x="57.2791%" y="613" width="0.0128%" height="15" fill="rgb(245,164,36)" fg:x="415508" fg:w="93"/><text x="57.5291%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (104 samples, 0.01%)</title><rect x="57.3018%" y="613" width="0.0143%" height="15" fill="rgb(231,188,53)" fg:x="415673" fg:w="104"/><text x="57.5518%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (82 samples, 0.01%)</title><rect x="57.3255%" y="613" width="0.0113%" height="15" fill="rgb(237,198,39)" fg:x="415845" fg:w="82"/><text x="57.5755%" y="623.50"></text></g><g><title>[anon] (2,440 samples, 0.34%)</title><rect x="57.0378%" y="629" width="0.3364%" height="15" fill="rgb(223,120,35)" fg:x="413758" fg:w="2440"/><text x="57.2878%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (165 samples, 0.02%)</title><rect x="57.3811%" y="613" width="0.0227%" height="15" fill="rgb(253,107,49)" fg:x="416248" fg:w="165"/><text x="57.6311%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (111 samples, 0.02%)</title><rect x="57.4162%" y="613" width="0.0153%" height="15" fill="rgb(216,44,31)" fg:x="416503" fg:w="111"/><text x="57.6662%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (73 samples, 0.01%)</title><rect x="57.4412%" y="613" width="0.0101%" height="15" fill="rgb(253,87,21)" fg:x="416684" fg:w="73"/><text x="57.6912%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (206 samples, 0.03%)</title><rect x="57.4616%" y="613" width="0.0284%" height="15" fill="rgb(226,18,2)" fg:x="416832" fg:w="206"/><text x="57.7116%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (206 samples, 0.03%)</title><rect x="57.4616%" y="597" width="0.0284%" height="15" fill="rgb(216,8,46)" fg:x="416832" fg:w="206"/><text x="57.7116%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (206 samples, 0.03%)</title><rect x="57.4616%" y="581" width="0.0284%" height="15" fill="rgb(226,140,39)" fg:x="416832" fg:w="206"/><text x="57.7116%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (98 samples, 0.01%)</title><rect x="57.4765%" y="565" width="0.0135%" height="15" fill="rgb(221,194,54)" fg:x="416940" fg:w="98"/><text x="57.7265%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (83 samples, 0.01%)</title><rect x="57.5148%" y="613" width="0.0114%" height="15" fill="rgb(213,92,11)" fg:x="417218" fg:w="83"/><text x="57.7648%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (124 samples, 0.02%)</title><rect x="57.5269%" y="613" width="0.0171%" height="15" fill="rgb(229,162,46)" fg:x="417306" fg:w="124"/><text x="57.7769%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (138 samples, 0.02%)</title><rect x="57.5640%" y="613" width="0.0190%" height="15" fill="rgb(214,111,36)" fg:x="417575" fg:w="138"/><text x="57.8140%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (107 samples, 0.01%)</title><rect x="57.5935%" y="613" width="0.0148%" height="15" fill="rgb(207,6,21)" fg:x="417789" fg:w="107"/><text x="57.8435%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (76 samples, 0.01%)</title><rect x="57.6241%" y="613" width="0.0105%" height="15" fill="rgb(213,127,38)" fg:x="418011" fg:w="76"/><text x="57.8741%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (89 samples, 0.01%)</title><rect x="57.6386%" y="613" width="0.0123%" height="15" fill="rgb(238,118,32)" fg:x="418116" fg:w="89"/><text x="57.8886%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (106 samples, 0.01%)</title><rect x="57.6650%" y="613" width="0.0146%" height="15" fill="rgb(240,139,39)" fg:x="418308" fg:w="106"/><text x="57.9150%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (175 samples, 0.02%)</title><rect x="57.6797%" y="613" width="0.0241%" height="15" fill="rgb(235,10,37)" fg:x="418414" fg:w="175"/><text x="57.9297%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (147 samples, 0.02%)</title><rect x="57.6835%" y="597" width="0.0203%" height="15" fill="rgb(249,171,38)" fg:x="418442" fg:w="147"/><text x="57.9335%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (92 samples, 0.01%)</title><rect x="57.6911%" y="581" width="0.0127%" height="15" fill="rgb(242,144,32)" fg:x="418497" fg:w="92"/><text x="57.9411%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (116 samples, 0.02%)</title><rect x="57.7038%" y="613" width="0.0160%" height="15" fill="rgb(217,117,21)" fg:x="418589" fg:w="116"/><text x="57.9538%" y="623.50"></text></g><g><title>one_brc::process_lines (260 samples, 0.04%)</title><rect x="57.7308%" y="613" width="0.0358%" height="15" fill="rgb(249,87,1)" fg:x="418785" fg:w="260"/><text x="57.9808%" y="623.50"></text></g><g><title>[unknown] (3,085 samples, 0.43%)</title><rect x="57.3742%" y="629" width="0.4253%" height="15" fill="rgb(248,196,48)" fg:x="416198" fg:w="3085"/><text x="57.6242%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (140 samples, 0.02%)</title><rect x="58.0979%" y="325" width="0.0193%" height="15" fill="rgb(251,206,33)" fg:x="421448" fg:w="140"/><text x="58.3479%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (180 samples, 0.02%)</title><rect x="58.1455%" y="277" width="0.0248%" height="15" fill="rgb(232,141,28)" fg:x="421793" fg:w="180"/><text x="58.3955%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (147 samples, 0.02%)</title><rect x="58.1500%" y="261" width="0.0203%" height="15" fill="rgb(209,167,14)" fg:x="421826" fg:w="147"/><text x="58.4000%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (143 samples, 0.02%)</title><rect x="58.1506%" y="245" width="0.0197%" height="15" fill="rgb(225,11,50)" fg:x="421830" fg:w="143"/><text x="58.4006%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (385 samples, 0.05%)</title><rect x="58.1173%" y="325" width="0.0531%" height="15" fill="rgb(209,50,20)" fg:x="421589" fg:w="385"/><text x="58.3673%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (383 samples, 0.05%)</title><rect x="58.1176%" y="309" width="0.0528%" height="15" fill="rgb(212,17,46)" fg:x="421591" fg:w="383"/><text x="58.3676%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (351 samples, 0.05%)</title><rect x="58.1220%" y="293" width="0.0484%" height="15" fill="rgb(216,101,39)" fg:x="421623" fg:w="351"/><text x="58.3720%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (252 samples, 0.03%)</title><rect x="58.2086%" y="277" width="0.0347%" height="15" fill="rgb(212,228,48)" fg:x="422251" fg:w="252"/><text x="58.4586%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (565 samples, 0.08%)</title><rect x="58.1704%" y="325" width="0.0779%" height="15" fill="rgb(250,6,50)" fg:x="421974" fg:w="565"/><text x="58.4204%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (506 samples, 0.07%)</title><rect x="58.1785%" y="309" width="0.0698%" height="15" fill="rgb(250,160,48)" fg:x="422033" fg:w="506"/><text x="58.4285%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (506 samples, 0.07%)</title><rect x="58.1785%" y="293" width="0.0698%" height="15" fill="rgb(244,216,33)" fg:x="422033" fg:w="506"/><text x="58.4285%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (328 samples, 0.05%)</title><rect x="58.3197%" y="293" width="0.0452%" height="15" fill="rgb(207,157,5)" fg:x="423057" fg:w="328"/><text x="58.5697%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (277 samples, 0.04%)</title><rect x="58.3267%" y="277" width="0.0382%" height="15" fill="rgb(228,199,8)" fg:x="423108" fg:w="277"/><text x="58.5767%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (268 samples, 0.04%)</title><rect x="58.3280%" y="261" width="0.0369%" height="15" fill="rgb(227,80,20)" fg:x="423117" fg:w="268"/><text x="58.5780%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (847 samples, 0.12%)</title><rect x="58.2483%" y="325" width="0.1168%" height="15" fill="rgb(222,9,33)" fg:x="422539" fg:w="847"/><text x="58.4983%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (741 samples, 0.10%)</title><rect x="58.2629%" y="309" width="0.1021%" height="15" fill="rgb(239,44,28)" fg:x="422645" fg:w="741"/><text x="58.5129%" y="319.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (78 samples, 0.01%)</title><rect x="58.4697%" y="293" width="0.0108%" height="15" fill="rgb(249,187,43)" fg:x="424145" fg:w="78"/><text x="58.7197%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,512 samples, 0.21%)</title><rect x="58.3681%" y="325" width="0.2084%" height="15" fill="rgb(216,141,28)" fg:x="423408" fg:w="1512"/><text x="58.6181%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,385 samples, 0.19%)</title><rect x="58.3856%" y="309" width="0.1909%" height="15" fill="rgb(230,154,53)" fg:x="423535" fg:w="1385"/><text x="58.6356%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (694 samples, 0.10%)</title><rect x="58.4809%" y="293" width="0.0957%" height="15" fill="rgb(227,82,4)" fg:x="424226" fg:w="694"/><text x="58.7309%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,541 samples, 0.63%)</title><rect x="57.9570%" y="341" width="0.6260%" height="15" fill="rgb(220,107,16)" fg:x="420426" fg:w="4541"/><text x="58.2070%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,036 samples, 0.69%)</title><rect x="57.9082%" y="373" width="0.6942%" height="15" fill="rgb(207,187,2)" fg:x="420072" fg:w="5036"/><text x="58.1582%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,030 samples, 0.69%)</title><rect x="57.9090%" y="357" width="0.6934%" height="15" fill="rgb(210,162,52)" fg:x="420078" fg:w="5030"/><text x="58.1590%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (140 samples, 0.02%)</title><rect x="58.5831%" y="341" width="0.0193%" height="15" fill="rgb(217,216,49)" fg:x="424968" fg:w="140"/><text x="58.8331%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (140 samples, 0.02%)</title><rect x="58.5831%" y="325" width="0.0193%" height="15" fill="rgb(218,146,49)" fg:x="424968" fg:w="140"/><text x="58.8331%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (95 samples, 0.01%)</title><rect x="58.5893%" y="309" width="0.0131%" height="15" fill="rgb(216,55,40)" fg:x="425013" fg:w="95"/><text x="58.8393%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (420 samples, 0.06%)</title><rect x="58.9265%" y="181" width="0.0579%" height="15" fill="rgb(208,196,21)" fg:x="427459" fg:w="420"/><text x="59.1765%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,201 samples, 0.17%)</title><rect x="58.8296%" y="229" width="0.1656%" height="15" fill="rgb(242,117,42)" fg:x="426756" fg:w="1201"/><text x="59.0796%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,017 samples, 0.14%)</title><rect x="58.8550%" y="213" width="0.1402%" height="15" fill="rgb(210,11,23)" fg:x="426940" fg:w="1017"/><text x="59.1050%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (971 samples, 0.13%)</title><rect x="58.8613%" y="197" width="0.1339%" height="15" fill="rgb(217,110,2)" fg:x="426986" fg:w="971"/><text x="59.1113%" y="207.50"></text></g><g><title>core::mem::size_of_val (78 samples, 0.01%)</title><rect x="58.9844%" y="181" width="0.0108%" height="15" fill="rgb(229,77,54)" fg:x="427879" fg:w="78"/><text x="59.2344%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (322 samples, 0.04%)</title><rect x="59.0002%" y="181" width="0.0444%" height="15" fill="rgb(218,53,16)" fg:x="427993" fg:w="322"/><text x="59.2502%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (228 samples, 0.03%)</title><rect x="59.0131%" y="165" width="0.0314%" height="15" fill="rgb(215,38,13)" fg:x="428087" fg:w="228"/><text x="59.2631%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (212 samples, 0.03%)</title><rect x="59.0153%" y="149" width="0.0292%" height="15" fill="rgb(235,42,18)" fg:x="428103" fg:w="212"/><text x="59.2653%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,334 samples, 0.32%)</title><rect x="58.7369%" y="261" width="0.3217%" height="15" fill="rgb(219,66,54)" fg:x="426083" fg:w="2334"/><text x="58.9869%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,334 samples, 0.32%)</title><rect x="58.7369%" y="245" width="0.3217%" height="15" fill="rgb(222,205,4)" fg:x="426083" fg:w="2334"/><text x="58.9869%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (460 samples, 0.06%)</title><rect x="58.9952%" y="229" width="0.0634%" height="15" fill="rgb(227,213,46)" fg:x="427957" fg:w="460"/><text x="59.2452%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (460 samples, 0.06%)</title><rect x="58.9952%" y="213" width="0.0634%" height="15" fill="rgb(250,145,42)" fg:x="427957" fg:w="460"/><text x="59.2452%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (424 samples, 0.06%)</title><rect x="59.0002%" y="197" width="0.0584%" height="15" fill="rgb(219,15,2)" fg:x="427993" fg:w="424"/><text x="59.2502%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (102 samples, 0.01%)</title><rect x="59.0445%" y="181" width="0.0141%" height="15" fill="rgb(231,181,52)" fg:x="428315" fg:w="102"/><text x="59.2945%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (102 samples, 0.01%)</title><rect x="59.0445%" y="165" width="0.0141%" height="15" fill="rgb(235,1,42)" fg:x="428315" fg:w="102"/><text x="59.2945%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (2,834 samples, 0.39%)</title><rect x="58.6995%" y="277" width="0.3907%" height="15" fill="rgb(249,88,27)" fg:x="425812" fg:w="2834"/><text x="58.9495%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (229 samples, 0.03%)</title><rect x="59.0586%" y="261" width="0.0316%" height="15" fill="rgb(235,145,16)" fg:x="428417" fg:w="229"/><text x="59.3086%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (229 samples, 0.03%)</title><rect x="59.0586%" y="245" width="0.0316%" height="15" fill="rgb(237,114,19)" fg:x="428417" fg:w="229"/><text x="59.3086%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (229 samples, 0.03%)</title><rect x="59.0586%" y="229" width="0.0316%" height="15" fill="rgb(238,51,50)" fg:x="428417" fg:w="229"/><text x="59.3086%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (105 samples, 0.01%)</title><rect x="59.1752%" y="245" width="0.0145%" height="15" fill="rgb(205,194,25)" fg:x="429263" fg:w="105"/><text x="59.4252%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (234 samples, 0.03%)</title><rect x="59.2595%" y="165" width="0.0323%" height="15" fill="rgb(215,203,17)" fg:x="429874" fg:w="234"/><text x="59.5095%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (303 samples, 0.04%)</title><rect x="59.2510%" y="197" width="0.0418%" height="15" fill="rgb(233,112,49)" fg:x="429813" fg:w="303"/><text x="59.5010%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (242 samples, 0.03%)</title><rect x="59.2595%" y="181" width="0.0334%" height="15" fill="rgb(241,130,26)" fg:x="429874" fg:w="242"/><text x="59.5095%" y="191.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (10,150 samples, 1.40%)</title><rect x="57.8937%" y="405" width="1.3992%" height="15" fill="rgb(252,223,19)" fg:x="419967" fg:w="10150"/><text x="58.1437%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,149 samples, 1.40%)</title><rect x="57.8939%" y="389" width="1.3991%" height="15" fill="rgb(211,95,25)" fg:x="419968" fg:w="10149"/><text x="58.1439%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,009 samples, 0.69%)</title><rect x="58.6024%" y="373" width="0.6905%" height="15" fill="rgb(251,182,27)" fg:x="425108" fg:w="5009"/><text x="58.8524%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,843 samples, 0.67%)</title><rect x="58.6253%" y="357" width="0.6676%" height="15" fill="rgb(238,24,4)" fg:x="425274" fg:w="4843"/><text x="58.8753%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4,801 samples, 0.66%)</title><rect x="58.6311%" y="341" width="0.6618%" height="15" fill="rgb(224,220,25)" fg:x="425316" fg:w="4801"/><text x="58.8811%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,685 samples, 0.65%)</title><rect x="58.6471%" y="325" width="0.6458%" height="15" fill="rgb(239,133,26)" fg:x="425432" fg:w="4685"/><text x="58.8971%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,410 samples, 0.61%)</title><rect x="58.6850%" y="309" width="0.6079%" height="15" fill="rgb(211,94,48)" fg:x="425707" fg:w="4410"/><text x="58.9350%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,409 samples, 0.61%)</title><rect x="58.6852%" y="293" width="0.6078%" height="15" fill="rgb(239,87,6)" fg:x="425708" fg:w="4409"/><text x="58.9352%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,471 samples, 0.20%)</title><rect x="59.0902%" y="277" width="0.2028%" height="15" fill="rgb(227,62,0)" fg:x="428646" fg:w="1471"/><text x="59.3402%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,399 samples, 0.19%)</title><rect x="59.1001%" y="261" width="0.1929%" height="15" fill="rgb(211,226,4)" fg:x="428718" fg:w="1399"/><text x="59.3501%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (749 samples, 0.10%)</title><rect x="59.1897%" y="245" width="0.1033%" height="15" fill="rgb(253,38,52)" fg:x="429368" fg:w="749"/><text x="59.4397%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (743 samples, 0.10%)</title><rect x="59.1905%" y="229" width="0.1024%" height="15" fill="rgb(229,126,40)" fg:x="429374" fg:w="743"/><text x="59.4405%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (669 samples, 0.09%)</title><rect x="59.2007%" y="213" width="0.0922%" height="15" fill="rgb(229,165,44)" fg:x="429448" fg:w="669"/><text x="59.4507%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (330 samples, 0.05%)</title><rect x="59.2932%" y="405" width="0.0455%" height="15" fill="rgb(247,95,47)" fg:x="430119" fg:w="330"/><text x="59.5432%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (194 samples, 0.03%)</title><rect x="59.3387%" y="405" width="0.0267%" height="15" fill="rgb(216,140,30)" fg:x="430449" fg:w="194"/><text x="59.5887%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (173 samples, 0.02%)</title><rect x="59.3981%" y="341" width="0.0238%" height="15" fill="rgb(246,214,8)" fg:x="430880" fg:w="173"/><text x="59.6481%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (208 samples, 0.03%)</title><rect x="59.4220%" y="341" width="0.0287%" height="15" fill="rgb(227,224,15)" fg:x="431053" fg:w="208"/><text x="59.6720%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (449 samples, 0.06%)</title><rect x="59.3932%" y="357" width="0.0619%" height="15" fill="rgb(233,175,4)" fg:x="430844" fg:w="449"/><text x="59.6432%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (125 samples, 0.02%)</title><rect x="59.4684%" y="341" width="0.0172%" height="15" fill="rgb(221,66,45)" fg:x="431390" fg:w="125"/><text x="59.7184%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (271 samples, 0.04%)</title><rect x="59.5088%" y="309" width="0.0374%" height="15" fill="rgb(221,178,18)" fg:x="431683" fg:w="271"/><text x="59.7588%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (344 samples, 0.05%)</title><rect x="59.4992%" y="325" width="0.0474%" height="15" fill="rgb(213,81,29)" fg:x="431613" fg:w="344"/><text x="59.7492%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (671 samples, 0.09%)</title><rect x="59.4551%" y="357" width="0.0925%" height="15" fill="rgb(220,89,49)" fg:x="431293" fg:w="671"/><text x="59.7051%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (449 samples, 0.06%)</title><rect x="59.4857%" y="341" width="0.0619%" height="15" fill="rgb(227,60,33)" fg:x="431515" fg:w="449"/><text x="59.7357%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,323 samples, 0.18%)</title><rect x="59.3655%" y="405" width="0.1824%" height="15" fill="rgb(205,113,12)" fg:x="430643" fg:w="1323"/><text x="59.6155%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,296 samples, 0.18%)</title><rect x="59.3692%" y="389" width="0.1787%" height="15" fill="rgb(211,32,1)" fg:x="430670" fg:w="1296"/><text x="59.6192%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,267 samples, 0.17%)</title><rect x="59.3732%" y="373" width="0.1747%" height="15" fill="rgb(246,2,12)" fg:x="430699" fg:w="1267"/><text x="59.6232%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (81 samples, 0.01%)</title><rect x="59.7152%" y="261" width="0.0112%" height="15" fill="rgb(243,37,27)" fg:x="433180" fg:w="81"/><text x="59.9652%" y="271.50"></text></g><g><title>core::char::methods::encode_utf8_raw (669 samples, 0.09%)</title><rect x="59.6343%" y="357" width="0.0922%" height="15" fill="rgb(248,211,31)" fg:x="432593" fg:w="669"/><text x="59.8843%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (291 samples, 0.04%)</title><rect x="59.6864%" y="341" width="0.0401%" height="15" fill="rgb(242,146,47)" fg:x="432971" fg:w="291"/><text x="59.9364%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (280 samples, 0.04%)</title><rect x="59.6879%" y="325" width="0.0386%" height="15" fill="rgb(206,70,20)" fg:x="432982" fg:w="280"/><text x="59.9379%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (247 samples, 0.03%)</title><rect x="59.6924%" y="309" width="0.0340%" height="15" fill="rgb(215,10,51)" fg:x="433015" fg:w="247"/><text x="59.9424%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (110 samples, 0.02%)</title><rect x="59.7113%" y="293" width="0.0152%" height="15" fill="rgb(243,178,53)" fg:x="433152" fg:w="110"/><text x="59.9613%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (82 samples, 0.01%)</title><rect x="59.7152%" y="277" width="0.0113%" height="15" fill="rgb(233,221,20)" fg:x="433180" fg:w="82"/><text x="59.9652%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (721 samples, 0.10%)</title><rect x="59.6274%" y="373" width="0.0994%" height="15" fill="rgb(218,95,35)" fg:x="432543" fg:w="721"/><text x="59.8774%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (969 samples, 0.13%)</title><rect x="59.5962%" y="389" width="0.1336%" height="15" fill="rgb(229,13,5)" fg:x="432317" fg:w="969"/><text x="59.8462%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (135 samples, 0.02%)</title><rect x="59.8569%" y="373" width="0.0186%" height="15" fill="rgb(252,164,30)" fg:x="434208" fg:w="135"/><text x="60.1069%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (318 samples, 0.04%)</title><rect x="59.8766%" y="373" width="0.0438%" height="15" fill="rgb(232,68,36)" fg:x="434351" fg:w="318"/><text x="60.1266%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (318 samples, 0.04%)</title><rect x="59.8766%" y="357" width="0.0438%" height="15" fill="rgb(219,59,54)" fg:x="434351" fg:w="318"/><text x="60.1266%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (289 samples, 0.04%)</title><rect x="59.8806%" y="341" width="0.0398%" height="15" fill="rgb(250,92,33)" fg:x="434380" fg:w="289"/><text x="60.1306%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (146 samples, 0.02%)</title><rect x="59.9003%" y="325" width="0.0201%" height="15" fill="rgb(229,162,54)" fg:x="434523" fg:w="146"/><text x="60.1503%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (119 samples, 0.02%)</title><rect x="59.9041%" y="309" width="0.0164%" height="15" fill="rgb(244,114,52)" fg:x="434550" fg:w="119"/><text x="60.1541%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (117 samples, 0.02%)</title><rect x="59.9043%" y="293" width="0.0161%" height="15" fill="rgb(212,211,43)" fg:x="434552" fg:w="117"/><text x="60.1543%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (164 samples, 0.02%)</title><rect x="59.9660%" y="325" width="0.0226%" height="15" fill="rgb(226,147,8)" fg:x="434999" fg:w="164"/><text x="60.2160%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (533 samples, 0.07%)</title><rect x="59.9205%" y="373" width="0.0735%" height="15" fill="rgb(226,23,13)" fg:x="434669" fg:w="533"/><text x="60.1705%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (476 samples, 0.07%)</title><rect x="59.9283%" y="357" width="0.0656%" height="15" fill="rgb(240,63,4)" fg:x="434726" fg:w="476"/><text x="60.1783%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (476 samples, 0.07%)</title><rect x="59.9283%" y="341" width="0.0656%" height="15" fill="rgb(221,1,32)" fg:x="434726" fg:w="476"/><text x="60.1783%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (292 samples, 0.04%)</title><rect x="60.0583%" y="341" width="0.0403%" height="15" fill="rgb(242,117,10)" fg:x="435669" fg:w="292"/><text x="60.3083%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (238 samples, 0.03%)</title><rect x="60.0658%" y="325" width="0.0328%" height="15" fill="rgb(249,172,44)" fg:x="435723" fg:w="238"/><text x="60.3158%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (234 samples, 0.03%)</title><rect x="60.0663%" y="309" width="0.0323%" height="15" fill="rgb(244,46,45)" fg:x="435727" fg:w="234"/><text x="60.3163%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (760 samples, 0.10%)</title><rect x="59.9939%" y="373" width="0.1048%" height="15" fill="rgb(206,43,17)" fg:x="435202" fg:w="760"/><text x="60.2439%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (681 samples, 0.09%)</title><rect x="60.0048%" y="357" width="0.0939%" height="15" fill="rgb(239,218,39)" fg:x="435281" fg:w="681"/><text x="60.2548%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_aligned (119 samples, 0.02%)</title><rect x="60.1095%" y="357" width="0.0164%" height="15" fill="rgb(208,169,54)" fg:x="436040" fg:w="119"/><text x="60.3595%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (81 samples, 0.01%)</title><rect x="60.1147%" y="341" width="0.0112%" height="15" fill="rgb(247,25,42)" fg:x="436078" fg:w="81"/><text x="60.3647%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (1,895 samples, 0.26%)</title><rect x="60.1019%" y="373" width="0.2612%" height="15" fill="rgb(226,23,31)" fg:x="435985" fg:w="1895"/><text x="60.3519%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,721 samples, 0.24%)</title><rect x="60.1259%" y="357" width="0.2372%" height="15" fill="rgb(247,16,28)" fg:x="436159" fg:w="1721"/><text x="60.3759%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,584 samples, 0.63%)</title><rect x="59.7368%" y="389" width="0.6319%" height="15" fill="rgb(231,147,38)" fg:x="433337" fg:w="4584"/><text x="59.9868%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (206 samples, 0.03%)</title><rect x="60.3689%" y="373" width="0.0284%" height="15" fill="rgb(253,81,48)" fg:x="437922" fg:w="206"/><text x="60.6189%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (160 samples, 0.02%)</title><rect x="60.3752%" y="357" width="0.0221%" height="15" fill="rgb(249,222,43)" fg:x="437968" fg:w="160"/><text x="60.6252%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (113 samples, 0.02%)</title><rect x="60.3817%" y="341" width="0.0156%" height="15" fill="rgb(221,3,27)" fg:x="438015" fg:w="113"/><text x="60.6317%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (110 samples, 0.02%)</title><rect x="60.3821%" y="325" width="0.0152%" height="15" fill="rgb(228,180,5)" fg:x="438018" fg:w="110"/><text x="60.6321%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (86 samples, 0.01%)</title><rect x="60.3977%" y="341" width="0.0119%" height="15" fill="rgb(227,131,42)" fg:x="438131" fg:w="86"/><text x="60.6477%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,322 samples, 0.87%)</title><rect x="59.5478%" y="405" width="0.8715%" height="15" fill="rgb(212,3,39)" fg:x="431966" fg:w="6322"/><text x="59.7978%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (366 samples, 0.05%)</title><rect x="60.3689%" y="389" width="0.0505%" height="15" fill="rgb(226,45,5)" fg:x="437922" fg:w="366"/><text x="60.6189%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (160 samples, 0.02%)</title><rect x="60.3973%" y="373" width="0.0221%" height="15" fill="rgb(215,167,45)" fg:x="438128" fg:w="160"/><text x="60.6473%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (160 samples, 0.02%)</title><rect x="60.3973%" y="357" width="0.0221%" height="15" fill="rgb(250,218,53)" fg:x="438128" fg:w="160"/><text x="60.6473%" y="367.50"></text></g><g><title>one_brc::round_towards_positive (574 samples, 0.08%)</title><rect x="60.4193%" y="405" width="0.0791%" height="15" fill="rgb(207,140,0)" fg:x="438288" fg:w="574"/><text x="60.6693%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (145 samples, 0.02%)</title><rect x="60.4785%" y="389" width="0.0200%" height="15" fill="rgb(238,133,51)" fg:x="438717" fg:w="145"/><text x="60.7285%" y="399.50"></text></g><g><title>__round (121 samples, 0.02%)</title><rect x="60.4818%" y="373" width="0.0167%" height="15" fill="rgb(218,203,53)" fg:x="438741" fg:w="121"/><text x="60.7318%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (82 samples, 0.01%)</title><rect x="60.5915%" y="357" width="0.0113%" height="15" fill="rgb(226,184,25)" fg:x="439537" fg:w="82"/><text x="60.8415%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (522 samples, 0.07%)</title><rect x="60.5496%" y="389" width="0.0720%" height="15" fill="rgb(231,121,21)" fg:x="439233" fg:w="522"/><text x="60.7996%" y="399.50"></text></g><g><title>one_brc::Measurement::record (451 samples, 0.06%)</title><rect x="60.5594%" y="373" width="0.0622%" height="15" fill="rgb(251,14,34)" fg:x="439304" fg:w="451"/><text x="60.8094%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (136 samples, 0.02%)</title><rect x="60.6028%" y="357" width="0.0187%" height="15" fill="rgb(249,193,11)" fg:x="439619" fg:w="136"/><text x="60.8528%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (77 samples, 0.01%)</title><rect x="60.6329%" y="325" width="0.0106%" height="15" fill="rgb(220,172,37)" fg:x="439837" fg:w="77"/><text x="60.8829%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (155 samples, 0.02%)</title><rect x="60.6259%" y="341" width="0.0214%" height="15" fill="rgb(231,229,43)" fg:x="439786" fg:w="155"/><text x="60.8759%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (171 samples, 0.02%)</title><rect x="60.6245%" y="357" width="0.0236%" height="15" fill="rgb(250,161,5)" fg:x="439776" fg:w="171"/><text x="60.8745%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,086 samples, 0.15%)</title><rect x="60.4985%" y="405" width="0.1497%" height="15" fill="rgb(218,225,18)" fg:x="438862" fg:w="1086"/><text x="60.7485%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (193 samples, 0.03%)</title><rect x="60.6216%" y="389" width="0.0266%" height="15" fill="rgb(245,45,42)" fg:x="439755" fg:w="193"/><text x="60.8716%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (193 samples, 0.03%)</title><rect x="60.6216%" y="373" width="0.0266%" height="15" fill="rgb(211,115,1)" fg:x="439755" fg:w="193"/><text x="60.8716%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (88 samples, 0.01%)</title><rect x="60.6880%" y="325" width="0.0121%" height="15" fill="rgb(248,133,52)" fg:x="440237" fg:w="88"/><text x="60.9380%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (151 samples, 0.02%)</title><rect x="60.6829%" y="341" width="0.0208%" height="15" fill="rgb(238,100,21)" fg:x="440200" fg:w="151"/><text x="60.9329%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (447 samples, 0.06%)</title><rect x="60.6482%" y="405" width="0.0616%" height="15" fill="rgb(247,144,11)" fg:x="439948" fg:w="447"/><text x="60.8982%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (274 samples, 0.04%)</title><rect x="60.6720%" y="389" width="0.0378%" height="15" fill="rgb(206,164,16)" fg:x="440121" fg:w="274"/><text x="60.9220%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (206 samples, 0.03%)</title><rect x="60.6814%" y="373" width="0.0284%" height="15" fill="rgb(222,34,3)" fg:x="440189" fg:w="206"/><text x="60.9314%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (200 samples, 0.03%)</title><rect x="60.6822%" y="357" width="0.0276%" height="15" fill="rgb(248,82,4)" fg:x="440195" fg:w="200"/><text x="60.9322%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (220 samples, 0.03%)</title><rect x="60.8919%" y="277" width="0.0303%" height="15" fill="rgb(228,81,46)" fg:x="441716" fg:w="220"/><text x="61.1419%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (721 samples, 0.10%)</title><rect x="60.8246%" y="293" width="0.0994%" height="15" fill="rgb(227,67,47)" fg:x="441228" fg:w="721"/><text x="61.0746%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (755 samples, 0.10%)</title><rect x="61.1274%" y="277" width="0.1041%" height="15" fill="rgb(215,93,53)" fg:x="443424" fg:w="755"/><text x="61.3774%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,273 samples, 0.45%)</title><rect x="60.7841%" y="309" width="0.4512%" height="15" fill="rgb(248,194,39)" fg:x="440934" fg:w="3273"/><text x="61.0341%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,258 samples, 0.31%)</title><rect x="60.9240%" y="293" width="0.3113%" height="15" fill="rgb(215,5,19)" fg:x="441949" fg:w="2258"/><text x="61.1740%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,313 samples, 0.46%)</title><rect x="60.7794%" y="341" width="0.4567%" height="15" fill="rgb(226,215,51)" fg:x="440900" fg:w="3313"/><text x="61.0294%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,279 samples, 0.45%)</title><rect x="60.7841%" y="325" width="0.4520%" height="15" fill="rgb(225,56,26)" fg:x="440934" fg:w="3279"/><text x="61.0341%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (345 samples, 0.05%)</title><rect x="61.2455%" y="325" width="0.0476%" height="15" fill="rgb(222,75,29)" fg:x="444281" fg:w="345"/><text x="61.4955%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (320 samples, 0.04%)</title><rect x="61.2935%" y="309" width="0.0441%" height="15" fill="rgb(236,139,6)" fg:x="444629" fg:w="320"/><text x="61.5435%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (433 samples, 0.06%)</title><rect x="61.3621%" y="293" width="0.0597%" height="15" fill="rgb(223,137,36)" fg:x="445127" fg:w="433"/><text x="61.6121%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (106 samples, 0.01%)</title><rect x="61.4218%" y="293" width="0.0146%" height="15" fill="rgb(226,99,2)" fg:x="445560" fg:w="106"/><text x="61.6718%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (756 samples, 0.10%)</title><rect x="61.3376%" y="309" width="0.1042%" height="15" fill="rgb(206,133,23)" fg:x="444949" fg:w="756"/><text x="61.5876%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,135 samples, 0.16%)</title><rect x="61.2931%" y="325" width="0.1565%" height="15" fill="rgb(243,173,15)" fg:x="444626" fg:w="1135"/><text x="61.5431%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,589 samples, 0.22%)</title><rect x="61.2361%" y="341" width="0.2190%" height="15" fill="rgb(228,69,28)" fg:x="444213" fg:w="1589"/><text x="61.4861%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (147 samples, 0.02%)</title><rect x="61.5697%" y="213" width="0.0203%" height="15" fill="rgb(212,51,22)" fg:x="446633" fg:w="147"/><text x="61.8197%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (429 samples, 0.06%)</title><rect x="61.5315%" y="229" width="0.0591%" height="15" fill="rgb(227,113,0)" fg:x="446356" fg:w="429"/><text x="61.7815%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (94 samples, 0.01%)</title><rect x="61.6462%" y="213" width="0.0130%" height="15" fill="rgb(252,84,27)" fg:x="447188" fg:w="94"/><text x="61.8962%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (554 samples, 0.08%)</title><rect x="61.5907%" y="229" width="0.0764%" height="15" fill="rgb(223,145,39)" fg:x="446785" fg:w="554"/><text x="61.8407%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,444 samples, 0.20%)</title><rect x="61.4774%" y="245" width="0.1991%" height="15" fill="rgb(239,219,30)" fg:x="445963" fg:w="1444"/><text x="61.7274%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (130 samples, 0.02%)</title><rect x="61.7459%" y="213" width="0.0179%" height="15" fill="rgb(224,196,39)" fg:x="447911" fg:w="130"/><text x="61.9959%" y="223.50"></text></g><g><title>core::cmp::min (472 samples, 0.07%)</title><rect x="61.7641%" y="213" width="0.0651%" height="15" fill="rgb(205,35,43)" fg:x="448043" fg:w="472"/><text x="62.0141%" y="223.50"></text></g><g><title>core::cmp::Ord::min (472 samples, 0.07%)</title><rect x="61.7641%" y="197" width="0.0651%" height="15" fill="rgb(228,201,21)" fg:x="448043" fg:w="472"/><text x="62.0141%" y="207.50"></text></g><g><title>core::cmp::min_by (449 samples, 0.06%)</title><rect x="61.7673%" y="181" width="0.0619%" height="15" fill="rgb(237,118,16)" fg:x="448066" fg:w="449"/><text x="62.0173%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (137 samples, 0.02%)</title><rect x="61.8103%" y="165" width="0.0189%" height="15" fill="rgb(241,17,19)" fg:x="448378" fg:w="137"/><text x="62.0603%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (107 samples, 0.01%)</title><rect x="61.8144%" y="149" width="0.0148%" height="15" fill="rgb(214,10,25)" fg:x="448408" fg:w="107"/><text x="62.0644%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (451 samples, 0.06%)</title><rect x="61.8292%" y="213" width="0.0622%" height="15" fill="rgb(238,37,29)" fg:x="448515" fg:w="451"/><text x="62.0792%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (8,267 samples, 1.14%)</title><rect x="60.7563%" y="373" width="1.1396%" height="15" fill="rgb(253,83,25)" fg:x="440732" fg:w="8267"/><text x="61.0063%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,228 samples, 1.13%)</title><rect x="60.7616%" y="357" width="1.1343%" height="15" fill="rgb(234,192,12)" fg:x="440771" fg:w="8228"/><text x="61.0116%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,197 samples, 0.44%)</title><rect x="61.4552%" y="341" width="0.4407%" height="15" fill="rgb(241,216,45)" fg:x="445802" fg:w="3197"/><text x="61.7052%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,175 samples, 0.44%)</title><rect x="61.4582%" y="325" width="0.4377%" height="15" fill="rgb(242,22,33)" fg:x="445824" fg:w="3175"/><text x="61.7082%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,113 samples, 0.43%)</title><rect x="61.4668%" y="309" width="0.4291%" height="15" fill="rgb(231,105,49)" fg:x="445886" fg:w="3113"/><text x="61.7168%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,059 samples, 0.42%)</title><rect x="61.4742%" y="293" width="0.4217%" height="15" fill="rgb(218,204,15)" fg:x="445940" fg:w="3059"/><text x="61.7242%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,037 samples, 0.42%)</title><rect x="61.4772%" y="277" width="0.4187%" height="15" fill="rgb(235,138,41)" fg:x="445962" fg:w="3037"/><text x="61.7272%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,037 samples, 0.42%)</title><rect x="61.4772%" y="261" width="0.4187%" height="15" fill="rgb(246,0,9)" fg:x="445962" fg:w="3037"/><text x="61.7272%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,592 samples, 0.22%)</title><rect x="61.6764%" y="245" width="0.2195%" height="15" fill="rgb(210,74,4)" fg:x="447407" fg:w="1592"/><text x="61.9264%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,543 samples, 0.21%)</title><rect x="61.6832%" y="229" width="0.2127%" height="15" fill="rgb(250,60,41)" fg:x="447456" fg:w="1543"/><text x="61.9332%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (185 samples, 0.03%)</title><rect x="61.9257%" y="341" width="0.0255%" height="15" fill="rgb(220,115,12)" fg:x="449215" fg:w="185"/><text x="62.1757%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (83 samples, 0.01%)</title><rect x="61.9397%" y="325" width="0.0114%" height="15" fill="rgb(237,100,13)" fg:x="449317" fg:w="83"/><text x="62.1897%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (303 samples, 0.04%)</title><rect x="61.9159%" y="357" width="0.0418%" height="15" fill="rgb(213,55,26)" fg:x="449144" fg:w="303"/><text x="62.1659%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (96 samples, 0.01%)</title><rect x="62.0262%" y="341" width="0.0132%" height="15" fill="rgb(216,17,4)" fg:x="449944" fg:w="96"/><text x="62.2762%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (146 samples, 0.02%)</title><rect x="62.1100%" y="309" width="0.0201%" height="15" fill="rgb(220,153,47)" fg:x="450552" fg:w="146"/><text x="62.3600%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (565 samples, 0.08%)</title><rect x="62.0757%" y="325" width="0.0779%" height="15" fill="rgb(215,131,9)" fg:x="450303" fg:w="565"/><text x="62.3257%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (170 samples, 0.02%)</title><rect x="62.1301%" y="309" width="0.0234%" height="15" fill="rgb(233,46,42)" fg:x="450698" fg:w="170"/><text x="62.3801%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (146 samples, 0.02%)</title><rect x="62.1334%" y="293" width="0.0201%" height="15" fill="rgb(226,86,7)" fg:x="450722" fg:w="146"/><text x="62.3834%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (854 samples, 0.12%)</title><rect x="62.0394%" y="341" width="0.1177%" height="15" fill="rgb(239,226,21)" fg:x="450040" fg:w="854"/><text x="62.2894%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (103 samples, 0.01%)</title><rect x="62.1810%" y="293" width="0.0142%" height="15" fill="rgb(244,137,22)" fg:x="451067" fg:w="103"/><text x="62.4310%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (170 samples, 0.02%)</title><rect x="62.1722%" y="309" width="0.0234%" height="15" fill="rgb(211,139,35)" fg:x="451003" fg:w="170"/><text x="62.4222%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (178 samples, 0.02%)</title><rect x="62.1717%" y="325" width="0.0245%" height="15" fill="rgb(214,62,50)" fg:x="451000" fg:w="178"/><text x="62.4217%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (88 samples, 0.01%)</title><rect x="62.2156%" y="293" width="0.0121%" height="15" fill="rgb(212,113,44)" fg:x="451318" fg:w="88"/><text x="62.4656%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (198 samples, 0.03%)</title><rect x="62.2008%" y="309" width="0.0273%" height="15" fill="rgb(226,150,43)" fg:x="451211" fg:w="198"/><text x="62.4508%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (272 samples, 0.04%)</title><rect x="62.1963%" y="325" width="0.0375%" height="15" fill="rgb(250,71,37)" fg:x="451178" fg:w="272"/><text x="62.4463%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (228 samples, 0.03%)</title><rect x="62.3172%" y="229" width="0.0314%" height="15" fill="rgb(219,76,19)" fg:x="452055" fg:w="228"/><text x="62.5672%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (568 samples, 0.08%)</title><rect x="62.2751%" y="277" width="0.0783%" height="15" fill="rgb(250,39,11)" fg:x="451750" fg:w="568"/><text x="62.5251%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (497 samples, 0.07%)</title><rect x="62.2849%" y="261" width="0.0685%" height="15" fill="rgb(230,64,31)" fg:x="451821" fg:w="497"/><text x="62.5349%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (497 samples, 0.07%)</title><rect x="62.2849%" y="245" width="0.0685%" height="15" fill="rgb(208,222,23)" fg:x="451821" fg:w="497"/><text x="62.5349%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,486 samples, 0.20%)</title><rect x="62.1591%" y="341" width="0.2048%" height="15" fill="rgb(227,125,18)" fg:x="450908" fg:w="1486"/><text x="62.4091%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (944 samples, 0.13%)</title><rect x="62.2338%" y="325" width="0.1301%" height="15" fill="rgb(234,210,9)" fg:x="451450" fg:w="944"/><text x="62.4838%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (878 samples, 0.12%)</title><rect x="62.2429%" y="309" width="0.1210%" height="15" fill="rgb(217,127,24)" fg:x="451516" fg:w="878"/><text x="62.4929%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (677 samples, 0.09%)</title><rect x="62.2706%" y="293" width="0.0933%" height="15" fill="rgb(239,141,48)" fg:x="451717" fg:w="677"/><text x="62.5206%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (76 samples, 0.01%)</title><rect x="62.3534%" y="277" width="0.0105%" height="15" fill="rgb(227,109,8)" fg:x="452318" fg:w="76"/><text x="62.6034%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (727 samples, 0.10%)</title><rect x="62.3781%" y="341" width="0.1002%" height="15" fill="rgb(235,184,23)" fg:x="452497" fg:w="727"/><text x="62.6281%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (640 samples, 0.09%)</title><rect x="62.3901%" y="325" width="0.0882%" height="15" fill="rgb(227,226,48)" fg:x="452584" fg:w="640"/><text x="62.6401%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (152 samples, 0.02%)</title><rect x="62.4574%" y="309" width="0.0210%" height="15" fill="rgb(206,150,11)" fg:x="453072" fg:w="152"/><text x="62.7074%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (408 samples, 0.06%)</title><rect x="62.5138%" y="325" width="0.0562%" height="15" fill="rgb(254,2,33)" fg:x="453481" fg:w="408"/><text x="62.7638%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (170 samples, 0.02%)</title><rect x="62.5466%" y="309" width="0.0234%" height="15" fill="rgb(243,160,20)" fg:x="453719" fg:w="170"/><text x="62.7966%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (115 samples, 0.02%)</title><rect x="62.6457%" y="309" width="0.0159%" height="15" fill="rgb(218,208,30)" fg:x="454438" fg:w="115"/><text x="62.8957%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (751 samples, 0.10%)</title><rect x="62.5700%" y="325" width="0.1035%" height="15" fill="rgb(224,120,49)" fg:x="453889" fg:w="751"/><text x="62.8200%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (87 samples, 0.01%)</title><rect x="62.6615%" y="309" width="0.0120%" height="15" fill="rgb(246,12,2)" fg:x="454553" fg:w="87"/><text x="62.9115%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,162 samples, 0.30%)</title><rect x="62.4783%" y="341" width="0.2980%" height="15" fill="rgb(236,117,3)" fg:x="453224" fg:w="2162"/><text x="62.7283%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (746 samples, 0.10%)</title><rect x="62.6735%" y="325" width="0.1028%" height="15" fill="rgb(216,128,52)" fg:x="454640" fg:w="746"/><text x="62.9235%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (630 samples, 0.09%)</title><rect x="62.6895%" y="309" width="0.0868%" height="15" fill="rgb(246,145,19)" fg:x="454756" fg:w="630"/><text x="62.9395%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (198 samples, 0.03%)</title><rect x="62.7491%" y="293" width="0.0273%" height="15" fill="rgb(222,11,46)" fg:x="455188" fg:w="198"/><text x="62.9991%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (14,997 samples, 2.07%)</title><rect x="60.7139%" y="389" width="2.0674%" height="15" fill="rgb(245,82,36)" fg:x="440425" fg:w="14997"/><text x="60.9639%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,423 samples, 0.89%)</title><rect x="61.8959%" y="373" width="0.8854%" height="15" fill="rgb(250,73,51)" fg:x="448999" fg:w="6423"/><text x="62.1459%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,933 samples, 0.82%)</title><rect x="61.9634%" y="357" width="0.8179%" height="15" fill="rgb(221,189,23)" fg:x="449489" fg:w="5933"/><text x="62.2134%" y="367.50"></text></g><g><title>__clone3 (36,349 samples, 5.01%)</title><rect x="57.7995%" y="629" width="5.0108%" height="15" fill="rgb(210,33,7)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="639.50">__clon..</text></g><g><title>start_thread (36,349 samples, 5.01%)</title><rect x="57.7995%" y="613" width="5.0108%" height="15" fill="rgb(210,107,22)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="623.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36,349 samples, 5.01%)</title><rect x="57.7995%" y="597" width="5.0108%" height="15" fill="rgb(222,116,37)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="607.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (36,349 samples, 5.01%)</title><rect x="57.7995%" y="581" width="5.0108%" height="15" fill="rgb(254,17,48)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="591.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (36,349 samples, 5.01%)</title><rect x="57.7995%" y="565" width="5.0108%" height="15" fill="rgb(224,36,32)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="575.50">std::t..</text></g><g><title>std::panic::catch_unwind (36,349 samples, 5.01%)</title><rect x="57.7995%" y="549" width="5.0108%" height="15" fill="rgb(232,90,46)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="559.50">std::p..</text></g><g><title>std::panicking::try (36,349 samples, 5.01%)</title><rect x="57.7995%" y="533" width="5.0108%" height="15" fill="rgb(241,66,40)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="543.50">std::p..</text></g><g><title>__rust_try (36,349 samples, 5.01%)</title><rect x="57.7995%" y="517" width="5.0108%" height="15" fill="rgb(249,184,29)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="527.50">__rust..</text></g><g><title>std::panicking::try::do_call (36,349 samples, 5.01%)</title><rect x="57.7995%" y="501" width="5.0108%" height="15" fill="rgb(231,181,1)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="511.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36,349 samples, 5.01%)</title><rect x="57.7995%" y="485" width="5.0108%" height="15" fill="rgb(224,94,2)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="495.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (36,349 samples, 5.01%)</title><rect x="57.7995%" y="469" width="5.0108%" height="15" fill="rgb(229,170,15)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="479.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (36,349 samples, 5.01%)</title><rect x="57.7995%" y="453" width="5.0108%" height="15" fill="rgb(240,127,35)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="463.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (36,349 samples, 5.01%)</title><rect x="57.7995%" y="437" width="5.0108%" height="15" fill="rgb(248,196,34)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="447.50">one_br..</text></g><g><title>one_brc::process_lines (36,349 samples, 5.01%)</title><rect x="57.7995%" y="421" width="5.0108%" height="15" fill="rgb(236,137,7)" fg:x="419283" fg:w="36349"/><text x="58.0495%" y="431.50">one_br..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (15,237 samples, 2.10%)</title><rect x="60.7098%" y="405" width="2.1005%" height="15" fill="rgb(235,127,16)" fg:x="440395" fg:w="15237"/><text x="60.9598%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (191 samples, 0.03%)</title><rect x="62.7839%" y="389" width="0.0263%" height="15" fill="rgb(250,192,54)" fg:x="455441" fg:w="191"/><text x="63.0339%" y="399.50"></text></g><g><title>worker-3 (42,205 samples, 5.82%)</title><rect x="57.0020%" y="645" width="5.8181%" height="15" fill="rgb(218,98,20)" fg:x="413498" fg:w="42205"/><text x="57.2520%" y="655.50">worker-3</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (169 samples, 0.02%)</title><rect x="62.8298%" y="629" width="0.0233%" height="15" fill="rgb(230,176,47)" fg:x="455774" fg:w="169"/><text x="63.0798%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (76 samples, 0.01%)</title><rect x="62.8581%" y="613" width="0.0105%" height="15" fill="rgb(244,2,33)" fg:x="455979" fg:w="76"/><text x="63.1081%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (76 samples, 0.01%)</title><rect x="62.8581%" y="597" width="0.0105%" height="15" fill="rgb(231,100,17)" fg:x="455979" fg:w="76"/><text x="63.1081%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (83 samples, 0.01%)</title><rect x="62.8686%" y="613" width="0.0114%" height="15" fill="rgb(245,23,12)" fg:x="456055" fg:w="83"/><text x="63.1186%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (142 samples, 0.02%)</title><rect x="62.9443%" y="613" width="0.0196%" height="15" fill="rgb(249,55,22)" fg:x="456604" fg:w="142"/><text x="63.1943%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (100 samples, 0.01%)</title><rect x="62.9804%" y="613" width="0.0138%" height="15" fill="rgb(207,134,9)" fg:x="456866" fg:w="100"/><text x="63.2304%" y="623.50"></text></g><g><title>__memcmp_evex_movbe (81 samples, 0.01%)</title><rect x="62.9942%" y="613" width="0.0112%" height="15" fill="rgb(218,134,0)" fg:x="456966" fg:w="81"/><text x="63.2442%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (74 samples, 0.01%)</title><rect x="63.0234%" y="613" width="0.0102%" height="15" fill="rgb(213,212,33)" fg:x="457178" fg:w="74"/><text x="63.2734%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (123 samples, 0.02%)</title><rect x="63.0807%" y="613" width="0.0170%" height="15" fill="rgb(252,106,18)" fg:x="457594" fg:w="123"/><text x="63.3307%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (86 samples, 0.01%)</title><rect x="63.0977%" y="613" width="0.0119%" height="15" fill="rgb(208,126,42)" fg:x="457717" fg:w="86"/><text x="63.3477%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (106 samples, 0.01%)</title><rect x="63.1096%" y="613" width="0.0146%" height="15" fill="rgb(246,175,29)" fg:x="457803" fg:w="106"/><text x="63.3596%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (77 samples, 0.01%)</title><rect x="63.1326%" y="613" width="0.0106%" height="15" fill="rgb(215,13,50)" fg:x="457970" fg:w="77"/><text x="63.3826%" y="623.50"></text></g><g><title>[anon] (2,334 samples, 0.32%)</title><rect x="62.8581%" y="629" width="0.3217%" height="15" fill="rgb(216,172,15)" fg:x="455979" fg:w="2334"/><text x="63.1081%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (164 samples, 0.02%)</title><rect x="63.1854%" y="613" width="0.0226%" height="15" fill="rgb(212,103,13)" fg:x="458353" fg:w="164"/><text x="63.4354%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (100 samples, 0.01%)</title><rect x="63.2123%" y="613" width="0.0138%" height="15" fill="rgb(231,171,36)" fg:x="458548" fg:w="100"/><text x="63.4623%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (112 samples, 0.02%)</title><rect x="63.2260%" y="613" width="0.0154%" height="15" fill="rgb(250,123,20)" fg:x="458648" fg:w="112"/><text x="63.4760%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (175 samples, 0.02%)</title><rect x="63.2641%" y="613" width="0.0241%" height="15" fill="rgb(212,53,50)" fg:x="458924" fg:w="175"/><text x="63.5141%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (174 samples, 0.02%)</title><rect x="63.2642%" y="597" width="0.0240%" height="15" fill="rgb(243,54,12)" fg:x="458925" fg:w="174"/><text x="63.5142%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (174 samples, 0.02%)</title><rect x="63.2642%" y="581" width="0.0240%" height="15" fill="rgb(234,101,34)" fg:x="458925" fg:w="174"/><text x="63.5142%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (81 samples, 0.01%)</title><rect x="63.2770%" y="565" width="0.0112%" height="15" fill="rgb(254,67,22)" fg:x="459018" fg:w="81"/><text x="63.5270%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (78 samples, 0.01%)</title><rect x="63.3129%" y="613" width="0.0108%" height="15" fill="rgb(250,35,47)" fg:x="459278" fg:w="78"/><text x="63.5629%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (104 samples, 0.01%)</title><rect x="63.3253%" y="613" width="0.0143%" height="15" fill="rgb(226,126,38)" fg:x="459368" fg:w="104"/><text x="63.5753%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (166 samples, 0.02%)</title><rect x="63.3562%" y="613" width="0.0229%" height="15" fill="rgb(216,138,53)" fg:x="459592" fg:w="166"/><text x="63.6062%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (87 samples, 0.01%)</title><rect x="63.3897%" y="613" width="0.0120%" height="15" fill="rgb(246,199,43)" fg:x="459835" fg:w="87"/><text x="63.6397%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (78 samples, 0.01%)</title><rect x="63.4203%" y="613" width="0.0108%" height="15" fill="rgb(232,125,11)" fg:x="460057" fg:w="78"/><text x="63.6703%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (90 samples, 0.01%)</title><rect x="63.4361%" y="613" width="0.0124%" height="15" fill="rgb(218,219,45)" fg:x="460172" fg:w="90"/><text x="63.6861%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (90 samples, 0.01%)</title><rect x="63.4641%" y="613" width="0.0124%" height="15" fill="rgb(216,102,54)" fg:x="460375" fg:w="90"/><text x="63.7141%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (179 samples, 0.02%)</title><rect x="63.4765%" y="613" width="0.0247%" height="15" fill="rgb(250,228,7)" fg:x="460465" fg:w="179"/><text x="63.7265%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (154 samples, 0.02%)</title><rect x="63.4800%" y="597" width="0.0212%" height="15" fill="rgb(226,125,25)" fg:x="460490" fg:w="154"/><text x="63.7300%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (81 samples, 0.01%)</title><rect x="63.4900%" y="581" width="0.0112%" height="15" fill="rgb(224,165,27)" fg:x="460563" fg:w="81"/><text x="63.7400%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (110 samples, 0.02%)</title><rect x="63.5012%" y="613" width="0.0152%" height="15" fill="rgb(233,86,3)" fg:x="460644" fg:w="110"/><text x="63.7512%" y="623.50"></text></g><g><title>one_brc::process_lines (294 samples, 0.04%)</title><rect x="63.5249%" y="613" width="0.0405%" height="15" fill="rgb(228,116,20)" fg:x="460816" fg:w="294"/><text x="63.7749%" y="623.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (90 samples, 0.01%)</title><rect x="63.5776%" y="613" width="0.0124%" height="15" fill="rgb(209,192,17)" fg:x="461198" fg:w="90"/><text x="63.8276%" y="623.50"></text></g><g><title>[unknown] (3,060 samples, 0.42%)</title><rect x="63.1799%" y="629" width="0.4218%" height="15" fill="rgb(224,88,34)" fg:x="458313" fg:w="3060"/><text x="63.4299%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (108 samples, 0.01%)</title><rect x="63.8939%" y="325" width="0.0149%" height="15" fill="rgb(233,38,6)" fg:x="463493" fg:w="108"/><text x="64.1439%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (177 samples, 0.02%)</title><rect x="63.9346%" y="277" width="0.0244%" height="15" fill="rgb(212,59,30)" fg:x="463788" fg:w="177"/><text x="64.1846%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (135 samples, 0.02%)</title><rect x="63.9404%" y="261" width="0.0186%" height="15" fill="rgb(213,80,3)" fg:x="463830" fg:w="135"/><text x="64.1904%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (135 samples, 0.02%)</title><rect x="63.9404%" y="245" width="0.0186%" height="15" fill="rgb(251,178,7)" fg:x="463830" fg:w="135"/><text x="64.1904%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (360 samples, 0.05%)</title><rect x="63.9095%" y="325" width="0.0496%" height="15" fill="rgb(213,154,26)" fg:x="463606" fg:w="360"/><text x="64.1595%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (358 samples, 0.05%)</title><rect x="63.9098%" y="309" width="0.0494%" height="15" fill="rgb(238,165,49)" fg:x="463608" fg:w="358"/><text x="64.1598%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (329 samples, 0.05%)</title><rect x="63.9138%" y="293" width="0.0454%" height="15" fill="rgb(248,91,46)" fg:x="463637" fg:w="329"/><text x="64.1638%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (223 samples, 0.03%)</title><rect x="63.9991%" y="277" width="0.0307%" height="15" fill="rgb(244,21,52)" fg:x="464256" fg:w="223"/><text x="64.2491%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (489 samples, 0.07%)</title><rect x="63.9680%" y="293" width="0.0674%" height="15" fill="rgb(247,122,20)" fg:x="464030" fg:w="489"/><text x="64.2180%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (554 samples, 0.08%)</title><rect x="63.9591%" y="325" width="0.0764%" height="15" fill="rgb(218,27,9)" fg:x="463966" fg:w="554"/><text x="64.2091%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (490 samples, 0.07%)</title><rect x="63.9680%" y="309" width="0.0675%" height="15" fill="rgb(246,7,6)" fg:x="464030" fg:w="490"/><text x="64.2180%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (312 samples, 0.04%)</title><rect x="64.1050%" y="293" width="0.0430%" height="15" fill="rgb(227,135,54)" fg:x="465024" fg:w="312"/><text x="64.3550%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (250 samples, 0.03%)</title><rect x="64.1135%" y="277" width="0.0345%" height="15" fill="rgb(247,14,11)" fg:x="465086" fg:w="250"/><text x="64.3635%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (242 samples, 0.03%)</title><rect x="64.1146%" y="261" width="0.0334%" height="15" fill="rgb(206,149,34)" fg:x="465094" fg:w="242"/><text x="64.3646%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (817 samples, 0.11%)</title><rect x="64.0355%" y="325" width="0.1126%" height="15" fill="rgb(227,228,4)" fg:x="464520" fg:w="817"/><text x="64.2855%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (732 samples, 0.10%)</title><rect x="64.0472%" y="309" width="0.1009%" height="15" fill="rgb(238,218,28)" fg:x="464605" fg:w="732"/><text x="64.2972%" y="319.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (82 samples, 0.01%)</title><rect x="64.2606%" y="293" width="0.0113%" height="15" fill="rgb(252,86,40)" fg:x="466153" fg:w="82"/><text x="64.5106%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,612 samples, 0.22%)</title><rect x="64.1520%" y="325" width="0.2222%" height="15" fill="rgb(251,225,11)" fg:x="465365" fg:w="1612"/><text x="64.4020%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,505 samples, 0.21%)</title><rect x="64.1667%" y="309" width="0.2075%" height="15" fill="rgb(206,46,49)" fg:x="465472" fg:w="1505"/><text x="64.4167%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (742 samples, 0.10%)</title><rect x="64.2719%" y="293" width="0.1023%" height="15" fill="rgb(245,128,24)" fg:x="466235" fg:w="742"/><text x="64.5219%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,528 samples, 0.62%)</title><rect x="63.7559%" y="341" width="0.6242%" height="15" fill="rgb(219,177,34)" fg:x="462492" fg:w="4528"/><text x="64.0059%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,973 samples, 0.69%)</title><rect x="63.7139%" y="373" width="0.6855%" height="15" fill="rgb(218,60,48)" fg:x="462187" fg:w="4973"/><text x="63.9639%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (4,965 samples, 0.68%)</title><rect x="63.7150%" y="357" width="0.6844%" height="15" fill="rgb(221,11,5)" fg:x="462195" fg:w="4965"/><text x="63.9650%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (139 samples, 0.02%)</title><rect x="64.3803%" y="341" width="0.0192%" height="15" fill="rgb(220,148,13)" fg:x="467021" fg:w="139"/><text x="64.6303%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (139 samples, 0.02%)</title><rect x="64.3803%" y="325" width="0.0192%" height="15" fill="rgb(210,16,3)" fg:x="467021" fg:w="139"/><text x="64.6303%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (87 samples, 0.01%)</title><rect x="64.3874%" y="309" width="0.0120%" height="15" fill="rgb(236,80,2)" fg:x="467073" fg:w="87"/><text x="64.6374%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (466 samples, 0.06%)</title><rect x="64.7362%" y="181" width="0.0642%" height="15" fill="rgb(239,129,19)" fg:x="469603" fg:w="466"/><text x="64.9862%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,183 samples, 0.16%)</title><rect x="64.6461%" y="229" width="0.1631%" height="15" fill="rgb(220,106,35)" fg:x="468949" fg:w="1183"/><text x="64.8961%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,000 samples, 0.14%)</title><rect x="64.6713%" y="213" width="0.1379%" height="15" fill="rgb(252,139,45)" fg:x="469132" fg:w="1000"/><text x="64.9213%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (964 samples, 0.13%)</title><rect x="64.6763%" y="197" width="0.1329%" height="15" fill="rgb(229,8,36)" fg:x="469168" fg:w="964"/><text x="64.9263%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (295 samples, 0.04%)</title><rect x="64.8155%" y="181" width="0.0407%" height="15" fill="rgb(230,126,33)" fg:x="470178" fg:w="295"/><text x="65.0655%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (228 samples, 0.03%)</title><rect x="64.8247%" y="165" width="0.0314%" height="15" fill="rgb(239,140,21)" fg:x="470245" fg:w="228"/><text x="65.0747%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (214 samples, 0.03%)</title><rect x="64.8266%" y="149" width="0.0295%" height="15" fill="rgb(254,104,9)" fg:x="470259" fg:w="214"/><text x="65.0766%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,369 samples, 0.33%)</title><rect x="64.5471%" y="261" width="0.3266%" height="15" fill="rgb(239,52,14)" fg:x="468231" fg:w="2369"/><text x="64.7971%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,369 samples, 0.33%)</title><rect x="64.5471%" y="245" width="0.3266%" height="15" fill="rgb(208,227,44)" fg:x="468231" fg:w="2369"/><text x="64.7971%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (468 samples, 0.06%)</title><rect x="64.8091%" y="229" width="0.0645%" height="15" fill="rgb(246,18,19)" fg:x="470132" fg:w="468"/><text x="65.0591%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (468 samples, 0.06%)</title><rect x="64.8091%" y="213" width="0.0645%" height="15" fill="rgb(235,228,25)" fg:x="470132" fg:w="468"/><text x="65.0591%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (422 samples, 0.06%)</title><rect x="64.8155%" y="197" width="0.0582%" height="15" fill="rgb(240,156,20)" fg:x="470178" fg:w="422"/><text x="65.0655%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (127 samples, 0.02%)</title><rect x="64.8562%" y="181" width="0.0175%" height="15" fill="rgb(224,8,20)" fg:x="470473" fg:w="127"/><text x="65.1062%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (127 samples, 0.02%)</title><rect x="64.8562%" y="165" width="0.0175%" height="15" fill="rgb(214,12,52)" fg:x="470473" fg:w="127"/><text x="65.1062%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (2,879 samples, 0.40%)</title><rect x="64.5072%" y="277" width="0.3969%" height="15" fill="rgb(211,220,47)" fg:x="467942" fg:w="2879"/><text x="64.7572%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (216 samples, 0.03%)</title><rect x="64.8743%" y="261" width="0.0298%" height="15" fill="rgb(250,173,5)" fg:x="470605" fg:w="216"/><text x="65.1243%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (216 samples, 0.03%)</title><rect x="64.8743%" y="245" width="0.0298%" height="15" fill="rgb(250,125,52)" fg:x="470605" fg:w="216"/><text x="65.1243%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (216 samples, 0.03%)</title><rect x="64.8743%" y="229" width="0.0298%" height="15" fill="rgb(209,133,18)" fg:x="470605" fg:w="216"/><text x="65.1243%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (76 samples, 0.01%)</title><rect x="64.9940%" y="245" width="0.0105%" height="15" fill="rgb(216,173,22)" fg:x="471473" fg:w="76"/><text x="65.2440%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (223 samples, 0.03%)</title><rect x="65.0715%" y="165" width="0.0307%" height="15" fill="rgb(205,3,22)" fg:x="472035" fg:w="223"/><text x="65.3215%" y="175.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4,872 samples, 0.67%)</title><rect x="64.4314%" y="341" width="0.6716%" height="15" fill="rgb(248,22,20)" fg:x="467392" fg:w="4872"/><text x="64.6814%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,754 samples, 0.66%)</title><rect x="64.4477%" y="325" width="0.6554%" height="15" fill="rgb(233,6,29)" fg:x="467510" fg:w="4754"/><text x="64.6977%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,437 samples, 0.61%)</title><rect x="64.4914%" y="309" width="0.6117%" height="15" fill="rgb(240,22,54)" fg:x="467827" fg:w="4437"/><text x="64.7414%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,435 samples, 0.61%)</title><rect x="64.4917%" y="293" width="0.6114%" height="15" fill="rgb(231,133,32)" fg:x="467829" fg:w="4435"/><text x="64.7417%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,443 samples, 0.20%)</title><rect x="64.9041%" y="277" width="0.1989%" height="15" fill="rgb(248,193,4)" fg:x="470821" fg:w="1443"/><text x="65.1541%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,355 samples, 0.19%)</title><rect x="64.9163%" y="261" width="0.1868%" height="15" fill="rgb(211,178,46)" fg:x="470909" fg:w="1355"/><text x="65.1663%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (715 samples, 0.10%)</title><rect x="65.0045%" y="245" width="0.0986%" height="15" fill="rgb(224,5,42)" fg:x="471549" fg:w="715"/><text x="65.2545%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (706 samples, 0.10%)</title><rect x="65.0057%" y="229" width="0.0973%" height="15" fill="rgb(239,176,25)" fg:x="471558" fg:w="706"/><text x="65.2557%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (637 samples, 0.09%)</title><rect x="65.0152%" y="213" width="0.0878%" height="15" fill="rgb(245,187,50)" fg:x="471627" fg:w="637"/><text x="65.2652%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (300 samples, 0.04%)</title><rect x="65.0617%" y="197" width="0.0414%" height="15" fill="rgb(248,24,15)" fg:x="471964" fg:w="300"/><text x="65.3117%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (229 samples, 0.03%)</title><rect x="65.0715%" y="181" width="0.0316%" height="15" fill="rgb(205,166,13)" fg:x="472035" fg:w="229"/><text x="65.3215%" y="191.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (10,180 samples, 1.40%)</title><rect x="63.6998%" y="405" width="1.4033%" height="15" fill="rgb(208,114,23)" fg:x="462085" fg:w="10180"/><text x="63.9498%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,176 samples, 1.40%)</title><rect x="63.7004%" y="389" width="1.4028%" height="15" fill="rgb(239,127,18)" fg:x="462089" fg:w="10176"/><text x="63.9504%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,105 samples, 0.70%)</title><rect x="64.3994%" y="373" width="0.7037%" height="15" fill="rgb(219,154,28)" fg:x="467160" fg:w="5105"/><text x="64.6494%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,953 samples, 0.68%)</title><rect x="64.4204%" y="357" width="0.6828%" height="15" fill="rgb(225,157,23)" fg:x="467312" fg:w="4953"/><text x="64.6704%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (306 samples, 0.04%)</title><rect x="65.1032%" y="405" width="0.0422%" height="15" fill="rgb(219,8,6)" fg:x="472265" fg:w="306"/><text x="65.3532%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (175 samples, 0.02%)</title><rect x="65.1454%" y="405" width="0.0241%" height="15" fill="rgb(212,47,6)" fg:x="472571" fg:w="175"/><text x="65.3954%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (159 samples, 0.02%)</title><rect x="65.2015%" y="341" width="0.0219%" height="15" fill="rgb(224,190,4)" fg:x="472978" fg:w="159"/><text x="65.4515%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (218 samples, 0.03%)</title><rect x="65.2235%" y="341" width="0.0301%" height="15" fill="rgb(239,183,29)" fg:x="473138" fg:w="218"/><text x="65.4735%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (455 samples, 0.06%)</title><rect x="65.1950%" y="357" width="0.0627%" height="15" fill="rgb(213,57,7)" fg:x="472931" fg:w="455"/><text x="65.4450%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (112 samples, 0.02%)</title><rect x="65.2729%" y="341" width="0.0154%" height="15" fill="rgb(216,148,1)" fg:x="473496" fg:w="112"/><text x="65.5229%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (285 samples, 0.04%)</title><rect x="65.3100%" y="309" width="0.0393%" height="15" fill="rgb(236,182,29)" fg:x="473765" fg:w="285"/><text x="65.5600%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (357 samples, 0.05%)</title><rect x="65.3016%" y="325" width="0.0492%" height="15" fill="rgb(244,120,48)" fg:x="473704" fg:w="357"/><text x="65.5516%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,321 samples, 0.18%)</title><rect x="65.1695%" y="405" width="0.1821%" height="15" fill="rgb(206,71,34)" fg:x="472746" fg:w="1321"/><text x="65.4195%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,298 samples, 0.18%)</title><rect x="65.1727%" y="389" width="0.1789%" height="15" fill="rgb(242,32,6)" fg:x="472769" fg:w="1298"/><text x="65.4227%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,260 samples, 0.17%)</title><rect x="65.1779%" y="373" width="0.1737%" height="15" fill="rgb(241,35,3)" fg:x="472807" fg:w="1260"/><text x="65.4279%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (681 samples, 0.09%)</title><rect x="65.2577%" y="357" width="0.0939%" height="15" fill="rgb(222,62,19)" fg:x="473386" fg:w="681"/><text x="65.5077%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (459 samples, 0.06%)</title><rect x="65.2883%" y="341" width="0.0633%" height="15" fill="rgb(223,110,41)" fg:x="473608" fg:w="459"/><text x="65.5383%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (90 samples, 0.01%)</title><rect x="65.5240%" y="261" width="0.0124%" height="15" fill="rgb(208,224,4)" fg:x="475318" fg:w="90"/><text x="65.7740%" y="271.50"></text></g><g><title>core::char::methods::encode_utf8_raw (727 samples, 0.10%)</title><rect x="65.4366%" y="357" width="0.1002%" height="15" fill="rgb(241,137,19)" fg:x="474684" fg:w="727"/><text x="65.6866%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (325 samples, 0.04%)</title><rect x="65.4921%" y="341" width="0.0448%" height="15" fill="rgb(244,24,17)" fg:x="475086" fg:w="325"/><text x="65.7421%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (317 samples, 0.04%)</title><rect x="65.4932%" y="325" width="0.0437%" height="15" fill="rgb(245,178,49)" fg:x="475094" fg:w="317"/><text x="65.7432%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (297 samples, 0.04%)</title><rect x="65.4959%" y="309" width="0.0409%" height="15" fill="rgb(219,160,38)" fg:x="475114" fg:w="297"/><text x="65.7459%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (130 samples, 0.02%)</title><rect x="65.5189%" y="293" width="0.0179%" height="15" fill="rgb(228,137,14)" fg:x="475281" fg:w="130"/><text x="65.7689%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (93 samples, 0.01%)</title><rect x="65.5240%" y="277" width="0.0128%" height="15" fill="rgb(237,134,11)" fg:x="475318" fg:w="93"/><text x="65.7740%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (774 samples, 0.11%)</title><rect x="65.4304%" y="373" width="0.1067%" height="15" fill="rgb(211,126,44)" fg:x="474639" fg:w="774"/><text x="65.6804%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,019 samples, 0.14%)</title><rect x="65.4003%" y="389" width="0.1405%" height="15" fill="rgb(226,171,33)" fg:x="474420" fg:w="1019"/><text x="65.6503%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (119 samples, 0.02%)</title><rect x="65.6692%" y="373" width="0.0164%" height="15" fill="rgb(253,99,13)" fg:x="476371" fg:w="119"/><text x="65.9192%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (316 samples, 0.04%)</title><rect x="65.6874%" y="373" width="0.0436%" height="15" fill="rgb(244,48,7)" fg:x="476503" fg:w="316"/><text x="65.9374%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (315 samples, 0.04%)</title><rect x="65.6875%" y="357" width="0.0434%" height="15" fill="rgb(244,217,54)" fg:x="476504" fg:w="315"/><text x="65.9375%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (283 samples, 0.04%)</title><rect x="65.6920%" y="341" width="0.0390%" height="15" fill="rgb(224,15,18)" fg:x="476536" fg:w="283"/><text x="65.9420%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (135 samples, 0.02%)</title><rect x="65.7124%" y="325" width="0.0186%" height="15" fill="rgb(244,99,12)" fg:x="476684" fg:w="135"/><text x="65.9624%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (109 samples, 0.02%)</title><rect x="65.7159%" y="309" width="0.0150%" height="15" fill="rgb(233,226,8)" fg:x="476710" fg:w="109"/><text x="65.9659%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (108 samples, 0.01%)</title><rect x="65.7161%" y="293" width="0.0149%" height="15" fill="rgb(229,211,3)" fg:x="476711" fg:w="108"/><text x="65.9661%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (196 samples, 0.03%)</title><rect x="65.7765%" y="325" width="0.0270%" height="15" fill="rgb(216,140,21)" fg:x="477149" fg:w="196"/><text x="66.0265%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (570 samples, 0.08%)</title><rect x="65.7310%" y="373" width="0.0786%" height="15" fill="rgb(234,122,30)" fg:x="476819" fg:w="570"/><text x="65.9810%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (500 samples, 0.07%)</title><rect x="65.7406%" y="357" width="0.0689%" height="15" fill="rgb(236,25,46)" fg:x="476889" fg:w="500"/><text x="65.9906%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (500 samples, 0.07%)</title><rect x="65.7406%" y="341" width="0.0689%" height="15" fill="rgb(217,52,54)" fg:x="476889" fg:w="500"/><text x="65.9906%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (664 samples, 0.09%)</title><rect x="65.8203%" y="357" width="0.0915%" height="15" fill="rgb(222,29,26)" fg:x="477467" fg:w="664"/><text x="66.0703%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (273 samples, 0.04%)</title><rect x="65.8742%" y="341" width="0.0376%" height="15" fill="rgb(216,177,29)" fg:x="477858" fg:w="273"/><text x="66.1242%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (220 samples, 0.03%)</title><rect x="65.8815%" y="325" width="0.0303%" height="15" fill="rgb(247,136,51)" fg:x="477911" fg:w="220"/><text x="66.1315%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (213 samples, 0.03%)</title><rect x="65.8825%" y="309" width="0.0294%" height="15" fill="rgb(231,47,47)" fg:x="477918" fg:w="213"/><text x="66.1325%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (743 samples, 0.10%)</title><rect x="65.8095%" y="373" width="0.1024%" height="15" fill="rgb(211,192,36)" fg:x="477389" fg:w="743"/><text x="66.0595%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned (143 samples, 0.02%)</title><rect x="65.9244%" y="357" width="0.0197%" height="15" fill="rgb(229,156,32)" fg:x="478222" fg:w="143"/><text x="66.1744%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (98 samples, 0.01%)</title><rect x="65.9306%" y="341" width="0.0135%" height="15" fill="rgb(248,213,20)" fg:x="478267" fg:w="98"/><text x="66.1806%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (1,943 samples, 0.27%)</title><rect x="65.9158%" y="373" width="0.2678%" height="15" fill="rgb(217,64,7)" fg:x="478160" fg:w="1943"/><text x="66.1658%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,738 samples, 0.24%)</title><rect x="65.9441%" y="357" width="0.2396%" height="15" fill="rgb(232,142,8)" fg:x="478365" fg:w="1738"/><text x="66.1941%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,652 samples, 0.64%)</title><rect x="65.5483%" y="389" width="0.6413%" height="15" fill="rgb(224,92,44)" fg:x="475494" fg:w="4652"/><text x="65.7983%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (199 samples, 0.03%)</title><rect x="66.1903%" y="373" width="0.0274%" height="15" fill="rgb(214,169,17)" fg:x="480151" fg:w="199"/><text x="66.4403%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (150 samples, 0.02%)</title><rect x="66.1970%" y="357" width="0.0207%" height="15" fill="rgb(210,59,37)" fg:x="480200" fg:w="150"/><text x="66.4470%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (95 samples, 0.01%)</title><rect x="66.2046%" y="341" width="0.0131%" height="15" fill="rgb(214,116,48)" fg:x="480255" fg:w="95"/><text x="66.4546%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (92 samples, 0.01%)</title><rect x="66.2050%" y="325" width="0.0127%" height="15" fill="rgb(244,191,6)" fg:x="480258" fg:w="92"/><text x="66.4550%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (80 samples, 0.01%)</title><rect x="66.2186%" y="341" width="0.0110%" height="15" fill="rgb(241,50,52)" fg:x="480356" fg:w="80"/><text x="66.4686%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,451 samples, 0.89%)</title><rect x="65.3516%" y="405" width="0.8893%" height="15" fill="rgb(236,75,39)" fg:x="474067" fg:w="6451"/><text x="65.6016%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (367 samples, 0.05%)</title><rect x="66.1903%" y="389" width="0.0506%" height="15" fill="rgb(236,99,0)" fg:x="480151" fg:w="367"/><text x="66.4403%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (168 samples, 0.02%)</title><rect x="66.2177%" y="373" width="0.0232%" height="15" fill="rgb(207,202,15)" fg:x="480350" fg:w="168"/><text x="66.4677%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (168 samples, 0.02%)</title><rect x="66.2177%" y="357" width="0.0232%" height="15" fill="rgb(233,207,14)" fg:x="480350" fg:w="168"/><text x="66.4677%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (82 samples, 0.01%)</title><rect x="66.2296%" y="341" width="0.0113%" height="15" fill="rgb(226,27,51)" fg:x="480436" fg:w="82"/><text x="66.4796%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (80 samples, 0.01%)</title><rect x="66.2299%" y="325" width="0.0110%" height="15" fill="rgb(206,104,42)" fg:x="480438" fg:w="80"/><text x="66.4799%" y="335.50"></text></g><g><title>one_brc::round_towards_positive (584 samples, 0.08%)</title><rect x="66.2409%" y="405" width="0.0805%" height="15" fill="rgb(212,225,4)" fg:x="480518" fg:w="584"/><text x="66.4909%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (145 samples, 0.02%)</title><rect x="66.3014%" y="389" width="0.0200%" height="15" fill="rgb(233,96,42)" fg:x="480957" fg:w="145"/><text x="66.5514%" y="399.50"></text></g><g><title>__round (123 samples, 0.02%)</title><rect x="66.3044%" y="373" width="0.0170%" height="15" fill="rgb(229,21,32)" fg:x="480979" fg:w="123"/><text x="66.5544%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (87 samples, 0.01%)</title><rect x="66.4121%" y="357" width="0.0120%" height="15" fill="rgb(226,216,24)" fg:x="481760" fg:w="87"/><text x="66.6621%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (517 samples, 0.07%)</title><rect x="66.3701%" y="389" width="0.0713%" height="15" fill="rgb(221,163,17)" fg:x="481455" fg:w="517"/><text x="66.6201%" y="399.50"></text></g><g><title>one_brc::Measurement::record (424 samples, 0.06%)</title><rect x="66.3829%" y="373" width="0.0584%" height="15" fill="rgb(216,216,42)" fg:x="481548" fg:w="424"/><text x="66.6329%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (125 samples, 0.02%)</title><rect x="66.4241%" y="357" width="0.0172%" height="15" fill="rgb(240,118,7)" fg:x="481847" fg:w="125"/><text x="66.6741%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (91 samples, 0.01%)</title><rect x="66.4547%" y="325" width="0.0125%" height="15" fill="rgb(221,67,37)" fg:x="482069" fg:w="91"/><text x="66.7047%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (170 samples, 0.02%)</title><rect x="66.4466%" y="341" width="0.0234%" height="15" fill="rgb(241,32,44)" fg:x="482010" fg:w="170"/><text x="66.6966%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (182 samples, 0.03%)</title><rect x="66.4457%" y="357" width="0.0251%" height="15" fill="rgb(235,204,43)" fg:x="482004" fg:w="182"/><text x="66.6957%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,090 samples, 0.15%)</title><rect x="66.3214%" y="405" width="0.1503%" height="15" fill="rgb(213,116,10)" fg:x="481102" fg:w="1090"/><text x="66.5714%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (220 samples, 0.03%)</title><rect x="66.4413%" y="389" width="0.0303%" height="15" fill="rgb(239,15,48)" fg:x="481972" fg:w="220"/><text x="66.6913%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (215 samples, 0.03%)</title><rect x="66.4420%" y="373" width="0.0296%" height="15" fill="rgb(207,123,36)" fg:x="481977" fg:w="215"/><text x="66.6920%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (74 samples, 0.01%)</title><rect x="66.5085%" y="325" width="0.0102%" height="15" fill="rgb(209,103,30)" fg:x="482459" fg:w="74"/><text x="66.7585%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (134 samples, 0.02%)</title><rect x="66.5031%" y="341" width="0.0185%" height="15" fill="rgb(238,100,19)" fg:x="482420" fg:w="134"/><text x="66.7531%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (411 samples, 0.06%)</title><rect x="66.4717%" y="405" width="0.0567%" height="15" fill="rgb(244,30,14)" fg:x="482192" fg:w="411"/><text x="66.7217%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (257 samples, 0.04%)</title><rect x="66.4929%" y="389" width="0.0354%" height="15" fill="rgb(249,174,6)" fg:x="482346" fg:w="257"/><text x="66.7429%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (193 samples, 0.03%)</title><rect x="66.5017%" y="373" width="0.0266%" height="15" fill="rgb(235,213,41)" fg:x="482410" fg:w="193"/><text x="66.7517%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (192 samples, 0.03%)</title><rect x="66.5018%" y="357" width="0.0265%" height="15" fill="rgb(213,118,6)" fg:x="482411" fg:w="192"/><text x="66.7518%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (265 samples, 0.04%)</title><rect x="66.7199%" y="277" width="0.0365%" height="15" fill="rgb(235,44,51)" fg:x="483993" fg:w="265"/><text x="66.9699%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (830 samples, 0.11%)</title><rect x="66.6434%" y="293" width="0.1144%" height="15" fill="rgb(217,9,53)" fg:x="483438" fg:w="830"/><text x="66.8934%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (725 samples, 0.10%)</title><rect x="66.9672%" y="277" width="0.0999%" height="15" fill="rgb(237,172,34)" fg:x="485787" fg:w="725"/><text x="67.2172%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,363 samples, 0.46%)</title><rect x="66.6088%" y="309" width="0.4636%" height="15" fill="rgb(206,206,11)" fg:x="483187" fg:w="3363"/><text x="66.8588%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,282 samples, 0.31%)</title><rect x="66.7578%" y="293" width="0.3146%" height="15" fill="rgb(214,149,29)" fg:x="484268" fg:w="2282"/><text x="67.0078%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,371 samples, 0.46%)</title><rect x="66.6088%" y="325" width="0.4647%" height="15" fill="rgb(208,123,3)" fg:x="483187" fg:w="3371"/><text x="66.8588%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,400 samples, 0.47%)</title><rect x="66.6050%" y="341" width="0.4687%" height="15" fill="rgb(229,126,4)" fg:x="483159" fg:w="3400"/><text x="66.8550%" y="351.50"></text></g><g><title>__memcpy_evex_unaligned_erms (362 samples, 0.05%)</title><rect x="67.0812%" y="325" width="0.0499%" height="15" fill="rgb(222,92,36)" fg:x="486614" fg:w="362"/><text x="67.3312%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (367 samples, 0.05%)</title><rect x="67.1314%" y="309" width="0.0506%" height="15" fill="rgb(216,39,41)" fg:x="486978" fg:w="367"/><text x="67.3814%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (429 samples, 0.06%)</title><rect x="67.2027%" y="293" width="0.0591%" height="15" fill="rgb(253,127,28)" fg:x="487495" fg:w="429"/><text x="67.4527%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (146 samples, 0.02%)</title><rect x="67.2618%" y="293" width="0.0201%" height="15" fill="rgb(249,152,51)" fg:x="487924" fg:w="146"/><text x="67.5118%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (758 samples, 0.10%)</title><rect x="67.1820%" y="309" width="0.1045%" height="15" fill="rgb(209,123,42)" fg:x="487345" fg:w="758"/><text x="67.4320%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,178 samples, 0.16%)</title><rect x="67.1311%" y="325" width="0.1624%" height="15" fill="rgb(241,118,22)" fg:x="486976" fg:w="1178"/><text x="67.3811%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,643 samples, 0.23%)</title><rect x="67.0737%" y="341" width="0.2265%" height="15" fill="rgb(208,25,7)" fg:x="486559" fg:w="1643"/><text x="67.3237%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (142 samples, 0.02%)</title><rect x="67.4088%" y="213" width="0.0196%" height="15" fill="rgb(243,144,39)" fg:x="488990" fg:w="142"/><text x="67.6588%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (399 samples, 0.06%)</title><rect x="67.3739%" y="229" width="0.0550%" height="15" fill="rgb(250,50,5)" fg:x="488737" fg:w="399"/><text x="67.6239%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (112 samples, 0.02%)</title><rect x="67.4938%" y="213" width="0.0154%" height="15" fill="rgb(207,67,11)" fg:x="489607" fg:w="112"/><text x="67.7438%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (639 samples, 0.09%)</title><rect x="67.4289%" y="229" width="0.0881%" height="15" fill="rgb(245,204,40)" fg:x="489136" fg:w="639"/><text x="67.6789%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,474 samples, 0.20%)</title><rect x="67.3221%" y="245" width="0.2032%" height="15" fill="rgb(238,228,24)" fg:x="488361" fg:w="1474"/><text x="67.5721%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (117 samples, 0.02%)</title><rect x="67.5867%" y="213" width="0.0161%" height="15" fill="rgb(217,116,22)" fg:x="490281" fg:w="117"/><text x="67.8367%" y="223.50"></text></g><g><title>core::cmp::min (455 samples, 0.06%)</title><rect x="67.6030%" y="213" width="0.0627%" height="15" fill="rgb(234,98,12)" fg:x="490399" fg:w="455"/><text x="67.8530%" y="223.50"></text></g><g><title>core::cmp::Ord::min (455 samples, 0.06%)</title><rect x="67.6030%" y="197" width="0.0627%" height="15" fill="rgb(242,170,50)" fg:x="490399" fg:w="455"/><text x="67.8530%" y="207.50"></text></g><g><title>core::cmp::min_by (434 samples, 0.06%)</title><rect x="67.6059%" y="181" width="0.0598%" height="15" fill="rgb(235,7,5)" fg:x="490420" fg:w="434"/><text x="67.8559%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (130 samples, 0.02%)</title><rect x="67.6478%" y="165" width="0.0179%" height="15" fill="rgb(241,114,28)" fg:x="490724" fg:w="130"/><text x="67.8978%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (93 samples, 0.01%)</title><rect x="67.6529%" y="149" width="0.0128%" height="15" fill="rgb(246,112,42)" fg:x="490761" fg:w="93"/><text x="67.9029%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (460 samples, 0.06%)</title><rect x="67.6657%" y="213" width="0.0634%" height="15" fill="rgb(248,228,14)" fg:x="490854" fg:w="460"/><text x="67.9157%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (8,352 samples, 1.15%)</title><rect x="66.5806%" y="373" width="1.1513%" height="15" fill="rgb(208,133,18)" fg:x="482982" fg:w="8352"/><text x="66.8306%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,303 samples, 1.14%)</title><rect x="66.5873%" y="357" width="1.1446%" height="15" fill="rgb(207,35,49)" fg:x="483031" fg:w="8303"/><text x="66.8373%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,132 samples, 0.43%)</title><rect x="67.3001%" y="341" width="0.4318%" height="15" fill="rgb(205,68,36)" fg:x="488202" fg:w="3132"/><text x="67.5501%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,112 samples, 0.43%)</title><rect x="67.3029%" y="325" width="0.4290%" height="15" fill="rgb(245,62,40)" fg:x="488222" fg:w="3112"/><text x="67.5529%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,052 samples, 0.42%)</title><rect x="67.3112%" y="309" width="0.4207%" height="15" fill="rgb(228,27,24)" fg:x="488282" fg:w="3052"/><text x="67.5612%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,990 samples, 0.41%)</title><rect x="67.3197%" y="293" width="0.4122%" height="15" fill="rgb(253,19,12)" fg:x="488344" fg:w="2990"/><text x="67.5697%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,975 samples, 0.41%)</title><rect x="67.3218%" y="277" width="0.4101%" height="15" fill="rgb(232,28,20)" fg:x="488359" fg:w="2975"/><text x="67.5718%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,974 samples, 0.41%)</title><rect x="67.3219%" y="261" width="0.4100%" height="15" fill="rgb(218,35,51)" fg:x="488360" fg:w="2974"/><text x="67.5719%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,499 samples, 0.21%)</title><rect x="67.5253%" y="245" width="0.2066%" height="15" fill="rgb(212,90,40)" fg:x="489835" fg:w="1499"/><text x="67.7753%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,457 samples, 0.20%)</title><rect x="67.5311%" y="229" width="0.2009%" height="15" fill="rgb(220,172,12)" fg:x="489877" fg:w="1457"/><text x="67.7811%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (120 samples, 0.02%)</title><rect x="67.7763%" y="325" width="0.0165%" height="15" fill="rgb(226,159,20)" fg:x="491656" fg:w="120"/><text x="68.0263%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (236 samples, 0.03%)</title><rect x="67.7604%" y="341" width="0.0325%" height="15" fill="rgb(234,205,16)" fg:x="491541" fg:w="236"/><text x="68.0104%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (363 samples, 0.05%)</title><rect x="67.7497%" y="357" width="0.0500%" height="15" fill="rgb(207,9,39)" fg:x="491463" fg:w="363"/><text x="67.9997%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (91 samples, 0.01%)</title><rect x="67.8711%" y="341" width="0.0125%" height="15" fill="rgb(249,143,15)" fg:x="492344" fg:w="91"/><text x="68.1211%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (134 samples, 0.02%)</title><rect x="67.9526%" y="309" width="0.0185%" height="15" fill="rgb(253,133,29)" fg:x="492935" fg:w="134"/><text x="68.2026%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (528 samples, 0.07%)</title><rect x="67.9212%" y="325" width="0.0728%" height="15" fill="rgb(221,187,0)" fg:x="492707" fg:w="528"/><text x="68.1712%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (166 samples, 0.02%)</title><rect x="67.9711%" y="309" width="0.0229%" height="15" fill="rgb(205,204,26)" fg:x="493069" fg:w="166"/><text x="68.2211%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (128 samples, 0.02%)</title><rect x="67.9763%" y="293" width="0.0176%" height="15" fill="rgb(224,68,54)" fg:x="493107" fg:w="128"/><text x="68.2263%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (819 samples, 0.11%)</title><rect x="67.8837%" y="341" width="0.1129%" height="15" fill="rgb(209,67,4)" fg:x="492435" fg:w="819"/><text x="68.1337%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (161 samples, 0.02%)</title><rect x="68.0104%" y="309" width="0.0222%" height="15" fill="rgb(228,229,18)" fg:x="493354" fg:w="161"/><text x="68.2604%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (98 samples, 0.01%)</title><rect x="68.0191%" y="293" width="0.0135%" height="15" fill="rgb(231,89,13)" fg:x="493417" fg:w="98"/><text x="68.2691%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (167 samples, 0.02%)</title><rect x="68.0100%" y="325" width="0.0230%" height="15" fill="rgb(210,182,18)" fg:x="493351" fg:w="167"/><text x="68.2600%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (107 samples, 0.01%)</title><rect x="68.0521%" y="293" width="0.0148%" height="15" fill="rgb(240,105,2)" fg:x="493657" fg:w="107"/><text x="68.3021%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (213 samples, 0.03%)</title><rect x="68.0378%" y="309" width="0.0294%" height="15" fill="rgb(207,170,50)" fg:x="493553" fg:w="213"/><text x="68.2878%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (271 samples, 0.04%)</title><rect x="68.0330%" y="325" width="0.0374%" height="15" fill="rgb(232,133,24)" fg:x="493518" fg:w="271"/><text x="68.2830%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (226 samples, 0.03%)</title><rect x="68.1525%" y="229" width="0.0312%" height="15" fill="rgb(235,166,27)" fg:x="494385" fg:w="226"/><text x="68.4025%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (561 samples, 0.08%)</title><rect x="68.1127%" y="277" width="0.0773%" height="15" fill="rgb(209,19,13)" fg:x="494096" fg:w="561"/><text x="68.3627%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (508 samples, 0.07%)</title><rect x="68.1200%" y="261" width="0.0700%" height="15" fill="rgb(226,79,39)" fg:x="494149" fg:w="508"/><text x="68.3700%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (508 samples, 0.07%)</title><rect x="68.1200%" y="245" width="0.0700%" height="15" fill="rgb(222,163,10)" fg:x="494149" fg:w="508"/><text x="68.3700%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,449 samples, 0.20%)</title><rect x="67.9980%" y="341" width="0.1997%" height="15" fill="rgb(214,44,19)" fg:x="493264" fg:w="1449"/><text x="68.2480%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (924 samples, 0.13%)</title><rect x="68.0703%" y="325" width="0.1274%" height="15" fill="rgb(210,217,13)" fg:x="493789" fg:w="924"/><text x="68.3203%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (865 samples, 0.12%)</title><rect x="68.0785%" y="309" width="0.1192%" height="15" fill="rgb(237,61,54)" fg:x="493848" fg:w="865"/><text x="68.3285%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (650 samples, 0.09%)</title><rect x="68.1081%" y="293" width="0.0896%" height="15" fill="rgb(226,184,24)" fg:x="494063" fg:w="650"/><text x="68.3581%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (723 samples, 0.10%)</title><rect x="68.2097%" y="341" width="0.0997%" height="15" fill="rgb(223,226,4)" fg:x="494800" fg:w="723"/><text x="68.4597%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (617 samples, 0.09%)</title><rect x="68.2243%" y="325" width="0.0851%" height="15" fill="rgb(210,26,41)" fg:x="494906" fg:w="617"/><text x="68.4743%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (165 samples, 0.02%)</title><rect x="68.2866%" y="309" width="0.0227%" height="15" fill="rgb(220,221,6)" fg:x="495358" fg:w="165"/><text x="68.5366%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (401 samples, 0.06%)</title><rect x="68.3404%" y="325" width="0.0553%" height="15" fill="rgb(225,89,49)" fg:x="495748" fg:w="401"/><text x="68.5904%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (152 samples, 0.02%)</title><rect x="68.3747%" y="309" width="0.0210%" height="15" fill="rgb(218,70,45)" fg:x="495997" fg:w="152"/><text x="68.6247%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (103 samples, 0.01%)</title><rect x="68.4722%" y="309" width="0.0142%" height="15" fill="rgb(238,166,21)" fg:x="496704" fg:w="103"/><text x="68.7222%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (736 samples, 0.10%)</title><rect x="68.3957%" y="325" width="0.1015%" height="15" fill="rgb(224,141,44)" fg:x="496149" fg:w="736"/><text x="68.6457%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (78 samples, 0.01%)</title><rect x="68.4864%" y="309" width="0.0108%" height="15" fill="rgb(230,12,49)" fg:x="496807" fg:w="78"/><text x="68.7364%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,106 samples, 0.29%)</title><rect x="68.3094%" y="341" width="0.2903%" height="15" fill="rgb(212,174,12)" fg:x="495523" fg:w="2106"/><text x="68.5594%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (744 samples, 0.10%)</title><rect x="68.4971%" y="325" width="0.1026%" height="15" fill="rgb(246,67,9)" fg:x="496885" fg:w="744"/><text x="68.7471%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (621 samples, 0.09%)</title><rect x="68.5141%" y="309" width="0.0856%" height="15" fill="rgb(239,35,23)" fg:x="497008" fg:w="621"/><text x="68.7641%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (186 samples, 0.03%)</title><rect x="68.5740%" y="293" width="0.0256%" height="15" fill="rgb(211,167,0)" fg:x="497443" fg:w="186"/><text x="68.8240%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (14,999 samples, 2.07%)</title><rect x="66.5360%" y="389" width="2.0677%" height="15" fill="rgb(225,119,45)" fg:x="482659" fg:w="14999"/><text x="66.7860%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,324 samples, 0.87%)</title><rect x="67.7319%" y="373" width="0.8718%" height="15" fill="rgb(210,162,6)" fg:x="491334" fg:w="6324"/><text x="67.9819%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,796 samples, 0.80%)</title><rect x="67.8047%" y="357" width="0.7990%" height="15" fill="rgb(208,118,35)" fg:x="491862" fg:w="5796"/><text x="68.0547%" y="367.50"></text></g><g><title>std::panic::catch_unwind (36,506 samples, 5.03%)</title><rect x="63.6018%" y="549" width="5.0325%" height="15" fill="rgb(239,4,53)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="559.50">std::p..</text></g><g><title>std::panicking::try (36,506 samples, 5.03%)</title><rect x="63.6018%" y="533" width="5.0325%" height="15" fill="rgb(213,130,21)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="543.50">std::p..</text></g><g><title>__rust_try (36,506 samples, 5.03%)</title><rect x="63.6018%" y="517" width="5.0325%" height="15" fill="rgb(235,148,0)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="527.50">__rust..</text></g><g><title>std::panicking::try::do_call (36,506 samples, 5.03%)</title><rect x="63.6018%" y="501" width="5.0325%" height="15" fill="rgb(244,224,18)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="511.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36,506 samples, 5.03%)</title><rect x="63.6018%" y="485" width="5.0325%" height="15" fill="rgb(211,214,4)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="495.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (36,506 samples, 5.03%)</title><rect x="63.6018%" y="469" width="5.0325%" height="15" fill="rgb(206,119,25)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="479.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (36,506 samples, 5.03%)</title><rect x="63.6018%" y="453" width="5.0325%" height="15" fill="rgb(243,93,47)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="463.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (36,506 samples, 5.03%)</title><rect x="63.6018%" y="437" width="5.0325%" height="15" fill="rgb(224,194,6)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="447.50">one_br..</text></g><g><title>one_brc::process_lines (36,506 samples, 5.03%)</title><rect x="63.6018%" y="421" width="5.0325%" height="15" fill="rgb(243,229,6)" fg:x="461374" fg:w="36506"/><text x="63.8518%" y="431.50">one_br..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (15,277 samples, 2.11%)</title><rect x="66.5283%" y="405" width="2.1060%" height="15" fill="rgb(207,23,50)" fg:x="482603" fg:w="15277"/><text x="66.7783%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (201 samples, 0.03%)</title><rect x="68.6066%" y="389" width="0.0277%" height="15" fill="rgb(253,192,32)" fg:x="497679" fg:w="201"/><text x="68.8566%" y="399.50"></text></g><g><title>__clone3 (36,508 samples, 5.03%)</title><rect x="63.6017%" y="629" width="5.0327%" height="15" fill="rgb(213,21,6)" fg:x="461373" fg:w="36508"/><text x="63.8517%" y="639.50">__clon..</text></g><g><title>start_thread (36,508 samples, 5.03%)</title><rect x="63.6017%" y="613" width="5.0327%" height="15" fill="rgb(243,151,13)" fg:x="461373" fg:w="36508"/><text x="63.8517%" y="623.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36,507 samples, 5.03%)</title><rect x="63.6018%" y="597" width="5.0326%" height="15" fill="rgb(233,165,41)" fg:x="461374" fg:w="36507"/><text x="63.8518%" y="607.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (36,507 samples, 5.03%)</title><rect x="63.6018%" y="581" width="5.0326%" height="15" fill="rgb(246,176,45)" fg:x="461374" fg:w="36507"/><text x="63.8518%" y="591.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (36,507 samples, 5.03%)</title><rect x="63.6018%" y="565" width="5.0326%" height="15" fill="rgb(217,170,52)" fg:x="461374" fg:w="36507"/><text x="63.8518%" y="575.50">std::t..</text></g><g><title>worker-4 (42,252 samples, 5.82%)</title><rect x="62.8201%" y="645" width="5.8246%" height="15" fill="rgb(214,203,54)" fg:x="455703" fg:w="42252"/><text x="63.0701%" y="655.50">worker-4</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (162 samples, 0.02%)</title><rect x="68.6507%" y="629" width="0.0223%" height="15" fill="rgb(248,215,49)" fg:x="497999" fg:w="162"/><text x="68.9007%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (99 samples, 0.01%)</title><rect x="68.6857%" y="613" width="0.0136%" height="15" fill="rgb(208,46,10)" fg:x="498253" fg:w="99"/><text x="68.9357%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.01%)</title><rect x="68.7566%" y="613" width="0.0101%" height="15" fill="rgb(254,5,31)" fg:x="498767" fg:w="73"/><text x="69.0066%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (172 samples, 0.02%)</title><rect x="68.7709%" y="613" width="0.0237%" height="15" fill="rgb(222,104,33)" fg:x="498871" fg:w="172"/><text x="69.0209%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (80 samples, 0.01%)</title><rect x="68.8016%" y="613" width="0.0110%" height="15" fill="rgb(248,49,16)" fg:x="499094" fg:w="80"/><text x="69.0516%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (80 samples, 0.01%)</title><rect x="68.8016%" y="597" width="0.0110%" height="15" fill="rgb(232,198,41)" fg:x="499094" fg:w="80"/><text x="69.0516%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (80 samples, 0.01%)</title><rect x="68.8016%" y="581" width="0.0110%" height="15" fill="rgb(214,125,3)" fg:x="499094" fg:w="80"/><text x="69.0516%" y="591.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (121 samples, 0.02%)</title><rect x="68.8127%" y="613" width="0.0167%" height="15" fill="rgb(229,220,28)" fg:x="499174" fg:w="121"/><text x="69.0627%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (74 samples, 0.01%)</title><rect x="68.8192%" y="597" width="0.0102%" height="15" fill="rgb(222,64,37)" fg:x="499221" fg:w="74"/><text x="69.0692%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (105 samples, 0.01%)</title><rect x="68.8294%" y="613" width="0.0145%" height="15" fill="rgb(249,184,13)" fg:x="499295" fg:w="105"/><text x="69.0794%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (73 samples, 0.01%)</title><rect x="68.8605%" y="613" width="0.0101%" height="15" fill="rgb(252,176,6)" fg:x="499521" fg:w="73"/><text x="69.1105%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (83 samples, 0.01%)</title><rect x="68.8753%" y="613" width="0.0114%" height="15" fill="rgb(228,153,7)" fg:x="499628" fg:w="83"/><text x="69.1253%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (81 samples, 0.01%)</title><rect x="68.9162%" y="613" width="0.0112%" height="15" fill="rgb(242,193,5)" fg:x="499925" fg:w="81"/><text x="69.1662%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (127 samples, 0.02%)</title><rect x="68.9274%" y="613" width="0.0175%" height="15" fill="rgb(232,140,9)" fg:x="500006" fg:w="127"/><text x="69.1774%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (101 samples, 0.01%)</title><rect x="68.9547%" y="613" width="0.0139%" height="15" fill="rgb(213,222,16)" fg:x="500204" fg:w="101"/><text x="69.2047%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (75 samples, 0.01%)</title><rect x="68.9686%" y="613" width="0.0103%" height="15" fill="rgb(222,75,50)" fg:x="500305" fg:w="75"/><text x="69.2186%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (93 samples, 0.01%)</title><rect x="68.9789%" y="613" width="0.0128%" height="15" fill="rgb(205,180,2)" fg:x="500380" fg:w="93"/><text x="69.2289%" y="623.50"></text></g><g><title>[anon] (2,548 samples, 0.35%)</title><rect x="68.6769%" y="629" width="0.3512%" height="15" fill="rgb(216,34,7)" fg:x="498189" fg:w="2548"/><text x="68.9269%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (137 samples, 0.02%)</title><rect x="69.0357%" y="613" width="0.0189%" height="15" fill="rgb(253,16,32)" fg:x="500792" fg:w="137"/><text x="69.2857%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (121 samples, 0.02%)</title><rect x="69.0670%" y="613" width="0.0167%" height="15" fill="rgb(208,97,28)" fg:x="501019" fg:w="121"/><text x="69.3170%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (191 samples, 0.03%)</title><rect x="69.1103%" y="613" width="0.0263%" height="15" fill="rgb(225,92,11)" fg:x="501333" fg:w="191"/><text x="69.3603%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (191 samples, 0.03%)</title><rect x="69.1103%" y="597" width="0.0263%" height="15" fill="rgb(243,38,12)" fg:x="501333" fg:w="191"/><text x="69.3603%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (191 samples, 0.03%)</title><rect x="69.1103%" y="581" width="0.0263%" height="15" fill="rgb(208,139,16)" fg:x="501333" fg:w="191"/><text x="69.3603%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (82 samples, 0.01%)</title><rect x="69.1253%" y="565" width="0.0113%" height="15" fill="rgb(227,24,9)" fg:x="501442" fg:w="82"/><text x="69.3753%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (95 samples, 0.01%)</title><rect x="69.1621%" y="613" width="0.0131%" height="15" fill="rgb(206,62,11)" fg:x="501709" fg:w="95"/><text x="69.4121%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (133 samples, 0.02%)</title><rect x="69.1759%" y="613" width="0.0183%" height="15" fill="rgb(228,134,27)" fg:x="501809" fg:w="133"/><text x="69.4259%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (161 samples, 0.02%)</title><rect x="69.2115%" y="613" width="0.0222%" height="15" fill="rgb(205,55,33)" fg:x="502067" fg:w="161"/><text x="69.4615%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (95 samples, 0.01%)</title><rect x="69.2439%" y="613" width="0.0131%" height="15" fill="rgb(243,75,43)" fg:x="502302" fg:w="95"/><text x="69.4939%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (97 samples, 0.01%)</title><rect x="69.2756%" y="613" width="0.0134%" height="15" fill="rgb(223,27,42)" fg:x="502532" fg:w="97"/><text x="69.5256%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (122 samples, 0.02%)</title><rect x="69.3176%" y="613" width="0.0168%" height="15" fill="rgb(232,189,33)" fg:x="502837" fg:w="122"/><text x="69.5676%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (175 samples, 0.02%)</title><rect x="69.3344%" y="613" width="0.0241%" height="15" fill="rgb(210,9,39)" fg:x="502959" fg:w="175"/><text x="69.5844%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (155 samples, 0.02%)</title><rect x="69.3372%" y="597" width="0.0214%" height="15" fill="rgb(242,85,26)" fg:x="502979" fg:w="155"/><text x="69.5872%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (87 samples, 0.01%)</title><rect x="69.3466%" y="581" width="0.0120%" height="15" fill="rgb(248,44,4)" fg:x="503047" fg:w="87"/><text x="69.5966%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (119 samples, 0.02%)</title><rect x="69.3586%" y="613" width="0.0164%" height="15" fill="rgb(250,96,46)" fg:x="503134" fg:w="119"/><text x="69.6086%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (74 samples, 0.01%)</title><rect x="69.3648%" y="597" width="0.0102%" height="15" fill="rgb(229,116,26)" fg:x="503179" fg:w="74"/><text x="69.6148%" y="607.50"></text></g><g><title>one_brc::process_lines (333 samples, 0.05%)</title><rect x="69.3832%" y="613" width="0.0459%" height="15" fill="rgb(246,94,34)" fg:x="503313" fg:w="333"/><text x="69.6332%" y="623.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (82 samples, 0.01%)</title><rect x="69.4410%" y="613" width="0.0113%" height="15" fill="rgb(251,73,21)" fg:x="503732" fg:w="82"/><text x="69.6910%" y="623.50"></text></g><g><title>[unknown] (3,156 samples, 0.44%)</title><rect x="69.0281%" y="629" width="0.4351%" height="15" fill="rgb(254,121,25)" fg:x="500737" fg:w="3156"/><text x="69.2781%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (95 samples, 0.01%)</title><rect x="69.7725%" y="325" width="0.0131%" height="15" fill="rgb(215,161,49)" fg:x="506137" fg:w="95"/><text x="70.0225%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (374 samples, 0.05%)</title><rect x="69.7859%" y="325" width="0.0516%" height="15" fill="rgb(221,43,13)" fg:x="506234" fg:w="374"/><text x="70.0359%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (370 samples, 0.05%)</title><rect x="69.7865%" y="309" width="0.0510%" height="15" fill="rgb(249,5,37)" fg:x="506238" fg:w="370"/><text x="70.0365%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (325 samples, 0.04%)</title><rect x="69.7927%" y="293" width="0.0448%" height="15" fill="rgb(226,25,44)" fg:x="506283" fg:w="325"/><text x="70.0427%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (159 samples, 0.02%)</title><rect x="69.8156%" y="277" width="0.0219%" height="15" fill="rgb(238,189,16)" fg:x="506449" fg:w="159"/><text x="70.0656%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (132 samples, 0.02%)</title><rect x="69.8193%" y="261" width="0.0182%" height="15" fill="rgb(251,186,8)" fg:x="506476" fg:w="132"/><text x="70.0693%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (128 samples, 0.02%)</title><rect x="69.8198%" y="245" width="0.0176%" height="15" fill="rgb(254,34,31)" fg:x="506480" fg:w="128"/><text x="70.0698%" y="255.50"></text></g><g><title>__memcmp_evex_movbe (222 samples, 0.03%)</title><rect x="69.8802%" y="277" width="0.0306%" height="15" fill="rgb(225,215,27)" fg:x="506918" fg:w="222"/><text x="70.1302%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (581 samples, 0.08%)</title><rect x="69.8375%" y="325" width="0.0801%" height="15" fill="rgb(221,192,48)" fg:x="506608" fg:w="581"/><text x="70.0875%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (506 samples, 0.07%)</title><rect x="69.8478%" y="309" width="0.0698%" height="15" fill="rgb(219,137,20)" fg:x="506683" fg:w="506"/><text x="70.0978%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (506 samples, 0.07%)</title><rect x="69.8478%" y="293" width="0.0698%" height="15" fill="rgb(219,84,11)" fg:x="506683" fg:w="506"/><text x="70.0978%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (864 samples, 0.12%)</title><rect x="69.9176%" y="325" width="0.1191%" height="15" fill="rgb(224,10,23)" fg:x="507189" fg:w="864"/><text x="70.1676%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (742 samples, 0.10%)</title><rect x="69.9344%" y="309" width="0.1023%" height="15" fill="rgb(248,22,39)" fg:x="507311" fg:w="742"/><text x="70.1844%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (283 samples, 0.04%)</title><rect x="69.9977%" y="293" width="0.0390%" height="15" fill="rgb(212,154,20)" fg:x="507770" fg:w="283"/><text x="70.2477%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (233 samples, 0.03%)</title><rect x="70.0045%" y="277" width="0.0321%" height="15" fill="rgb(236,199,50)" fg:x="507820" fg:w="233"/><text x="70.2545%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (229 samples, 0.03%)</title><rect x="70.0051%" y="261" width="0.0316%" height="15" fill="rgb(211,9,17)" fg:x="507824" fg:w="229"/><text x="70.2551%" y="271.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (80 samples, 0.01%)</title><rect x="70.1472%" y="293" width="0.0110%" height="15" fill="rgb(243,216,36)" fg:x="508855" fg:w="80"/><text x="70.3972%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,606 samples, 0.22%)</title><rect x="70.0396%" y="325" width="0.2214%" height="15" fill="rgb(250,2,10)" fg:x="508074" fg:w="1606"/><text x="70.2896%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,499 samples, 0.21%)</title><rect x="70.0543%" y="309" width="0.2066%" height="15" fill="rgb(226,50,48)" fg:x="508181" fg:w="1499"/><text x="70.3043%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (744 samples, 0.10%)</title><rect x="70.1584%" y="293" width="0.1026%" height="15" fill="rgb(243,81,16)" fg:x="508936" fg:w="744"/><text x="70.4084%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,673 samples, 0.64%)</title><rect x="69.6223%" y="341" width="0.6442%" height="15" fill="rgb(250,14,2)" fg:x="505047" fg:w="4673"/><text x="69.8723%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,192 samples, 0.72%)</title><rect x="69.5709%" y="373" width="0.7157%" height="15" fill="rgb(233,135,29)" fg:x="504674" fg:w="5192"/><text x="69.8209%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,183 samples, 0.71%)</title><rect x="69.5721%" y="357" width="0.7145%" height="15" fill="rgb(224,64,43)" fg:x="504683" fg:w="5183"/><text x="69.8221%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (146 samples, 0.02%)</title><rect x="70.2665%" y="341" width="0.0201%" height="15" fill="rgb(238,84,13)" fg:x="509720" fg:w="146"/><text x="70.5165%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (146 samples, 0.02%)</title><rect x="70.2665%" y="325" width="0.0201%" height="15" fill="rgb(253,48,26)" fg:x="509720" fg:w="146"/><text x="70.5165%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (94 samples, 0.01%)</title><rect x="70.2736%" y="309" width="0.0130%" height="15" fill="rgb(205,223,31)" fg:x="509772" fg:w="94"/><text x="70.5236%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (443 samples, 0.06%)</title><rect x="70.6227%" y="181" width="0.0611%" height="15" fill="rgb(221,41,32)" fg:x="512304" fg:w="443"/><text x="70.8727%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,214 samples, 0.17%)</title><rect x="70.5278%" y="229" width="0.1674%" height="15" fill="rgb(213,158,31)" fg:x="511616" fg:w="1214"/><text x="70.7778%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (999 samples, 0.14%)</title><rect x="70.5575%" y="213" width="0.1377%" height="15" fill="rgb(245,126,43)" fg:x="511831" fg:w="999"/><text x="70.8075%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (960 samples, 0.13%)</title><rect x="70.5629%" y="197" width="0.1323%" height="15" fill="rgb(227,7,22)" fg:x="511870" fg:w="960"/><text x="70.8129%" y="207.50"></text></g><g><title>core::mem::size_of_val (83 samples, 0.01%)</title><rect x="70.6838%" y="181" width="0.0114%" height="15" fill="rgb(252,90,44)" fg:x="512747" fg:w="83"/><text x="70.9338%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (328 samples, 0.05%)</title><rect x="70.7014%" y="181" width="0.0452%" height="15" fill="rgb(253,91,0)" fg:x="512875" fg:w="328"/><text x="70.9514%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (253 samples, 0.03%)</title><rect x="70.7117%" y="165" width="0.0349%" height="15" fill="rgb(252,175,49)" fg:x="512950" fg:w="253"/><text x="70.9617%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (236 samples, 0.03%)</title><rect x="70.7141%" y="149" width="0.0325%" height="15" fill="rgb(246,150,1)" fg:x="512967" fg:w="236"/><text x="70.9641%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,430 samples, 0.33%)</title><rect x="70.4264%" y="261" width="0.3350%" height="15" fill="rgb(241,192,25)" fg:x="510880" fg:w="2430"/><text x="70.6764%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,430 samples, 0.33%)</title><rect x="70.4264%" y="245" width="0.3350%" height="15" fill="rgb(239,187,11)" fg:x="510880" fg:w="2430"/><text x="70.6764%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (480 samples, 0.07%)</title><rect x="70.6952%" y="229" width="0.0662%" height="15" fill="rgb(218,202,51)" fg:x="512830" fg:w="480"/><text x="70.9452%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (480 samples, 0.07%)</title><rect x="70.6952%" y="213" width="0.0662%" height="15" fill="rgb(225,176,8)" fg:x="512830" fg:w="480"/><text x="70.9452%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (435 samples, 0.06%)</title><rect x="70.7014%" y="197" width="0.0600%" height="15" fill="rgb(219,122,41)" fg:x="512875" fg:w="435"/><text x="70.9514%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (107 samples, 0.01%)</title><rect x="70.7466%" y="181" width="0.0148%" height="15" fill="rgb(248,140,20)" fg:x="513203" fg:w="107"/><text x="70.9966%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (107 samples, 0.01%)</title><rect x="70.7466%" y="165" width="0.0148%" height="15" fill="rgb(245,41,37)" fg:x="513203" fg:w="107"/><text x="70.9966%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (2,933 samples, 0.40%)</title><rect x="70.3860%" y="277" width="0.4043%" height="15" fill="rgb(235,82,39)" fg:x="510587" fg:w="2933"/><text x="70.6360%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (210 samples, 0.03%)</title><rect x="70.7614%" y="261" width="0.0289%" height="15" fill="rgb(230,108,42)" fg:x="513310" fg:w="210"/><text x="71.0114%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (210 samples, 0.03%)</title><rect x="70.7614%" y="245" width="0.0289%" height="15" fill="rgb(215,150,50)" fg:x="513310" fg:w="210"/><text x="71.0114%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (210 samples, 0.03%)</title><rect x="70.7614%" y="229" width="0.0289%" height="15" fill="rgb(233,212,5)" fg:x="513310" fg:w="210"/><text x="71.0114%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (94 samples, 0.01%)</title><rect x="70.8845%" y="245" width="0.0130%" height="15" fill="rgb(245,80,22)" fg:x="514203" fg:w="94"/><text x="71.1345%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (242 samples, 0.03%)</title><rect x="70.9690%" y="165" width="0.0334%" height="15" fill="rgb(238,129,16)" fg:x="514816" fg:w="242"/><text x="71.2190%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (684 samples, 0.09%)</title><rect x="70.9086%" y="213" width="0.0943%" height="15" fill="rgb(240,19,0)" fg:x="514378" fg:w="684"/><text x="71.1586%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (313 samples, 0.04%)</title><rect x="70.9597%" y="197" width="0.0431%" height="15" fill="rgb(232,42,35)" fg:x="514749" fg:w="313"/><text x="71.2097%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (246 samples, 0.03%)</title><rect x="70.9690%" y="181" width="0.0339%" height="15" fill="rgb(223,130,24)" fg:x="514816" fg:w="246"/><text x="71.2190%" y="191.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (10,473 samples, 1.44%)</title><rect x="69.5593%" y="405" width="1.4437%" height="15" fill="rgb(237,16,22)" fg:x="504590" fg:w="10473"/><text x="69.8093%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,467 samples, 1.44%)</title><rect x="69.5601%" y="389" width="1.4429%" height="15" fill="rgb(248,192,20)" fg:x="504596" fg:w="10467"/><text x="69.8101%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,197 samples, 0.72%)</title><rect x="70.2866%" y="373" width="0.7164%" height="15" fill="rgb(233,167,2)" fg:x="509866" fg:w="5197"/><text x="70.5366%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,030 samples, 0.69%)</title><rect x="70.3096%" y="357" width="0.6934%" height="15" fill="rgb(252,71,44)" fg:x="510033" fg:w="5030"/><text x="70.5596%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4,978 samples, 0.69%)</title><rect x="70.3168%" y="341" width="0.6862%" height="15" fill="rgb(238,37,47)" fg:x="510085" fg:w="4978"/><text x="70.5668%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,860 samples, 0.67%)</title><rect x="70.3331%" y="325" width="0.6700%" height="15" fill="rgb(214,202,54)" fg:x="510203" fg:w="4860"/><text x="70.5831%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,579 samples, 0.63%)</title><rect x="70.3718%" y="309" width="0.6312%" height="15" fill="rgb(254,165,40)" fg:x="510484" fg:w="4579"/><text x="70.6218%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,577 samples, 0.63%)</title><rect x="70.3721%" y="293" width="0.6310%" height="15" fill="rgb(246,173,38)" fg:x="510486" fg:w="4577"/><text x="70.6221%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,543 samples, 0.21%)</title><rect x="70.7903%" y="277" width="0.2127%" height="15" fill="rgb(215,3,27)" fg:x="513520" fg:w="1543"/><text x="71.0403%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,447 samples, 0.20%)</title><rect x="70.8035%" y="261" width="0.1995%" height="15" fill="rgb(239,169,51)" fg:x="513616" fg:w="1447"/><text x="71.0535%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (766 samples, 0.11%)</title><rect x="70.8974%" y="245" width="0.1056%" height="15" fill="rgb(212,5,25)" fg:x="514297" fg:w="766"/><text x="71.1474%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (754 samples, 0.10%)</title><rect x="70.8991%" y="229" width="0.1039%" height="15" fill="rgb(243,45,17)" fg:x="514309" fg:w="754"/><text x="71.1491%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (306 samples, 0.04%)</title><rect x="71.0033%" y="405" width="0.0422%" height="15" fill="rgb(242,97,9)" fg:x="515065" fg:w="306"/><text x="71.2533%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (191 samples, 0.03%)</title><rect x="71.0455%" y="405" width="0.0263%" height="15" fill="rgb(228,71,31)" fg:x="515371" fg:w="191"/><text x="71.2955%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (154 samples, 0.02%)</title><rect x="71.1071%" y="341" width="0.0212%" height="15" fill="rgb(252,184,16)" fg:x="515818" fg:w="154"/><text x="71.3571%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (233 samples, 0.03%)</title><rect x="71.1286%" y="341" width="0.0321%" height="15" fill="rgb(236,169,46)" fg:x="515974" fg:w="233"/><text x="71.3786%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (456 samples, 0.06%)</title><rect x="71.1010%" y="357" width="0.0629%" height="15" fill="rgb(207,17,47)" fg:x="515774" fg:w="456"/><text x="71.3510%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (108 samples, 0.01%)</title><rect x="71.1764%" y="341" width="0.0149%" height="15" fill="rgb(206,201,28)" fg:x="516321" fg:w="108"/><text x="71.4264%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (307 samples, 0.04%)</title><rect x="71.2186%" y="309" width="0.0423%" height="15" fill="rgb(224,184,23)" fg:x="516627" fg:w="307"/><text x="71.4686%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (393 samples, 0.05%)</title><rect x="71.2080%" y="325" width="0.0542%" height="15" fill="rgb(208,139,48)" fg:x="516550" fg:w="393"/><text x="71.4580%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,383 samples, 0.19%)</title><rect x="71.0718%" y="405" width="0.1907%" height="15" fill="rgb(208,130,10)" fg:x="515562" fg:w="1383"/><text x="71.3218%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,360 samples, 0.19%)</title><rect x="71.0750%" y="389" width="0.1875%" height="15" fill="rgb(211,213,45)" fg:x="515585" fg:w="1360"/><text x="71.3250%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,320 samples, 0.18%)</title><rect x="71.0805%" y="373" width="0.1820%" height="15" fill="rgb(235,100,30)" fg:x="515625" fg:w="1320"/><text x="71.3305%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (715 samples, 0.10%)</title><rect x="71.1639%" y="357" width="0.0986%" height="15" fill="rgb(206,144,31)" fg:x="516230" fg:w="715"/><text x="71.4139%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (516 samples, 0.07%)</title><rect x="71.1913%" y="341" width="0.0711%" height="15" fill="rgb(224,200,26)" fg:x="516429" fg:w="516"/><text x="71.4413%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (77 samples, 0.01%)</title><rect x="71.4443%" y="261" width="0.0106%" height="15" fill="rgb(247,104,53)" fg:x="518264" fg:w="77"/><text x="71.6943%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (109 samples, 0.02%)</title><rect x="71.4400%" y="293" width="0.0150%" height="15" fill="rgb(220,14,17)" fg:x="518233" fg:w="109"/><text x="71.6900%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (78 samples, 0.01%)</title><rect x="71.4443%" y="277" width="0.0108%" height="15" fill="rgb(230,140,40)" fg:x="518264" fg:w="78"/><text x="71.6943%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (752 samples, 0.10%)</title><rect x="71.3515%" y="357" width="0.1037%" height="15" fill="rgb(229,2,41)" fg:x="517591" fg:w="752"/><text x="71.6015%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (339 samples, 0.05%)</title><rect x="71.4084%" y="341" width="0.0467%" height="15" fill="rgb(232,89,16)" fg:x="518004" fg:w="339"/><text x="71.6584%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (325 samples, 0.04%)</title><rect x="71.4104%" y="325" width="0.0448%" height="15" fill="rgb(247,59,52)" fg:x="518018" fg:w="325"/><text x="71.6604%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (305 samples, 0.04%)</title><rect x="71.4131%" y="309" width="0.0420%" height="15" fill="rgb(226,110,21)" fg:x="518038" fg:w="305"/><text x="71.6631%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (806 samples, 0.11%)</title><rect x="71.3442%" y="373" width="0.1111%" height="15" fill="rgb(224,176,43)" fg:x="517538" fg:w="806"/><text x="71.5942%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,039 samples, 0.14%)</title><rect x="71.3166%" y="389" width="0.1432%" height="15" fill="rgb(221,73,6)" fg:x="517338" fg:w="1039"/><text x="71.5666%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (101 samples, 0.01%)</title><rect x="71.5941%" y="373" width="0.0139%" height="15" fill="rgb(232,78,19)" fg:x="519351" fg:w="101"/><text x="71.8441%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (316 samples, 0.04%)</title><rect x="71.6094%" y="373" width="0.0436%" height="15" fill="rgb(233,112,48)" fg:x="519462" fg:w="316"/><text x="71.8594%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (315 samples, 0.04%)</title><rect x="71.6096%" y="357" width="0.0434%" height="15" fill="rgb(243,131,47)" fg:x="519463" fg:w="315"/><text x="71.8596%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (292 samples, 0.04%)</title><rect x="71.6127%" y="341" width="0.0403%" height="15" fill="rgb(226,51,1)" fg:x="519486" fg:w="292"/><text x="71.8627%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (148 samples, 0.02%)</title><rect x="71.6326%" y="325" width="0.0204%" height="15" fill="rgb(247,58,7)" fg:x="519630" fg:w="148"/><text x="71.8826%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (121 samples, 0.02%)</title><rect x="71.6363%" y="309" width="0.0167%" height="15" fill="rgb(209,7,32)" fg:x="519657" fg:w="121"/><text x="71.8863%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (118 samples, 0.02%)</title><rect x="71.6367%" y="293" width="0.0163%" height="15" fill="rgb(209,39,41)" fg:x="519660" fg:w="118"/><text x="71.8867%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (186 samples, 0.03%)</title><rect x="71.6966%" y="325" width="0.0256%" height="15" fill="rgb(226,182,46)" fg:x="520094" fg:w="186"/><text x="71.9466%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (547 samples, 0.08%)</title><rect x="71.6530%" y="373" width="0.0754%" height="15" fill="rgb(230,219,10)" fg:x="519778" fg:w="547"/><text x="71.9030%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (490 samples, 0.07%)</title><rect x="71.6609%" y="357" width="0.0675%" height="15" fill="rgb(227,175,30)" fg:x="519835" fg:w="490"/><text x="71.9109%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (490 samples, 0.07%)</title><rect x="71.6609%" y="341" width="0.0675%" height="15" fill="rgb(217,2,50)" fg:x="519835" fg:w="490"/><text x="71.9109%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (308 samples, 0.04%)</title><rect x="71.8002%" y="341" width="0.0425%" height="15" fill="rgb(229,160,0)" fg:x="520846" fg:w="308"/><text x="72.0502%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (253 samples, 0.03%)</title><rect x="71.8078%" y="325" width="0.0349%" height="15" fill="rgb(207,78,37)" fg:x="520901" fg:w="253"/><text x="72.0578%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (246 samples, 0.03%)</title><rect x="71.8088%" y="309" width="0.0339%" height="15" fill="rgb(225,57,0)" fg:x="520908" fg:w="246"/><text x="72.0588%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (830 samples, 0.11%)</title><rect x="71.7284%" y="373" width="0.1144%" height="15" fill="rgb(232,154,2)" fg:x="520325" fg:w="830"/><text x="71.9784%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (742 samples, 0.10%)</title><rect x="71.7405%" y="357" width="0.1023%" height="15" fill="rgb(241,212,25)" fg:x="520413" fg:w="742"/><text x="71.9905%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_aligned (116 samples, 0.02%)</title><rect x="71.8534%" y="357" width="0.0160%" height="15" fill="rgb(226,69,20)" fg:x="521232" fg:w="116"/><text x="72.1034%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (94 samples, 0.01%)</title><rect x="71.8565%" y="341" width="0.0130%" height="15" fill="rgb(247,184,54)" fg:x="521254" fg:w="94"/><text x="72.1065%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,016 samples, 0.28%)</title><rect x="71.8467%" y="373" width="0.2779%" height="15" fill="rgb(210,145,0)" fg:x="521183" fg:w="2016"/><text x="72.0967%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,851 samples, 0.26%)</title><rect x="71.8694%" y="357" width="0.2552%" height="15" fill="rgb(253,82,12)" fg:x="521348" fg:w="1851"/><text x="72.1194%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,812 samples, 0.66%)</title><rect x="71.4673%" y="389" width="0.6633%" height="15" fill="rgb(245,42,11)" fg:x="518431" fg:w="4812"/><text x="71.7173%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (231 samples, 0.03%)</title><rect x="72.1307%" y="373" width="0.0318%" height="15" fill="rgb(219,147,32)" fg:x="523243" fg:w="231"/><text x="72.3807%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (173 samples, 0.02%)</title><rect x="72.1387%" y="357" width="0.0238%" height="15" fill="rgb(246,12,7)" fg:x="523301" fg:w="173"/><text x="72.3887%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (120 samples, 0.02%)</title><rect x="72.1460%" y="341" width="0.0165%" height="15" fill="rgb(243,50,9)" fg:x="523354" fg:w="120"/><text x="72.3960%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (117 samples, 0.02%)</title><rect x="72.1464%" y="325" width="0.0161%" height="15" fill="rgb(219,149,6)" fg:x="523357" fg:w="117"/><text x="72.3964%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,672 samples, 0.92%)</title><rect x="71.2625%" y="405" width="0.9198%" height="15" fill="rgb(241,51,42)" fg:x="516945" fg:w="6672"/><text x="71.5125%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (374 samples, 0.05%)</title><rect x="72.1307%" y="389" width="0.0516%" height="15" fill="rgb(226,128,27)" fg:x="523243" fg:w="374"/><text x="72.3807%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (143 samples, 0.02%)</title><rect x="72.1625%" y="373" width="0.0197%" height="15" fill="rgb(244,144,4)" fg:x="523474" fg:w="143"/><text x="72.4125%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (143 samples, 0.02%)</title><rect x="72.1625%" y="357" width="0.0197%" height="15" fill="rgb(221,4,13)" fg:x="523474" fg:w="143"/><text x="72.4125%" y="367.50"></text></g><g><title>one_brc::round_towards_positive (588 samples, 0.08%)</title><rect x="72.1822%" y="405" width="0.0811%" height="15" fill="rgb(208,170,28)" fg:x="523617" fg:w="588"/><text x="72.4322%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (152 samples, 0.02%)</title><rect x="72.2423%" y="389" width="0.0210%" height="15" fill="rgb(226,131,13)" fg:x="524053" fg:w="152"/><text x="72.4923%" y="399.50"></text></g><g><title>__round (126 samples, 0.02%)</title><rect x="72.2459%" y="373" width="0.0174%" height="15" fill="rgb(215,72,41)" fg:x="524079" fg:w="126"/><text x="72.4959%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (92 samples, 0.01%)</title><rect x="72.3671%" y="357" width="0.0127%" height="15" fill="rgb(243,108,20)" fg:x="524958" fg:w="92"/><text x="72.6171%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (537 samples, 0.07%)</title><rect x="72.3214%" y="389" width="0.0740%" height="15" fill="rgb(230,189,17)" fg:x="524627" fg:w="537"/><text x="72.5714%" y="399.50"></text></g><g><title>one_brc::Measurement::record (455 samples, 0.06%)</title><rect x="72.3327%" y="373" width="0.0627%" height="15" fill="rgb(220,50,17)" fg:x="524709" fg:w="455"/><text x="72.5827%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (114 samples, 0.02%)</title><rect x="72.3798%" y="357" width="0.0157%" height="15" fill="rgb(248,152,48)" fg:x="525050" fg:w="114"/><text x="72.6298%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (87 samples, 0.01%)</title><rect x="72.4094%" y="325" width="0.0120%" height="15" fill="rgb(244,91,11)" fg:x="525265" fg:w="87"/><text x="72.6594%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (165 samples, 0.02%)</title><rect x="72.4020%" y="341" width="0.0227%" height="15" fill="rgb(220,157,5)" fg:x="525211" fg:w="165"/><text x="72.6520%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (185 samples, 0.03%)</title><rect x="72.4003%" y="357" width="0.0255%" height="15" fill="rgb(253,137,8)" fg:x="525199" fg:w="185"/><text x="72.6503%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,184 samples, 0.16%)</title><rect x="72.2633%" y="405" width="0.1632%" height="15" fill="rgb(217,137,51)" fg:x="524205" fg:w="1184"/><text x="72.5133%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (225 samples, 0.03%)</title><rect x="72.3955%" y="389" width="0.0310%" height="15" fill="rgb(218,209,53)" fg:x="525164" fg:w="225"/><text x="72.6455%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (222 samples, 0.03%)</title><rect x="72.3959%" y="373" width="0.0306%" height="15" fill="rgb(249,137,25)" fg:x="525167" fg:w="222"/><text x="72.6459%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (135 samples, 0.02%)</title><rect x="72.4596%" y="341" width="0.0186%" height="15" fill="rgb(239,155,26)" fg:x="525629" fg:w="135"/><text x="72.7096%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (404 samples, 0.06%)</title><rect x="72.4265%" y="405" width="0.0557%" height="15" fill="rgb(227,85,46)" fg:x="525389" fg:w="404"/><text x="72.6765%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (254 samples, 0.04%)</title><rect x="72.4472%" y="389" width="0.0350%" height="15" fill="rgb(251,107,43)" fg:x="525539" fg:w="254"/><text x="72.6972%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (178 samples, 0.02%)</title><rect x="72.4576%" y="373" width="0.0245%" height="15" fill="rgb(234,170,33)" fg:x="525615" fg:w="178"/><text x="72.7076%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (176 samples, 0.02%)</title><rect x="72.4579%" y="357" width="0.0243%" height="15" fill="rgb(206,29,35)" fg:x="525617" fg:w="176"/><text x="72.7079%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (279 samples, 0.04%)</title><rect x="72.6830%" y="277" width="0.0385%" height="15" fill="rgb(227,138,25)" fg:x="527250" fg:w="279"/><text x="72.9330%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (817 samples, 0.11%)</title><rect x="72.6104%" y="293" width="0.1126%" height="15" fill="rgb(249,131,35)" fg:x="526723" fg:w="817"/><text x="72.8604%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (768 samples, 0.11%)</title><rect x="72.9440%" y="277" width="0.1059%" height="15" fill="rgb(239,6,40)" fg:x="529143" fg:w="768"/><text x="73.1940%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,530 samples, 0.49%)</title><rect x="72.5700%" y="309" width="0.4866%" height="15" fill="rgb(246,136,47)" fg:x="526430" fg:w="3530"/><text x="72.8200%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,420 samples, 0.33%)</title><rect x="72.7230%" y="293" width="0.3336%" height="15" fill="rgb(253,58,26)" fg:x="527540" fg:w="2420"/><text x="72.9730%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,562 samples, 0.49%)</title><rect x="72.5665%" y="341" width="0.4910%" height="15" fill="rgb(237,141,10)" fg:x="526405" fg:w="3562"/><text x="72.8165%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,537 samples, 0.49%)</title><rect x="72.5700%" y="325" width="0.4876%" height="15" fill="rgb(234,156,12)" fg:x="526430" fg:w="3537"/><text x="72.8200%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (330 samples, 0.05%)</title><rect x="73.0681%" y="325" width="0.0455%" height="15" fill="rgb(243,224,36)" fg:x="530043" fg:w="330"/><text x="73.3181%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (385 samples, 0.05%)</title><rect x="73.1138%" y="309" width="0.0531%" height="15" fill="rgb(205,229,51)" fg:x="530375" fg:w="385"/><text x="73.3638%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (432 samples, 0.06%)</title><rect x="73.1910%" y="293" width="0.0596%" height="15" fill="rgb(223,189,4)" fg:x="530935" fg:w="432"/><text x="73.4410%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (149 samples, 0.02%)</title><rect x="73.2506%" y="293" width="0.0205%" height="15" fill="rgb(249,167,54)" fg:x="531367" fg:w="149"/><text x="73.5006%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (792 samples, 0.11%)</title><rect x="73.1669%" y="309" width="0.1092%" height="15" fill="rgb(218,34,28)" fg:x="530760" fg:w="792"/><text x="73.4169%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,229 samples, 0.17%)</title><rect x="73.1135%" y="325" width="0.1694%" height="15" fill="rgb(232,109,42)" fg:x="530373" fg:w="1229"/><text x="73.3635%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,673 samples, 0.23%)</title><rect x="73.0576%" y="341" width="0.2306%" height="15" fill="rgb(248,214,46)" fg:x="529967" fg:w="1673"/><text x="73.3076%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (128 samples, 0.02%)</title><rect x="73.4047%" y="213" width="0.0176%" height="15" fill="rgb(244,216,40)" fg:x="532485" fg:w="128"/><text x="73.6547%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (408 samples, 0.06%)</title><rect x="73.3668%" y="229" width="0.0562%" height="15" fill="rgb(231,226,31)" fg:x="532210" fg:w="408"/><text x="73.6168%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (109 samples, 0.02%)</title><rect x="73.4797%" y="213" width="0.0150%" height="15" fill="rgb(238,38,43)" fg:x="533029" fg:w="109"/><text x="73.7297%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (594 samples, 0.08%)</title><rect x="73.4230%" y="229" width="0.0819%" height="15" fill="rgb(208,88,43)" fg:x="532618" fg:w="594"/><text x="73.6730%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,462 samples, 0.20%)</title><rect x="73.3111%" y="245" width="0.2015%" height="15" fill="rgb(205,136,37)" fg:x="531806" fg:w="1462"/><text x="73.5611%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (130 samples, 0.02%)</title><rect x="73.5880%" y="213" width="0.0179%" height="15" fill="rgb(237,34,14)" fg:x="533815" fg:w="130"/><text x="73.8380%" y="223.50"></text></g><g><title>core::cmp::min (466 samples, 0.06%)</title><rect x="73.6062%" y="213" width="0.0642%" height="15" fill="rgb(236,193,44)" fg:x="533947" fg:w="466"/><text x="73.8562%" y="223.50"></text></g><g><title>core::cmp::Ord::min (466 samples, 0.06%)</title><rect x="73.6062%" y="197" width="0.0642%" height="15" fill="rgb(231,48,10)" fg:x="533947" fg:w="466"/><text x="73.8562%" y="207.50"></text></g><g><title>core::cmp::min_by (452 samples, 0.06%)</title><rect x="73.6082%" y="181" width="0.0623%" height="15" fill="rgb(213,141,34)" fg:x="533961" fg:w="452"/><text x="73.8582%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (132 samples, 0.02%)</title><rect x="73.6523%" y="165" width="0.0182%" height="15" fill="rgb(249,130,34)" fg:x="534281" fg:w="132"/><text x="73.9023%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (93 samples, 0.01%)</title><rect x="73.6577%" y="149" width="0.0128%" height="15" fill="rgb(219,42,41)" fg:x="534320" fg:w="93"/><text x="73.9077%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (497 samples, 0.07%)</title><rect x="73.6705%" y="213" width="0.0685%" height="15" fill="rgb(224,100,54)" fg:x="534413" fg:w="497"/><text x="73.9205%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,148 samples, 0.43%)</title><rect x="73.3086%" y="293" width="0.4340%" height="15" fill="rgb(229,200,27)" fg:x="531788" fg:w="3148"/><text x="73.5586%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,130 samples, 0.43%)</title><rect x="73.3111%" y="277" width="0.4315%" height="15" fill="rgb(217,118,10)" fg:x="531806" fg:w="3130"/><text x="73.5611%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,130 samples, 0.43%)</title><rect x="73.3111%" y="261" width="0.4315%" height="15" fill="rgb(206,22,3)" fg:x="531806" fg:w="3130"/><text x="73.5611%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,668 samples, 0.23%)</title><rect x="73.5126%" y="245" width="0.2299%" height="15" fill="rgb(232,163,46)" fg:x="533268" fg:w="1668"/><text x="73.7626%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,619 samples, 0.22%)</title><rect x="73.5194%" y="229" width="0.2232%" height="15" fill="rgb(206,95,13)" fg:x="533317" fg:w="1619"/><text x="73.7694%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (8,740 samples, 1.20%)</title><rect x="72.5379%" y="373" width="1.2048%" height="15" fill="rgb(253,154,18)" fg:x="526197" fg:w="8740"/><text x="72.7879%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,687 samples, 1.20%)</title><rect x="72.5452%" y="357" width="1.1975%" height="15" fill="rgb(219,32,23)" fg:x="526250" fg:w="8687"/><text x="72.7952%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,297 samples, 0.45%)</title><rect x="73.2882%" y="341" width="0.4545%" height="15" fill="rgb(230,191,45)" fg:x="531640" fg:w="3297"/><text x="73.5382%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,271 samples, 0.45%)</title><rect x="73.2918%" y="325" width="0.4509%" height="15" fill="rgb(229,64,36)" fg:x="531666" fg:w="3271"/><text x="73.5418%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,213 samples, 0.44%)</title><rect x="73.2998%" y="309" width="0.4429%" height="15" fill="rgb(205,129,25)" fg:x="531724" fg:w="3213"/><text x="73.5498%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (106 samples, 0.01%)</title><rect x="73.7896%" y="325" width="0.0146%" height="15" fill="rgb(254,112,7)" fg:x="535277" fg:w="106"/><text x="74.0396%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (224 samples, 0.03%)</title><rect x="73.7735%" y="341" width="0.0309%" height="15" fill="rgb(226,53,48)" fg:x="535160" fg:w="224"/><text x="74.0235%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (340 samples, 0.05%)</title><rect x="73.7631%" y="357" width="0.0469%" height="15" fill="rgb(214,153,38)" fg:x="535085" fg:w="340"/><text x="74.0131%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (105 samples, 0.01%)</title><rect x="73.8777%" y="341" width="0.0145%" height="15" fill="rgb(243,101,7)" fg:x="535916" fg:w="105"/><text x="74.1277%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (132 samples, 0.02%)</title><rect x="73.9602%" y="309" width="0.0182%" height="15" fill="rgb(240,140,22)" fg:x="536515" fg:w="132"/><text x="74.2102%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (502 samples, 0.07%)</title><rect x="73.9298%" y="325" width="0.0692%" height="15" fill="rgb(235,114,2)" fg:x="536294" fg:w="502"/><text x="74.1798%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (149 samples, 0.02%)</title><rect x="73.9784%" y="309" width="0.0205%" height="15" fill="rgb(242,59,12)" fg:x="536647" fg:w="149"/><text x="74.2284%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (123 samples, 0.02%)</title><rect x="73.9820%" y="293" width="0.0170%" height="15" fill="rgb(252,134,9)" fg:x="536673" fg:w="123"/><text x="74.2320%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (795 samples, 0.11%)</title><rect x="73.8921%" y="341" width="0.1096%" height="15" fill="rgb(236,4,44)" fg:x="536021" fg:w="795"/><text x="74.1421%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (104 samples, 0.01%)</title><rect x="74.0266%" y="293" width="0.0143%" height="15" fill="rgb(254,172,41)" fg:x="536996" fg:w="104"/><text x="74.2766%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (166 samples, 0.02%)</title><rect x="74.0181%" y="309" width="0.0229%" height="15" fill="rgb(244,63,20)" fg:x="536935" fg:w="166"/><text x="74.2681%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (184 samples, 0.03%)</title><rect x="74.0166%" y="325" width="0.0254%" height="15" fill="rgb(250,73,31)" fg:x="536924" fg:w="184"/><text x="74.2666%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (108 samples, 0.01%)</title><rect x="74.0621%" y="293" width="0.0149%" height="15" fill="rgb(241,38,36)" fg:x="537254" fg:w="108"/><text x="74.3121%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (220 samples, 0.03%)</title><rect x="74.0470%" y="309" width="0.0303%" height="15" fill="rgb(245,211,2)" fg:x="537144" fg:w="220"/><text x="74.2970%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (277 samples, 0.04%)</title><rect x="74.0420%" y="325" width="0.0382%" height="15" fill="rgb(206,120,28)" fg:x="537108" fg:w="277"/><text x="74.2920%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (240 samples, 0.03%)</title><rect x="74.1568%" y="229" width="0.0331%" height="15" fill="rgb(211,59,34)" fg:x="537941" fg:w="240"/><text x="74.4068%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (521 samples, 0.07%)</title><rect x="74.1219%" y="277" width="0.0718%" height="15" fill="rgb(233,168,5)" fg:x="537688" fg:w="521"/><text x="74.3719%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (457 samples, 0.06%)</title><rect x="74.1308%" y="261" width="0.0630%" height="15" fill="rgb(234,33,13)" fg:x="537752" fg:w="457"/><text x="74.3808%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (457 samples, 0.06%)</title><rect x="74.1308%" y="245" width="0.0630%" height="15" fill="rgb(231,150,26)" fg:x="537752" fg:w="457"/><text x="74.3808%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,423 samples, 0.20%)</title><rect x="74.0042%" y="341" width="0.1962%" height="15" fill="rgb(217,191,4)" fg:x="536834" fg:w="1423"/><text x="74.2542%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (872 samples, 0.12%)</title><rect x="74.0802%" y="325" width="0.1202%" height="15" fill="rgb(246,198,38)" fg:x="537385" fg:w="872"/><text x="74.3302%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (794 samples, 0.11%)</title><rect x="74.0909%" y="309" width="0.1095%" height="15" fill="rgb(245,64,37)" fg:x="537463" fg:w="794"/><text x="74.3409%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (598 samples, 0.08%)</title><rect x="74.1179%" y="293" width="0.0824%" height="15" fill="rgb(250,30,36)" fg:x="537659" fg:w="598"/><text x="74.3679%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (715 samples, 0.10%)</title><rect x="74.2100%" y="341" width="0.0986%" height="15" fill="rgb(217,86,53)" fg:x="538327" fg:w="715"/><text x="74.4600%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (620 samples, 0.09%)</title><rect x="74.2231%" y="325" width="0.0855%" height="15" fill="rgb(228,157,16)" fg:x="538422" fg:w="620"/><text x="74.4731%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (182 samples, 0.03%)</title><rect x="74.2835%" y="309" width="0.0251%" height="15" fill="rgb(217,59,31)" fg:x="538860" fg:w="182"/><text x="74.5335%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (346 samples, 0.05%)</title><rect x="74.3422%" y="325" width="0.0477%" height="15" fill="rgb(237,138,41)" fg:x="539286" fg:w="346"/><text x="74.5922%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (146 samples, 0.02%)</title><rect x="74.3698%" y="309" width="0.0201%" height="15" fill="rgb(227,91,49)" fg:x="539486" fg:w="146"/><text x="74.6198%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (112 samples, 0.02%)</title><rect x="74.4635%" y="309" width="0.0154%" height="15" fill="rgb(247,21,44)" fg:x="540166" fg:w="112"/><text x="74.7135%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (715 samples, 0.10%)</title><rect x="74.3899%" y="325" width="0.0986%" height="15" fill="rgb(219,210,51)" fg:x="539632" fg:w="715"/><text x="74.6399%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,079 samples, 0.29%)</title><rect x="74.3086%" y="341" width="0.2866%" height="15" fill="rgb(209,140,6)" fg:x="539042" fg:w="2079"/><text x="74.5586%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (774 samples, 0.11%)</title><rect x="74.4885%" y="325" width="0.1067%" height="15" fill="rgb(221,188,24)" fg:x="540347" fg:w="774"/><text x="74.7385%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (642 samples, 0.09%)</title><rect x="74.5067%" y="309" width="0.0885%" height="15" fill="rgb(232,154,20)" fg:x="540479" fg:w="642"/><text x="74.7567%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (197 samples, 0.03%)</title><rect x="74.5680%" y="293" width="0.0272%" height="15" fill="rgb(244,137,50)" fg:x="540924" fg:w="197"/><text x="74.8180%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15,319 samples, 2.11%)</title><rect x="72.4884%" y="389" width="2.1118%" height="15" fill="rgb(225,185,43)" fg:x="525838" fg:w="15319"/><text x="72.7384%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,220 samples, 0.86%)</title><rect x="73.7427%" y="373" width="0.8574%" height="15" fill="rgb(213,205,38)" fg:x="534937" fg:w="6220"/><text x="73.9927%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,706 samples, 0.79%)</title><rect x="73.8136%" y="357" width="0.7866%" height="15" fill="rgb(236,73,12)" fg:x="535451" fg:w="5706"/><text x="74.0636%" y="367.50"></text></g><g><title>std::panic::catch_unwind (37,514 samples, 5.17%)</title><rect x="69.4632%" y="549" width="5.1714%" height="15" fill="rgb(235,219,13)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="559.50">std::p..</text></g><g><title>std::panicking::try (37,514 samples, 5.17%)</title><rect x="69.4632%" y="533" width="5.1714%" height="15" fill="rgb(218,59,36)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="543.50">std::p..</text></g><g><title>__rust_try (37,514 samples, 5.17%)</title><rect x="69.4632%" y="517" width="5.1714%" height="15" fill="rgb(205,110,39)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="527.50">__rust..</text></g><g><title>std::panicking::try::do_call (37,514 samples, 5.17%)</title><rect x="69.4632%" y="501" width="5.1714%" height="15" fill="rgb(218,206,42)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="511.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (37,514 samples, 5.17%)</title><rect x="69.4632%" y="485" width="5.1714%" height="15" fill="rgb(248,125,24)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="495.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (37,514 samples, 5.17%)</title><rect x="69.4632%" y="469" width="5.1714%" height="15" fill="rgb(242,28,27)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="479.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (37,514 samples, 5.17%)</title><rect x="69.4632%" y="453" width="5.1714%" height="15" fill="rgb(216,228,15)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="463.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (37,514 samples, 5.17%)</title><rect x="69.4632%" y="437" width="5.1714%" height="15" fill="rgb(235,116,46)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="447.50">one_br..</text></g><g><title>one_brc::process_lines (37,514 samples, 5.17%)</title><rect x="69.4632%" y="421" width="5.1714%" height="15" fill="rgb(224,18,32)" fg:x="503893" fg:w="37514"/><text x="69.7132%" y="431.50">one_br..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (15,614 samples, 2.15%)</title><rect x="72.4822%" y="405" width="2.1524%" height="15" fill="rgb(252,5,12)" fg:x="525793" fg:w="15614"/><text x="72.7322%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (212 samples, 0.03%)</title><rect x="74.6054%" y="389" width="0.0292%" height="15" fill="rgb(251,36,5)" fg:x="541195" fg:w="212"/><text x="74.8554%" y="399.50"></text></g><g><title>__clone3 (37,515 samples, 5.17%)</title><rect x="69.4632%" y="629" width="5.1716%" height="15" fill="rgb(217,53,14)" fg:x="503893" fg:w="37515"/><text x="69.7132%" y="639.50">__clon..</text></g><g><title>start_thread (37,515 samples, 5.17%)</title><rect x="69.4632%" y="613" width="5.1716%" height="15" fill="rgb(215,86,45)" fg:x="503893" fg:w="37515"/><text x="69.7132%" y="623.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (37,515 samples, 5.17%)</title><rect x="69.4632%" y="597" width="5.1716%" height="15" fill="rgb(242,169,11)" fg:x="503893" fg:w="37515"/><text x="69.7132%" y="607.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (37,515 samples, 5.17%)</title><rect x="69.4632%" y="581" width="5.1716%" height="15" fill="rgb(211,213,45)" fg:x="503893" fg:w="37515"/><text x="69.7132%" y="591.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (37,515 samples, 5.17%)</title><rect x="69.4632%" y="565" width="5.1716%" height="15" fill="rgb(205,88,11)" fg:x="503893" fg:w="37515"/><text x="69.7132%" y="575.50">std::t..</text></g><g><title>worker-5 (43,523 samples, 6.00%)</title><rect x="68.6446%" y="645" width="5.9998%" height="15" fill="rgb(252,69,26)" fg:x="497955" fg:w="43523"/><text x="68.8946%" y="655.50">worker-5</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (181 samples, 0.02%)</title><rect x="74.6525%" y="629" width="0.0250%" height="15" fill="rgb(246,123,37)" fg:x="541537" fg:w="181"/><text x="74.9025%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (83 samples, 0.01%)</title><rect x="74.6891%" y="613" width="0.0114%" height="15" fill="rgb(212,205,5)" fg:x="541802" fg:w="83"/><text x="74.9391%" y="623.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (79 samples, 0.01%)</title><rect x="74.7033%" y="613" width="0.0109%" height="15" fill="rgb(253,148,0)" fg:x="541905" fg:w="79"/><text x="74.9533%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (142 samples, 0.02%)</title><rect x="74.7697%" y="613" width="0.0196%" height="15" fill="rgb(239,22,4)" fg:x="542387" fg:w="142"/><text x="75.0197%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (111 samples, 0.02%)</title><rect x="74.8065%" y="613" width="0.0153%" height="15" fill="rgb(226,26,53)" fg:x="542654" fg:w="111"/><text x="75.0565%" y="623.50"></text></g><g><title>__memcmp_evex_movbe (106 samples, 0.01%)</title><rect x="74.8218%" y="613" width="0.0146%" height="15" fill="rgb(225,229,45)" fg:x="542765" fg:w="106"/><text x="75.0718%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (73 samples, 0.01%)</title><rect x="74.8531%" y="613" width="0.0101%" height="15" fill="rgb(220,60,37)" fg:x="542992" fg:w="73"/><text x="75.1031%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (74 samples, 0.01%)</title><rect x="74.8691%" y="613" width="0.0102%" height="15" fill="rgb(217,180,35)" fg:x="543108" fg:w="74"/><text x="75.1191%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (74 samples, 0.01%)</title><rect x="74.8909%" y="613" width="0.0102%" height="15" fill="rgb(229,7,53)" fg:x="543266" fg:w="74"/><text x="75.1409%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (74 samples, 0.01%)</title><rect x="74.9134%" y="613" width="0.0102%" height="15" fill="rgb(254,137,3)" fg:x="543429" fg:w="74"/><text x="75.1634%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (120 samples, 0.02%)</title><rect x="74.9236%" y="613" width="0.0165%" height="15" fill="rgb(215,140,41)" fg:x="543503" fg:w="120"/><text x="75.1736%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (81 samples, 0.01%)</title><rect x="74.9401%" y="613" width="0.0112%" height="15" fill="rgb(250,80,15)" fg:x="543623" fg:w="81"/><text x="75.1901%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (107 samples, 0.01%)</title><rect x="74.9513%" y="613" width="0.0148%" height="15" fill="rgb(252,191,6)" fg:x="543704" fg:w="107"/><text x="75.2013%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (80 samples, 0.01%)</title><rect x="74.9759%" y="613" width="0.0110%" height="15" fill="rgb(246,217,18)" fg:x="543883" fg:w="80"/><text x="75.2259%" y="623.50"></text></g><g><title>[anon] (2,502 samples, 0.34%)</title><rect x="74.6815%" y="629" width="0.3449%" height="15" fill="rgb(223,93,7)" fg:x="541747" fg:w="2502"/><text x="74.9315%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (171 samples, 0.02%)</title><rect x="75.0336%" y="613" width="0.0236%" height="15" fill="rgb(225,55,52)" fg:x="544301" fg:w="171"/><text x="75.2836%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (95 samples, 0.01%)</title><rect x="75.0598%" y="613" width="0.0131%" height="15" fill="rgb(240,31,24)" fg:x="544491" fg:w="95"/><text x="75.3098%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (108 samples, 0.01%)</title><rect x="75.0729%" y="613" width="0.0149%" height="15" fill="rgb(205,56,52)" fg:x="544586" fg:w="108"/><text x="75.3229%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (78 samples, 0.01%)</title><rect x="75.0971%" y="613" width="0.0108%" height="15" fill="rgb(246,146,12)" fg:x="544762" fg:w="78"/><text x="75.3471%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (191 samples, 0.03%)</title><rect x="75.1174%" y="613" width="0.0263%" height="15" fill="rgb(239,84,36)" fg:x="544909" fg:w="191"/><text x="75.3674%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (191 samples, 0.03%)</title><rect x="75.1174%" y="597" width="0.0263%" height="15" fill="rgb(207,41,40)" fg:x="544909" fg:w="191"/><text x="75.3674%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (191 samples, 0.03%)</title><rect x="75.1174%" y="581" width="0.0263%" height="15" fill="rgb(241,179,25)" fg:x="544909" fg:w="191"/><text x="75.3674%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (89 samples, 0.01%)</title><rect x="75.1314%" y="565" width="0.0123%" height="15" fill="rgb(210,0,34)" fg:x="545011" fg:w="89"/><text x="75.3814%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (85 samples, 0.01%)</title><rect x="75.1703%" y="613" width="0.0117%" height="15" fill="rgb(225,217,29)" fg:x="545293" fg:w="85"/><text x="75.4203%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (130 samples, 0.02%)</title><rect x="75.1834%" y="613" width="0.0179%" height="15" fill="rgb(216,191,38)" fg:x="545388" fg:w="130"/><text x="75.4334%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (135 samples, 0.02%)</title><rect x="75.2215%" y="613" width="0.0186%" height="15" fill="rgb(232,140,52)" fg:x="545664" fg:w="135"/><text x="75.4715%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (112 samples, 0.02%)</title><rect x="75.2497%" y="613" width="0.0154%" height="15" fill="rgb(223,158,51)" fg:x="545869" fg:w="112"/><text x="75.4997%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (90 samples, 0.01%)</title><rect x="75.2829%" y="613" width="0.0124%" height="15" fill="rgb(235,29,51)" fg:x="546110" fg:w="90"/><text x="75.5329%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (84 samples, 0.01%)</title><rect x="75.2992%" y="613" width="0.0116%" height="15" fill="rgb(215,181,18)" fg:x="546228" fg:w="84"/><text x="75.5492%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (93 samples, 0.01%)</title><rect x="75.3258%" y="613" width="0.0128%" height="15" fill="rgb(227,125,34)" fg:x="546421" fg:w="93"/><text x="75.5758%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (197 samples, 0.03%)</title><rect x="75.3386%" y="613" width="0.0272%" height="15" fill="rgb(230,197,49)" fg:x="546514" fg:w="197"/><text x="75.5886%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (156 samples, 0.02%)</title><rect x="75.3443%" y="597" width="0.0215%" height="15" fill="rgb(239,141,16)" fg:x="546555" fg:w="156"/><text x="75.5943%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (88 samples, 0.01%)</title><rect x="75.3537%" y="581" width="0.0121%" height="15" fill="rgb(225,105,43)" fg:x="546623" fg:w="88"/><text x="75.6037%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (118 samples, 0.02%)</title><rect x="75.3658%" y="613" width="0.0163%" height="15" fill="rgb(214,131,14)" fg:x="546711" fg:w="118"/><text x="75.6158%" y="623.50"></text></g><g><title>one_brc::process_lines (263 samples, 0.04%)</title><rect x="75.3934%" y="613" width="0.0363%" height="15" fill="rgb(229,177,11)" fg:x="546911" fg:w="263"/><text x="75.6434%" y="623.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (95 samples, 0.01%)</title><rect x="75.4412%" y="613" width="0.0131%" height="15" fill="rgb(231,180,14)" fg:x="547258" fg:w="95"/><text x="75.6912%" y="623.50"></text></g><g><title>[unknown] (3,183 samples, 0.44%)</title><rect x="75.0264%" y="629" width="0.4388%" height="15" fill="rgb(232,88,2)" fg:x="544249" fg:w="3183"/><text x="75.2764%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (133 samples, 0.02%)</title><rect x="75.7723%" y="325" width="0.0183%" height="15" fill="rgb(205,220,8)" fg:x="549660" fg:w="133"/><text x="76.0223%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (187 samples, 0.03%)</title><rect x="75.8196%" y="277" width="0.0258%" height="15" fill="rgb(225,23,53)" fg:x="550003" fg:w="187"/><text x="76.0696%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (156 samples, 0.02%)</title><rect x="75.8239%" y="261" width="0.0215%" height="15" fill="rgb(213,62,29)" fg:x="550034" fg:w="156"/><text x="76.0739%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (155 samples, 0.02%)</title><rect x="75.8240%" y="245" width="0.0214%" height="15" fill="rgb(227,75,7)" fg:x="550035" fg:w="155"/><text x="76.0740%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (397 samples, 0.05%)</title><rect x="75.7908%" y="325" width="0.0547%" height="15" fill="rgb(207,105,14)" fg:x="549794" fg:w="397"/><text x="76.0408%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (397 samples, 0.05%)</title><rect x="75.7908%" y="309" width="0.0547%" height="15" fill="rgb(245,62,29)" fg:x="549794" fg:w="397"/><text x="76.0408%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (357 samples, 0.05%)</title><rect x="75.7963%" y="293" width="0.0492%" height="15" fill="rgb(236,202,4)" fg:x="549834" fg:w="357"/><text x="76.0463%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (235 samples, 0.03%)</title><rect x="75.8945%" y="277" width="0.0324%" height="15" fill="rgb(250,67,1)" fg:x="550546" fg:w="235"/><text x="76.1445%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (641 samples, 0.09%)</title><rect x="75.8455%" y="325" width="0.0884%" height="15" fill="rgb(253,115,44)" fg:x="550191" fg:w="641"/><text x="76.0955%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (565 samples, 0.08%)</title><rect x="75.8560%" y="309" width="0.0779%" height="15" fill="rgb(251,139,18)" fg:x="550267" fg:w="565"/><text x="76.1060%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (565 samples, 0.08%)</title><rect x="75.8560%" y="293" width="0.0779%" height="15" fill="rgb(218,22,32)" fg:x="550267" fg:w="565"/><text x="76.1060%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (802 samples, 0.11%)</title><rect x="75.9339%" y="325" width="0.1106%" height="15" fill="rgb(243,53,5)" fg:x="550832" fg:w="802"/><text x="76.1839%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (709 samples, 0.10%)</title><rect x="75.9467%" y="309" width="0.0977%" height="15" fill="rgb(227,56,16)" fg:x="550925" fg:w="709"/><text x="76.1967%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (297 samples, 0.04%)</title><rect x="76.0035%" y="293" width="0.0409%" height="15" fill="rgb(245,53,0)" fg:x="551337" fg:w="297"/><text x="76.2535%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (248 samples, 0.03%)</title><rect x="76.0103%" y="277" width="0.0342%" height="15" fill="rgb(216,170,35)" fg:x="551386" fg:w="248"/><text x="76.2603%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (238 samples, 0.03%)</title><rect x="76.0116%" y="261" width="0.0328%" height="15" fill="rgb(211,200,8)" fg:x="551396" fg:w="238"/><text x="76.2616%" y="271.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (85 samples, 0.01%)</title><rect x="76.1546%" y="293" width="0.0117%" height="15" fill="rgb(228,204,44)" fg:x="552433" fg:w="85"/><text x="76.4046%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,626 samples, 0.22%)</title><rect x="76.0472%" y="325" width="0.2241%" height="15" fill="rgb(214,121,17)" fg:x="551654" fg:w="1626"/><text x="76.2972%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,508 samples, 0.21%)</title><rect x="76.0635%" y="309" width="0.2079%" height="15" fill="rgb(233,64,38)" fg:x="551772" fg:w="1508"/><text x="76.3135%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (762 samples, 0.11%)</title><rect x="76.1663%" y="293" width="0.1050%" height="15" fill="rgb(253,54,19)" fg:x="552518" fg:w="762"/><text x="76.4163%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,775 samples, 0.66%)</title><rect x="75.6200%" y="341" width="0.6582%" height="15" fill="rgb(253,94,18)" fg:x="548555" fg:w="4775"/><text x="75.8700%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,234 samples, 0.72%)</title><rect x="75.5791%" y="373" width="0.7215%" height="15" fill="rgb(227,57,52)" fg:x="548258" fg:w="5234"/><text x="75.8291%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,231 samples, 0.72%)</title><rect x="75.5795%" y="357" width="0.7211%" height="15" fill="rgb(230,228,50)" fg:x="548261" fg:w="5231"/><text x="75.8295%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="76.2784%" y="341" width="0.0222%" height="15" fill="rgb(217,205,27)" fg:x="553331" fg:w="161"/><text x="76.5284%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="76.2784%" y="325" width="0.0222%" height="15" fill="rgb(252,71,50)" fg:x="553331" fg:w="161"/><text x="76.5284%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (100 samples, 0.01%)</title><rect x="76.2868%" y="309" width="0.0138%" height="15" fill="rgb(209,86,4)" fg:x="553392" fg:w="100"/><text x="76.5368%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (488 samples, 0.07%)</title><rect x="76.6507%" y="181" width="0.0673%" height="15" fill="rgb(229,94,0)" fg:x="556032" fg:w="488"/><text x="76.9007%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,333 samples, 0.18%)</title><rect x="76.5458%" y="229" width="0.1838%" height="15" fill="rgb(252,223,21)" fg:x="555271" fg:w="1333"/><text x="76.7958%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,153 samples, 0.16%)</title><rect x="76.5706%" y="213" width="0.1589%" height="15" fill="rgb(230,210,4)" fg:x="555451" fg:w="1153"/><text x="76.8206%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,108 samples, 0.15%)</title><rect x="76.5768%" y="197" width="0.1527%" height="15" fill="rgb(240,149,38)" fg:x="555496" fg:w="1108"/><text x="76.8268%" y="207.50"></text></g><g><title>core::mem::size_of_val (84 samples, 0.01%)</title><rect x="76.7180%" y="181" width="0.0116%" height="15" fill="rgb(254,105,20)" fg:x="556520" fg:w="84"/><text x="76.9680%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (377 samples, 0.05%)</title><rect x="76.7366%" y="181" width="0.0520%" height="15" fill="rgb(253,87,46)" fg:x="556655" fg:w="377"/><text x="76.9866%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (279 samples, 0.04%)</title><rect x="76.7501%" y="165" width="0.0385%" height="15" fill="rgb(253,116,33)" fg:x="556753" fg:w="279"/><text x="77.0001%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (266 samples, 0.04%)</title><rect x="76.7519%" y="149" width="0.0367%" height="15" fill="rgb(229,198,5)" fg:x="556766" fg:w="266"/><text x="77.0019%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,568 samples, 0.35%)</title><rect x="76.4488%" y="261" width="0.3540%" height="15" fill="rgb(242,38,37)" fg:x="554567" fg:w="2568"/><text x="76.6988%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,568 samples, 0.35%)</title><rect x="76.4488%" y="245" width="0.3540%" height="15" fill="rgb(242,69,53)" fg:x="554567" fg:w="2568"/><text x="76.6988%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (531 samples, 0.07%)</title><rect x="76.7296%" y="229" width="0.0732%" height="15" fill="rgb(249,80,16)" fg:x="556604" fg:w="531"/><text x="76.9796%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (531 samples, 0.07%)</title><rect x="76.7296%" y="213" width="0.0732%" height="15" fill="rgb(206,128,11)" fg:x="556604" fg:w="531"/><text x="76.9796%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (480 samples, 0.07%)</title><rect x="76.7366%" y="197" width="0.0662%" height="15" fill="rgb(212,35,20)" fg:x="556655" fg:w="480"/><text x="76.9866%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (103 samples, 0.01%)</title><rect x="76.7886%" y="181" width="0.0142%" height="15" fill="rgb(236,79,13)" fg:x="557032" fg:w="103"/><text x="77.0386%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (103 samples, 0.01%)</title><rect x="76.7886%" y="165" width="0.0142%" height="15" fill="rgb(233,123,3)" fg:x="557032" fg:w="103"/><text x="77.0386%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,067 samples, 0.42%)</title><rect x="76.4078%" y="277" width="0.4228%" height="15" fill="rgb(214,93,52)" fg:x="554270" fg:w="3067"/><text x="76.6578%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (202 samples, 0.03%)</title><rect x="76.8028%" y="261" width="0.0278%" height="15" fill="rgb(251,37,40)" fg:x="557135" fg:w="202"/><text x="77.0528%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (202 samples, 0.03%)</title><rect x="76.8028%" y="245" width="0.0278%" height="15" fill="rgb(227,80,54)" fg:x="557135" fg:w="202"/><text x="77.0528%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (202 samples, 0.03%)</title><rect x="76.8028%" y="229" width="0.0278%" height="15" fill="rgb(254,48,11)" fg:x="557135" fg:w="202"/><text x="77.0528%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (114 samples, 0.02%)</title><rect x="76.9230%" y="245" width="0.0157%" height="15" fill="rgb(235,193,26)" fg:x="558007" fg:w="114"/><text x="77.1730%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (235 samples, 0.03%)</title><rect x="77.0042%" y="165" width="0.0324%" height="15" fill="rgb(229,99,21)" fg:x="558596" fg:w="235"/><text x="77.2542%" y="175.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (10,666 samples, 1.47%)</title><rect x="75.5671%" y="405" width="1.4703%" height="15" fill="rgb(211,140,41)" fg:x="548171" fg:w="10666"/><text x="75.8171%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,663 samples, 1.47%)</title><rect x="75.5675%" y="389" width="1.4699%" height="15" fill="rgb(240,227,30)" fg:x="548174" fg:w="10663"/><text x="75.8175%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,344 samples, 0.74%)</title><rect x="76.3007%" y="373" width="0.7367%" height="15" fill="rgb(215,224,45)" fg:x="553493" fg:w="5344"/><text x="76.5507%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,172 samples, 0.71%)</title><rect x="76.3244%" y="357" width="0.7130%" height="15" fill="rgb(206,123,31)" fg:x="553665" fg:w="5172"/><text x="76.5744%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,100 samples, 0.70%)</title><rect x="76.3343%" y="341" width="0.7031%" height="15" fill="rgb(210,138,16)" fg:x="553737" fg:w="5100"/><text x="76.5843%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,972 samples, 0.69%)</title><rect x="76.3520%" y="325" width="0.6854%" height="15" fill="rgb(228,57,28)" fg:x="553865" fg:w="4972"/><text x="76.6020%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,680 samples, 0.65%)</title><rect x="76.3922%" y="309" width="0.6452%" height="15" fill="rgb(242,170,10)" fg:x="554157" fg:w="4680"/><text x="76.6422%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,676 samples, 0.64%)</title><rect x="76.3928%" y="293" width="0.6446%" height="15" fill="rgb(228,214,39)" fg:x="554161" fg:w="4676"/><text x="76.6428%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,500 samples, 0.21%)</title><rect x="76.8306%" y="277" width="0.2068%" height="15" fill="rgb(218,179,33)" fg:x="557337" fg:w="1500"/><text x="77.0806%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,408 samples, 0.19%)</title><rect x="76.8433%" y="261" width="0.1941%" height="15" fill="rgb(235,193,39)" fg:x="557429" fg:w="1408"/><text x="77.0933%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (716 samples, 0.10%)</title><rect x="76.9387%" y="245" width="0.0987%" height="15" fill="rgb(219,221,36)" fg:x="558121" fg:w="716"/><text x="77.1887%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (707 samples, 0.10%)</title><rect x="76.9399%" y="229" width="0.0975%" height="15" fill="rgb(248,218,19)" fg:x="558130" fg:w="707"/><text x="77.1899%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (636 samples, 0.09%)</title><rect x="76.9497%" y="213" width="0.0877%" height="15" fill="rgb(205,50,9)" fg:x="558201" fg:w="636"/><text x="77.1997%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (291 samples, 0.04%)</title><rect x="76.9973%" y="197" width="0.0401%" height="15" fill="rgb(238,81,28)" fg:x="558546" fg:w="291"/><text x="77.2473%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (241 samples, 0.03%)</title><rect x="77.0042%" y="181" width="0.0332%" height="15" fill="rgb(235,110,19)" fg:x="558596" fg:w="241"/><text x="77.2542%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (333 samples, 0.05%)</title><rect x="77.0374%" y="405" width="0.0459%" height="15" fill="rgb(214,7,14)" fg:x="558837" fg:w="333"/><text x="77.2874%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (184 samples, 0.03%)</title><rect x="77.0833%" y="405" width="0.0254%" height="15" fill="rgb(211,77,3)" fg:x="559170" fg:w="184"/><text x="77.3333%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (145 samples, 0.02%)</title><rect x="77.1379%" y="341" width="0.0200%" height="15" fill="rgb(229,5,9)" fg:x="559566" fg:w="145"/><text x="77.3879%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (225 samples, 0.03%)</title><rect x="77.1582%" y="341" width="0.0310%" height="15" fill="rgb(225,90,11)" fg:x="559713" fg:w="225"/><text x="77.4082%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (436 samples, 0.06%)</title><rect x="77.1322%" y="357" width="0.0601%" height="15" fill="rgb(242,56,8)" fg:x="559525" fg:w="436"/><text x="77.3822%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (129 samples, 0.02%)</title><rect x="77.2052%" y="341" width="0.0178%" height="15" fill="rgb(249,212,39)" fg:x="560054" fg:w="129"/><text x="77.4552%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (302 samples, 0.04%)</title><rect x="77.2487%" y="309" width="0.0416%" height="15" fill="rgb(236,90,9)" fg:x="560370" fg:w="302"/><text x="77.4987%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (391 samples, 0.05%)</title><rect x="77.2378%" y="325" width="0.0539%" height="15" fill="rgb(206,88,35)" fg:x="560291" fg:w="391"/><text x="77.4878%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (727 samples, 0.10%)</title><rect x="77.1923%" y="357" width="0.1002%" height="15" fill="rgb(205,126,30)" fg:x="559961" fg:w="727"/><text x="77.4423%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (505 samples, 0.07%)</title><rect x="77.2229%" y="341" width="0.0696%" height="15" fill="rgb(230,176,12)" fg:x="560183" fg:w="505"/><text x="77.4729%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,336 samples, 0.18%)</title><rect x="77.1087%" y="405" width="0.1842%" height="15" fill="rgb(243,19,9)" fg:x="559354" fg:w="1336"/><text x="77.3587%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,301 samples, 0.18%)</title><rect x="77.1135%" y="389" width="0.1793%" height="15" fill="rgb(245,171,17)" fg:x="559389" fg:w="1301"/><text x="77.3635%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,273 samples, 0.18%)</title><rect x="77.1174%" y="373" width="0.1755%" height="15" fill="rgb(227,52,21)" fg:x="559417" fg:w="1273"/><text x="77.3674%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (79 samples, 0.01%)</title><rect x="77.4594%" y="261" width="0.0109%" height="15" fill="rgb(238,69,14)" fg:x="561898" fg:w="79"/><text x="77.7094%" y="271.50"></text></g><g><title>core::char::methods::encode_utf8_raw (704 samples, 0.10%)</title><rect x="77.3735%" y="357" width="0.0970%" height="15" fill="rgb(241,156,39)" fg:x="561275" fg:w="704"/><text x="77.6235%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (322 samples, 0.04%)</title><rect x="77.4261%" y="341" width="0.0444%" height="15" fill="rgb(212,227,28)" fg:x="561657" fg:w="322"/><text x="77.6761%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (311 samples, 0.04%)</title><rect x="77.4277%" y="325" width="0.0429%" height="15" fill="rgb(209,118,27)" fg:x="561668" fg:w="311"/><text x="77.6777%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (286 samples, 0.04%)</title><rect x="77.4311%" y="309" width="0.0394%" height="15" fill="rgb(226,102,5)" fg:x="561693" fg:w="286"/><text x="77.6811%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (109 samples, 0.02%)</title><rect x="77.4555%" y="293" width="0.0150%" height="15" fill="rgb(223,34,3)" fg:x="561870" fg:w="109"/><text x="77.7055%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (81 samples, 0.01%)</title><rect x="77.4594%" y="277" width="0.0112%" height="15" fill="rgb(221,81,38)" fg:x="561898" fg:w="81"/><text x="77.7094%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (757 samples, 0.10%)</title><rect x="77.3665%" y="373" width="0.1044%" height="15" fill="rgb(236,219,28)" fg:x="561224" fg:w="757"/><text x="77.6165%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (981 samples, 0.14%)</title><rect x="77.3387%" y="389" width="0.1352%" height="15" fill="rgb(213,200,14)" fg:x="561023" fg:w="981"/><text x="77.5887%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (136 samples, 0.02%)</title><rect x="77.6171%" y="373" width="0.0187%" height="15" fill="rgb(240,33,19)" fg:x="563042" fg:w="136"/><text x="77.8671%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (145 samples, 0.02%)</title><rect x="77.6628%" y="325" width="0.0200%" height="15" fill="rgb(233,113,27)" fg:x="563374" fg:w="145"/><text x="77.9128%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (121 samples, 0.02%)</title><rect x="77.6661%" y="309" width="0.0167%" height="15" fill="rgb(220,221,18)" fg:x="563398" fg:w="121"/><text x="77.9161%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (117 samples, 0.02%)</title><rect x="77.6667%" y="293" width="0.0161%" height="15" fill="rgb(238,92,8)" fg:x="563402" fg:w="117"/><text x="77.9167%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (333 samples, 0.05%)</title><rect x="77.6371%" y="373" width="0.0459%" height="15" fill="rgb(222,164,16)" fg:x="563187" fg:w="333"/><text x="77.8871%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (332 samples, 0.05%)</title><rect x="77.6372%" y="357" width="0.0458%" height="15" fill="rgb(241,119,3)" fg:x="563188" fg:w="332"/><text x="77.8872%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (301 samples, 0.04%)</title><rect x="77.6415%" y="341" width="0.0415%" height="15" fill="rgb(241,44,8)" fg:x="563219" fg:w="301"/><text x="77.8915%" y="351.50"></text></g><g><title>__memcmp_evex_movbe (178 samples, 0.02%)</title><rect x="77.7291%" y="325" width="0.0245%" height="15" fill="rgb(230,36,40)" fg:x="563855" fg:w="178"/><text x="77.9791%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (563 samples, 0.08%)</title><rect x="77.6830%" y="373" width="0.0776%" height="15" fill="rgb(243,16,36)" fg:x="563520" fg:w="563"/><text x="77.9330%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (481 samples, 0.07%)</title><rect x="77.6943%" y="357" width="0.0663%" height="15" fill="rgb(231,4,26)" fg:x="563602" fg:w="481"/><text x="77.9443%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (481 samples, 0.07%)</title><rect x="77.6943%" y="341" width="0.0663%" height="15" fill="rgb(240,9,31)" fg:x="563602" fg:w="481"/><text x="77.9443%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (755 samples, 0.10%)</title><rect x="77.7717%" y="357" width="0.1041%" height="15" fill="rgb(207,173,15)" fg:x="564164" fg:w="755"/><text x="78.0217%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (330 samples, 0.05%)</title><rect x="77.8303%" y="341" width="0.0455%" height="15" fill="rgb(224,192,53)" fg:x="564589" fg:w="330"/><text x="78.0803%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (260 samples, 0.04%)</title><rect x="77.8400%" y="325" width="0.0358%" height="15" fill="rgb(223,67,28)" fg:x="564659" fg:w="260"/><text x="78.0900%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (258 samples, 0.04%)</title><rect x="77.8403%" y="309" width="0.0356%" height="15" fill="rgb(211,20,47)" fg:x="564661" fg:w="258"/><text x="78.0903%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (837 samples, 0.12%)</title><rect x="77.7606%" y="373" width="0.1154%" height="15" fill="rgb(240,228,2)" fg:x="564083" fg:w="837"/><text x="78.0106%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned (113 samples, 0.02%)</title><rect x="77.8841%" y="357" width="0.0156%" height="15" fill="rgb(248,151,12)" fg:x="564979" fg:w="113"/><text x="78.1341%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (82 samples, 0.01%)</title><rect x="77.8884%" y="341" width="0.0113%" height="15" fill="rgb(244,8,39)" fg:x="565010" fg:w="82"/><text x="78.1384%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (1,963 samples, 0.27%)</title><rect x="77.8776%" y="373" width="0.2706%" height="15" fill="rgb(222,26,8)" fg:x="564932" fg:w="1963"/><text x="78.1276%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,803 samples, 0.25%)</title><rect x="77.8997%" y="357" width="0.2485%" height="15" fill="rgb(213,106,44)" fg:x="565092" fg:w="1803"/><text x="78.1497%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,879 samples, 0.67%)</title><rect x="77.4813%" y="389" width="0.6726%" height="15" fill="rgb(214,129,20)" fg:x="562057" fg:w="4879"/><text x="77.7313%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (215 samples, 0.03%)</title><rect x="78.1540%" y="373" width="0.0296%" height="15" fill="rgb(212,32,13)" fg:x="566937" fg:w="215"/><text x="78.4040%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (160 samples, 0.02%)</title><rect x="78.1616%" y="357" width="0.0221%" height="15" fill="rgb(208,168,33)" fg:x="566992" fg:w="160"/><text x="78.4116%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (98 samples, 0.01%)</title><rect x="78.1701%" y="341" width="0.0135%" height="15" fill="rgb(231,207,8)" fg:x="567054" fg:w="98"/><text x="78.4201%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (98 samples, 0.01%)</title><rect x="78.1701%" y="325" width="0.0135%" height="15" fill="rgb(235,219,23)" fg:x="567054" fg:w="98"/><text x="78.4201%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,619 samples, 0.91%)</title><rect x="77.2928%" y="405" width="0.9124%" height="15" fill="rgb(226,216,26)" fg:x="560690" fg:w="6619"/><text x="77.5428%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (372 samples, 0.05%)</title><rect x="78.1540%" y="389" width="0.0513%" height="15" fill="rgb(239,137,16)" fg:x="566937" fg:w="372"/><text x="78.4040%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (157 samples, 0.02%)</title><rect x="78.1836%" y="373" width="0.0216%" height="15" fill="rgb(207,12,36)" fg:x="567152" fg:w="157"/><text x="78.4336%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (157 samples, 0.02%)</title><rect x="78.1836%" y="357" width="0.0216%" height="15" fill="rgb(210,214,24)" fg:x="567152" fg:w="157"/><text x="78.4336%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (82 samples, 0.01%)</title><rect x="78.1940%" y="341" width="0.0113%" height="15" fill="rgb(206,56,30)" fg:x="567227" fg:w="82"/><text x="78.4440%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (82 samples, 0.01%)</title><rect x="78.1940%" y="325" width="0.0113%" height="15" fill="rgb(228,143,26)" fg:x="567227" fg:w="82"/><text x="78.4440%" y="335.50"></text></g><g><title>one_brc::round_towards_positive (629 samples, 0.09%)</title><rect x="78.2053%" y="405" width="0.0867%" height="15" fill="rgb(216,218,46)" fg:x="567309" fg:w="629"/><text x="78.4553%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (166 samples, 0.02%)</title><rect x="78.2691%" y="389" width="0.0229%" height="15" fill="rgb(206,6,19)" fg:x="567772" fg:w="166"/><text x="78.5191%" y="399.50"></text></g><g><title>__round (144 samples, 0.02%)</title><rect x="78.2721%" y="373" width="0.0199%" height="15" fill="rgb(239,177,51)" fg:x="567794" fg:w="144"/><text x="78.5221%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (98 samples, 0.01%)</title><rect x="78.3946%" y="357" width="0.0135%" height="15" fill="rgb(216,55,25)" fg:x="568682" fg:w="98"/><text x="78.6446%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (557 samples, 0.08%)</title><rect x="78.3492%" y="389" width="0.0768%" height="15" fill="rgb(231,163,29)" fg:x="568353" fg:w="557"/><text x="78.5992%" y="399.50"></text></g><g><title>one_brc::Measurement::record (456 samples, 0.06%)</title><rect x="78.3631%" y="373" width="0.0629%" height="15" fill="rgb(232,149,50)" fg:x="568454" fg:w="456"/><text x="78.6131%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (130 samples, 0.02%)</title><rect x="78.4081%" y="357" width="0.0179%" height="15" fill="rgb(223,142,48)" fg:x="568780" fg:w="130"/><text x="78.6581%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (100 samples, 0.01%)</title><rect x="78.4401%" y="325" width="0.0138%" height="15" fill="rgb(245,83,23)" fg:x="569012" fg:w="100"/><text x="78.6901%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (183 samples, 0.03%)</title><rect x="78.4326%" y="341" width="0.0252%" height="15" fill="rgb(224,63,2)" fg:x="568958" fg:w="183"/><text x="78.6826%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (196 samples, 0.03%)</title><rect x="78.4312%" y="357" width="0.0270%" height="15" fill="rgb(218,65,53)" fg:x="568948" fg:w="196"/><text x="78.6812%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,207 samples, 0.17%)</title><rect x="78.2920%" y="405" width="0.1664%" height="15" fill="rgb(221,84,29)" fg:x="567938" fg:w="1207"/><text x="78.5420%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (235 samples, 0.03%)</title><rect x="78.4260%" y="389" width="0.0324%" height="15" fill="rgb(234,0,32)" fg:x="568910" fg:w="235"/><text x="78.6760%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (231 samples, 0.03%)</title><rect x="78.4265%" y="373" width="0.0318%" height="15" fill="rgb(206,20,16)" fg:x="568914" fg:w="231"/><text x="78.6765%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (74 samples, 0.01%)</title><rect x="78.4973%" y="325" width="0.0102%" height="15" fill="rgb(244,172,18)" fg:x="569427" fg:w="74"/><text x="78.7473%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (135 samples, 0.02%)</title><rect x="78.4923%" y="341" width="0.0186%" height="15" fill="rgb(254,133,1)" fg:x="569391" fg:w="135"/><text x="78.7423%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (428 samples, 0.06%)</title><rect x="78.4584%" y="405" width="0.0590%" height="15" fill="rgb(222,206,41)" fg:x="569145" fg:w="428"/><text x="78.7084%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (273 samples, 0.04%)</title><rect x="78.4798%" y="389" width="0.0376%" height="15" fill="rgb(212,3,42)" fg:x="569300" fg:w="273"/><text x="78.7298%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (200 samples, 0.03%)</title><rect x="78.4898%" y="373" width="0.0276%" height="15" fill="rgb(241,11,4)" fg:x="569373" fg:w="200"/><text x="78.7398%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (193 samples, 0.03%)</title><rect x="78.4908%" y="357" width="0.0266%" height="15" fill="rgb(205,19,26)" fg:x="569380" fg:w="193"/><text x="78.7408%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (265 samples, 0.04%)</title><rect x="78.7305%" y="277" width="0.0365%" height="15" fill="rgb(210,179,32)" fg:x="571119" fg:w="265"/><text x="78.9805%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (880 samples, 0.12%)</title><rect x="78.6479%" y="293" width="0.1213%" height="15" fill="rgb(227,116,49)" fg:x="570520" fg:w="880"/><text x="78.8979%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (800 samples, 0.11%)</title><rect x="78.9873%" y="277" width="0.1103%" height="15" fill="rgb(211,146,6)" fg:x="572982" fg:w="800"/><text x="79.2373%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,609 samples, 0.50%)</title><rect x="78.6051%" y="309" width="0.4975%" height="15" fill="rgb(219,44,39)" fg:x="570209" fg:w="3609"/><text x="78.8551%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,418 samples, 0.33%)</title><rect x="78.7692%" y="293" width="0.3333%" height="15" fill="rgb(234,128,11)" fg:x="571400" fg:w="2418"/><text x="79.0192%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,645 samples, 0.50%)</title><rect x="78.6004%" y="341" width="0.5025%" height="15" fill="rgb(220,183,53)" fg:x="570175" fg:w="3645"/><text x="78.8504%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,611 samples, 0.50%)</title><rect x="78.6051%" y="325" width="0.4978%" height="15" fill="rgb(213,219,32)" fg:x="570209" fg:w="3611"/><text x="78.8551%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (359 samples, 0.05%)</title><rect x="79.1081%" y="325" width="0.0495%" height="15" fill="rgb(232,156,16)" fg:x="573858" fg:w="359"/><text x="79.3581%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (402 samples, 0.06%)</title><rect x="79.1581%" y="309" width="0.0554%" height="15" fill="rgb(246,135,34)" fg:x="574221" fg:w="402"/><text x="79.4081%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (439 samples, 0.06%)</title><rect x="79.2406%" y="293" width="0.0605%" height="15" fill="rgb(241,99,0)" fg:x="574819" fg:w="439"/><text x="79.4906%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (138 samples, 0.02%)</title><rect x="79.3011%" y="293" width="0.0190%" height="15" fill="rgb(222,103,45)" fg:x="575258" fg:w="138"/><text x="79.5511%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (816 samples, 0.11%)</title><rect x="79.2135%" y="309" width="0.1125%" height="15" fill="rgb(212,57,4)" fg:x="574623" fg:w="816"/><text x="79.4635%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,265 samples, 0.17%)</title><rect x="79.1576%" y="325" width="0.1744%" height="15" fill="rgb(215,68,47)" fg:x="574217" fg:w="1265"/><text x="79.4076%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,712 samples, 0.24%)</title><rect x="79.1029%" y="341" width="0.2360%" height="15" fill="rgb(230,84,2)" fg:x="573820" fg:w="1712"/><text x="79.3529%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (119 samples, 0.02%)</title><rect x="79.4575%" y="213" width="0.0164%" height="15" fill="rgb(220,102,14)" fg:x="576393" fg:w="119"/><text x="79.7075%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (396 samples, 0.05%)</title><rect x="79.4207%" y="229" width="0.0546%" height="15" fill="rgb(240,10,32)" fg:x="576126" fg:w="396"/><text x="79.6707%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (107 samples, 0.01%)</title><rect x="79.5397%" y="213" width="0.0148%" height="15" fill="rgb(215,47,27)" fg:x="576989" fg:w="107"/><text x="79.7897%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (632 samples, 0.09%)</title><rect x="79.4756%" y="229" width="0.0871%" height="15" fill="rgb(233,188,43)" fg:x="576524" fg:w="632"/><text x="79.7256%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,517 samples, 0.21%)</title><rect x="79.3641%" y="245" width="0.2091%" height="15" fill="rgb(253,190,1)" fg:x="575715" fg:w="1517"/><text x="79.6141%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (124 samples, 0.02%)</title><rect x="79.6446%" y="213" width="0.0171%" height="15" fill="rgb(206,114,52)" fg:x="577750" fg:w="124"/><text x="79.8946%" y="223.50"></text></g><g><title>core::cmp::min (463 samples, 0.06%)</title><rect x="79.6621%" y="213" width="0.0638%" height="15" fill="rgb(233,120,37)" fg:x="577877" fg:w="463"/><text x="79.9121%" y="223.50"></text></g><g><title>core::cmp::Ord::min (463 samples, 0.06%)</title><rect x="79.6621%" y="197" width="0.0638%" height="15" fill="rgb(214,52,39)" fg:x="577877" fg:w="463"/><text x="79.9121%" y="207.50"></text></g><g><title>core::cmp::min_by (443 samples, 0.06%)</title><rect x="79.6649%" y="181" width="0.0611%" height="15" fill="rgb(223,80,29)" fg:x="577897" fg:w="443"/><text x="79.9149%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (137 samples, 0.02%)</title><rect x="79.7071%" y="165" width="0.0189%" height="15" fill="rgb(230,101,40)" fg:x="578203" fg:w="137"/><text x="79.9571%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (98 samples, 0.01%)</title><rect x="79.7124%" y="149" width="0.0135%" height="15" fill="rgb(219,211,8)" fg:x="578242" fg:w="98"/><text x="79.9624%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (459 samples, 0.06%)</title><rect x="79.7259%" y="213" width="0.0633%" height="15" fill="rgb(252,126,28)" fg:x="578340" fg:w="459"/><text x="79.9759%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,119 samples, 0.43%)</title><rect x="79.3639%" y="261" width="0.4300%" height="15" fill="rgb(215,56,38)" fg:x="575714" fg:w="3119"/><text x="79.6139%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,601 samples, 0.22%)</title><rect x="79.5732%" y="245" width="0.2207%" height="15" fill="rgb(249,55,44)" fg:x="577232" fg:w="1601"/><text x="79.8232%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,554 samples, 0.21%)</title><rect x="79.5797%" y="229" width="0.2142%" height="15" fill="rgb(220,221,32)" fg:x="577279" fg:w="1554"/><text x="79.8297%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,140 samples, 0.43%)</title><rect x="79.3612%" y="293" width="0.4329%" height="15" fill="rgb(212,216,41)" fg:x="575694" fg:w="3140"/><text x="79.6112%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,120 samples, 0.43%)</title><rect x="79.3639%" y="277" width="0.4301%" height="15" fill="rgb(228,213,43)" fg:x="575714" fg:w="3120"/><text x="79.6139%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (8,851 samples, 1.22%)</title><rect x="78.5740%" y="373" width="1.2201%" height="15" fill="rgb(211,31,26)" fg:x="569984" fg:w="8851"/><text x="78.8240%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,797 samples, 1.21%)</title><rect x="78.5815%" y="357" width="1.2127%" height="15" fill="rgb(229,202,19)" fg:x="570038" fg:w="8797"/><text x="78.8315%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,303 samples, 0.46%)</title><rect x="79.3389%" y="341" width="0.4553%" height="15" fill="rgb(229,105,46)" fg:x="575532" fg:w="3303"/><text x="79.5889%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,284 samples, 0.45%)</title><rect x="79.3415%" y="325" width="0.4527%" height="15" fill="rgb(235,108,1)" fg:x="575551" fg:w="3284"/><text x="79.5915%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,201 samples, 0.44%)</title><rect x="79.3529%" y="309" width="0.4413%" height="15" fill="rgb(245,111,35)" fg:x="575634" fg:w="3201"/><text x="79.6029%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (113 samples, 0.02%)</title><rect x="79.8442%" y="325" width="0.0156%" height="15" fill="rgb(219,185,31)" fg:x="579198" fg:w="113"/><text x="80.0942%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (243 samples, 0.03%)</title><rect x="79.8267%" y="341" width="0.0335%" height="15" fill="rgb(214,4,43)" fg:x="579071" fg:w="243"/><text x="80.0767%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (357 samples, 0.05%)</title><rect x="79.8169%" y="357" width="0.0492%" height="15" fill="rgb(235,227,40)" fg:x="579000" fg:w="357"/><text x="80.0669%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (104 samples, 0.01%)</title><rect x="79.9400%" y="341" width="0.0143%" height="15" fill="rgb(230,88,30)" fg:x="579893" fg:w="104"/><text x="80.1900%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (153 samples, 0.02%)</title><rect x="80.0265%" y="309" width="0.0211%" height="15" fill="rgb(216,217,1)" fg:x="580520" fg:w="153"/><text x="80.2765%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (553 samples, 0.08%)</title><rect x="79.9928%" y="325" width="0.0762%" height="15" fill="rgb(248,139,50)" fg:x="580276" fg:w="553"/><text x="80.2428%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (156 samples, 0.02%)</title><rect x="80.0476%" y="309" width="0.0215%" height="15" fill="rgb(233,1,21)" fg:x="580673" fg:w="156"/><text x="80.2976%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (128 samples, 0.02%)</title><rect x="80.0514%" y="293" width="0.0176%" height="15" fill="rgb(215,183,12)" fg:x="580701" fg:w="128"/><text x="80.3014%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (847 samples, 0.12%)</title><rect x="79.9544%" y="341" width="0.1168%" height="15" fill="rgb(229,104,42)" fg:x="579997" fg:w="847"/><text x="80.2044%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (110 samples, 0.02%)</title><rect x="80.0961%" y="293" width="0.0152%" height="15" fill="rgb(243,34,48)" fg:x="581025" fg:w="110"/><text x="80.3461%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (174 samples, 0.02%)</title><rect x="80.0874%" y="309" width="0.0240%" height="15" fill="rgb(239,11,44)" fg:x="580962" fg:w="174"/><text x="80.3374%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (183 samples, 0.03%)</title><rect x="80.0864%" y="325" width="0.0252%" height="15" fill="rgb(231,98,35)" fg:x="580955" fg:w="183"/><text x="80.3364%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (243 samples, 0.03%)</title><rect x="80.1152%" y="309" width="0.0335%" height="15" fill="rgb(233,28,25)" fg:x="581164" fg:w="243"/><text x="80.3652%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (115 samples, 0.02%)</title><rect x="80.1329%" y="293" width="0.0159%" height="15" fill="rgb(234,123,11)" fg:x="581292" fg:w="115"/><text x="80.3829%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (287 samples, 0.04%)</title><rect x="80.1117%" y="325" width="0.0396%" height="15" fill="rgb(220,69,3)" fg:x="581138" fg:w="287"/><text x="80.3617%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (243 samples, 0.03%)</title><rect x="80.2353%" y="229" width="0.0335%" height="15" fill="rgb(214,64,36)" fg:x="582035" fg:w="243"/><text x="80.4853%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (541 samples, 0.07%)</title><rect x="80.1984%" y="277" width="0.0746%" height="15" fill="rgb(211,138,32)" fg:x="581767" fg:w="541"/><text x="80.4484%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (480 samples, 0.07%)</title><rect x="80.2068%" y="261" width="0.0662%" height="15" fill="rgb(213,118,47)" fg:x="581828" fg:w="480"/><text x="80.4568%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (480 samples, 0.07%)</title><rect x="80.2068%" y="245" width="0.0662%" height="15" fill="rgb(243,124,49)" fg:x="581828" fg:w="480"/><text x="80.4568%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,519 samples, 0.21%)</title><rect x="80.0739%" y="341" width="0.2094%" height="15" fill="rgb(221,30,28)" fg:x="580864" fg:w="1519"/><text x="80.3239%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (958 samples, 0.13%)</title><rect x="80.1512%" y="325" width="0.1321%" height="15" fill="rgb(246,37,13)" fg:x="581425" fg:w="958"/><text x="80.4012%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (888 samples, 0.12%)</title><rect x="80.1609%" y="309" width="0.1224%" height="15" fill="rgb(249,66,14)" fg:x="581495" fg:w="888"/><text x="80.4109%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (662 samples, 0.09%)</title><rect x="80.1920%" y="293" width="0.0913%" height="15" fill="rgb(213,166,5)" fg:x="581721" fg:w="662"/><text x="80.4420%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (75 samples, 0.01%)</title><rect x="80.2729%" y="277" width="0.0103%" height="15" fill="rgb(221,66,24)" fg:x="582308" fg:w="75"/><text x="80.5229%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (770 samples, 0.11%)</title><rect x="80.2953%" y="341" width="0.1061%" height="15" fill="rgb(210,132,17)" fg:x="582470" fg:w="770"/><text x="80.5453%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (658 samples, 0.09%)</title><rect x="80.3107%" y="325" width="0.0907%" height="15" fill="rgb(243,202,5)" fg:x="582582" fg:w="658"/><text x="80.5607%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (144 samples, 0.02%)</title><rect x="80.3816%" y="309" width="0.0199%" height="15" fill="rgb(233,70,48)" fg:x="583096" fg:w="144"/><text x="80.6316%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (391 samples, 0.05%)</title><rect x="80.4337%" y="325" width="0.0539%" height="15" fill="rgb(238,41,26)" fg:x="583474" fg:w="391"/><text x="80.6837%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (158 samples, 0.02%)</title><rect x="80.4658%" y="309" width="0.0218%" height="15" fill="rgb(241,19,31)" fg:x="583707" fg:w="158"/><text x="80.7158%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (122 samples, 0.02%)</title><rect x="80.5710%" y="309" width="0.0168%" height="15" fill="rgb(214,76,10)" fg:x="584470" fg:w="122"/><text x="80.8210%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (818 samples, 0.11%)</title><rect x="80.4876%" y="325" width="0.1128%" height="15" fill="rgb(254,202,22)" fg:x="583865" fg:w="818"/><text x="80.7376%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (91 samples, 0.01%)</title><rect x="80.5878%" y="309" width="0.0125%" height="15" fill="rgb(214,72,24)" fg:x="584592" fg:w="91"/><text x="80.8378%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,212 samples, 0.30%)</title><rect x="80.4014%" y="341" width="0.3049%" height="15" fill="rgb(221,92,46)" fg:x="583240" fg:w="2212"/><text x="80.6514%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (769 samples, 0.11%)</title><rect x="80.6004%" y="325" width="0.1060%" height="15" fill="rgb(246,13,50)" fg:x="584683" fg:w="769"/><text x="80.8504%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (658 samples, 0.09%)</title><rect x="80.6157%" y="309" width="0.0907%" height="15" fill="rgb(240,165,38)" fg:x="584794" fg:w="658"/><text x="80.8657%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (211 samples, 0.03%)</title><rect x="80.6773%" y="293" width="0.0291%" height="15" fill="rgb(241,24,51)" fg:x="585241" fg:w="211"/><text x="80.9273%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15,872 samples, 2.19%)</title><rect x="78.5219%" y="389" width="2.1880%" height="15" fill="rgb(227,51,44)" fg:x="569606" fg:w="15872"/><text x="78.7719%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,643 samples, 0.92%)</title><rect x="79.7942%" y="373" width="0.9158%" height="15" fill="rgb(231,121,3)" fg:x="578835" fg:w="6643"/><text x="80.0442%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,069 samples, 0.84%)</title><rect x="79.8733%" y="357" width="0.8366%" height="15" fill="rgb(245,3,41)" fg:x="579409" fg:w="6069"/><text x="80.1233%" y="367.50"></text></g><g><title>std::panic::catch_unwind (38,275 samples, 5.28%)</title><rect x="75.4652%" y="549" width="5.2763%" height="15" fill="rgb(214,13,26)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="559.50">std::p..</text></g><g><title>std::panicking::try (38,275 samples, 5.28%)</title><rect x="75.4652%" y="533" width="5.2763%" height="15" fill="rgb(252,75,11)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="543.50">std::p..</text></g><g><title>__rust_try (38,275 samples, 5.28%)</title><rect x="75.4652%" y="517" width="5.2763%" height="15" fill="rgb(218,226,17)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="527.50">__rust..</text></g><g><title>std::panicking::try::do_call (38,275 samples, 5.28%)</title><rect x="75.4652%" y="501" width="5.2763%" height="15" fill="rgb(248,89,38)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="511.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38,275 samples, 5.28%)</title><rect x="75.4652%" y="485" width="5.2763%" height="15" fill="rgb(237,73,46)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="495.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (38,275 samples, 5.28%)</title><rect x="75.4652%" y="469" width="5.2763%" height="15" fill="rgb(242,78,33)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="479.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38,275 samples, 5.28%)</title><rect x="75.4652%" y="453" width="5.2763%" height="15" fill="rgb(235,60,3)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="463.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (38,275 samples, 5.28%)</title><rect x="75.4652%" y="437" width="5.2763%" height="15" fill="rgb(216,172,19)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="447.50">one_br..</text></g><g><title>one_brc::process_lines (38,275 samples, 5.28%)</title><rect x="75.4652%" y="421" width="5.2763%" height="15" fill="rgb(227,6,42)" fg:x="547432" fg:w="38275"/><text x="75.7152%" y="431.50">one_br..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (16,134 samples, 2.22%)</title><rect x="78.5174%" y="405" width="2.2241%" height="15" fill="rgb(223,207,42)" fg:x="569573" fg:w="16134"/><text x="78.7674%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (209 samples, 0.03%)</title><rect x="80.7127%" y="389" width="0.0288%" height="15" fill="rgb(246,138,30)" fg:x="585498" fg:w="209"/><text x="80.9627%" y="399.50"></text></g><g><title>__clone3 (38,276 samples, 5.28%)</title><rect x="75.4652%" y="629" width="5.2765%" height="15" fill="rgb(251,199,47)" fg:x="547432" fg:w="38276"/><text x="75.7152%" y="639.50">__clon..</text></g><g><title>start_thread (38,276 samples, 5.28%)</title><rect x="75.4652%" y="613" width="5.2765%" height="15" fill="rgb(228,218,44)" fg:x="547432" fg:w="38276"/><text x="75.7152%" y="623.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (38,276 samples, 5.28%)</title><rect x="75.4652%" y="597" width="5.2765%" height="15" fill="rgb(220,68,6)" fg:x="547432" fg:w="38276"/><text x="75.7152%" y="607.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (38,276 samples, 5.28%)</title><rect x="75.4652%" y="581" width="5.2765%" height="15" fill="rgb(240,60,26)" fg:x="547432" fg:w="38276"/><text x="75.7152%" y="591.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (38,276 samples, 5.28%)</title><rect x="75.4652%" y="565" width="5.2765%" height="15" fill="rgb(211,200,19)" fg:x="547432" fg:w="38276"/><text x="75.7152%" y="575.50">std::t..</text></g><g><title>worker-6 (44,298 samples, 6.11%)</title><rect x="74.6444%" y="645" width="6.1066%" height="15" fill="rgb(242,145,30)" fg:x="541478" fg:w="44298"/><text x="74.8944%" y="655.50">worker-6</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (186 samples, 0.03%)</title><rect x="80.7608%" y="629" width="0.0256%" height="15" fill="rgb(225,64,13)" fg:x="585847" fg:w="186"/><text x="81.0108%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (76 samples, 0.01%)</title><rect x="80.7902%" y="613" width="0.0105%" height="15" fill="rgb(218,103,35)" fg:x="586060" fg:w="76"/><text x="81.0402%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (76 samples, 0.01%)</title><rect x="80.7902%" y="597" width="0.0105%" height="15" fill="rgb(216,93,46)" fg:x="586060" fg:w="76"/><text x="81.0402%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (110 samples, 0.02%)</title><rect x="80.8007%" y="613" width="0.0152%" height="15" fill="rgb(225,159,27)" fg:x="586136" fg:w="110"/><text x="81.0507%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (152 samples, 0.02%)</title><rect x="80.8853%" y="613" width="0.0210%" height="15" fill="rgb(225,204,11)" fg:x="586750" fg:w="152"/><text x="81.1353%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (134 samples, 0.02%)</title><rect x="80.9228%" y="613" width="0.0185%" height="15" fill="rgb(205,56,4)" fg:x="587022" fg:w="134"/><text x="81.1728%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (77 samples, 0.01%)</title><rect x="80.9306%" y="597" width="0.0106%" height="15" fill="rgb(206,6,35)" fg:x="587079" fg:w="77"/><text x="81.1806%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (107 samples, 0.01%)</title><rect x="80.9413%" y="613" width="0.0148%" height="15" fill="rgb(247,73,52)" fg:x="587156" fg:w="107"/><text x="81.1913%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (80 samples, 0.01%)</title><rect x="80.9832%" y="613" width="0.0110%" height="15" fill="rgb(246,97,4)" fg:x="587460" fg:w="80"/><text x="81.2332%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (81 samples, 0.01%)</title><rect x="81.0038%" y="613" width="0.0112%" height="15" fill="rgb(212,37,15)" fg:x="587610" fg:w="81"/><text x="81.2538%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (80 samples, 0.01%)</title><rect x="81.0258%" y="613" width="0.0110%" height="15" fill="rgb(208,130,40)" fg:x="587769" fg:w="80"/><text x="81.2758%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (114 samples, 0.02%)</title><rect x="81.0368%" y="613" width="0.0157%" height="15" fill="rgb(236,55,29)" fg:x="587849" fg:w="114"/><text x="81.2868%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (111 samples, 0.02%)</title><rect x="81.0620%" y="613" width="0.0153%" height="15" fill="rgb(209,156,45)" fg:x="588032" fg:w="111"/><text x="81.3120%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (102 samples, 0.01%)</title><rect x="81.0860%" y="613" width="0.0141%" height="15" fill="rgb(249,107,4)" fg:x="588206" fg:w="102"/><text x="81.3360%" y="623.50"></text></g><g><title>[anon] (2,522 samples, 0.35%)</title><rect x="80.7902%" y="629" width="0.3477%" height="15" fill="rgb(227,7,13)" fg:x="586060" fg:w="2522"/><text x="81.0402%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (163 samples, 0.02%)</title><rect x="81.1449%" y="613" width="0.0225%" height="15" fill="rgb(250,129,14)" fg:x="588633" fg:w="163"/><text x="81.3949%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (89 samples, 0.01%)</title><rect x="81.1719%" y="613" width="0.0123%" height="15" fill="rgb(229,92,13)" fg:x="588829" fg:w="89"/><text x="81.4219%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (108 samples, 0.01%)</title><rect x="81.1842%" y="613" width="0.0149%" height="15" fill="rgb(245,98,39)" fg:x="588918" fg:w="108"/><text x="81.4342%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (198 samples, 0.03%)</title><rect x="81.2272%" y="613" width="0.0273%" height="15" fill="rgb(234,135,48)" fg:x="589230" fg:w="198"/><text x="81.4772%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (197 samples, 0.03%)</title><rect x="81.2273%" y="597" width="0.0272%" height="15" fill="rgb(230,98,28)" fg:x="589231" fg:w="197"/><text x="81.4773%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (197 samples, 0.03%)</title><rect x="81.2273%" y="581" width="0.0272%" height="15" fill="rgb(223,121,0)" fg:x="589231" fg:w="197"/><text x="81.4773%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (81 samples, 0.01%)</title><rect x="81.2433%" y="565" width="0.0112%" height="15" fill="rgb(234,173,33)" fg:x="589347" fg:w="81"/><text x="81.4933%" y="575.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (109 samples, 0.02%)</title><rect x="81.2943%" y="613" width="0.0150%" height="15" fill="rgb(245,47,8)" fg:x="589717" fg:w="109"/><text x="81.5443%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (169 samples, 0.02%)</title><rect x="81.3278%" y="613" width="0.0233%" height="15" fill="rgb(205,17,20)" fg:x="589960" fg:w="169"/><text x="81.5778%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (88 samples, 0.01%)</title><rect x="81.3610%" y="613" width="0.0121%" height="15" fill="rgb(232,151,16)" fg:x="590201" fg:w="88"/><text x="81.6110%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (91 samples, 0.01%)</title><rect x="81.3914%" y="613" width="0.0125%" height="15" fill="rgb(208,30,32)" fg:x="590421" fg:w="91"/><text x="81.6414%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (77 samples, 0.01%)</title><rect x="81.4068%" y="613" width="0.0106%" height="15" fill="rgb(254,26,3)" fg:x="590533" fg:w="77"/><text x="81.6568%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (100 samples, 0.01%)</title><rect x="81.4348%" y="613" width="0.0138%" height="15" fill="rgb(240,177,30)" fg:x="590736" fg:w="100"/><text x="81.6848%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (194 samples, 0.03%)</title><rect x="81.4486%" y="613" width="0.0267%" height="15" fill="rgb(248,76,44)" fg:x="590836" fg:w="194"/><text x="81.6986%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (158 samples, 0.02%)</title><rect x="81.4535%" y="597" width="0.0218%" height="15" fill="rgb(241,186,54)" fg:x="590872" fg:w="158"/><text x="81.7035%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (84 samples, 0.01%)</title><rect x="81.4637%" y="581" width="0.0116%" height="15" fill="rgb(249,171,29)" fg:x="590946" fg:w="84"/><text x="81.7137%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (128 samples, 0.02%)</title><rect x="81.4753%" y="613" width="0.0176%" height="15" fill="rgb(237,151,44)" fg:x="591030" fg:w="128"/><text x="81.7253%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (76 samples, 0.01%)</title><rect x="81.4825%" y="597" width="0.0105%" height="15" fill="rgb(228,174,30)" fg:x="591082" fg:w="76"/><text x="81.7325%" y="607.50"></text></g><g><title>one_brc::process_lines (267 samples, 0.04%)</title><rect x="81.5047%" y="613" width="0.0368%" height="15" fill="rgb(252,14,37)" fg:x="591243" fg:w="267"/><text x="81.7547%" y="623.50"></text></g><g><title>[unknown] (3,168 samples, 0.44%)</title><rect x="81.1378%" y="629" width="0.4367%" height="15" fill="rgb(207,111,40)" fg:x="588582" fg:w="3168"/><text x="81.3878%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (128 samples, 0.02%)</title><rect x="81.8869%" y="325" width="0.0176%" height="15" fill="rgb(248,171,54)" fg:x="594016" fg:w="128"/><text x="82.1369%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (372 samples, 0.05%)</title><rect x="81.9046%" y="325" width="0.0513%" height="15" fill="rgb(211,127,2)" fg:x="594144" fg:w="372"/><text x="82.1546%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (370 samples, 0.05%)</title><rect x="81.9049%" y="309" width="0.0510%" height="15" fill="rgb(236,87,47)" fg:x="594146" fg:w="370"/><text x="82.1549%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (338 samples, 0.05%)</title><rect x="81.9093%" y="293" width="0.0466%" height="15" fill="rgb(223,190,45)" fg:x="594178" fg:w="338"/><text x="82.1593%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (165 samples, 0.02%)</title><rect x="81.9331%" y="277" width="0.0227%" height="15" fill="rgb(215,5,16)" fg:x="594351" fg:w="165"/><text x="82.1831%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (133 samples, 0.02%)</title><rect x="81.9375%" y="261" width="0.0183%" height="15" fill="rgb(252,82,33)" fg:x="594383" fg:w="133"/><text x="82.1875%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (133 samples, 0.02%)</title><rect x="81.9375%" y="245" width="0.0183%" height="15" fill="rgb(247,213,44)" fg:x="594383" fg:w="133"/><text x="82.1875%" y="255.50"></text></g><g><title>__memcmp_evex_movbe (272 samples, 0.04%)</title><rect x="82.0036%" y="277" width="0.0375%" height="15" fill="rgb(205,196,44)" fg:x="594862" fg:w="272"/><text x="82.2536%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (663 samples, 0.09%)</title><rect x="81.9559%" y="325" width="0.0914%" height="15" fill="rgb(237,96,54)" fg:x="594516" fg:w="663"/><text x="82.2059%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (583 samples, 0.08%)</title><rect x="81.9669%" y="309" width="0.0804%" height="15" fill="rgb(230,113,34)" fg:x="594596" fg:w="583"/><text x="82.2169%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (583 samples, 0.08%)</title><rect x="81.9669%" y="293" width="0.0804%" height="15" fill="rgb(221,224,12)" fg:x="594596" fg:w="583"/><text x="82.2169%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (314 samples, 0.04%)</title><rect x="82.1227%" y="293" width="0.0433%" height="15" fill="rgb(219,112,44)" fg:x="595726" fg:w="314"/><text x="82.3727%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (262 samples, 0.04%)</title><rect x="82.1298%" y="277" width="0.0361%" height="15" fill="rgb(210,31,13)" fg:x="595778" fg:w="262"/><text x="82.3798%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (255 samples, 0.04%)</title><rect x="82.1308%" y="261" width="0.0352%" height="15" fill="rgb(230,25,16)" fg:x="595785" fg:w="255"/><text x="82.3808%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (755 samples, 0.10%)</title><rect x="82.0620%" y="309" width="0.1041%" height="15" fill="rgb(246,108,53)" fg:x="595286" fg:w="755"/><text x="82.3120%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (863 samples, 0.12%)</title><rect x="82.0473%" y="325" width="0.1190%" height="15" fill="rgb(241,172,50)" fg:x="595179" fg:w="863"/><text x="82.2973%" y="335.50"></text></g><g><title>core::slice::memchr::memchr (1,613 samples, 0.22%)</title><rect x="82.1705%" y="325" width="0.2224%" height="15" fill="rgb(235,141,10)" fg:x="596073" fg:w="1613"/><text x="82.4205%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,493 samples, 0.21%)</title><rect x="82.1870%" y="309" width="0.2058%" height="15" fill="rgb(220,174,43)" fg:x="596193" fg:w="1493"/><text x="82.4370%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (766 samples, 0.11%)</title><rect x="82.2873%" y="293" width="0.1056%" height="15" fill="rgb(215,181,40)" fg:x="596920" fg:w="766"/><text x="82.5373%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,844 samples, 0.67%)</title><rect x="81.7323%" y="341" width="0.6678%" height="15" fill="rgb(230,97,2)" fg:x="592894" fg:w="4844"/><text x="81.9823%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,302 samples, 0.73%)</title><rect x="81.6875%" y="373" width="0.7309%" height="15" fill="rgb(211,25,27)" fg:x="592569" fg:w="5302"/><text x="81.9375%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,296 samples, 0.73%)</title><rect x="81.6883%" y="357" width="0.7301%" height="15" fill="rgb(230,87,26)" fg:x="592575" fg:w="5296"/><text x="81.9383%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (133 samples, 0.02%)</title><rect x="82.4000%" y="341" width="0.0183%" height="15" fill="rgb(227,160,17)" fg:x="597738" fg:w="133"/><text x="82.6500%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (133 samples, 0.02%)</title><rect x="82.4000%" y="325" width="0.0183%" height="15" fill="rgb(244,85,34)" fg:x="597738" fg:w="133"/><text x="82.6500%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (87 samples, 0.01%)</title><rect x="82.4064%" y="309" width="0.0120%" height="15" fill="rgb(207,70,0)" fg:x="597784" fg:w="87"/><text x="82.6564%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (513 samples, 0.07%)</title><rect x="82.7674%" y="181" width="0.0707%" height="15" fill="rgb(223,129,7)" fg:x="600403" fg:w="513"/><text x="83.0174%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,320 samples, 0.18%)</title><rect x="82.6647%" y="229" width="0.1820%" height="15" fill="rgb(246,105,7)" fg:x="599658" fg:w="1320"/><text x="82.9147%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,111 samples, 0.15%)</title><rect x="82.6935%" y="213" width="0.1532%" height="15" fill="rgb(215,154,42)" fg:x="599867" fg:w="1111"/><text x="82.9435%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,063 samples, 0.15%)</title><rect x="82.7001%" y="197" width="0.1465%" height="15" fill="rgb(220,215,30)" fg:x="599915" fg:w="1063"/><text x="82.9501%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (345 samples, 0.05%)</title><rect x="82.8527%" y="181" width="0.0476%" height="15" fill="rgb(228,81,51)" fg:x="601022" fg:w="345"/><text x="83.1027%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (257 samples, 0.04%)</title><rect x="82.8649%" y="165" width="0.0354%" height="15" fill="rgb(247,71,54)" fg:x="601110" fg:w="257"/><text x="83.1149%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (239 samples, 0.03%)</title><rect x="82.8673%" y="149" width="0.0329%" height="15" fill="rgb(234,176,34)" fg:x="601128" fg:w="239"/><text x="83.1173%" y="159.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (444 samples, 0.06%)</title><rect x="82.8527%" y="197" width="0.0612%" height="15" fill="rgb(241,103,54)" fg:x="601022" fg:w="444"/><text x="83.1027%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (99 samples, 0.01%)</title><rect x="82.9003%" y="181" width="0.0136%" height="15" fill="rgb(228,22,34)" fg:x="601367" fg:w="99"/><text x="83.1503%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (99 samples, 0.01%)</title><rect x="82.9003%" y="165" width="0.0136%" height="15" fill="rgb(241,179,48)" fg:x="601367" fg:w="99"/><text x="83.1503%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,535 samples, 0.35%)</title><rect x="82.5646%" y="261" width="0.3495%" height="15" fill="rgb(235,167,37)" fg:x="598932" fg:w="2535"/><text x="82.8146%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,535 samples, 0.35%)</title><rect x="82.5646%" y="245" width="0.3495%" height="15" fill="rgb(213,109,30)" fg:x="598932" fg:w="2535"/><text x="82.8146%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (489 samples, 0.07%)</title><rect x="82.8467%" y="229" width="0.0674%" height="15" fill="rgb(222,172,16)" fg:x="600978" fg:w="489"/><text x="83.0967%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (489 samples, 0.07%)</title><rect x="82.8467%" y="213" width="0.0674%" height="15" fill="rgb(233,192,5)" fg:x="600978" fg:w="489"/><text x="83.0967%" y="223.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,077 samples, 0.42%)</title><rect x="82.5194%" y="277" width="0.4242%" height="15" fill="rgb(247,189,41)" fg:x="598604" fg:w="3077"/><text x="82.7694%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (213 samples, 0.03%)</title><rect x="82.9142%" y="261" width="0.0294%" height="15" fill="rgb(218,134,47)" fg:x="601468" fg:w="213"/><text x="83.1642%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (213 samples, 0.03%)</title><rect x="82.9142%" y="245" width="0.0294%" height="15" fill="rgb(216,29,3)" fg:x="601468" fg:w="213"/><text x="83.1642%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (213 samples, 0.03%)</title><rect x="82.9142%" y="229" width="0.0294%" height="15" fill="rgb(246,140,12)" fg:x="601468" fg:w="213"/><text x="83.1642%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (118 samples, 0.02%)</title><rect x="83.0314%" y="245" width="0.0163%" height="15" fill="rgb(230,136,11)" fg:x="602318" fg:w="118"/><text x="83.2814%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (253 samples, 0.03%)</title><rect x="83.1224%" y="165" width="0.0349%" height="15" fill="rgb(247,22,47)" fg:x="602978" fg:w="253"/><text x="83.3724%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (329 samples, 0.05%)</title><rect x="83.1129%" y="197" width="0.0454%" height="15" fill="rgb(218,84,22)" fg:x="602909" fg:w="329"/><text x="83.3629%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (260 samples, 0.04%)</title><rect x="83.1224%" y="181" width="0.0358%" height="15" fill="rgb(216,87,39)" fg:x="602978" fg:w="260"/><text x="83.3724%" y="191.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (10,779 samples, 1.49%)</title><rect x="81.6724%" y="405" width="1.4859%" height="15" fill="rgb(221,178,8)" fg:x="592460" fg:w="10779"/><text x="81.9224%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,769 samples, 1.48%)</title><rect x="81.6738%" y="389" width="1.4845%" height="15" fill="rgb(230,42,11)" fg:x="592470" fg:w="10769"/><text x="81.9238%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,368 samples, 0.74%)</title><rect x="82.4184%" y="373" width="0.7400%" height="15" fill="rgb(237,229,4)" fg:x="597871" fg:w="5368"/><text x="82.6684%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,204 samples, 0.72%)</title><rect x="82.4410%" y="357" width="0.7174%" height="15" fill="rgb(222,31,33)" fg:x="598035" fg:w="5204"/><text x="82.6910%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,149 samples, 0.71%)</title><rect x="82.4485%" y="341" width="0.7098%" height="15" fill="rgb(210,17,39)" fg:x="598090" fg:w="5149"/><text x="82.6985%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,019 samples, 0.69%)</title><rect x="82.4665%" y="325" width="0.6919%" height="15" fill="rgb(244,93,20)" fg:x="598220" fg:w="5019"/><text x="82.7165%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,726 samples, 0.65%)</title><rect x="82.5069%" y="309" width="0.6515%" height="15" fill="rgb(210,40,47)" fg:x="598513" fg:w="4726"/><text x="82.7569%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,725 samples, 0.65%)</title><rect x="82.5070%" y="293" width="0.6514%" height="15" fill="rgb(239,211,47)" fg:x="598514" fg:w="4725"/><text x="82.7570%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,558 samples, 0.21%)</title><rect x="82.9436%" y="277" width="0.2148%" height="15" fill="rgb(251,223,49)" fg:x="601681" fg:w="1558"/><text x="83.1936%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,464 samples, 0.20%)</title><rect x="82.9565%" y="261" width="0.2018%" height="15" fill="rgb(221,149,5)" fg:x="601775" fg:w="1464"/><text x="83.2065%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (803 samples, 0.11%)</title><rect x="83.0477%" y="245" width="0.1107%" height="15" fill="rgb(219,224,51)" fg:x="602436" fg:w="803"/><text x="83.2977%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (799 samples, 0.11%)</title><rect x="83.0482%" y="229" width="0.1101%" height="15" fill="rgb(223,7,8)" fg:x="602440" fg:w="799"/><text x="83.2982%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (722 samples, 0.10%)</title><rect x="83.0588%" y="213" width="0.0995%" height="15" fill="rgb(241,217,22)" fg:x="602517" fg:w="722"/><text x="83.3088%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (355 samples, 0.05%)</title><rect x="83.1584%" y="405" width="0.0489%" height="15" fill="rgb(248,209,0)" fg:x="603239" fg:w="355"/><text x="83.4084%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (183 samples, 0.03%)</title><rect x="83.2073%" y="405" width="0.0252%" height="15" fill="rgb(217,205,4)" fg:x="603594" fg:w="183"/><text x="83.4573%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (187 samples, 0.03%)</title><rect x="83.2702%" y="341" width="0.0258%" height="15" fill="rgb(228,124,39)" fg:x="604050" fg:w="187"/><text x="83.5202%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (260 samples, 0.04%)</title><rect x="83.2961%" y="341" width="0.0358%" height="15" fill="rgb(250,116,42)" fg:x="604238" fg:w="260"/><text x="83.5461%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (535 samples, 0.07%)</title><rect x="83.2627%" y="357" width="0.0738%" height="15" fill="rgb(223,202,9)" fg:x="603996" fg:w="535"/><text x="83.5127%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (111 samples, 0.02%)</title><rect x="83.3498%" y="341" width="0.0153%" height="15" fill="rgb(242,222,40)" fg:x="604628" fg:w="111"/><text x="83.5998%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (310 samples, 0.04%)</title><rect x="83.3919%" y="309" width="0.0427%" height="15" fill="rgb(229,99,46)" fg:x="604933" fg:w="310"/><text x="83.6419%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (393 samples, 0.05%)</title><rect x="83.3815%" y="325" width="0.0542%" height="15" fill="rgb(225,56,46)" fg:x="604858" fg:w="393"/><text x="83.6315%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (723 samples, 0.10%)</title><rect x="83.3365%" y="357" width="0.0997%" height="15" fill="rgb(227,94,5)" fg:x="604531" fg:w="723"/><text x="83.5865%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (515 samples, 0.07%)</title><rect x="83.3651%" y="341" width="0.0710%" height="15" fill="rgb(205,112,38)" fg:x="604739" fg:w="515"/><text x="83.6151%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,480 samples, 0.20%)</title><rect x="83.2325%" y="405" width="0.2040%" height="15" fill="rgb(231,133,46)" fg:x="603777" fg:w="1480"/><text x="83.4825%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,449 samples, 0.20%)</title><rect x="83.2368%" y="389" width="0.1997%" height="15" fill="rgb(217,16,9)" fg:x="603808" fg:w="1449"/><text x="83.4868%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,402 samples, 0.19%)</title><rect x="83.2433%" y="373" width="0.1933%" height="15" fill="rgb(249,173,9)" fg:x="603855" fg:w="1402"/><text x="83.4933%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (90 samples, 0.01%)</title><rect x="83.6126%" y="261" width="0.0124%" height="15" fill="rgb(205,163,53)" fg:x="606534" fg:w="90"/><text x="83.8626%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (109 samples, 0.02%)</title><rect x="83.6102%" y="293" width="0.0150%" height="15" fill="rgb(217,54,41)" fg:x="606517" fg:w="109"/><text x="83.8602%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (92 samples, 0.01%)</title><rect x="83.6126%" y="277" width="0.0127%" height="15" fill="rgb(228,216,12)" fg:x="606534" fg:w="92"/><text x="83.8626%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (765 samples, 0.11%)</title><rect x="83.5199%" y="373" width="0.1055%" height="15" fill="rgb(244,228,15)" fg:x="605862" fg:w="765"/><text x="83.7699%" y="383.50"></text></g><g><title>core::char::methods::encode_utf8_raw (705 samples, 0.10%)</title><rect x="83.5282%" y="357" width="0.0972%" height="15" fill="rgb(221,176,53)" fg:x="605922" fg:w="705"/><text x="83.7782%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (296 samples, 0.04%)</title><rect x="83.5846%" y="341" width="0.0408%" height="15" fill="rgb(205,94,34)" fg:x="606331" fg:w="296"/><text x="83.8346%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (285 samples, 0.04%)</title><rect x="83.5861%" y="325" width="0.0393%" height="15" fill="rgb(213,110,48)" fg:x="606342" fg:w="285"/><text x="83.8361%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (267 samples, 0.04%)</title><rect x="83.5886%" y="309" width="0.0368%" height="15" fill="rgb(236,142,28)" fg:x="606360" fg:w="267"/><text x="83.8386%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,008 samples, 0.14%)</title><rect x="83.4902%" y="389" width="0.1390%" height="15" fill="rgb(225,135,29)" fg:x="605646" fg:w="1008"/><text x="83.7402%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (148 samples, 0.02%)</title><rect x="83.7584%" y="373" width="0.0204%" height="15" fill="rgb(252,45,31)" fg:x="607592" fg:w="148"/><text x="84.0084%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (348 samples, 0.05%)</title><rect x="83.7802%" y="373" width="0.0480%" height="15" fill="rgb(211,187,50)" fg:x="607750" fg:w="348"/><text x="84.0302%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (346 samples, 0.05%)</title><rect x="83.7805%" y="357" width="0.0477%" height="15" fill="rgb(229,109,7)" fg:x="607752" fg:w="346"/><text x="84.0305%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (319 samples, 0.04%)</title><rect x="83.7842%" y="341" width="0.0440%" height="15" fill="rgb(251,131,51)" fg:x="607779" fg:w="319"/><text x="84.0342%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (149 samples, 0.02%)</title><rect x="83.8076%" y="325" width="0.0205%" height="15" fill="rgb(251,180,35)" fg:x="607949" fg:w="149"/><text x="84.0576%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (122 samples, 0.02%)</title><rect x="83.8114%" y="309" width="0.0168%" height="15" fill="rgb(211,46,32)" fg:x="607976" fg:w="122"/><text x="84.0614%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (122 samples, 0.02%)</title><rect x="83.8114%" y="293" width="0.0168%" height="15" fill="rgb(248,123,17)" fg:x="607976" fg:w="122"/><text x="84.0614%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (191 samples, 0.03%)</title><rect x="83.8768%" y="325" width="0.0263%" height="15" fill="rgb(227,141,18)" fg:x="608451" fg:w="191"/><text x="84.1268%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (584 samples, 0.08%)</title><rect x="83.8282%" y="373" width="0.0805%" height="15" fill="rgb(216,102,9)" fg:x="608098" fg:w="584"/><text x="84.0782%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (510 samples, 0.07%)</title><rect x="83.8384%" y="357" width="0.0703%" height="15" fill="rgb(253,47,13)" fg:x="608172" fg:w="510"/><text x="84.0884%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (510 samples, 0.07%)</title><rect x="83.8384%" y="341" width="0.0703%" height="15" fill="rgb(226,93,23)" fg:x="608172" fg:w="510"/><text x="84.0884%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (860 samples, 0.12%)</title><rect x="83.9087%" y="373" width="0.1186%" height="15" fill="rgb(247,104,17)" fg:x="608682" fg:w="860"/><text x="84.1587%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (762 samples, 0.11%)</title><rect x="83.9222%" y="357" width="0.1050%" height="15" fill="rgb(233,203,26)" fg:x="608780" fg:w="762"/><text x="84.1722%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (320 samples, 0.04%)</title><rect x="83.9831%" y="341" width="0.0441%" height="15" fill="rgb(244,98,49)" fg:x="609222" fg:w="320"/><text x="84.2331%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (261 samples, 0.04%)</title><rect x="83.9913%" y="325" width="0.0360%" height="15" fill="rgb(235,134,22)" fg:x="609281" fg:w="261"/><text x="84.2413%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (254 samples, 0.04%)</title><rect x="83.9922%" y="309" width="0.0350%" height="15" fill="rgb(221,70,32)" fg:x="609288" fg:w="254"/><text x="84.2422%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned (138 samples, 0.02%)</title><rect x="84.0384%" y="357" width="0.0190%" height="15" fill="rgb(238,15,50)" fg:x="609623" fg:w="138"/><text x="84.2884%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (105 samples, 0.01%)</title><rect x="84.0430%" y="341" width="0.0145%" height="15" fill="rgb(215,221,48)" fg:x="609656" fg:w="105"/><text x="84.2930%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,008 samples, 0.28%)</title><rect x="84.0319%" y="373" width="0.2768%" height="15" fill="rgb(236,73,3)" fg:x="609576" fg:w="2008"/><text x="84.2819%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,823 samples, 0.25%)</title><rect x="84.0574%" y="357" width="0.2513%" height="15" fill="rgb(250,107,11)" fg:x="609761" fg:w="1823"/><text x="84.3074%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,916 samples, 0.68%)</title><rect x="83.6364%" y="389" width="0.6777%" height="15" fill="rgb(242,39,14)" fg:x="606707" fg:w="4916"/><text x="83.8864%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (226 samples, 0.03%)</title><rect x="84.3141%" y="373" width="0.0312%" height="15" fill="rgb(248,164,37)" fg:x="611623" fg:w="226"/><text x="84.5641%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (166 samples, 0.02%)</title><rect x="84.3224%" y="357" width="0.0229%" height="15" fill="rgb(217,60,12)" fg:x="611683" fg:w="166"/><text x="84.5724%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (111 samples, 0.02%)</title><rect x="84.3300%" y="341" width="0.0153%" height="15" fill="rgb(240,125,29)" fg:x="611738" fg:w="111"/><text x="84.5800%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (107 samples, 0.01%)</title><rect x="84.3305%" y="325" width="0.0148%" height="15" fill="rgb(208,207,28)" fg:x="611742" fg:w="107"/><text x="84.5805%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (75 samples, 0.01%)</title><rect x="84.3464%" y="341" width="0.0103%" height="15" fill="rgb(209,159,27)" fg:x="611857" fg:w="75"/><text x="84.5964%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (6,748 samples, 0.93%)</title><rect x="83.4365%" y="405" width="0.9302%" height="15" fill="rgb(251,176,53)" fg:x="605257" fg:w="6748"/><text x="83.6865%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (382 samples, 0.05%)</title><rect x="84.3141%" y="389" width="0.0527%" height="15" fill="rgb(211,85,7)" fg:x="611623" fg:w="382"/><text x="84.5641%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (156 samples, 0.02%)</title><rect x="84.3453%" y="373" width="0.0215%" height="15" fill="rgb(216,64,54)" fg:x="611849" fg:w="156"/><text x="84.5953%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (156 samples, 0.02%)</title><rect x="84.3453%" y="357" width="0.0215%" height="15" fill="rgb(217,54,24)" fg:x="611849" fg:w="156"/><text x="84.5953%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (73 samples, 0.01%)</title><rect x="84.3567%" y="341" width="0.0101%" height="15" fill="rgb(208,206,53)" fg:x="611932" fg:w="73"/><text x="84.6067%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (73 samples, 0.01%)</title><rect x="84.3567%" y="325" width="0.0101%" height="15" fill="rgb(251,74,39)" fg:x="611932" fg:w="73"/><text x="84.6067%" y="335.50"></text></g><g><title>one_brc::round_towards_positive (633 samples, 0.09%)</title><rect x="84.3668%" y="405" width="0.0873%" height="15" fill="rgb(226,47,5)" fg:x="612005" fg:w="633"/><text x="84.6168%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (156 samples, 0.02%)</title><rect x="84.4325%" y="389" width="0.0215%" height="15" fill="rgb(234,111,33)" fg:x="612482" fg:w="156"/><text x="84.6825%" y="399.50"></text></g><g><title>__round (129 samples, 0.02%)</title><rect x="84.4362%" y="373" width="0.0178%" height="15" fill="rgb(251,14,10)" fg:x="612509" fg:w="129"/><text x="84.6862%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (84 samples, 0.01%)</title><rect x="84.5577%" y="357" width="0.0116%" height="15" fill="rgb(232,43,0)" fg:x="613390" fg:w="84"/><text x="84.8077%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (537 samples, 0.07%)</title><rect x="84.5134%" y="389" width="0.0740%" height="15" fill="rgb(222,68,43)" fg:x="613069" fg:w="537"/><text x="84.7634%" y="399.50"></text></g><g><title>one_brc::Measurement::record (446 samples, 0.06%)</title><rect x="84.5260%" y="373" width="0.0615%" height="15" fill="rgb(217,24,23)" fg:x="613160" fg:w="446"/><text x="84.7760%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (132 samples, 0.02%)</title><rect x="84.5693%" y="357" width="0.0182%" height="15" fill="rgb(229,209,14)" fg:x="613474" fg:w="132"/><text x="84.8193%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (95 samples, 0.01%)</title><rect x="84.6000%" y="325" width="0.0131%" height="15" fill="rgb(250,149,48)" fg:x="613697" fg:w="95"/><text x="84.8500%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (178 samples, 0.02%)</title><rect x="84.5930%" y="341" width="0.0245%" height="15" fill="rgb(210,120,37)" fg:x="613646" fg:w="178"/><text x="84.8430%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (192 samples, 0.03%)</title><rect x="84.5916%" y="357" width="0.0265%" height="15" fill="rgb(210,21,8)" fg:x="613636" fg:w="192"/><text x="84.8416%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,191 samples, 0.16%)</title><rect x="84.4540%" y="405" width="0.1642%" height="15" fill="rgb(243,145,7)" fg:x="612638" fg:w="1191"/><text x="84.7040%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (223 samples, 0.03%)</title><rect x="84.5875%" y="389" width="0.0307%" height="15" fill="rgb(238,178,32)" fg:x="613606" fg:w="223"/><text x="84.8375%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (221 samples, 0.03%)</title><rect x="84.5878%" y="373" width="0.0305%" height="15" fill="rgb(222,4,10)" fg:x="613608" fg:w="221"/><text x="84.8378%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (73 samples, 0.01%)</title><rect x="84.6603%" y="325" width="0.0101%" height="15" fill="rgb(239,7,37)" fg:x="614134" fg:w="73"/><text x="84.9103%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (130 samples, 0.02%)</title><rect x="84.6553%" y="341" width="0.0179%" height="15" fill="rgb(215,31,37)" fg:x="614098" fg:w="130"/><text x="84.9053%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (439 samples, 0.06%)</title><rect x="84.6182%" y="405" width="0.0605%" height="15" fill="rgb(224,83,33)" fg:x="613829" fg:w="439"/><text x="84.8682%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (277 samples, 0.04%)</title><rect x="84.6405%" y="389" width="0.0382%" height="15" fill="rgb(239,55,3)" fg:x="613991" fg:w="277"/><text x="84.8905%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (190 samples, 0.03%)</title><rect x="84.6525%" y="373" width="0.0262%" height="15" fill="rgb(247,92,11)" fg:x="614078" fg:w="190"/><text x="84.9025%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (183 samples, 0.03%)</title><rect x="84.6535%" y="357" width="0.0252%" height="15" fill="rgb(239,200,7)" fg:x="614085" fg:w="183"/><text x="84.9035%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (279 samples, 0.04%)</title><rect x="84.8815%" y="277" width="0.0385%" height="15" fill="rgb(227,115,8)" fg:x="615739" fg:w="279"/><text x="85.1315%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (834 samples, 0.11%)</title><rect x="84.8062%" y="293" width="0.1150%" height="15" fill="rgb(215,189,27)" fg:x="615193" fg:w="834"/><text x="85.0562%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (785 samples, 0.11%)</title><rect x="85.1412%" y="277" width="0.1082%" height="15" fill="rgb(251,216,39)" fg:x="617623" fg:w="785"/><text x="85.3912%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,541 samples, 0.49%)</title><rect x="84.7650%" y="309" width="0.4881%" height="15" fill="rgb(207,29,47)" fg:x="614894" fg:w="3541"/><text x="85.0150%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,408 samples, 0.33%)</title><rect x="84.9212%" y="293" width="0.3320%" height="15" fill="rgb(210,71,34)" fg:x="616027" fg:w="2408"/><text x="85.1712%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,582 samples, 0.49%)</title><rect x="84.7601%" y="341" width="0.4938%" height="15" fill="rgb(253,217,51)" fg:x="614858" fg:w="3582"/><text x="85.0101%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,546 samples, 0.49%)</title><rect x="84.7650%" y="325" width="0.4888%" height="15" fill="rgb(222,117,46)" fg:x="614894" fg:w="3546"/><text x="85.0150%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (350 samples, 0.05%)</title><rect x="85.2623%" y="325" width="0.0482%" height="15" fill="rgb(226,132,6)" fg:x="618501" fg:w="350"/><text x="85.5123%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (395 samples, 0.05%)</title><rect x="85.3109%" y="309" width="0.0545%" height="15" fill="rgb(254,145,51)" fg:x="618854" fg:w="395"/><text x="85.5609%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (474 samples, 0.07%)</title><rect x="85.3913%" y="293" width="0.0653%" height="15" fill="rgb(231,199,27)" fg:x="619437" fg:w="474"/><text x="85.6413%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (123 samples, 0.02%)</title><rect x="85.4566%" y="293" width="0.0170%" height="15" fill="rgb(245,158,14)" fg:x="619911" fg:w="123"/><text x="85.7066%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (823 samples, 0.11%)</title><rect x="85.3654%" y="309" width="0.1135%" height="15" fill="rgb(240,113,14)" fg:x="619249" fg:w="823"/><text x="85.6154%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,274 samples, 0.18%)</title><rect x="85.3105%" y="325" width="0.1756%" height="15" fill="rgb(210,20,13)" fg:x="618851" fg:w="1274"/><text x="85.5605%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,739 samples, 0.24%)</title><rect x="85.2539%" y="341" width="0.2397%" height="15" fill="rgb(241,144,13)" fg:x="618440" fg:w="1739"/><text x="85.5039%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (141 samples, 0.02%)</title><rect x="85.6139%" y="213" width="0.0194%" height="15" fill="rgb(235,43,34)" fg:x="621052" fg:w="141"/><text x="85.8639%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (418 samples, 0.06%)</title><rect x="85.5762%" y="229" width="0.0576%" height="15" fill="rgb(208,36,20)" fg:x="620778" fg:w="418"/><text x="85.8262%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (110 samples, 0.02%)</title><rect x="85.6950%" y="213" width="0.0152%" height="15" fill="rgb(239,204,10)" fg:x="621640" fg:w="110"/><text x="85.9450%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (613 samples, 0.08%)</title><rect x="85.6339%" y="229" width="0.0845%" height="15" fill="rgb(217,84,43)" fg:x="621197" fg:w="613"/><text x="85.8839%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,530 samples, 0.21%)</title><rect x="85.5178%" y="245" width="0.2109%" height="15" fill="rgb(241,170,50)" fg:x="620355" fg:w="1530"/><text x="85.7678%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (146 samples, 0.02%)</title><rect x="85.7922%" y="213" width="0.0201%" height="15" fill="rgb(226,205,29)" fg:x="622345" fg:w="146"/><text x="86.0422%" y="223.50"></text></g><g><title>core::cmp::min (478 samples, 0.07%)</title><rect x="85.8124%" y="213" width="0.0659%" height="15" fill="rgb(233,113,1)" fg:x="622492" fg:w="478"/><text x="86.0624%" y="223.50"></text></g><g><title>core::cmp::Ord::min (478 samples, 0.07%)</title><rect x="85.8124%" y="197" width="0.0659%" height="15" fill="rgb(253,98,13)" fg:x="622492" fg:w="478"/><text x="86.0624%" y="207.50"></text></g><g><title>core::cmp::min_by (456 samples, 0.06%)</title><rect x="85.8155%" y="181" width="0.0629%" height="15" fill="rgb(211,115,12)" fg:x="622514" fg:w="456"/><text x="86.0655%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (125 samples, 0.02%)</title><rect x="85.8611%" y="165" width="0.0172%" height="15" fill="rgb(208,12,16)" fg:x="622845" fg:w="125"/><text x="86.1111%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (90 samples, 0.01%)</title><rect x="85.8659%" y="149" width="0.0124%" height="15" fill="rgb(237,193,54)" fg:x="622880" fg:w="90"/><text x="86.1159%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (467 samples, 0.06%)</title><rect x="85.8783%" y="213" width="0.0644%" height="15" fill="rgb(243,22,42)" fg:x="622970" fg:w="467"/><text x="86.1283%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (8,773 samples, 1.21%)</title><rect x="84.7376%" y="373" width="1.2094%" height="15" fill="rgb(233,151,36)" fg:x="614695" fg:w="8773"/><text x="84.9876%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,710 samples, 1.20%)</title><rect x="84.7463%" y="357" width="1.2007%" height="15" fill="rgb(237,57,45)" fg:x="614758" fg:w="8710"/><text x="84.9963%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,288 samples, 0.45%)</title><rect x="85.4937%" y="341" width="0.4533%" height="15" fill="rgb(221,88,17)" fg:x="620180" fg:w="3288"/><text x="85.7437%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,269 samples, 0.45%)</title><rect x="85.4963%" y="325" width="0.4506%" height="15" fill="rgb(230,79,15)" fg:x="620199" fg:w="3269"/><text x="85.7463%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,191 samples, 0.44%)</title><rect x="85.5071%" y="309" width="0.4399%" height="15" fill="rgb(213,57,13)" fg:x="620277" fg:w="3191"/><text x="85.7571%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,128 samples, 0.43%)</title><rect x="85.5158%" y="293" width="0.4312%" height="15" fill="rgb(222,116,39)" fg:x="620340" fg:w="3128"/><text x="85.7658%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,115 samples, 0.43%)</title><rect x="85.5176%" y="277" width="0.4294%" height="15" fill="rgb(245,107,2)" fg:x="620353" fg:w="3115"/><text x="85.7676%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,115 samples, 0.43%)</title><rect x="85.5176%" y="261" width="0.4294%" height="15" fill="rgb(238,1,10)" fg:x="620353" fg:w="3115"/><text x="85.7676%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,583 samples, 0.22%)</title><rect x="85.7288%" y="245" width="0.2182%" height="15" fill="rgb(249,4,48)" fg:x="621885" fg:w="1583"/><text x="85.9788%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,530 samples, 0.21%)</title><rect x="85.7361%" y="229" width="0.2109%" height="15" fill="rgb(223,151,18)" fg:x="621938" fg:w="1530"/><text x="85.9861%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (121 samples, 0.02%)</title><rect x="85.9972%" y="325" width="0.0167%" height="15" fill="rgb(227,65,43)" fg:x="623832" fg:w="121"/><text x="86.2472%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (245 samples, 0.03%)</title><rect x="85.9802%" y="341" width="0.0338%" height="15" fill="rgb(218,40,45)" fg:x="623709" fg:w="245"/><text x="86.2302%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (367 samples, 0.05%)</title><rect x="85.9679%" y="357" width="0.0506%" height="15" fill="rgb(252,121,31)" fg:x="623620" fg:w="367"/><text x="86.2179%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (112 samples, 0.02%)</title><rect x="86.0923%" y="341" width="0.0154%" height="15" fill="rgb(219,158,43)" fg:x="624522" fg:w="112"/><text x="86.3423%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (138 samples, 0.02%)</title><rect x="86.1754%" y="309" width="0.0190%" height="15" fill="rgb(231,162,42)" fg:x="625125" fg:w="138"/><text x="86.4254%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (528 samples, 0.07%)</title><rect x="86.1422%" y="325" width="0.0728%" height="15" fill="rgb(217,179,25)" fg:x="624884" fg:w="528"/><text x="86.3922%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (149 samples, 0.02%)</title><rect x="86.1944%" y="309" width="0.0205%" height="15" fill="rgb(206,212,31)" fg:x="625263" fg:w="149"/><text x="86.4444%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (129 samples, 0.02%)</title><rect x="86.1972%" y="293" width="0.0178%" height="15" fill="rgb(235,144,12)" fg:x="625283" fg:w="129"/><text x="86.4472%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (804 samples, 0.11%)</title><rect x="86.1077%" y="341" width="0.1108%" height="15" fill="rgb(213,51,10)" fg:x="624634" fg:w="804"/><text x="86.3577%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (96 samples, 0.01%)</title><rect x="86.2452%" y="293" width="0.0132%" height="15" fill="rgb(231,145,14)" fg:x="625631" fg:w="96"/><text x="86.4952%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (165 samples, 0.02%)</title><rect x="86.2361%" y="309" width="0.0227%" height="15" fill="rgb(235,15,28)" fg:x="625565" fg:w="165"/><text x="86.4861%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (173 samples, 0.02%)</title><rect x="86.2354%" y="325" width="0.0238%" height="15" fill="rgb(237,206,10)" fg:x="625560" fg:w="173"/><text x="86.4854%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (99 samples, 0.01%)</title><rect x="86.2825%" y="293" width="0.0136%" height="15" fill="rgb(236,227,27)" fg:x="625902" fg:w="99"/><text x="86.5325%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (231 samples, 0.03%)</title><rect x="86.2645%" y="309" width="0.0318%" height="15" fill="rgb(246,83,35)" fg:x="625771" fg:w="231"/><text x="86.5145%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (294 samples, 0.04%)</title><rect x="86.2592%" y="325" width="0.0405%" height="15" fill="rgb(220,136,24)" fg:x="625733" fg:w="294"/><text x="86.5092%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (264 samples, 0.04%)</title><rect x="86.3938%" y="229" width="0.0364%" height="15" fill="rgb(217,3,25)" fg:x="626709" fg:w="264"/><text x="86.6438%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (603 samples, 0.08%)</title><rect x="86.3524%" y="277" width="0.0831%" height="15" fill="rgb(239,24,14)" fg:x="626409" fg:w="603"/><text x="86.6024%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (543 samples, 0.07%)</title><rect x="86.3607%" y="261" width="0.0749%" height="15" fill="rgb(244,16,53)" fg:x="626469" fg:w="543"/><text x="86.6107%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (543 samples, 0.07%)</title><rect x="86.3607%" y="245" width="0.0749%" height="15" fill="rgb(208,175,44)" fg:x="626469" fg:w="543"/><text x="86.6107%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,598 samples, 0.22%)</title><rect x="86.2224%" y="341" width="0.2203%" height="15" fill="rgb(252,18,48)" fg:x="625466" fg:w="1598"/><text x="86.4724%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1,037 samples, 0.14%)</title><rect x="86.2997%" y="325" width="0.1430%" height="15" fill="rgb(234,199,32)" fg:x="626027" fg:w="1037"/><text x="86.5497%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (967 samples, 0.13%)</title><rect x="86.3094%" y="309" width="0.1333%" height="15" fill="rgb(225,77,54)" fg:x="626097" fg:w="967"/><text x="86.5594%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (681 samples, 0.09%)</title><rect x="86.3488%" y="293" width="0.0939%" height="15" fill="rgb(225,42,25)" fg:x="626383" fg:w="681"/><text x="86.5988%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (825 samples, 0.11%)</title><rect x="86.4563%" y="341" width="0.1137%" height="15" fill="rgb(242,227,46)" fg:x="627163" fg:w="825"/><text x="86.7063%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (711 samples, 0.10%)</title><rect x="86.4721%" y="325" width="0.0980%" height="15" fill="rgb(246,197,35)" fg:x="627277" fg:w="711"/><text x="86.7221%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (230 samples, 0.03%)</title><rect x="86.5384%" y="309" width="0.0317%" height="15" fill="rgb(215,159,26)" fg:x="627758" fg:w="230"/><text x="86.7884%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (440 samples, 0.06%)</title><rect x="86.6033%" y="325" width="0.0607%" height="15" fill="rgb(212,194,50)" fg:x="628229" fg:w="440"/><text x="86.8533%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (176 samples, 0.02%)</title><rect x="86.6397%" y="309" width="0.0243%" height="15" fill="rgb(246,132,1)" fg:x="628493" fg:w="176"/><text x="86.8897%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (146 samples, 0.02%)</title><rect x="86.7504%" y="309" width="0.0201%" height="15" fill="rgb(217,71,7)" fg:x="629296" fg:w="146"/><text x="87.0004%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (881 samples, 0.12%)</title><rect x="86.6640%" y="325" width="0.1214%" height="15" fill="rgb(252,59,32)" fg:x="628669" fg:w="881"/><text x="86.9140%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (108 samples, 0.01%)</title><rect x="86.7705%" y="309" width="0.0149%" height="15" fill="rgb(253,204,25)" fg:x="629442" fg:w="108"/><text x="87.0205%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,391 samples, 0.33%)</title><rect x="86.5701%" y="341" width="0.3296%" height="15" fill="rgb(232,21,16)" fg:x="627988" fg:w="2391"/><text x="86.8201%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (829 samples, 0.11%)</title><rect x="86.7854%" y="325" width="0.1143%" height="15" fill="rgb(248,90,29)" fg:x="629550" fg:w="829"/><text x="87.0354%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (670 samples, 0.09%)</title><rect x="86.8073%" y="309" width="0.0924%" height="15" fill="rgb(249,223,7)" fg:x="629709" fg:w="670"/><text x="87.0573%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (211 samples, 0.03%)</title><rect x="86.8706%" y="293" width="0.0291%" height="15" fill="rgb(231,119,42)" fg:x="630168" fg:w="211"/><text x="87.1206%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,095 samples, 2.22%)</title><rect x="84.6858%" y="389" width="2.2187%" height="15" fill="rgb(215,41,35)" fg:x="614319" fg:w="16095"/><text x="84.9358%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,946 samples, 0.96%)</title><rect x="85.9470%" y="373" width="0.9575%" height="15" fill="rgb(220,44,45)" fg:x="623468" fg:w="6946"/><text x="86.1970%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,386 samples, 0.88%)</title><rect x="86.0242%" y="357" width="0.8803%" height="15" fill="rgb(253,197,36)" fg:x="624028" fg:w="6386"/><text x="86.2742%" y="367.50"></text></g><g><title>__clone3 (38,918 samples, 5.36%)</title><rect x="81.5746%" y="629" width="5.3650%" height="15" fill="rgb(245,225,54)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="639.50">__clone3</text></g><g><title>start_thread (38,918 samples, 5.36%)</title><rect x="81.5746%" y="613" width="5.3650%" height="15" fill="rgb(239,94,37)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (38,918 samples, 5.36%)</title><rect x="81.5746%" y="597" width="5.3650%" height="15" fill="rgb(242,217,10)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (38,918 samples, 5.36%)</title><rect x="81.5746%" y="581" width="5.3650%" height="15" fill="rgb(250,193,7)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (38,918 samples, 5.36%)</title><rect x="81.5746%" y="565" width="5.3650%" height="15" fill="rgb(230,104,19)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (38,918 samples, 5.36%)</title><rect x="81.5746%" y="549" width="5.3650%" height="15" fill="rgb(230,181,4)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (38,918 samples, 5.36%)</title><rect x="81.5746%" y="533" width="5.3650%" height="15" fill="rgb(216,219,49)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="543.50">std::pa..</text></g><g><title>__rust_try (38,918 samples, 5.36%)</title><rect x="81.5746%" y="517" width="5.3650%" height="15" fill="rgb(254,144,0)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (38,918 samples, 5.36%)</title><rect x="81.5746%" y="501" width="5.3650%" height="15" fill="rgb(205,209,38)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38,918 samples, 5.36%)</title><rect x="81.5746%" y="485" width="5.3650%" height="15" fill="rgb(240,21,42)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (38,918 samples, 5.36%)</title><rect x="81.5746%" y="469" width="5.3650%" height="15" fill="rgb(241,132,3)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38,918 samples, 5.36%)</title><rect x="81.5746%" y="453" width="5.3650%" height="15" fill="rgb(225,14,2)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (38,918 samples, 5.36%)</title><rect x="81.5746%" y="437" width="5.3650%" height="15" fill="rgb(210,141,35)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (38,918 samples, 5.36%)</title><rect x="81.5746%" y="421" width="5.3650%" height="15" fill="rgb(251,14,44)" fg:x="591750" fg:w="38918"/><text x="81.8246%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (16,400 samples, 2.26%)</title><rect x="84.6787%" y="405" width="2.2608%" height="15" fill="rgb(247,48,18)" fg:x="614268" fg:w="16400"/><text x="84.9287%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (227 samples, 0.03%)</title><rect x="86.9082%" y="389" width="0.0313%" height="15" fill="rgb(225,0,40)" fg:x="630441" fg:w="227"/><text x="87.1582%" y="399.50"></text></g><g><title>worker-7 (44,979 samples, 6.20%)</title><rect x="80.7510%" y="645" width="6.2005%" height="15" fill="rgb(221,31,33)" fg:x="585776" fg:w="44979"/><text x="81.0010%" y="655.50">worker-7</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (195 samples, 0.03%)</title><rect x="86.9595%" y="629" width="0.0269%" height="15" fill="rgb(237,42,40)" fg:x="630813" fg:w="195"/><text x="87.2095%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (100 samples, 0.01%)</title><rect x="86.9984%" y="613" width="0.0138%" height="15" fill="rgb(233,51,29)" fg:x="631095" fg:w="100"/><text x="87.2484%" y="623.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (76 samples, 0.01%)</title><rect x="87.0163%" y="613" width="0.0105%" height="15" fill="rgb(226,58,20)" fg:x="631225" fg:w="76"/><text x="87.2663%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.01%)</title><rect x="87.0788%" y="613" width="0.0105%" height="15" fill="rgb(208,98,7)" fg:x="631678" fg:w="76"/><text x="87.3288%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (168 samples, 0.02%)</title><rect x="87.0924%" y="613" width="0.0232%" height="15" fill="rgb(228,143,44)" fg:x="631777" fg:w="168"/><text x="87.3424%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (132 samples, 0.02%)</title><rect x="87.1324%" y="613" width="0.0182%" height="15" fill="rgb(246,55,38)" fg:x="632067" fg:w="132"/><text x="87.3824%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (73 samples, 0.01%)</title><rect x="87.1405%" y="597" width="0.0101%" height="15" fill="rgb(247,87,16)" fg:x="632126" fg:w="73"/><text x="87.3905%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (96 samples, 0.01%)</title><rect x="87.1506%" y="613" width="0.0132%" height="15" fill="rgb(234,129,42)" fg:x="632199" fg:w="96"/><text x="87.4006%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (94 samples, 0.01%)</title><rect x="87.1827%" y="613" width="0.0130%" height="15" fill="rgb(220,82,16)" fg:x="632432" fg:w="94"/><text x="87.4327%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (91 samples, 0.01%)</title><rect x="87.2002%" y="613" width="0.0125%" height="15" fill="rgb(211,88,4)" fg:x="632559" fg:w="91"/><text x="87.4502%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (82 samples, 0.01%)</title><rect x="87.2229%" y="613" width="0.0113%" height="15" fill="rgb(248,151,21)" fg:x="632724" fg:w="82"/><text x="87.4729%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (78 samples, 0.01%)</title><rect x="87.2443%" y="613" width="0.0108%" height="15" fill="rgb(238,163,6)" fg:x="632879" fg:w="78"/><text x="87.4943%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (125 samples, 0.02%)</title><rect x="87.2551%" y="613" width="0.0172%" height="15" fill="rgb(209,183,11)" fg:x="632957" fg:w="125"/><text x="87.5051%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (125 samples, 0.02%)</title><rect x="87.2814%" y="613" width="0.0172%" height="15" fill="rgb(219,37,20)" fg:x="633148" fg:w="125"/><text x="87.5314%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (76 samples, 0.01%)</title><rect x="87.2986%" y="613" width="0.0105%" height="15" fill="rgb(210,158,4)" fg:x="633273" fg:w="76"/><text x="87.5486%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (89 samples, 0.01%)</title><rect x="87.3091%" y="613" width="0.0123%" height="15" fill="rgb(221,167,53)" fg:x="633349" fg:w="89"/><text x="87.5591%" y="623.50"></text></g><g><title>[anon] (2,729 samples, 0.38%)</title><rect x="86.9900%" y="629" width="0.3762%" height="15" fill="rgb(237,151,45)" fg:x="631034" fg:w="2729"/><text x="87.2400%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (73 samples, 0.01%)</title><rect x="87.3666%" y="613" width="0.0101%" height="15" fill="rgb(231,39,3)" fg:x="633766" fg:w="73"/><text x="87.6166%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (166 samples, 0.02%)</title><rect x="87.3767%" y="613" width="0.0229%" height="15" fill="rgb(212,167,28)" fg:x="633839" fg:w="166"/><text x="87.6267%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (75 samples, 0.01%)</title><rect x="87.4041%" y="613" width="0.0103%" height="15" fill="rgb(232,178,8)" fg:x="634038" fg:w="75"/><text x="87.6541%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (126 samples, 0.02%)</title><rect x="87.4144%" y="613" width="0.0174%" height="15" fill="rgb(225,151,20)" fg:x="634113" fg:w="126"/><text x="87.6644%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (171 samples, 0.02%)</title><rect x="87.4643%" y="613" width="0.0236%" height="15" fill="rgb(238,3,37)" fg:x="634475" fg:w="171"/><text x="87.7143%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (171 samples, 0.02%)</title><rect x="87.4643%" y="597" width="0.0236%" height="15" fill="rgb(251,147,42)" fg:x="634475" fg:w="171"/><text x="87.7143%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (171 samples, 0.02%)</title><rect x="87.4643%" y="581" width="0.0236%" height="15" fill="rgb(208,173,10)" fg:x="634475" fg:w="171"/><text x="87.7143%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (75 samples, 0.01%)</title><rect x="87.4776%" y="565" width="0.0103%" height="15" fill="rgb(246,225,4)" fg:x="634571" fg:w="75"/><text x="87.7276%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (78 samples, 0.01%)</title><rect x="87.5157%" y="613" width="0.0108%" height="15" fill="rgb(248,102,6)" fg:x="634848" fg:w="78"/><text x="87.7657%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (131 samples, 0.02%)</title><rect x="87.5280%" y="613" width="0.0181%" height="15" fill="rgb(232,6,21)" fg:x="634937" fg:w="131"/><text x="87.7780%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (160 samples, 0.02%)</title><rect x="87.5651%" y="613" width="0.0221%" height="15" fill="rgb(221,179,22)" fg:x="635206" fg:w="160"/><text x="87.8151%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (94 samples, 0.01%)</title><rect x="87.5972%" y="613" width="0.0130%" height="15" fill="rgb(252,50,20)" fg:x="635439" fg:w="94"/><text x="87.8472%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (89 samples, 0.01%)</title><rect x="87.6281%" y="613" width="0.0123%" height="15" fill="rgb(222,56,38)" fg:x="635663" fg:w="89"/><text x="87.8781%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (87 samples, 0.01%)</title><rect x="87.6455%" y="613" width="0.0120%" height="15" fill="rgb(206,193,29)" fg:x="635789" fg:w="87"/><text x="87.8955%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (126 samples, 0.02%)</title><rect x="87.6743%" y="613" width="0.0174%" height="15" fill="rgb(239,192,45)" fg:x="635998" fg:w="126"/><text x="87.9243%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (185 samples, 0.03%)</title><rect x="87.6917%" y="613" width="0.0255%" height="15" fill="rgb(254,18,36)" fg:x="636124" fg:w="185"/><text x="87.9417%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (153 samples, 0.02%)</title><rect x="87.6961%" y="597" width="0.0211%" height="15" fill="rgb(221,127,11)" fg:x="636156" fg:w="153"/><text x="87.9461%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (83 samples, 0.01%)</title><rect x="87.7057%" y="581" width="0.0114%" height="15" fill="rgb(234,146,35)" fg:x="636226" fg:w="83"/><text x="87.9557%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (138 samples, 0.02%)</title><rect x="87.7172%" y="613" width="0.0190%" height="15" fill="rgb(254,201,37)" fg:x="636309" fg:w="138"/><text x="87.9672%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (76 samples, 0.01%)</title><rect x="87.7257%" y="597" width="0.0105%" height="15" fill="rgb(211,202,23)" fg:x="636371" fg:w="76"/><text x="87.9757%" y="607.50"></text></g><g><title>one_brc::process_lines (322 samples, 0.04%)</title><rect x="87.7478%" y="613" width="0.0444%" height="15" fill="rgb(237,91,2)" fg:x="636531" fg:w="322"/><text x="87.9978%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (73 samples, 0.01%)</title><rect x="87.8157%" y="613" width="0.0101%" height="15" fill="rgb(226,228,36)" fg:x="637024" fg:w="73"/><text x="88.0657%" y="623.50"></text></g><g><title>[unknown] (3,357 samples, 0.46%)</title><rect x="87.3662%" y="629" width="0.4628%" height="15" fill="rgb(213,63,50)" fg:x="633763" fg:w="3357"/><text x="87.6162%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (118 samples, 0.02%)</title><rect x="88.1732%" y="325" width="0.0163%" height="15" fill="rgb(235,194,19)" fg:x="639617" fg:w="118"/><text x="88.4232%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (431 samples, 0.06%)</title><rect x="88.1896%" y="325" width="0.0594%" height="15" fill="rgb(207,204,18)" fg:x="639736" fg:w="431"/><text x="88.4396%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (428 samples, 0.06%)</title><rect x="88.1900%" y="309" width="0.0590%" height="15" fill="rgb(248,8,7)" fg:x="639739" fg:w="428"/><text x="88.4400%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (383 samples, 0.05%)</title><rect x="88.1962%" y="293" width="0.0528%" height="15" fill="rgb(223,145,47)" fg:x="639784" fg:w="383"/><text x="88.4462%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (193 samples, 0.03%)</title><rect x="88.2224%" y="277" width="0.0266%" height="15" fill="rgb(228,84,11)" fg:x="639974" fg:w="193"/><text x="88.4724%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (162 samples, 0.02%)</title><rect x="88.2267%" y="261" width="0.0223%" height="15" fill="rgb(218,76,45)" fg:x="640005" fg:w="162"/><text x="88.4767%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (159 samples, 0.02%)</title><rect x="88.2271%" y="245" width="0.0219%" height="15" fill="rgb(223,80,15)" fg:x="640008" fg:w="159"/><text x="88.4771%" y="255.50"></text></g><g><title>__memcmp_evex_movbe (273 samples, 0.04%)</title><rect x="88.3028%" y="277" width="0.0376%" height="15" fill="rgb(219,218,33)" fg:x="640557" fg:w="273"/><text x="88.5528%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (728 samples, 0.10%)</title><rect x="88.2490%" y="325" width="0.1004%" height="15" fill="rgb(208,51,11)" fg:x="640167" fg:w="728"/><text x="88.4990%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (627 samples, 0.09%)</title><rect x="88.2629%" y="309" width="0.0864%" height="15" fill="rgb(229,165,39)" fg:x="640268" fg:w="627"/><text x="88.5129%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (627 samples, 0.09%)</title><rect x="88.2629%" y="293" width="0.0864%" height="15" fill="rgb(241,100,24)" fg:x="640268" fg:w="627"/><text x="88.5129%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (390 samples, 0.05%)</title><rect x="88.4339%" y="293" width="0.0538%" height="15" fill="rgb(228,14,23)" fg:x="641508" fg:w="390"/><text x="88.6839%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (326 samples, 0.04%)</title><rect x="88.4427%" y="277" width="0.0449%" height="15" fill="rgb(247,116,52)" fg:x="641572" fg:w="326"/><text x="88.6927%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (312 samples, 0.04%)</title><rect x="88.4446%" y="261" width="0.0430%" height="15" fill="rgb(216,149,33)" fg:x="641586" fg:w="312"/><text x="88.6946%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,005 samples, 0.14%)</title><rect x="88.3493%" y="325" width="0.1385%" height="15" fill="rgb(238,142,29)" fg:x="640895" fg:w="1005"/><text x="88.5993%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (897 samples, 0.12%)</title><rect x="88.3642%" y="309" width="0.1237%" height="15" fill="rgb(224,83,40)" fg:x="641003" fg:w="897"/><text x="88.6142%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (81 samples, 0.01%)</title><rect x="88.6035%" y="293" width="0.0112%" height="15" fill="rgb(234,165,11)" fg:x="642739" fg:w="81"/><text x="88.8535%" y="303.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (82 samples, 0.01%)</title><rect x="88.6194%" y="293" width="0.0113%" height="15" fill="rgb(215,96,23)" fg:x="642854" fg:w="82"/><text x="88.8694%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,796 samples, 0.25%)</title><rect x="88.4917%" y="325" width="0.2476%" height="15" fill="rgb(233,179,26)" fg:x="641928" fg:w="1796"/><text x="88.7417%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,665 samples, 0.23%)</title><rect x="88.5098%" y="309" width="0.2295%" height="15" fill="rgb(225,129,33)" fg:x="642059" fg:w="1665"/><text x="88.7598%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (788 samples, 0.11%)</title><rect x="88.6307%" y="293" width="0.1086%" height="15" fill="rgb(237,49,13)" fg:x="642936" fg:w="788"/><text x="88.8807%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,328 samples, 0.73%)</title><rect x="88.0098%" y="341" width="0.7345%" height="15" fill="rgb(211,3,31)" fg:x="638432" fg:w="5328"/><text x="88.2598%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,871 samples, 0.81%)</title><rect x="87.9574%" y="373" width="0.8093%" height="15" fill="rgb(216,152,19)" fg:x="638052" fg:w="5871"/><text x="88.2074%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,862 samples, 0.81%)</title><rect x="87.9587%" y="357" width="0.8081%" height="15" fill="rgb(251,121,35)" fg:x="638061" fg:w="5862"/><text x="88.2087%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (162 samples, 0.02%)</title><rect x="88.7444%" y="341" width="0.0223%" height="15" fill="rgb(210,217,47)" fg:x="643761" fg:w="162"/><text x="88.9944%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (162 samples, 0.02%)</title><rect x="88.7444%" y="325" width="0.0223%" height="15" fill="rgb(244,116,22)" fg:x="643761" fg:w="162"/><text x="88.9944%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (98 samples, 0.01%)</title><rect x="88.7533%" y="309" width="0.0135%" height="15" fill="rgb(228,17,21)" fg:x="643825" fg:w="98"/><text x="89.0033%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (494 samples, 0.07%)</title><rect x="89.1248%" y="181" width="0.0681%" height="15" fill="rgb(240,149,34)" fg:x="646520" fg:w="494"/><text x="89.3748%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,343 samples, 0.19%)</title><rect x="89.0196%" y="229" width="0.1851%" height="15" fill="rgb(208,125,47)" fg:x="645757" fg:w="1343"/><text x="89.2696%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,091 samples, 0.15%)</title><rect x="89.0543%" y="213" width="0.1504%" height="15" fill="rgb(249,186,39)" fg:x="646009" fg:w="1091"/><text x="89.3043%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,057 samples, 0.15%)</title><rect x="89.0590%" y="197" width="0.1457%" height="15" fill="rgb(240,220,33)" fg:x="646043" fg:w="1057"/><text x="89.3090%" y="207.50"></text></g><g><title>core::mem::size_of_val (86 samples, 0.01%)</title><rect x="89.1929%" y="181" width="0.0119%" height="15" fill="rgb(243,110,23)" fg:x="647014" fg:w="86"/><text x="89.4429%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (368 samples, 0.05%)</title><rect x="89.2104%" y="181" width="0.0507%" height="15" fill="rgb(219,163,46)" fg:x="647141" fg:w="368"/><text x="89.4604%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (293 samples, 0.04%)</title><rect x="89.2207%" y="165" width="0.0404%" height="15" fill="rgb(216,126,30)" fg:x="647216" fg:w="293"/><text x="89.4707%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (262 samples, 0.04%)</title><rect x="89.2250%" y="149" width="0.0361%" height="15" fill="rgb(208,139,11)" fg:x="647247" fg:w="262"/><text x="89.4750%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,616 samples, 0.36%)</title><rect x="88.9156%" y="261" width="0.3606%" height="15" fill="rgb(213,118,36)" fg:x="645003" fg:w="2616"/><text x="89.1656%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,616 samples, 0.36%)</title><rect x="88.9156%" y="245" width="0.3606%" height="15" fill="rgb(226,43,17)" fg:x="645003" fg:w="2616"/><text x="89.1656%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (519 samples, 0.07%)</title><rect x="89.2047%" y="229" width="0.0715%" height="15" fill="rgb(254,217,4)" fg:x="647100" fg:w="519"/><text x="89.4547%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (519 samples, 0.07%)</title><rect x="89.2047%" y="213" width="0.0715%" height="15" fill="rgb(210,134,47)" fg:x="647100" fg:w="519"/><text x="89.4547%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (478 samples, 0.07%)</title><rect x="89.2104%" y="197" width="0.0659%" height="15" fill="rgb(237,24,49)" fg:x="647141" fg:w="478"/><text x="89.4604%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (110 samples, 0.02%)</title><rect x="89.2611%" y="181" width="0.0152%" height="15" fill="rgb(251,39,46)" fg:x="647509" fg:w="110"/><text x="89.5111%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (110 samples, 0.02%)</title><rect x="89.2611%" y="165" width="0.0152%" height="15" fill="rgb(251,220,3)" fg:x="647509" fg:w="110"/><text x="89.5111%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,188 samples, 0.44%)</title><rect x="88.8697%" y="277" width="0.4395%" height="15" fill="rgb(228,105,12)" fg:x="644670" fg:w="3188"/><text x="89.1197%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (238 samples, 0.03%)</title><rect x="89.2764%" y="261" width="0.0328%" height="15" fill="rgb(215,196,1)" fg:x="647620" fg:w="238"/><text x="89.5264%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (238 samples, 0.03%)</title><rect x="89.2764%" y="245" width="0.0328%" height="15" fill="rgb(214,33,39)" fg:x="647620" fg:w="238"/><text x="89.5264%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (238 samples, 0.03%)</title><rect x="89.2764%" y="229" width="0.0328%" height="15" fill="rgb(220,19,52)" fg:x="647620" fg:w="238"/><text x="89.5264%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (108 samples, 0.01%)</title><rect x="89.4100%" y="245" width="0.0149%" height="15" fill="rgb(221,78,38)" fg:x="648589" fg:w="108"/><text x="89.6600%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (76 samples, 0.01%)</title><rect x="89.4964%" y="181" width="0.0105%" height="15" fill="rgb(253,30,16)" fg:x="649216" fg:w="76"/><text x="89.7464%" y="191.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (230 samples, 0.03%)</title><rect x="89.5075%" y="165" width="0.0317%" height="15" fill="rgb(242,65,0)" fg:x="649296" fg:w="230"/><text x="89.7575%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (328 samples, 0.05%)</title><rect x="89.4949%" y="197" width="0.0452%" height="15" fill="rgb(235,201,12)" fg:x="649205" fg:w="328"/><text x="89.7449%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (237 samples, 0.03%)</title><rect x="89.5075%" y="181" width="0.0327%" height="15" fill="rgb(233,161,9)" fg:x="649296" fg:w="237"/><text x="89.7575%" y="191.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11,604 samples, 1.60%)</title><rect x="87.9406%" y="405" width="1.5996%" height="15" fill="rgb(241,207,41)" fg:x="637930" fg:w="11604"/><text x="88.1906%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,597 samples, 1.60%)</title><rect x="87.9416%" y="389" width="1.5987%" height="15" fill="rgb(212,69,46)" fg:x="637937" fg:w="11597"/><text x="88.1916%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,611 samples, 0.77%)</title><rect x="88.7668%" y="373" width="0.7735%" height="15" fill="rgb(239,69,45)" fg:x="643923" fg:w="5611"/><text x="89.0168%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,436 samples, 0.75%)</title><rect x="88.7909%" y="357" width="0.7494%" height="15" fill="rgb(242,117,48)" fg:x="644098" fg:w="5436"/><text x="89.0409%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,383 samples, 0.74%)</title><rect x="88.7982%" y="341" width="0.7421%" height="15" fill="rgb(228,41,36)" fg:x="644151" fg:w="5383"/><text x="89.0482%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,248 samples, 0.72%)</title><rect x="88.8168%" y="325" width="0.7235%" height="15" fill="rgb(212,3,32)" fg:x="644286" fg:w="5248"/><text x="89.0668%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,972 samples, 0.69%)</title><rect x="88.8549%" y="309" width="0.6854%" height="15" fill="rgb(233,41,49)" fg:x="644562" fg:w="4972"/><text x="89.1049%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,971 samples, 0.69%)</title><rect x="88.8550%" y="293" width="0.6853%" height="15" fill="rgb(252,170,49)" fg:x="644563" fg:w="4971"/><text x="89.1050%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,676 samples, 0.23%)</title><rect x="89.3092%" y="277" width="0.2310%" height="15" fill="rgb(229,53,26)" fg:x="647858" fg:w="1676"/><text x="89.5592%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,577 samples, 0.22%)</title><rect x="89.3229%" y="261" width="0.2174%" height="15" fill="rgb(217,157,12)" fg:x="647957" fg:w="1577"/><text x="89.5729%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (837 samples, 0.12%)</title><rect x="89.4249%" y="245" width="0.1154%" height="15" fill="rgb(227,17,9)" fg:x="648697" fg:w="837"/><text x="89.6749%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (821 samples, 0.11%)</title><rect x="89.4271%" y="229" width="0.1132%" height="15" fill="rgb(218,84,12)" fg:x="648713" fg:w="821"/><text x="89.6771%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (751 samples, 0.10%)</title><rect x="89.4367%" y="213" width="0.1035%" height="15" fill="rgb(212,79,24)" fg:x="648783" fg:w="751"/><text x="89.6867%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (342 samples, 0.05%)</title><rect x="89.5404%" y="405" width="0.0471%" height="15" fill="rgb(217,222,37)" fg:x="649535" fg:w="342"/><text x="89.7904%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (204 samples, 0.03%)</title><rect x="89.5875%" y="405" width="0.0281%" height="15" fill="rgb(246,208,8)" fg:x="649877" fg:w="204"/><text x="89.8375%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (196 samples, 0.03%)</title><rect x="89.6561%" y="341" width="0.0270%" height="15" fill="rgb(244,133,10)" fg:x="650374" fg:w="196"/><text x="89.9061%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (247 samples, 0.03%)</title><rect x="89.6832%" y="341" width="0.0340%" height="15" fill="rgb(209,219,41)" fg:x="650571" fg:w="247"/><text x="89.9332%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (525 samples, 0.07%)</title><rect x="89.6500%" y="357" width="0.0724%" height="15" fill="rgb(253,175,45)" fg:x="650330" fg:w="525"/><text x="89.9000%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (134 samples, 0.02%)</title><rect x="89.7361%" y="341" width="0.0185%" height="15" fill="rgb(235,100,37)" fg:x="650955" fg:w="134"/><text x="89.9861%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (332 samples, 0.05%)</title><rect x="89.7804%" y="309" width="0.0458%" height="15" fill="rgb(225,87,19)" fg:x="651276" fg:w="332"/><text x="90.0304%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (431 samples, 0.06%)</title><rect x="89.7688%" y="325" width="0.0594%" height="15" fill="rgb(217,152,17)" fg:x="651192" fg:w="431"/><text x="90.0188%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (772 samples, 0.11%)</title><rect x="89.7224%" y="357" width="0.1064%" height="15" fill="rgb(235,72,13)" fg:x="650855" fg:w="772"/><text x="89.9724%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (538 samples, 0.07%)</title><rect x="89.7546%" y="341" width="0.0742%" height="15" fill="rgb(233,140,18)" fg:x="651089" fg:w="538"/><text x="90.0046%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,547 samples, 0.21%)</title><rect x="89.6157%" y="405" width="0.2133%" height="15" fill="rgb(207,212,28)" fg:x="650081" fg:w="1547"/><text x="89.8657%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,507 samples, 0.21%)</title><rect x="89.6212%" y="389" width="0.2077%" height="15" fill="rgb(220,130,25)" fg:x="650121" fg:w="1507"/><text x="89.8712%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,450 samples, 0.20%)</title><rect x="89.6290%" y="373" width="0.1999%" height="15" fill="rgb(205,55,34)" fg:x="650178" fg:w="1450"/><text x="89.8790%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (82 samples, 0.01%)</title><rect x="90.0214%" y="261" width="0.0113%" height="15" fill="rgb(237,54,35)" fg:x="653024" fg:w="82"/><text x="90.2714%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (104 samples, 0.01%)</title><rect x="90.0185%" y="293" width="0.0143%" height="15" fill="rgb(208,67,23)" fg:x="653003" fg:w="104"/><text x="90.2685%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (83 samples, 0.01%)</title><rect x="90.0214%" y="277" width="0.0114%" height="15" fill="rgb(206,207,50)" fg:x="653024" fg:w="83"/><text x="90.2714%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (796 samples, 0.11%)</title><rect x="89.9232%" y="357" width="0.1097%" height="15" fill="rgb(213,211,42)" fg:x="652312" fg:w="796"/><text x="90.1732%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (342 samples, 0.05%)</title><rect x="89.9858%" y="341" width="0.0471%" height="15" fill="rgb(252,197,50)" fg:x="652766" fg:w="342"/><text x="90.2358%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (330 samples, 0.05%)</title><rect x="89.9875%" y="325" width="0.0455%" height="15" fill="rgb(251,211,41)" fg:x="652778" fg:w="330"/><text x="90.2375%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (297 samples, 0.04%)</title><rect x="89.9920%" y="309" width="0.0409%" height="15" fill="rgb(229,211,5)" fg:x="652811" fg:w="297"/><text x="90.2420%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (864 samples, 0.12%)</title><rect x="89.9143%" y="373" width="0.1191%" height="15" fill="rgb(239,36,31)" fg:x="652247" fg:w="864"/><text x="90.1643%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,092 samples, 0.15%)</title><rect x="89.8859%" y="389" width="0.1505%" height="15" fill="rgb(248,67,31)" fg:x="652041" fg:w="1092"/><text x="90.1359%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (127 samples, 0.02%)</title><rect x="90.1867%" y="373" width="0.0175%" height="15" fill="rgb(249,55,44)" fg:x="654223" fg:w="127"/><text x="90.4367%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (374 samples, 0.05%)</title><rect x="90.2057%" y="373" width="0.0516%" height="15" fill="rgb(216,82,12)" fg:x="654361" fg:w="374"/><text x="90.4557%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (373 samples, 0.05%)</title><rect x="90.2058%" y="357" width="0.0514%" height="15" fill="rgb(242,174,1)" fg:x="654362" fg:w="373"/><text x="90.4558%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (344 samples, 0.05%)</title><rect x="90.2098%" y="341" width="0.0474%" height="15" fill="rgb(208,120,29)" fg:x="654391" fg:w="344"/><text x="90.4598%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (170 samples, 0.02%)</title><rect x="90.2338%" y="325" width="0.0234%" height="15" fill="rgb(221,105,43)" fg:x="654565" fg:w="170"/><text x="90.4838%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (123 samples, 0.02%)</title><rect x="90.2403%" y="309" width="0.0170%" height="15" fill="rgb(234,124,22)" fg:x="654612" fg:w="123"/><text x="90.4903%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (121 samples, 0.02%)</title><rect x="90.2406%" y="293" width="0.0167%" height="15" fill="rgb(212,23,30)" fg:x="654614" fg:w="121"/><text x="90.4906%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (186 samples, 0.03%)</title><rect x="90.3060%" y="325" width="0.0256%" height="15" fill="rgb(219,122,53)" fg:x="655089" fg:w="186"/><text x="90.5560%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (581 samples, 0.08%)</title><rect x="90.2572%" y="373" width="0.0801%" height="15" fill="rgb(248,84,24)" fg:x="654735" fg:w="581"/><text x="90.5072%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (518 samples, 0.07%)</title><rect x="90.2659%" y="357" width="0.0714%" height="15" fill="rgb(245,115,18)" fg:x="654798" fg:w="518"/><text x="90.5159%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (518 samples, 0.07%)</title><rect x="90.2659%" y="341" width="0.0714%" height="15" fill="rgb(227,176,51)" fg:x="654798" fg:w="518"/><text x="90.5159%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (324 samples, 0.04%)</title><rect x="90.4160%" y="341" width="0.0447%" height="15" fill="rgb(229,63,42)" fg:x="655887" fg:w="324"/><text x="90.6660%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (255 samples, 0.04%)</title><rect x="90.4256%" y="325" width="0.0352%" height="15" fill="rgb(247,202,24)" fg:x="655956" fg:w="255"/><text x="90.6756%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (248 samples, 0.03%)</title><rect x="90.4265%" y="309" width="0.0342%" height="15" fill="rgb(244,173,20)" fg:x="655963" fg:w="248"/><text x="90.6765%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (898 samples, 0.12%)</title><rect x="90.3373%" y="373" width="0.1238%" height="15" fill="rgb(242,81,47)" fg:x="655316" fg:w="898"/><text x="90.5873%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (820 samples, 0.11%)</title><rect x="90.3481%" y="357" width="0.1130%" height="15" fill="rgb(231,185,54)" fg:x="655394" fg:w="820"/><text x="90.5981%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_aligned (150 samples, 0.02%)</title><rect x="90.4735%" y="357" width="0.0207%" height="15" fill="rgb(243,55,32)" fg:x="656304" fg:w="150"/><text x="90.7235%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (107 samples, 0.01%)</title><rect x="90.4795%" y="341" width="0.0148%" height="15" fill="rgb(208,167,19)" fg:x="656347" fg:w="107"/><text x="90.7295%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,180 samples, 0.30%)</title><rect x="90.4644%" y="373" width="0.3005%" height="15" fill="rgb(231,72,35)" fg:x="656238" fg:w="2180"/><text x="90.7144%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,964 samples, 0.27%)</title><rect x="90.4942%" y="357" width="0.2707%" height="15" fill="rgb(250,173,51)" fg:x="656454" fg:w="1964"/><text x="90.7442%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,263 samples, 0.73%)</title><rect x="90.0441%" y="389" width="0.7255%" height="15" fill="rgb(209,5,22)" fg:x="653189" fg:w="5263"/><text x="90.2941%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (242 samples, 0.03%)</title><rect x="90.7699%" y="373" width="0.0334%" height="15" fill="rgb(250,174,19)" fg:x="658454" fg:w="242"/><text x="91.0199%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (188 samples, 0.03%)</title><rect x="90.7774%" y="357" width="0.0259%" height="15" fill="rgb(217,3,49)" fg:x="658508" fg:w="188"/><text x="91.0274%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (121 samples, 0.02%)</title><rect x="90.7866%" y="341" width="0.0167%" height="15" fill="rgb(218,225,5)" fg:x="658575" fg:w="121"/><text x="91.0366%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (116 samples, 0.02%)</title><rect x="90.7873%" y="325" width="0.0160%" height="15" fill="rgb(236,89,11)" fg:x="658580" fg:w="116"/><text x="91.0373%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (82 samples, 0.01%)</title><rect x="90.8038%" y="341" width="0.0113%" height="15" fill="rgb(206,33,28)" fg:x="658700" fg:w="82"/><text x="91.0538%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (7,229 samples, 1.00%)</title><rect x="89.8289%" y="405" width="0.9965%" height="15" fill="rgb(241,56,42)" fg:x="651628" fg:w="7229"/><text x="90.0789%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (403 samples, 0.06%)</title><rect x="90.7699%" y="389" width="0.0556%" height="15" fill="rgb(222,44,11)" fg:x="658454" fg:w="403"/><text x="91.0199%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="90.8033%" y="373" width="0.0222%" height="15" fill="rgb(234,111,20)" fg:x="658696" fg:w="161"/><text x="91.0533%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="90.8033%" y="357" width="0.0222%" height="15" fill="rgb(237,77,6)" fg:x="658696" fg:w="161"/><text x="91.0533%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (75 samples, 0.01%)</title><rect x="90.8151%" y="341" width="0.0103%" height="15" fill="rgb(235,111,23)" fg:x="658782" fg:w="75"/><text x="91.0651%" y="351.50"></text></g><g><title>one_brc::round_towards_positive (651 samples, 0.09%)</title><rect x="90.8255%" y="405" width="0.0897%" height="15" fill="rgb(251,135,29)" fg:x="658857" fg:w="651"/><text x="91.0755%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (162 samples, 0.02%)</title><rect x="90.8929%" y="389" width="0.0223%" height="15" fill="rgb(217,57,1)" fg:x="659346" fg:w="162"/><text x="91.1429%" y="399.50"></text></g><g><title>__round (149 samples, 0.02%)</title><rect x="90.8947%" y="373" width="0.0205%" height="15" fill="rgb(249,119,31)" fg:x="659359" fg:w="149"/><text x="91.1447%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (105 samples, 0.01%)</title><rect x="91.0237%" y="357" width="0.0145%" height="15" fill="rgb(233,164,33)" fg:x="660295" fg:w="105"/><text x="91.2737%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (652 samples, 0.09%)</title><rect x="90.9752%" y="389" width="0.0899%" height="15" fill="rgb(250,217,43)" fg:x="659943" fg:w="652"/><text x="91.2252%" y="399.50"></text></g><g><title>one_brc::Measurement::record (562 samples, 0.08%)</title><rect x="90.9876%" y="373" width="0.0775%" height="15" fill="rgb(232,154,50)" fg:x="660033" fg:w="562"/><text x="91.2376%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (195 samples, 0.03%)</title><rect x="91.0382%" y="357" width="0.0269%" height="15" fill="rgb(227,190,8)" fg:x="660400" fg:w="195"/><text x="91.2882%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (99 samples, 0.01%)</title><rect x="91.0786%" y="325" width="0.0136%" height="15" fill="rgb(209,217,32)" fg:x="660693" fg:w="99"/><text x="91.3286%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (161 samples, 0.02%)</title><rect x="91.0732%" y="341" width="0.0222%" height="15" fill="rgb(243,203,50)" fg:x="660654" fg:w="161"/><text x="91.3232%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (190 samples, 0.03%)</title><rect x="91.0702%" y="357" width="0.0262%" height="15" fill="rgb(232,152,27)" fg:x="660632" fg:w="190"/><text x="91.3202%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,321 samples, 0.18%)</title><rect x="90.9152%" y="405" width="0.1821%" height="15" fill="rgb(240,34,29)" fg:x="659508" fg:w="1321"/><text x="91.1652%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (234 samples, 0.03%)</title><rect x="91.0651%" y="389" width="0.0323%" height="15" fill="rgb(215,185,52)" fg:x="660595" fg:w="234"/><text x="91.3151%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (230 samples, 0.03%)</title><rect x="91.0656%" y="373" width="0.0317%" height="15" fill="rgb(240,89,49)" fg:x="660599" fg:w="230"/><text x="91.3156%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (105 samples, 0.01%)</title><rect x="91.1440%" y="325" width="0.0145%" height="15" fill="rgb(225,12,52)" fg:x="661168" fg:w="105"/><text x="91.3940%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (185 samples, 0.03%)</title><rect x="91.1374%" y="341" width="0.0255%" height="15" fill="rgb(239,128,45)" fg:x="661120" fg:w="185"/><text x="91.3874%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (527 samples, 0.07%)</title><rect x="91.0973%" y="405" width="0.0726%" height="15" fill="rgb(211,78,47)" fg:x="660829" fg:w="527"/><text x="91.3473%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (330 samples, 0.05%)</title><rect x="91.1245%" y="389" width="0.0455%" height="15" fill="rgb(232,31,21)" fg:x="661026" fg:w="330"/><text x="91.3745%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (251 samples, 0.03%)</title><rect x="91.1354%" y="373" width="0.0346%" height="15" fill="rgb(222,168,14)" fg:x="661105" fg:w="251"/><text x="91.3854%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (246 samples, 0.03%)</title><rect x="91.1360%" y="357" width="0.0339%" height="15" fill="rgb(209,128,24)" fg:x="661110" fg:w="246"/><text x="91.3860%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (279 samples, 0.04%)</title><rect x="91.3872%" y="277" width="0.0385%" height="15" fill="rgb(249,35,13)" fg:x="662932" fg:w="279"/><text x="91.6372%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (890 samples, 0.12%)</title><rect x="91.3048%" y="293" width="0.1227%" height="15" fill="rgb(218,7,2)" fg:x="662334" fg:w="890"/><text x="91.5548%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (825 samples, 0.11%)</title><rect x="91.6642%" y="277" width="0.1137%" height="15" fill="rgb(238,107,27)" fg:x="664941" fg:w="825"/><text x="91.9142%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,795 samples, 0.52%)</title><rect x="91.2608%" y="309" width="0.5232%" height="15" fill="rgb(217,88,38)" fg:x="662015" fg:w="3795"/><text x="91.5108%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,586 samples, 0.36%)</title><rect x="91.4275%" y="293" width="0.3565%" height="15" fill="rgb(230,207,0)" fg:x="663224" fg:w="2586"/><text x="91.6775%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,829 samples, 0.53%)</title><rect x="91.2568%" y="341" width="0.5278%" height="15" fill="rgb(249,64,54)" fg:x="661986" fg:w="3829"/><text x="91.5068%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,800 samples, 0.52%)</title><rect x="91.2608%" y="325" width="0.5238%" height="15" fill="rgb(231,7,11)" fg:x="662015" fg:w="3800"/><text x="91.5108%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (358 samples, 0.05%)</title><rect x="91.7931%" y="325" width="0.0494%" height="15" fill="rgb(205,149,21)" fg:x="665876" fg:w="358"/><text x="92.0431%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (382 samples, 0.05%)</title><rect x="91.8428%" y="309" width="0.0527%" height="15" fill="rgb(215,126,34)" fg:x="666237" fg:w="382"/><text x="92.0928%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (478 samples, 0.07%)</title><rect x="91.9229%" y="293" width="0.0659%" height="15" fill="rgb(241,132,45)" fg:x="666818" fg:w="478"/><text x="92.1729%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (156 samples, 0.02%)</title><rect x="91.9888%" y="293" width="0.0215%" height="15" fill="rgb(252,69,32)" fg:x="667296" fg:w="156"/><text x="92.2388%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (877 samples, 0.12%)</title><rect x="91.8955%" y="309" width="0.1209%" height="15" fill="rgb(232,204,19)" fg:x="666619" fg:w="877"/><text x="92.1455%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,321 samples, 0.18%)</title><rect x="91.8424%" y="325" width="0.1821%" height="15" fill="rgb(249,15,47)" fg:x="666234" fg:w="1321"/><text x="92.0924%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,791 samples, 0.25%)</title><rect x="91.7846%" y="341" width="0.2469%" height="15" fill="rgb(209,227,23)" fg:x="665815" fg:w="1791"/><text x="92.0346%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (131 samples, 0.02%)</title><rect x="92.1603%" y="213" width="0.0181%" height="15" fill="rgb(248,92,24)" fg:x="668540" fg:w="131"/><text x="92.4103%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (419 samples, 0.06%)</title><rect x="92.1217%" y="229" width="0.0578%" height="15" fill="rgb(247,59,2)" fg:x="668260" fg:w="419"/><text x="92.3717%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (128 samples, 0.02%)</title><rect x="92.2419%" y="213" width="0.0176%" height="15" fill="rgb(221,30,5)" fg:x="669132" fg:w="128"/><text x="92.4919%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (652 samples, 0.09%)</title><rect x="92.1795%" y="229" width="0.0899%" height="15" fill="rgb(208,108,53)" fg:x="668679" fg:w="652"/><text x="92.4295%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,588 samples, 0.22%)</title><rect x="92.0599%" y="245" width="0.2189%" height="15" fill="rgb(211,183,26)" fg:x="667812" fg:w="1588"/><text x="92.3099%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (155 samples, 0.02%)</title><rect x="92.3529%" y="213" width="0.0214%" height="15" fill="rgb(232,132,4)" fg:x="669937" fg:w="155"/><text x="92.6029%" y="223.50"></text></g><g><title>core::cmp::min (530 samples, 0.07%)</title><rect x="92.3744%" y="213" width="0.0731%" height="15" fill="rgb(253,128,37)" fg:x="670093" fg:w="530"/><text x="92.6244%" y="223.50"></text></g><g><title>core::cmp::Ord::min (530 samples, 0.07%)</title><rect x="92.3744%" y="197" width="0.0731%" height="15" fill="rgb(221,58,24)" fg:x="670093" fg:w="530"/><text x="92.6244%" y="207.50"></text></g><g><title>core::cmp::min_by (515 samples, 0.07%)</title><rect x="92.3764%" y="181" width="0.0710%" height="15" fill="rgb(230,54,45)" fg:x="670108" fg:w="515"/><text x="92.6264%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (154 samples, 0.02%)</title><rect x="92.4262%" y="165" width="0.0212%" height="15" fill="rgb(254,21,18)" fg:x="670469" fg:w="154"/><text x="92.6762%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (105 samples, 0.01%)</title><rect x="92.4330%" y="149" width="0.0145%" height="15" fill="rgb(221,108,0)" fg:x="670518" fg:w="105"/><text x="92.6830%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82 samples, 0.01%)</title><rect x="92.5033%" y="197" width="0.0113%" height="15" fill="rgb(206,95,1)" fg:x="671028" fg:w="82"/><text x="92.7533%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (504 samples, 0.07%)</title><rect x="92.4474%" y="213" width="0.0695%" height="15" fill="rgb(237,52,5)" fg:x="670623" fg:w="504"/><text x="92.6974%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,379 samples, 0.47%)</title><rect x="92.0575%" y="293" width="0.4658%" height="15" fill="rgb(218,150,34)" fg:x="667794" fg:w="3379"/><text x="92.3075%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,363 samples, 0.46%)</title><rect x="92.0597%" y="277" width="0.4636%" height="15" fill="rgb(235,194,28)" fg:x="667810" fg:w="3363"/><text x="92.3097%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,363 samples, 0.46%)</title><rect x="92.0597%" y="261" width="0.4636%" height="15" fill="rgb(245,92,18)" fg:x="667810" fg:w="3363"/><text x="92.3097%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,772 samples, 0.24%)</title><rect x="92.2790%" y="245" width="0.2443%" height="15" fill="rgb(253,203,53)" fg:x="669401" fg:w="1772"/><text x="92.5290%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,725 samples, 0.24%)</title><rect x="92.2855%" y="229" width="0.2378%" height="15" fill="rgb(249,185,47)" fg:x="669448" fg:w="1725"/><text x="92.5355%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (9,384 samples, 1.29%)</title><rect x="91.2298%" y="373" width="1.2936%" height="15" fill="rgb(252,194,52)" fg:x="661790" fg:w="9384"/><text x="91.4798%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,330 samples, 1.29%)</title><rect x="91.2372%" y="357" width="1.2862%" height="15" fill="rgb(210,53,36)" fg:x="661844" fg:w="9330"/><text x="91.4872%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,568 samples, 0.49%)</title><rect x="92.0315%" y="341" width="0.4919%" height="15" fill="rgb(237,37,25)" fg:x="667606" fg:w="3568"/><text x="92.2815%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,545 samples, 0.49%)</title><rect x="92.0347%" y="325" width="0.4887%" height="15" fill="rgb(242,116,27)" fg:x="667629" fg:w="3545"/><text x="92.2847%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,455 samples, 0.48%)</title><rect x="92.0471%" y="309" width="0.4763%" height="15" fill="rgb(213,185,26)" fg:x="667719" fg:w="3455"/><text x="92.2971%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (129 samples, 0.02%)</title><rect x="92.5772%" y="325" width="0.0178%" height="15" fill="rgb(225,204,8)" fg:x="671564" fg:w="129"/><text x="92.8272%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (270 samples, 0.04%)</title><rect x="92.5579%" y="341" width="0.0372%" height="15" fill="rgb(254,111,37)" fg:x="671424" fg:w="270"/><text x="92.8079%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (399 samples, 0.06%)</title><rect x="92.5453%" y="357" width="0.0550%" height="15" fill="rgb(242,35,9)" fg:x="671333" fg:w="399"/><text x="92.7953%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (104 samples, 0.01%)</title><rect x="92.6775%" y="341" width="0.0143%" height="15" fill="rgb(232,138,49)" fg:x="672292" fg:w="104"/><text x="92.9275%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (168 samples, 0.02%)</title><rect x="92.7678%" y="309" width="0.0232%" height="15" fill="rgb(247,56,4)" fg:x="672947" fg:w="168"/><text x="93.0178%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (585 samples, 0.08%)</title><rect x="92.7339%" y="325" width="0.0806%" height="15" fill="rgb(226,179,17)" fg:x="672701" fg:w="585"/><text x="92.9839%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (171 samples, 0.02%)</title><rect x="92.7910%" y="309" width="0.0236%" height="15" fill="rgb(216,163,45)" fg:x="673115" fg:w="171"/><text x="93.0410%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (143 samples, 0.02%)</title><rect x="92.7948%" y="293" width="0.0197%" height="15" fill="rgb(211,157,3)" fg:x="673143" fg:w="143"/><text x="93.0448%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (913 samples, 0.13%)</title><rect x="92.6919%" y="341" width="0.1259%" height="15" fill="rgb(234,44,20)" fg:x="672396" fg:w="913"/><text x="92.9419%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (186 samples, 0.03%)</title><rect x="92.8351%" y="309" width="0.0256%" height="15" fill="rgb(254,138,23)" fg:x="673435" fg:w="186"/><text x="93.0851%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (114 samples, 0.02%)</title><rect x="92.8450%" y="293" width="0.0157%" height="15" fill="rgb(206,119,39)" fg:x="673507" fg:w="114"/><text x="93.0950%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (201 samples, 0.03%)</title><rect x="92.8337%" y="325" width="0.0277%" height="15" fill="rgb(231,105,52)" fg:x="673425" fg:w="201"/><text x="93.0837%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (96 samples, 0.01%)</title><rect x="92.8869%" y="293" width="0.0132%" height="15" fill="rgb(250,20,5)" fg:x="673811" fg:w="96"/><text x="93.1369%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (240 samples, 0.03%)</title><rect x="92.8675%" y="309" width="0.0331%" height="15" fill="rgb(215,198,30)" fg:x="673670" fg:w="240"/><text x="93.1175%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (324 samples, 0.04%)</title><rect x="92.8614%" y="325" width="0.0447%" height="15" fill="rgb(246,142,8)" fg:x="673626" fg:w="324"/><text x="93.1114%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (224 samples, 0.03%)</title><rect x="93.0022%" y="229" width="0.0309%" height="15" fill="rgb(243,26,38)" fg:x="674647" fg:w="224"/><text x="93.2522%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (582 samples, 0.08%)</title><rect x="92.9587%" y="277" width="0.0802%" height="15" fill="rgb(205,133,28)" fg:x="674332" fg:w="582"/><text x="93.2087%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (510 samples, 0.07%)</title><rect x="92.9687%" y="261" width="0.0703%" height="15" fill="rgb(212,34,0)" fg:x="674404" fg:w="510"/><text x="93.2187%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (510 samples, 0.07%)</title><rect x="92.9687%" y="245" width="0.0703%" height="15" fill="rgb(251,226,22)" fg:x="674404" fg:w="510"/><text x="93.2187%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,653 samples, 0.23%)</title><rect x="92.8205%" y="341" width="0.2279%" height="15" fill="rgb(252,119,9)" fg:x="673329" fg:w="1653"/><text x="93.0705%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1,031 samples, 0.14%)</title><rect x="92.9062%" y="325" width="0.1421%" height="15" fill="rgb(213,150,50)" fg:x="673951" fg:w="1031"/><text x="93.1562%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (951 samples, 0.13%)</title><rect x="92.9172%" y="309" width="0.1311%" height="15" fill="rgb(212,24,39)" fg:x="674031" fg:w="951"/><text x="93.1672%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (692 samples, 0.10%)</title><rect x="92.9530%" y="293" width="0.0954%" height="15" fill="rgb(213,46,39)" fg:x="674290" fg:w="692"/><text x="93.2030%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (834 samples, 0.11%)</title><rect x="93.0638%" y="341" width="0.1150%" height="15" fill="rgb(239,106,12)" fg:x="675094" fg:w="834"/><text x="93.3138%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (710 samples, 0.10%)</title><rect x="93.0809%" y="325" width="0.0979%" height="15" fill="rgb(249,229,21)" fg:x="675218" fg:w="710"/><text x="93.3309%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (196 samples, 0.03%)</title><rect x="93.1517%" y="309" width="0.0270%" height="15" fill="rgb(212,158,3)" fg:x="675732" fg:w="196"/><text x="93.4017%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (414 samples, 0.06%)</title><rect x="93.2175%" y="325" width="0.0571%" height="15" fill="rgb(253,26,48)" fg:x="676209" fg:w="414"/><text x="93.4675%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (151 samples, 0.02%)</title><rect x="93.2537%" y="309" width="0.0208%" height="15" fill="rgb(238,178,20)" fg:x="676472" fg:w="151"/><text x="93.5037%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (105 samples, 0.01%)</title><rect x="93.3578%" y="309" width="0.0145%" height="15" fill="rgb(208,86,15)" fg:x="677227" fg:w="105"/><text x="93.6078%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (818 samples, 0.11%)</title><rect x="93.2746%" y="325" width="0.1128%" height="15" fill="rgb(239,42,53)" fg:x="676623" fg:w="818"/><text x="93.5246%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (109 samples, 0.02%)</title><rect x="93.3723%" y="309" width="0.0150%" height="15" fill="rgb(245,226,8)" fg:x="677332" fg:w="109"/><text x="93.6223%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,303 samples, 0.32%)</title><rect x="93.1788%" y="341" width="0.3175%" height="15" fill="rgb(216,176,32)" fg:x="675928" fg:w="2303"/><text x="93.4288%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (790 samples, 0.11%)</title><rect x="93.3873%" y="325" width="0.1089%" height="15" fill="rgb(231,186,21)" fg:x="677441" fg:w="790"/><text x="93.6373%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (671 samples, 0.09%)</title><rect x="93.4037%" y="309" width="0.0925%" height="15" fill="rgb(205,95,49)" fg:x="677560" fg:w="671"/><text x="93.6537%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (182 samples, 0.03%)</title><rect x="93.4711%" y="293" width="0.0251%" height="15" fill="rgb(217,145,8)" fg:x="678049" fg:w="182"/><text x="93.7211%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,865 samples, 2.32%)</title><rect x="91.1766%" y="389" width="2.3249%" height="15" fill="rgb(239,144,48)" fg:x="661404" fg:w="16865"/><text x="91.4266%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,095 samples, 0.98%)</title><rect x="92.5234%" y="373" width="0.9781%" height="15" fill="rgb(214,189,23)" fg:x="671174" fg:w="7095"/><text x="92.7734%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,497 samples, 0.90%)</title><rect x="92.6058%" y="357" width="0.8956%" height="15" fill="rgb(229,157,17)" fg:x="671772" fg:w="6497"/><text x="92.8558%" y="367.50"></text></g><g><title>__clone3 (41,372 samples, 5.70%)</title><rect x="87.8290%" y="629" width="5.7033%" height="15" fill="rgb(230,5,48)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="639.50">__clone3</text></g><g><title>start_thread (41,372 samples, 5.70%)</title><rect x="87.8290%" y="613" width="5.7033%" height="15" fill="rgb(224,156,48)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (41,372 samples, 5.70%)</title><rect x="87.8290%" y="597" width="5.7033%" height="15" fill="rgb(223,14,29)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (41,372 samples, 5.70%)</title><rect x="87.8290%" y="581" width="5.7033%" height="15" fill="rgb(229,96,36)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (41,372 samples, 5.70%)</title><rect x="87.8290%" y="565" width="5.7033%" height="15" fill="rgb(231,102,53)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (41,372 samples, 5.70%)</title><rect x="87.8290%" y="549" width="5.7033%" height="15" fill="rgb(210,77,38)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (41,372 samples, 5.70%)</title><rect x="87.8290%" y="533" width="5.7033%" height="15" fill="rgb(235,131,6)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="543.50">std::pa..</text></g><g><title>__rust_try (41,372 samples, 5.70%)</title><rect x="87.8290%" y="517" width="5.7033%" height="15" fill="rgb(252,55,38)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (41,372 samples, 5.70%)</title><rect x="87.8290%" y="501" width="5.7033%" height="15" fill="rgb(246,38,14)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (41,372 samples, 5.70%)</title><rect x="87.8290%" y="485" width="5.7033%" height="15" fill="rgb(242,27,5)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (41,372 samples, 5.70%)</title><rect x="87.8290%" y="469" width="5.7033%" height="15" fill="rgb(228,65,35)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (41,372 samples, 5.70%)</title><rect x="87.8290%" y="453" width="5.7033%" height="15" fill="rgb(245,93,11)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (41,372 samples, 5.70%)</title><rect x="87.8290%" y="437" width="5.7033%" height="15" fill="rgb(213,1,31)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (41,372 samples, 5.70%)</title><rect x="87.8290%" y="421" width="5.7033%" height="15" fill="rgb(237,205,14)" fg:x="637120" fg:w="41372"/><text x="88.0790%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (17,136 samples, 2.36%)</title><rect x="91.1700%" y="405" width="2.3623%" height="15" fill="rgb(232,118,45)" fg:x="661356" fg:w="17136"/><text x="91.4200%" y="415.50">st..</text></g><g><title>std::collections::hash::map::map_entry (201 samples, 0.03%)</title><rect x="93.5045%" y="389" width="0.0277%" height="15" fill="rgb(218,5,6)" fg:x="678291" fg:w="201"/><text x="93.7545%" y="399.50"></text></g><g><title>worker-8 (47,809 samples, 6.59%)</title><rect x="86.9515%" y="645" width="6.5906%" height="15" fill="rgb(251,87,51)" fg:x="630755" fg:w="47809"/><text x="87.2015%" y="655.50">worker-8</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (188 samples, 0.03%)</title><rect x="93.5500%" y="629" width="0.0259%" height="15" fill="rgb(207,225,20)" fg:x="678621" fg:w="188"/><text x="93.8000%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (74 samples, 0.01%)</title><rect x="93.5816%" y="613" width="0.0102%" height="15" fill="rgb(222,78,54)" fg:x="678850" fg:w="74"/><text x="93.8316%" y="623.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (74 samples, 0.01%)</title><rect x="93.5816%" y="597" width="0.0102%" height="15" fill="rgb(232,85,16)" fg:x="678850" fg:w="74"/><text x="93.8316%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (108 samples, 0.01%)</title><rect x="93.5918%" y="613" width="0.0149%" height="15" fill="rgb(244,25,33)" fg:x="678924" fg:w="108"/><text x="93.8418%" y="623.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.01%)</title><rect x="93.6669%" y="613" width="0.0103%" height="15" fill="rgb(233,24,36)" fg:x="679469" fg:w="75"/><text x="93.9169%" y="623.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (142 samples, 0.02%)</title><rect x="93.6818%" y="613" width="0.0196%" height="15" fill="rgb(253,49,54)" fg:x="679577" fg:w="142"/><text x="93.9318%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (120 samples, 0.02%)</title><rect x="93.7182%" y="613" width="0.0165%" height="15" fill="rgb(245,12,22)" fg:x="679841" fg:w="120"/><text x="93.9682%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (78 samples, 0.01%)</title><rect x="93.7240%" y="597" width="0.0108%" height="15" fill="rgb(253,141,28)" fg:x="679883" fg:w="78"/><text x="93.9740%" y="607.50"></text></g><g><title>__memcmp_evex_movbe (89 samples, 0.01%)</title><rect x="93.7347%" y="613" width="0.0123%" height="15" fill="rgb(225,207,27)" fg:x="679961" fg:w="89"/><text x="93.9847%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 0.01%)</title><rect x="93.7644%" y="613" width="0.0109%" height="15" fill="rgb(220,84,2)" fg:x="680176" fg:w="79"/><text x="94.0144%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (74 samples, 0.01%)</title><rect x="93.7977%" y="613" width="0.0102%" height="15" fill="rgb(224,37,37)" fg:x="680418" fg:w="74"/><text x="94.0477%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (80 samples, 0.01%)</title><rect x="93.8199%" y="613" width="0.0110%" height="15" fill="rgb(220,143,18)" fg:x="680579" fg:w="80"/><text x="94.0699%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (138 samples, 0.02%)</title><rect x="93.8309%" y="613" width="0.0190%" height="15" fill="rgb(210,88,33)" fg:x="680659" fg:w="138"/><text x="94.0809%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (95 samples, 0.01%)</title><rect x="93.8591%" y="613" width="0.0131%" height="15" fill="rgb(219,87,51)" fg:x="680863" fg:w="95"/><text x="94.1091%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (77 samples, 0.01%)</title><rect x="93.8722%" y="613" width="0.0106%" height="15" fill="rgb(211,7,35)" fg:x="680958" fg:w="77"/><text x="94.1222%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (88 samples, 0.01%)</title><rect x="93.8828%" y="613" width="0.0121%" height="15" fill="rgb(232,77,2)" fg:x="681035" fg:w="88"/><text x="94.1328%" y="623.50"></text></g><g><title>[anon] (2,597 samples, 0.36%)</title><rect x="93.5816%" y="629" width="0.3580%" height="15" fill="rgb(249,94,25)" fg:x="678850" fg:w="2597"/><text x="93.8316%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (139 samples, 0.02%)</title><rect x="93.9474%" y="613" width="0.0192%" height="15" fill="rgb(215,112,2)" fg:x="681504" fg:w="139"/><text x="94.1974%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (88 samples, 0.01%)</title><rect x="93.9702%" y="613" width="0.0121%" height="15" fill="rgb(226,115,48)" fg:x="681669" fg:w="88"/><text x="94.2202%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (107 samples, 0.01%)</title><rect x="93.9823%" y="613" width="0.0148%" height="15" fill="rgb(249,196,10)" fg:x="681757" fg:w="107"/><text x="94.2323%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (75 samples, 0.01%)</title><rect x="94.0049%" y="613" width="0.0103%" height="15" fill="rgb(237,109,14)" fg:x="681921" fg:w="75"/><text x="94.2549%" y="623.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (189 samples, 0.03%)</title><rect x="94.0248%" y="613" width="0.0261%" height="15" fill="rgb(217,103,53)" fg:x="682065" fg:w="189"/><text x="94.2748%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (189 samples, 0.03%)</title><rect x="94.0248%" y="597" width="0.0261%" height="15" fill="rgb(244,137,9)" fg:x="682065" fg:w="189"/><text x="94.2748%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (189 samples, 0.03%)</title><rect x="94.0248%" y="581" width="0.0261%" height="15" fill="rgb(227,201,3)" fg:x="682065" fg:w="189"/><text x="94.2748%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (82 samples, 0.01%)</title><rect x="94.0395%" y="565" width="0.0113%" height="15" fill="rgb(243,94,6)" fg:x="682172" fg:w="82"/><text x="94.2895%" y="575.50"></text></g><g><title>core::char::methods::encode_utf8_raw (95 samples, 0.01%)</title><rect x="94.0789%" y="613" width="0.0131%" height="15" fill="rgb(235,118,5)" fg:x="682458" fg:w="95"/><text x="94.3289%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (150 samples, 0.02%)</title><rect x="94.0934%" y="613" width="0.0207%" height="15" fill="rgb(247,10,30)" fg:x="682563" fg:w="150"/><text x="94.3434%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (189 samples, 0.03%)</title><rect x="94.1348%" y="613" width="0.0261%" height="15" fill="rgb(205,26,28)" fg:x="682863" fg:w="189"/><text x="94.3848%" y="623.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (102 samples, 0.01%)</title><rect x="94.1685%" y="613" width="0.0141%" height="15" fill="rgb(206,99,35)" fg:x="683108" fg:w="102"/><text x="94.4185%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (78 samples, 0.01%)</title><rect x="94.2180%" y="613" width="0.0108%" height="15" fill="rgb(238,130,40)" fg:x="683467" fg:w="78"/><text x="94.4680%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (118 samples, 0.02%)</title><rect x="94.2475%" y="613" width="0.0163%" height="15" fill="rgb(224,126,31)" fg:x="683681" fg:w="118"/><text x="94.4975%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (197 samples, 0.03%)</title><rect x="94.2638%" y="613" width="0.0272%" height="15" fill="rgb(254,105,17)" fg:x="683799" fg:w="197"/><text x="94.5138%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (159 samples, 0.02%)</title><rect x="94.2690%" y="597" width="0.0219%" height="15" fill="rgb(216,87,36)" fg:x="683837" fg:w="159"/><text x="94.5190%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (89 samples, 0.01%)</title><rect x="94.2787%" y="581" width="0.0123%" height="15" fill="rgb(240,21,12)" fg:x="683907" fg:w="89"/><text x="94.5287%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (131 samples, 0.02%)</title><rect x="94.2910%" y="613" width="0.0181%" height="15" fill="rgb(245,192,34)" fg:x="683996" fg:w="131"/><text x="94.5410%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (75 samples, 0.01%)</title><rect x="94.2987%" y="597" width="0.0103%" height="15" fill="rgb(226,100,49)" fg:x="684052" fg:w="75"/><text x="94.5487%" y="607.50"></text></g><g><title>one_brc::process_lines (350 samples, 0.05%)</title><rect x="94.3203%" y="613" width="0.0482%" height="15" fill="rgb(245,188,27)" fg:x="684209" fg:w="350"/><text x="94.5703%" y="623.50"></text></g><g><title>[unknown] (3,366 samples, 0.46%)</title><rect x="93.9396%" y="629" width="0.4640%" height="15" fill="rgb(212,170,8)" fg:x="681447" fg:w="3366"/><text x="94.1896%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (113 samples, 0.02%)</title><rect x="94.7386%" y="325" width="0.0156%" height="15" fill="rgb(217,113,29)" fg:x="687243" fg:w="113"/><text x="94.9886%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (180 samples, 0.02%)</title><rect x="94.7825%" y="277" width="0.0248%" height="15" fill="rgb(237,30,3)" fg:x="687562" fg:w="180"/><text x="95.0325%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (150 samples, 0.02%)</title><rect x="94.7867%" y="261" width="0.0207%" height="15" fill="rgb(227,19,28)" fg:x="687592" fg:w="150"/><text x="95.0367%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (146 samples, 0.02%)</title><rect x="94.7872%" y="245" width="0.0201%" height="15" fill="rgb(239,172,45)" fg:x="687596" fg:w="146"/><text x="95.0372%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (386 samples, 0.05%)</title><rect x="94.7543%" y="325" width="0.0532%" height="15" fill="rgb(254,55,39)" fg:x="687357" fg:w="386"/><text x="95.0043%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (383 samples, 0.05%)</title><rect x="94.7547%" y="309" width="0.0528%" height="15" fill="rgb(249,208,12)" fg:x="687360" fg:w="383"/><text x="95.0047%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (328 samples, 0.05%)</title><rect x="94.7623%" y="293" width="0.0452%" height="15" fill="rgb(240,52,13)" fg:x="687415" fg:w="328"/><text x="95.0123%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (269 samples, 0.04%)</title><rect x="94.8533%" y="277" width="0.0371%" height="15" fill="rgb(252,149,13)" fg:x="688075" fg:w="269"/><text x="95.1033%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (657 samples, 0.09%)</title><rect x="94.8075%" y="325" width="0.0906%" height="15" fill="rgb(232,81,48)" fg:x="687743" fg:w="657"/><text x="95.0575%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (571 samples, 0.08%)</title><rect x="94.8193%" y="309" width="0.0787%" height="15" fill="rgb(222,144,2)" fg:x="687829" fg:w="571"/><text x="95.0693%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (571 samples, 0.08%)</title><rect x="94.8193%" y="293" width="0.0787%" height="15" fill="rgb(216,81,32)" fg:x="687829" fg:w="571"/><text x="95.0693%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (357 samples, 0.05%)</title><rect x="94.9856%" y="293" width="0.0492%" height="15" fill="rgb(244,78,51)" fg:x="689035" fg:w="357"/><text x="95.2356%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (291 samples, 0.04%)</title><rect x="94.9947%" y="277" width="0.0401%" height="15" fill="rgb(217,66,21)" fg:x="689101" fg:w="291"/><text x="95.2447%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (277 samples, 0.04%)</title><rect x="94.9966%" y="261" width="0.0382%" height="15" fill="rgb(247,101,42)" fg:x="689115" fg:w="277"/><text x="95.2466%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (865 samples, 0.12%)</title><rect x="94.9157%" y="309" width="0.1192%" height="15" fill="rgb(227,81,39)" fg:x="688528" fg:w="865"/><text x="95.1657%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (994 samples, 0.14%)</title><rect x="94.8981%" y="325" width="0.1370%" height="15" fill="rgb(220,223,44)" fg:x="688400" fg:w="994"/><text x="95.1481%" y="335.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (87 samples, 0.01%)</title><rect x="95.1597%" y="293" width="0.0120%" height="15" fill="rgb(205,218,2)" fg:x="690298" fg:w="87"/><text x="95.4097%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1,787 samples, 0.25%)</title><rect x="95.0391%" y="325" width="0.2463%" height="15" fill="rgb(212,207,28)" fg:x="689423" fg:w="1787"/><text x="95.2891%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,666 samples, 0.23%)</title><rect x="95.0558%" y="309" width="0.2297%" height="15" fill="rgb(224,12,41)" fg:x="689544" fg:w="1666"/><text x="95.3058%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (824 samples, 0.11%)</title><rect x="95.1718%" y="293" width="0.1136%" height="15" fill="rgb(216,118,12)" fg:x="690386" fg:w="824"/><text x="95.4218%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,189 samples, 0.72%)</title><rect x="94.5778%" y="341" width="0.7153%" height="15" fill="rgb(252,97,46)" fg:x="686077" fg:w="5189"/><text x="94.8278%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,661 samples, 0.78%)</title><rect x="94.5301%" y="373" width="0.7804%" height="15" fill="rgb(244,206,19)" fg:x="685731" fg:w="5661"/><text x="94.7801%" y="383.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (5,658 samples, 0.78%)</title><rect x="94.5305%" y="357" width="0.7800%" height="15" fill="rgb(231,84,31)" fg:x="685734" fg:w="5658"/><text x="94.7805%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (126 samples, 0.02%)</title><rect x="95.2931%" y="341" width="0.0174%" height="15" fill="rgb(244,133,0)" fg:x="691266" fg:w="126"/><text x="95.5431%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (126 samples, 0.02%)</title><rect x="95.2931%" y="325" width="0.0174%" height="15" fill="rgb(223,15,50)" fg:x="691266" fg:w="126"/><text x="95.5431%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (76 samples, 0.01%)</title><rect x="95.3000%" y="309" width="0.0105%" height="15" fill="rgb(250,118,49)" fg:x="691316" fg:w="76"/><text x="95.5500%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (525 samples, 0.07%)</title><rect x="95.6717%" y="181" width="0.0724%" height="15" fill="rgb(248,25,38)" fg:x="694012" fg:w="525"/><text x="95.9217%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,369 samples, 0.19%)</title><rect x="95.5664%" y="229" width="0.1887%" height="15" fill="rgb(215,70,14)" fg:x="693248" fg:w="1369"/><text x="95.8164%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,163 samples, 0.16%)</title><rect x="95.5948%" y="213" width="0.1603%" height="15" fill="rgb(215,28,15)" fg:x="693454" fg:w="1163"/><text x="95.8448%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,118 samples, 0.15%)</title><rect x="95.6010%" y="197" width="0.1541%" height="15" fill="rgb(243,6,28)" fg:x="693499" fg:w="1118"/><text x="95.8510%" y="207.50"></text></g><g><title>core::mem::size_of_val (80 samples, 0.01%)</title><rect x="95.7441%" y="181" width="0.0110%" height="15" fill="rgb(222,130,1)" fg:x="694537" fg:w="80"/><text x="95.9941%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (373 samples, 0.05%)</title><rect x="95.7624%" y="181" width="0.0514%" height="15" fill="rgb(236,166,44)" fg:x="694670" fg:w="373"/><text x="96.0124%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (292 samples, 0.04%)</title><rect x="95.7736%" y="165" width="0.0403%" height="15" fill="rgb(221,108,14)" fg:x="694751" fg:w="292"/><text x="96.0236%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (281 samples, 0.04%)</title><rect x="95.7751%" y="149" width="0.0387%" height="15" fill="rgb(252,3,45)" fg:x="694762" fg:w="281"/><text x="96.0251%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,665 samples, 0.37%)</title><rect x="95.4620%" y="261" width="0.3674%" height="15" fill="rgb(237,68,30)" fg:x="692491" fg:w="2665"/><text x="95.7120%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,665 samples, 0.37%)</title><rect x="95.4620%" y="245" width="0.3674%" height="15" fill="rgb(211,79,22)" fg:x="692491" fg:w="2665"/><text x="95.7120%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (539 samples, 0.07%)</title><rect x="95.7551%" y="229" width="0.0743%" height="15" fill="rgb(252,185,21)" fg:x="694617" fg:w="539"/><text x="96.0051%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (539 samples, 0.07%)</title><rect x="95.7551%" y="213" width="0.0743%" height="15" fill="rgb(225,189,26)" fg:x="694617" fg:w="539"/><text x="96.0051%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (486 samples, 0.07%)</title><rect x="95.7624%" y="197" width="0.0670%" height="15" fill="rgb(241,30,40)" fg:x="694670" fg:w="486"/><text x="96.0124%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (113 samples, 0.02%)</title><rect x="95.8138%" y="181" width="0.0156%" height="15" fill="rgb(235,215,44)" fg:x="695043" fg:w="113"/><text x="96.0638%" y="191.50"></text></g><g><title>core::ptr::metadata::metadata (113 samples, 0.02%)</title><rect x="95.8138%" y="165" width="0.0156%" height="15" fill="rgb(205,8,29)" fg:x="695043" fg:w="113"/><text x="96.0638%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,230 samples, 0.45%)</title><rect x="95.4187%" y="277" width="0.4453%" height="15" fill="rgb(241,137,42)" fg:x="692177" fg:w="3230"/><text x="95.6687%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (251 samples, 0.03%)</title><rect x="95.8294%" y="261" width="0.0346%" height="15" fill="rgb(237,155,2)" fg:x="695156" fg:w="251"/><text x="96.0794%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (251 samples, 0.03%)</title><rect x="95.8294%" y="245" width="0.0346%" height="15" fill="rgb(245,29,42)" fg:x="695156" fg:w="251"/><text x="96.0794%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (251 samples, 0.03%)</title><rect x="95.8294%" y="229" width="0.0346%" height="15" fill="rgb(234,101,35)" fg:x="695156" fg:w="251"/><text x="96.0794%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (108 samples, 0.01%)</title><rect x="95.9616%" y="245" width="0.0149%" height="15" fill="rgb(228,64,37)" fg:x="696115" fg:w="108"/><text x="96.2116%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (240 samples, 0.03%)</title><rect x="96.0483%" y="165" width="0.0331%" height="15" fill="rgb(217,214,36)" fg:x="696744" fg:w="240"/><text x="96.2983%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (318 samples, 0.04%)</title><rect x="96.0384%" y="197" width="0.0438%" height="15" fill="rgb(243,70,3)" fg:x="696672" fg:w="318"/><text x="96.2884%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (246 samples, 0.03%)</title><rect x="96.0483%" y="181" width="0.0339%" height="15" fill="rgb(253,158,52)" fg:x="696744" fg:w="246"/><text x="96.2983%" y="191.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,260 samples, 0.73%)</title><rect x="95.3574%" y="325" width="0.7251%" height="15" fill="rgb(234,111,54)" fg:x="691732" fg:w="5260"/><text x="95.6074%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,940 samples, 0.68%)</title><rect x="95.4015%" y="309" width="0.6810%" height="15" fill="rgb(217,70,32)" fg:x="692052" fg:w="4940"/><text x="95.6515%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,936 samples, 0.68%)</title><rect x="95.4020%" y="293" width="0.6804%" height="15" fill="rgb(234,18,33)" fg:x="692056" fg:w="4936"/><text x="95.6520%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1,584 samples, 0.22%)</title><rect x="95.8641%" y="277" width="0.2184%" height="15" fill="rgb(234,12,49)" fg:x="695408" fg:w="1584"/><text x="96.1141%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1,497 samples, 0.21%)</title><rect x="95.8761%" y="261" width="0.2064%" height="15" fill="rgb(236,10,21)" fg:x="695495" fg:w="1497"/><text x="96.1261%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (769 samples, 0.11%)</title><rect x="95.9765%" y="245" width="0.1060%" height="15" fill="rgb(248,182,45)" fg:x="696223" fg:w="769"/><text x="96.2265%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (756 samples, 0.10%)</title><rect x="95.9783%" y="229" width="0.1042%" height="15" fill="rgb(217,95,36)" fg:x="696236" fg:w="756"/><text x="96.2283%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (693 samples, 0.10%)</title><rect x="95.9870%" y="213" width="0.0955%" height="15" fill="rgb(212,110,31)" fg:x="696299" fg:w="693"/><text x="96.2370%" y="223.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11,372 samples, 1.57%)</title><rect x="94.5152%" y="405" width="1.5677%" height="15" fill="rgb(206,32,53)" fg:x="685623" fg:w="11372"/><text x="94.7652%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,369 samples, 1.57%)</title><rect x="94.5157%" y="389" width="1.5673%" height="15" fill="rgb(246,141,37)" fg:x="685626" fg:w="11369"/><text x="94.7657%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,603 samples, 0.77%)</title><rect x="95.3105%" y="373" width="0.7724%" height="15" fill="rgb(219,16,7)" fg:x="691392" fg:w="5603"/><text x="95.5605%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,438 samples, 0.75%)</title><rect x="95.3333%" y="357" width="0.7496%" height="15" fill="rgb(230,205,45)" fg:x="691557" fg:w="5438"/><text x="95.5833%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,390 samples, 0.74%)</title><rect x="95.3399%" y="341" width="0.7430%" height="15" fill="rgb(231,43,49)" fg:x="691605" fg:w="5390"/><text x="95.5899%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (341 samples, 0.05%)</title><rect x="96.0832%" y="405" width="0.0470%" height="15" fill="rgb(212,106,34)" fg:x="696997" fg:w="341"/><text x="96.3332%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (211 samples, 0.03%)</title><rect x="96.1302%" y="405" width="0.0291%" height="15" fill="rgb(206,83,17)" fg:x="697338" fg:w="211"/><text x="96.3802%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (177 samples, 0.02%)</title><rect x="96.1961%" y="341" width="0.0244%" height="15" fill="rgb(244,154,49)" fg:x="697816" fg:w="177"/><text x="96.4461%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (235 samples, 0.03%)</title><rect x="96.2208%" y="341" width="0.0324%" height="15" fill="rgb(244,149,49)" fg:x="697995" fg:w="235"/><text x="96.4708%" y="351.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (490 samples, 0.07%)</title><rect x="96.1910%" y="357" width="0.0675%" height="15" fill="rgb(227,134,18)" fg:x="697779" fg:w="490"/><text x="96.4410%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (118 samples, 0.02%)</title><rect x="96.2740%" y="341" width="0.0163%" height="15" fill="rgb(237,116,36)" fg:x="698381" fg:w="118"/><text x="96.5240%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (333 samples, 0.05%)</title><rect x="96.3142%" y="309" width="0.0459%" height="15" fill="rgb(205,129,40)" fg:x="698673" fg:w="333"/><text x="96.5642%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (400 samples, 0.06%)</title><rect x="96.3055%" y="325" width="0.0551%" height="15" fill="rgb(236,178,4)" fg:x="698610" fg:w="400"/><text x="96.5555%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,467 samples, 0.20%)</title><rect x="96.1593%" y="405" width="0.2022%" height="15" fill="rgb(251,76,53)" fg:x="697549" fg:w="1467"/><text x="96.4093%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,425 samples, 0.20%)</title><rect x="96.1651%" y="389" width="0.1964%" height="15" fill="rgb(242,92,40)" fg:x="697591" fg:w="1425"/><text x="96.4151%" y="399.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,379 samples, 0.19%)</title><rect x="96.1714%" y="373" width="0.1901%" height="15" fill="rgb(209,45,30)" fg:x="697637" fg:w="1379"/><text x="96.4214%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (747 samples, 0.10%)</title><rect x="96.2585%" y="357" width="0.1030%" height="15" fill="rgb(218,157,36)" fg:x="698269" fg:w="747"/><text x="96.5085%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (517 samples, 0.07%)</title><rect x="96.2902%" y="341" width="0.0713%" height="15" fill="rgb(222,186,16)" fg:x="698499" fg:w="517"/><text x="96.5402%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (98 samples, 0.01%)</title><rect x="96.5526%" y="261" width="0.0135%" height="15" fill="rgb(254,72,35)" fg:x="700402" fg:w="98"/><text x="96.8026%" y="271.50"></text></g><g><title>core::char::methods::encode_utf8_raw (780 samples, 0.11%)</title><rect x="96.4587%" y="357" width="0.1075%" height="15" fill="rgb(224,25,35)" fg:x="699721" fg:w="780"/><text x="96.7087%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (358 samples, 0.05%)</title><rect x="96.5169%" y="341" width="0.0494%" height="15" fill="rgb(206,135,52)" fg:x="700143" fg:w="358"/><text x="96.7669%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (351 samples, 0.05%)</title><rect x="96.5178%" y="325" width="0.0484%" height="15" fill="rgb(229,174,47)" fg:x="700150" fg:w="351"/><text x="96.7678%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (327 samples, 0.05%)</title><rect x="96.5211%" y="309" width="0.0451%" height="15" fill="rgb(242,184,21)" fg:x="700174" fg:w="327"/><text x="96.7711%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (131 samples, 0.02%)</title><rect x="96.5482%" y="293" width="0.0181%" height="15" fill="rgb(213,22,45)" fg:x="700370" fg:w="131"/><text x="96.7982%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (99 samples, 0.01%)</title><rect x="96.5526%" y="277" width="0.0136%" height="15" fill="rgb(237,81,54)" fg:x="700402" fg:w="99"/><text x="96.8026%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (847 samples, 0.12%)</title><rect x="96.4497%" y="373" width="0.1168%" height="15" fill="rgb(248,177,18)" fg:x="699656" fg:w="847"/><text x="96.6997%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (1,104 samples, 0.15%)</title><rect x="96.4175%" y="389" width="0.1522%" height="15" fill="rgb(254,31,16)" fg:x="699422" fg:w="1104"/><text x="96.6675%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (143 samples, 0.02%)</title><rect x="96.7139%" y="373" width="0.0197%" height="15" fill="rgb(235,20,31)" fg:x="701572" fg:w="143"/><text x="96.9639%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (356 samples, 0.05%)</title><rect x="96.7348%" y="373" width="0.0491%" height="15" fill="rgb(240,56,43)" fg:x="701724" fg:w="356"/><text x="96.9848%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (356 samples, 0.05%)</title><rect x="96.7348%" y="357" width="0.0491%" height="15" fill="rgb(237,197,51)" fg:x="701724" fg:w="356"/><text x="96.9848%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (322 samples, 0.04%)</title><rect x="96.7395%" y="341" width="0.0444%" height="15" fill="rgb(241,162,44)" fg:x="701758" fg:w="322"/><text x="96.9895%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (170 samples, 0.02%)</title><rect x="96.7605%" y="325" width="0.0234%" height="15" fill="rgb(224,23,20)" fg:x="701910" fg:w="170"/><text x="97.0105%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (134 samples, 0.02%)</title><rect x="96.7654%" y="309" width="0.0185%" height="15" fill="rgb(250,109,34)" fg:x="701946" fg:w="134"/><text x="97.0154%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (134 samples, 0.02%)</title><rect x="96.7654%" y="293" width="0.0185%" height="15" fill="rgb(214,175,50)" fg:x="701946" fg:w="134"/><text x="97.0154%" y="303.50"></text></g><g><title>__memcmp_evex_movbe (205 samples, 0.03%)</title><rect x="96.8291%" y="325" width="0.0283%" height="15" fill="rgb(213,182,5)" fg:x="702408" fg:w="205"/><text x="97.0791%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (585 samples, 0.08%)</title><rect x="96.7839%" y="373" width="0.0806%" height="15" fill="rgb(209,199,19)" fg:x="702080" fg:w="585"/><text x="97.0339%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (504 samples, 0.07%)</title><rect x="96.7951%" y="357" width="0.0695%" height="15" fill="rgb(236,224,42)" fg:x="702161" fg:w="504"/><text x="97.0451%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (504 samples, 0.07%)</title><rect x="96.7951%" y="341" width="0.0695%" height="15" fill="rgb(246,226,29)" fg:x="702161" fg:w="504"/><text x="97.0451%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (335 samples, 0.05%)</title><rect x="96.9383%" y="341" width="0.0462%" height="15" fill="rgb(227,223,11)" fg:x="703200" fg:w="335"/><text x="97.1883%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (274 samples, 0.04%)</title><rect x="96.9467%" y="325" width="0.0378%" height="15" fill="rgb(219,7,51)" fg:x="703261" fg:w="274"/><text x="97.1967%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (262 samples, 0.04%)</title><rect x="96.9483%" y="309" width="0.0361%" height="15" fill="rgb(245,167,10)" fg:x="703273" fg:w="262"/><text x="97.1983%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (763 samples, 0.11%)</title><rect x="96.8794%" y="357" width="0.1052%" height="15" fill="rgb(237,224,16)" fg:x="702773" fg:w="763"/><text x="97.1294%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (872 samples, 0.12%)</title><rect x="96.8645%" y="373" width="0.1202%" height="15" fill="rgb(226,132,13)" fg:x="702665" fg:w="872"/><text x="97.1145%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned (129 samples, 0.02%)</title><rect x="96.9974%" y="357" width="0.0178%" height="15" fill="rgb(214,140,3)" fg:x="703629" fg:w="129"/><text x="97.2474%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (93 samples, 0.01%)</title><rect x="97.0024%" y="341" width="0.0128%" height="15" fill="rgb(221,177,4)" fg:x="703665" fg:w="93"/><text x="97.2524%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (2,108 samples, 0.29%)</title><rect x="96.9880%" y="373" width="0.2906%" height="15" fill="rgb(238,139,3)" fg:x="703561" fg:w="2108"/><text x="97.2380%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,911 samples, 0.26%)</title><rect x="97.0152%" y="357" width="0.2634%" height="15" fill="rgb(216,17,39)" fg:x="703758" fg:w="1911"/><text x="97.2652%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5,122 samples, 0.71%)</title><rect x="96.5789%" y="389" width="0.7061%" height="15" fill="rgb(238,120,9)" fg:x="700593" fg:w="5122"/><text x="96.8289%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (216 samples, 0.03%)</title><rect x="97.2854%" y="373" width="0.0298%" height="15" fill="rgb(244,92,53)" fg:x="705718" fg:w="216"/><text x="97.5354%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (161 samples, 0.02%)</title><rect x="97.2930%" y="357" width="0.0222%" height="15" fill="rgb(224,148,33)" fg:x="705773" fg:w="161"/><text x="97.5430%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (109 samples, 0.02%)</title><rect x="97.3001%" y="341" width="0.0150%" height="15" fill="rgb(243,6,36)" fg:x="705825" fg:w="109"/><text x="97.5501%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (106 samples, 0.01%)</title><rect x="97.3006%" y="325" width="0.0146%" height="15" fill="rgb(230,102,11)" fg:x="705828" fg:w="106"/><text x="97.5506%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (7,055 samples, 0.97%)</title><rect x="96.3615%" y="405" width="0.9726%" height="15" fill="rgb(234,148,36)" fg:x="699016" fg:w="7055"/><text x="96.6115%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (353 samples, 0.05%)</title><rect x="97.2854%" y="389" width="0.0487%" height="15" fill="rgb(251,153,25)" fg:x="705718" fg:w="353"/><text x="97.5354%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get_unchecked (137 samples, 0.02%)</title><rect x="97.3152%" y="373" width="0.0189%" height="15" fill="rgb(215,129,8)" fg:x="705934" fg:w="137"/><text x="97.5652%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (137 samples, 0.02%)</title><rect x="97.3152%" y="357" width="0.0189%" height="15" fill="rgb(224,128,35)" fg:x="705934" fg:w="137"/><text x="97.5652%" y="367.50"></text></g><g><title>one_brc::round_towards_positive (637 samples, 0.09%)</title><rect x="97.3341%" y="405" width="0.0878%" height="15" fill="rgb(237,56,52)" fg:x="706071" fg:w="637"/><text x="97.5841%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (172 samples, 0.02%)</title><rect x="97.3982%" y="389" width="0.0237%" height="15" fill="rgb(234,213,19)" fg:x="706536" fg:w="172"/><text x="97.6482%" y="399.50"></text></g><g><title>__round (154 samples, 0.02%)</title><rect x="97.4006%" y="373" width="0.0212%" height="15" fill="rgb(252,82,23)" fg:x="706554" fg:w="154"/><text x="97.6506%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (107 samples, 0.01%)</title><rect x="97.5349%" y="357" width="0.0148%" height="15" fill="rgb(254,201,21)" fg:x="707528" fg:w="107"/><text x="97.7849%" y="367.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (609 samples, 0.08%)</title><rect x="97.4867%" y="389" width="0.0840%" height="15" fill="rgb(250,186,11)" fg:x="707178" fg:w="609"/><text x="97.7367%" y="399.50"></text></g><g><title>one_brc::Measurement::record (531 samples, 0.07%)</title><rect x="97.4974%" y="373" width="0.0732%" height="15" fill="rgb(211,174,5)" fg:x="707256" fg:w="531"/><text x="97.7474%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (152 samples, 0.02%)</title><rect x="97.5497%" y="357" width="0.0210%" height="15" fill="rgb(214,121,10)" fg:x="707635" fg:w="152"/><text x="97.7997%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (89 samples, 0.01%)</title><rect x="97.5823%" y="325" width="0.0123%" height="15" fill="rgb(241,66,2)" fg:x="707872" fg:w="89"/><text x="97.8323%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (165 samples, 0.02%)</title><rect x="97.5752%" y="341" width="0.0227%" height="15" fill="rgb(220,167,19)" fg:x="707820" fg:w="165"/><text x="97.8252%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (188 samples, 0.03%)</title><rect x="97.5738%" y="357" width="0.0259%" height="15" fill="rgb(231,54,50)" fg:x="707810" fg:w="188"/><text x="97.8238%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,293 samples, 0.18%)</title><rect x="97.4219%" y="405" width="0.1782%" height="15" fill="rgb(239,217,53)" fg:x="706708" fg:w="1293"/><text x="97.6719%" y="415.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (214 samples, 0.03%)</title><rect x="97.5706%" y="389" width="0.0295%" height="15" fill="rgb(248,8,0)" fg:x="707787" fg:w="214"/><text x="97.8206%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (210 samples, 0.03%)</title><rect x="97.5712%" y="373" width="0.0289%" height="15" fill="rgb(229,118,37)" fg:x="707791" fg:w="210"/><text x="97.8212%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (73 samples, 0.01%)</title><rect x="97.6393%" y="325" width="0.0101%" height="15" fill="rgb(253,223,43)" fg:x="708285" fg:w="73"/><text x="97.8893%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (134 samples, 0.02%)</title><rect x="97.6344%" y="341" width="0.0185%" height="15" fill="rgb(211,77,36)" fg:x="708250" fg:w="134"/><text x="97.8844%" y="351.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (256 samples, 0.04%)</title><rect x="97.6227%" y="389" width="0.0353%" height="15" fill="rgb(219,3,53)" fg:x="708165" fg:w="256"/><text x="97.8727%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (179 samples, 0.02%)</title><rect x="97.6333%" y="373" width="0.0247%" height="15" fill="rgb(244,45,42)" fg:x="708242" fg:w="179"/><text x="97.8833%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (175 samples, 0.02%)</title><rect x="97.6339%" y="357" width="0.0241%" height="15" fill="rgb(225,95,27)" fg:x="708246" fg:w="175"/><text x="97.8839%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (421 samples, 0.06%)</title><rect x="97.6001%" y="405" width="0.0580%" height="15" fill="rgb(207,74,8)" fg:x="708001" fg:w="421"/><text x="97.8501%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (308 samples, 0.04%)</title><rect x="97.8743%" y="277" width="0.0425%" height="15" fill="rgb(243,63,36)" fg:x="709990" fg:w="308"/><text x="98.1243%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (887 samples, 0.12%)</title><rect x="97.7955%" y="293" width="0.1223%" height="15" fill="rgb(211,180,12)" fg:x="709418" fg:w="887"/><text x="98.0455%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (782 samples, 0.11%)</title><rect x="98.1568%" y="277" width="0.1078%" height="15" fill="rgb(254,166,49)" fg:x="712039" fg:w="782"/><text x="98.4068%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,551 samples, 0.35%)</title><rect x="97.9177%" y="293" width="0.3517%" height="15" fill="rgb(205,19,0)" fg:x="710305" fg:w="2551"/><text x="98.1677%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,791 samples, 0.52%)</title><rect x="97.7475%" y="309" width="0.5226%" height="15" fill="rgb(224,172,32)" fg:x="709070" fg:w="3791"/><text x="97.9975%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,824 samples, 0.53%)</title><rect x="97.7439%" y="341" width="0.5272%" height="15" fill="rgb(254,136,30)" fg:x="709044" fg:w="3824"/><text x="97.9939%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,798 samples, 0.52%)</title><rect x="97.7475%" y="325" width="0.5236%" height="15" fill="rgb(246,19,35)" fg:x="709070" fg:w="3798"/><text x="97.9975%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (371 samples, 0.05%)</title><rect x="98.2819%" y="325" width="0.0511%" height="15" fill="rgb(219,24,36)" fg:x="712947" fg:w="371"/><text x="98.5319%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (364 samples, 0.05%)</title><rect x="98.3332%" y="309" width="0.0502%" height="15" fill="rgb(251,55,1)" fg:x="713319" fg:w="364"/><text x="98.5832%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (449 samples, 0.06%)</title><rect x="98.4090%" y="293" width="0.0619%" height="15" fill="rgb(218,117,39)" fg:x="713869" fg:w="449"/><text x="98.6590%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (144 samples, 0.02%)</title><rect x="98.4709%" y="293" width="0.0199%" height="15" fill="rgb(248,169,11)" fg:x="714318" fg:w="144"/><text x="98.7209%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (814 samples, 0.11%)</title><rect x="98.3834%" y="309" width="0.1122%" height="15" fill="rgb(244,40,44)" fg:x="713683" fg:w="814"/><text x="98.6334%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,229 samples, 0.17%)</title><rect x="98.3331%" y="325" width="0.1694%" height="15" fill="rgb(234,62,37)" fg:x="713318" fg:w="1229"/><text x="98.5831%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,727 samples, 0.24%)</title><rect x="98.2710%" y="341" width="0.2381%" height="15" fill="rgb(207,117,42)" fg:x="712868" fg:w="1727"/><text x="98.5210%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (127 samples, 0.02%)</title><rect x="98.6322%" y="213" width="0.0175%" height="15" fill="rgb(213,43,2)" fg:x="715488" fg:w="127"/><text x="98.8822%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (404 samples, 0.06%)</title><rect x="98.5946%" y="229" width="0.0557%" height="15" fill="rgb(244,202,51)" fg:x="715215" fg:w="404"/><text x="98.8446%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (106 samples, 0.01%)</title><rect x="98.7193%" y="213" width="0.0146%" height="15" fill="rgb(253,174,46)" fg:x="716120" fg:w="106"/><text x="98.9693%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (661 samples, 0.09%)</title><rect x="98.6510%" y="229" width="0.0911%" height="15" fill="rgb(251,23,1)" fg:x="715624" fg:w="661"/><text x="98.9010%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,568 samples, 0.22%)</title><rect x="98.5356%" y="245" width="0.2162%" height="15" fill="rgb(253,26,1)" fg:x="714787" fg:w="1568"/><text x="98.7856%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (130 samples, 0.02%)</title><rect x="98.8292%" y="213" width="0.0179%" height="15" fill="rgb(216,89,31)" fg:x="716917" fg:w="130"/><text x="99.0792%" y="223.50"></text></g><g><title>core::cmp::min (505 samples, 0.07%)</title><rect x="98.8475%" y="213" width="0.0696%" height="15" fill="rgb(209,109,5)" fg:x="717050" fg:w="505"/><text x="99.0975%" y="223.50"></text></g><g><title>core::cmp::Ord::min (505 samples, 0.07%)</title><rect x="98.8475%" y="197" width="0.0696%" height="15" fill="rgb(229,63,13)" fg:x="717050" fg:w="505"/><text x="99.0975%" y="207.50"></text></g><g><title>core::cmp::min_by (485 samples, 0.07%)</title><rect x="98.8503%" y="181" width="0.0669%" height="15" fill="rgb(238,137,54)" fg:x="717070" fg:w="485"/><text x="99.1003%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (154 samples, 0.02%)</title><rect x="98.8959%" y="165" width="0.0212%" height="15" fill="rgb(228,1,9)" fg:x="717401" fg:w="154"/><text x="99.1459%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (115 samples, 0.02%)</title><rect x="98.9013%" y="149" width="0.0159%" height="15" fill="rgb(249,120,48)" fg:x="717440" fg:w="115"/><text x="99.1513%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (495 samples, 0.07%)</title><rect x="98.9172%" y="213" width="0.0682%" height="15" fill="rgb(209,72,36)" fg:x="717555" fg:w="495"/><text x="99.1672%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,330 samples, 0.46%)</title><rect x="98.5316%" y="293" width="0.4591%" height="15" fill="rgb(247,98,49)" fg:x="714758" fg:w="3330"/><text x="98.7816%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,302 samples, 0.46%)</title><rect x="98.5354%" y="277" width="0.4552%" height="15" fill="rgb(233,75,36)" fg:x="714786" fg:w="3302"/><text x="98.7854%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,302 samples, 0.46%)</title><rect x="98.5354%" y="261" width="0.4552%" height="15" fill="rgb(225,14,24)" fg:x="714786" fg:w="3302"/><text x="98.7854%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,733 samples, 0.24%)</title><rect x="98.7517%" y="245" width="0.2389%" height="15" fill="rgb(237,193,20)" fg:x="716355" fg:w="1733"/><text x="99.0017%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,674 samples, 0.23%)</title><rect x="98.7599%" y="229" width="0.2308%" height="15" fill="rgb(239,122,19)" fg:x="716414" fg:w="1674"/><text x="99.0099%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (9,246 samples, 1.27%)</title><rect x="97.7162%" y="373" width="1.2746%" height="15" fill="rgb(231,220,10)" fg:x="708843" fg:w="9246"/><text x="97.9662%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,187 samples, 1.27%)</title><rect x="97.7243%" y="357" width="1.2665%" height="15" fill="rgb(220,66,15)" fg:x="708902" fg:w="9187"/><text x="97.9743%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,493 samples, 0.48%)</title><rect x="98.5093%" y="341" width="0.4815%" height="15" fill="rgb(215,171,52)" fg:x="714596" fg:w="3493"/><text x="98.7593%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,461 samples, 0.48%)</title><rect x="98.5137%" y="325" width="0.4771%" height="15" fill="rgb(241,169,50)" fg:x="714628" fg:w="3461"/><text x="98.7637%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,396 samples, 0.47%)</title><rect x="98.5226%" y="309" width="0.4681%" height="15" fill="rgb(236,189,0)" fg:x="714693" fg:w="3396"/><text x="98.7726%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (117 samples, 0.02%)</title><rect x="99.0405%" y="325" width="0.0161%" height="15" fill="rgb(217,147,20)" fg:x="718450" fg:w="117"/><text x="99.2905%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (234 samples, 0.03%)</title><rect x="99.0246%" y="341" width="0.0323%" height="15" fill="rgb(206,188,39)" fg:x="718334" fg:w="234"/><text x="99.2746%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (375 samples, 0.05%)</title><rect x="99.0128%" y="357" width="0.0517%" height="15" fill="rgb(227,118,25)" fg:x="718249" fg:w="375"/><text x="99.2628%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (111 samples, 0.02%)</title><rect x="99.1426%" y="341" width="0.0153%" height="15" fill="rgb(248,171,40)" fg:x="719190" fg:w="111"/><text x="99.3926%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (134 samples, 0.02%)</title><rect x="99.2360%" y="309" width="0.0185%" height="15" fill="rgb(251,90,54)" fg:x="719868" fg:w="134"/><text x="99.4860%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (551 samples, 0.08%)</title><rect x="99.1987%" y="325" width="0.0760%" height="15" fill="rgb(234,11,46)" fg:x="719597" fg:w="551"/><text x="99.4487%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (146 samples, 0.02%)</title><rect x="99.2545%" y="309" width="0.0201%" height="15" fill="rgb(229,134,13)" fg:x="720002" fg:w="146"/><text x="99.5045%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (119 samples, 0.02%)</title><rect x="99.2582%" y="293" width="0.0164%" height="15" fill="rgb(223,129,3)" fg:x="720029" fg:w="119"/><text x="99.5082%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (870 samples, 0.12%)</title><rect x="99.1579%" y="341" width="0.1199%" height="15" fill="rgb(221,124,13)" fg:x="719301" fg:w="870"/><text x="99.4079%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (118 samples, 0.02%)</title><rect x="99.3044%" y="293" width="0.0163%" height="15" fill="rgb(234,3,18)" fg:x="720364" fg:w="118"/><text x="99.5544%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (191 samples, 0.03%)</title><rect x="99.2947%" y="309" width="0.0263%" height="15" fill="rgb(249,199,20)" fg:x="720294" fg:w="191"/><text x="99.5447%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (198 samples, 0.03%)</title><rect x="99.2939%" y="325" width="0.0273%" height="15" fill="rgb(224,134,6)" fg:x="720288" fg:w="198"/><text x="99.5439%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (113 samples, 0.02%)</title><rect x="99.3413%" y="293" width="0.0156%" height="15" fill="rgb(254,83,26)" fg:x="720632" fg:w="113"/><text x="99.5913%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (230 samples, 0.03%)</title><rect x="99.3255%" y="309" width="0.0317%" height="15" fill="rgb(217,88,9)" fg:x="720517" fg:w="230"/><text x="99.5755%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (291 samples, 0.04%)</title><rect x="99.3212%" y="325" width="0.0401%" height="15" fill="rgb(225,73,2)" fg:x="720486" fg:w="291"/><text x="99.5712%" y="335.50"></text></g><g><title>__memcmp_evex_movbe (260 samples, 0.04%)</title><rect x="99.4496%" y="229" width="0.0358%" height="15" fill="rgb(226,44,39)" fg:x="721417" fg:w="260"/><text x="99.6996%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (595 samples, 0.08%)</title><rect x="99.4075%" y="277" width="0.0820%" height="15" fill="rgb(228,53,17)" fg:x="721112" fg:w="595"/><text x="99.6575%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (535 samples, 0.07%)</title><rect x="99.4158%" y="261" width="0.0738%" height="15" fill="rgb(212,27,27)" fg:x="721172" fg:w="535"/><text x="99.6658%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (535 samples, 0.07%)</title><rect x="99.4158%" y="245" width="0.0738%" height="15" fill="rgb(241,50,6)" fg:x="721172" fg:w="535"/><text x="99.6658%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,569 samples, 0.22%)</title><rect x="99.2814%" y="341" width="0.2163%" height="15" fill="rgb(225,28,51)" fg:x="720197" fg:w="1569"/><text x="99.5314%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (987 samples, 0.14%)</title><rect x="99.3616%" y="325" width="0.1361%" height="15" fill="rgb(215,33,16)" fg:x="720779" fg:w="987"/><text x="99.6116%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (921 samples, 0.13%)</title><rect x="99.3707%" y="309" width="0.1270%" height="15" fill="rgb(243,40,39)" fg:x="720845" fg:w="921"/><text x="99.6207%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (685 samples, 0.09%)</title><rect x="99.4032%" y="293" width="0.0944%" height="15" fill="rgb(225,11,42)" fg:x="721081" fg:w="685"/><text x="99.6532%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (849 samples, 0.12%)</title><rect x="99.5097%" y="341" width="0.1170%" height="15" fill="rgb(241,220,38)" fg:x="721853" fg:w="849"/><text x="99.7597%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (719 samples, 0.10%)</title><rect x="99.5276%" y="325" width="0.0991%" height="15" fill="rgb(244,52,35)" fg:x="721983" fg:w="719"/><text x="99.7776%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (207 samples, 0.03%)</title><rect x="99.5982%" y="309" width="0.0285%" height="15" fill="rgb(246,42,46)" fg:x="722495" fg:w="207"/><text x="99.8482%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (419 samples, 0.06%)</title><rect x="99.6661%" y="325" width="0.0578%" height="15" fill="rgb(205,184,13)" fg:x="722988" fg:w="419"/><text x="99.9161%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (164 samples, 0.02%)</title><rect x="99.7013%" y="309" width="0.0226%" height="15" fill="rgb(209,48,36)" fg:x="723243" fg:w="164"/><text x="99.9513%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (115 samples, 0.02%)</title><rect x="99.8045%" y="309" width="0.0159%" height="15" fill="rgb(244,34,51)" fg:x="723992" fg:w="115"/><text x="100.0545%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (792 samples, 0.11%)</title><rect x="99.7239%" y="325" width="0.1092%" height="15" fill="rgb(221,107,33)" fg:x="723407" fg:w="792"/><text x="99.9739%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (92 samples, 0.01%)</title><rect x="99.8204%" y="309" width="0.0127%" height="15" fill="rgb(224,203,12)" fg:x="724107" fg:w="92"/><text x="100.0704%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,349 samples, 0.32%)</title><rect x="99.6267%" y="341" width="0.3238%" height="15" fill="rgb(230,215,18)" fg:x="722702" fg:w="2349"/><text x="99.8767%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (852 samples, 0.12%)</title><rect x="99.8331%" y="325" width="0.1175%" height="15" fill="rgb(206,185,35)" fg:x="724199" fg:w="852"/><text x="100.0831%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (728 samples, 0.10%)</title><rect x="99.8502%" y="309" width="0.1004%" height="15" fill="rgb(228,140,34)" fg:x="724323" fg:w="728"/><text x="100.1002%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (224 samples, 0.03%)</title><rect x="99.9196%" y="293" width="0.0309%" height="15" fill="rgb(208,93,13)" fg:x="724827" fg:w="224"/><text x="100.1696%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,621 samples, 2.29%)</title><rect x="97.6641%" y="389" width="2.2913%" height="15" fill="rgb(221,193,39)" fg:x="708465" fg:w="16621"/><text x="97.9141%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,997 samples, 0.96%)</title><rect x="98.9908%" y="373" width="0.9646%" height="15" fill="rgb(241,132,34)" fg:x="718089" fg:w="6997"/><text x="99.2408%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,423 samples, 0.89%)</title><rect x="99.0699%" y="357" width="0.8854%" height="15" fill="rgb(221,141,10)" fg:x="718663" fg:w="6423"/><text x="99.3199%" y="367.50"></text></g><g><title>__clone3 (40,513 samples, 5.58%)</title><rect x="94.4036%" y="629" width="5.5848%" height="15" fill="rgb(226,90,31)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="639.50">__clone3</text></g><g><title>start_thread (40,513 samples, 5.58%)</title><rect x="94.4036%" y="613" width="5.5848%" height="15" fill="rgb(243,75,5)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="623.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (40,513 samples, 5.58%)</title><rect x="94.4036%" y="597" width="5.5848%" height="15" fill="rgb(227,156,21)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="607.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (40,513 samples, 5.58%)</title><rect x="94.4036%" y="581" width="5.5848%" height="15" fill="rgb(250,195,8)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="591.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (40,513 samples, 5.58%)</title><rect x="94.4036%" y="565" width="5.5848%" height="15" fill="rgb(220,134,5)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="575.50">std::th..</text></g><g><title>std::panic::catch_unwind (40,513 samples, 5.58%)</title><rect x="94.4036%" y="549" width="5.5848%" height="15" fill="rgb(246,106,34)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="559.50">std::pa..</text></g><g><title>std::panicking::try (40,513 samples, 5.58%)</title><rect x="94.4036%" y="533" width="5.5848%" height="15" fill="rgb(205,1,4)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="543.50">std::pa..</text></g><g><title>__rust_try (40,513 samples, 5.58%)</title><rect x="94.4036%" y="517" width="5.5848%" height="15" fill="rgb(224,151,29)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="527.50">__rust_..</text></g><g><title>std::panicking::try::do_call (40,513 samples, 5.58%)</title><rect x="94.4036%" y="501" width="5.5848%" height="15" fill="rgb(251,196,0)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="511.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40,513 samples, 5.58%)</title><rect x="94.4036%" y="485" width="5.5848%" height="15" fill="rgb(212,127,0)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="495.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (40,513 samples, 5.58%)</title><rect x="94.4036%" y="469" width="5.5848%" height="15" fill="rgb(236,71,53)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="479.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (40,513 samples, 5.58%)</title><rect x="94.4036%" y="453" width="5.5848%" height="15" fill="rgb(227,99,0)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="463.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (40,513 samples, 5.58%)</title><rect x="94.4036%" y="437" width="5.5848%" height="15" fill="rgb(239,89,21)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="447.50">one_brc..</text></g><g><title>one_brc::process_lines (40,513 samples, 5.58%)</title><rect x="94.4036%" y="421" width="5.5848%" height="15" fill="rgb(243,122,19)" fg:x="684813" fg:w="40513"/><text x="94.6536%" y="431.50">one_brc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (16,904 samples, 2.33%)</title><rect x="97.6582%" y="405" width="2.3303%" height="15" fill="rgb(229,192,45)" fg:x="708422" fg:w="16904"/><text x="97.9082%" y="415.50">s..</text></g><g><title>std::collections::hash::map::map_entry (214 samples, 0.03%)</title><rect x="99.9589%" y="389" width="0.0295%" height="15" fill="rgb(235,165,35)" fg:x="725112" fg:w="214"/><text x="100.2089%" y="399.50"></text></g><g><title>all (725,410 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(253,202,0)" fg:x="0" fg:w="725410"/><text x="0.2500%" y="671.50"></text></g><g><title>worker-9 (46,846 samples, 6.46%)</title><rect x="93.5421%" y="645" width="6.4579%" height="15" fill="rgb(235,51,20)" fg:x="678564" fg:w="46846"/><text x="93.7921%" y="655.50">worker-9</text></g></svg></svg>