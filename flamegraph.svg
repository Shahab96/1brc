<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="157314"><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.01%)</title><rect x="0.0000%" y="757" width="0.0140%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="22"/><text x="0.2500%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (720 samples, 0.46%)</title><rect x="0.8035%" y="741" width="0.4577%" height="15" fill="rgb(217,0,24)" fg:x="1264" fg:w="720"/><text x="1.0535%" y="751.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (720 samples, 0.46%)</title><rect x="0.8035%" y="725" width="0.4577%" height="15" fill="rgb(221,193,54)" fg:x="1264" fg:w="720"/><text x="1.0535%" y="735.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (720 samples, 0.46%)</title><rect x="0.8035%" y="709" width="0.4577%" height="15" fill="rgb(248,212,6)" fg:x="1264" fg:w="720"/><text x="1.0535%" y="719.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (2,837 samples, 1.80%)</title><rect x="0.0140%" y="757" width="1.8034%" height="15" fill="rgb(208,68,35)" fg:x="22" fg:w="2837"/><text x="0.2640%" y="767.50">&lt;..</text></g><g><title>core::slice::memchr::memchr (875 samples, 0.56%)</title><rect x="1.2612%" y="741" width="0.5562%" height="15" fill="rgb(232,128,0)" fg:x="1984" fg:w="875"/><text x="1.5112%" y="751.50"></text></g><g><title>__GI___libc_free (432 samples, 0.27%)</title><rect x="1.8174%" y="757" width="0.2746%" height="15" fill="rgb(207,160,47)" fg:x="2859" fg:w="432"/><text x="2.0674%" y="767.50"></text></g><g><title>__memcmp_evex_movbe (698 samples, 0.44%)</title><rect x="2.0939%" y="757" width="0.4437%" height="15" fill="rgb(228,23,34)" fg:x="3294" fg:w="698"/><text x="2.3439%" y="767.50"></text></g><g><title>_int_free (1,324 samples, 0.84%)</title><rect x="2.5376%" y="757" width="0.8416%" height="15" fill="rgb(218,30,26)" fg:x="3992" fg:w="1324"/><text x="2.7876%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,503 samples, 0.96%)</title><rect x="3.3792%" y="757" width="0.9554%" height="15" fill="rgb(220,122,19)" fg:x="5316" fg:w="1503"/><text x="3.6292%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,314 samples, 0.84%)</title><rect x="3.4994%" y="741" width="0.8353%" height="15" fill="rgb(250,228,42)" fg:x="5505" fg:w="1314"/><text x="3.7494%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1,314 samples, 0.84%)</title><rect x="3.4994%" y="725" width="0.8353%" height="15" fill="rgb(240,193,28)" fg:x="5505" fg:w="1314"/><text x="3.7494%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,314 samples, 0.84%)</title><rect x="3.4994%" y="709" width="0.8353%" height="15" fill="rgb(216,20,37)" fg:x="5505" fg:w="1314"/><text x="3.7494%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,314 samples, 0.84%)</title><rect x="3.4994%" y="693" width="0.8353%" height="15" fill="rgb(206,188,39)" fg:x="5505" fg:w="1314"/><text x="3.7494%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,314 samples, 0.84%)</title><rect x="3.4994%" y="677" width="0.8353%" height="15" fill="rgb(217,207,13)" fg:x="5505" fg:w="1314"/><text x="3.7494%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,314 samples, 0.84%)</title><rect x="3.4994%" y="661" width="0.8353%" height="15" fill="rgb(231,73,38)" fg:x="5505" fg:w="1314"/><text x="3.7494%" y="671.50"></text></g><g><title>core::hash::Hasher::write_u8 (476 samples, 0.30%)</title><rect x="4.0321%" y="645" width="0.3026%" height="15" fill="rgb(225,20,46)" fg:x="6343" fg:w="476"/><text x="4.2821%" y="655.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (304 samples, 0.19%)</title><rect x="4.3346%" y="757" width="0.1932%" height="15" fill="rgb(210,31,41)" fg:x="6819" fg:w="304"/><text x="4.5846%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (304 samples, 0.19%)</title><rect x="4.3346%" y="741" width="0.1932%" height="15" fill="rgb(221,200,47)" fg:x="6819" fg:w="304"/><text x="4.5846%" y="751.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (304 samples, 0.19%)</title><rect x="4.3346%" y="725" width="0.1932%" height="15" fill="rgb(226,26,5)" fg:x="6819" fg:w="304"/><text x="4.5846%" y="735.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,429 samples, 0.91%)</title><rect x="4.5279%" y="757" width="0.9084%" height="15" fill="rgb(249,33,26)" fg:x="7123" fg:w="1429"/><text x="4.7779%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (428 samples, 0.27%)</title><rect x="5.6797%" y="741" width="0.2721%" height="15" fill="rgb(235,183,28)" fg:x="8935" fg:w="428"/><text x="5.9297%" y="751.50"></text></g><g><title>[anon] (9,858 samples, 6.27%)</title><rect x="0.0000%" y="773" width="6.2664%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="9858"/><text x="0.2500%" y="783.50">[anon]</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,306 samples, 0.83%)</title><rect x="5.4363%" y="757" width="0.8302%" height="15" fill="rgb(247,18,42)" fg:x="8552" fg:w="1306"/><text x="5.6863%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (495 samples, 0.31%)</title><rect x="5.9518%" y="741" width="0.3147%" height="15" fill="rgb(241,131,45)" fg:x="9363" fg:w="495"/><text x="6.2018%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (495 samples, 0.31%)</title><rect x="5.9518%" y="725" width="0.3147%" height="15" fill="rgb(249,31,29)" fg:x="9363" fg:w="495"/><text x="6.2018%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (495 samples, 0.31%)</title><rect x="5.9518%" y="709" width="0.3147%" height="15" fill="rgb(225,111,53)" fg:x="9363" fg:w="495"/><text x="6.2018%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (495 samples, 0.31%)</title><rect x="5.9518%" y="693" width="0.3147%" height="15" fill="rgb(238,160,17)" fg:x="9363" fg:w="495"/><text x="6.2018%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (495 samples, 0.31%)</title><rect x="5.9518%" y="677" width="0.3147%" height="15" fill="rgb(214,148,48)" fg:x="9363" fg:w="495"/><text x="6.2018%" y="687.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (495 samples, 0.31%)</title><rect x="5.9518%" y="661" width="0.3147%" height="15" fill="rgb(232,36,49)" fg:x="9363" fg:w="495"/><text x="6.2018%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (495 samples, 0.31%)</title><rect x="5.9518%" y="645" width="0.3147%" height="15" fill="rgb(209,103,24)" fg:x="9363" fg:w="495"/><text x="6.2018%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (495 samples, 0.31%)</title><rect x="5.9518%" y="629" width="0.3147%" height="15" fill="rgb(229,88,8)" fg:x="9363" fg:w="495"/><text x="6.2018%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,396 samples, 0.89%)</title><rect x="6.2664%" y="757" width="0.8874%" height="15" fill="rgb(213,181,19)" fg:x="9858" fg:w="1396"/><text x="6.5164%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (430 samples, 0.27%)</title><rect x="9.0971%" y="741" width="0.2733%" height="15" fill="rgb(254,191,54)" fg:x="14311" fg:w="430"/><text x="9.3471%" y="751.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (430 samples, 0.27%)</title><rect x="9.0971%" y="725" width="0.2733%" height="15" fill="rgb(241,83,37)" fg:x="14311" fg:w="430"/><text x="9.3471%" y="735.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (430 samples, 0.27%)</title><rect x="9.0971%" y="709" width="0.2733%" height="15" fill="rgb(233,36,39)" fg:x="14311" fg:w="430"/><text x="9.3471%" y="719.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3,616 samples, 2.30%)</title><rect x="7.1538%" y="757" width="2.2986%" height="15" fill="rgb(226,3,54)" fg:x="11254" fg:w="3616"/><text x="7.4038%" y="767.50">&lt;..</text></g><g><title>core::slice::memchr::memchr (129 samples, 0.08%)</title><rect x="9.3704%" y="741" width="0.0820%" height="15" fill="rgb(245,192,40)" fg:x="14741" fg:w="129"/><text x="9.6204%" y="751.50"></text></g><g><title>__GI___libc_free (940 samples, 0.60%)</title><rect x="9.4524%" y="757" width="0.5975%" height="15" fill="rgb(238,167,29)" fg:x="14870" fg:w="940"/><text x="9.7024%" y="767.50"></text></g><g><title>__GI___libc_malloc (829 samples, 0.53%)</title><rect x="10.0500%" y="757" width="0.5270%" height="15" fill="rgb(232,182,51)" fg:x="15810" fg:w="829"/><text x="10.3000%" y="767.50"></text></g><g><title>__memcmp_evex_movbe (328 samples, 0.21%)</title><rect x="10.5769%" y="757" width="0.2085%" height="15" fill="rgb(231,60,39)" fg:x="16639" fg:w="328"/><text x="10.8269%" y="767.50"></text></g><g><title>__memcpy_evex_unaligned_erms (402 samples, 0.26%)</title><rect x="10.7854%" y="757" width="0.2555%" height="15" fill="rgb(208,69,12)" fg:x="16967" fg:w="402"/><text x="11.0354%" y="767.50"></text></g><g><title>__round (457 samples, 0.29%)</title><rect x="11.0410%" y="757" width="0.2905%" height="15" fill="rgb(235,93,37)" fg:x="17369" fg:w="457"/><text x="11.2910%" y="767.50"></text></g><g><title>_int_free (389 samples, 0.25%)</title><rect x="11.3315%" y="757" width="0.2473%" height="15" fill="rgb(213,116,39)" fg:x="17826" fg:w="389"/><text x="11.5815%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (549 samples, 0.35%)</title><rect x="11.5788%" y="757" width="0.3490%" height="15" fill="rgb(222,207,29)" fg:x="18215" fg:w="549"/><text x="11.8288%" y="767.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2,816 samples, 1.79%)</title><rect x="11.9277%" y="757" width="1.7901%" height="15" fill="rgb(206,96,30)" fg:x="18764" fg:w="2816"/><text x="12.1777%" y="767.50">c..</text></g><g><title>core::num::dec2flt::dec2flt (790 samples, 0.50%)</title><rect x="13.2156%" y="741" width="0.5022%" height="15" fill="rgb(218,138,4)" fg:x="20790" fg:w="790"/><text x="13.4656%" y="751.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1,688 samples, 1.07%)</title><rect x="13.7178%" y="757" width="1.0730%" height="15" fill="rgb(250,191,14)" fg:x="21580" fg:w="1688"/><text x="13.9678%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (457 samples, 0.29%)</title><rect x="14.5003%" y="741" width="0.2905%" height="15" fill="rgb(239,60,40)" fg:x="22811" fg:w="457"/><text x="14.7503%" y="751.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (457 samples, 0.29%)</title><rect x="14.5003%" y="725" width="0.2905%" height="15" fill="rgb(206,27,48)" fg:x="22811" fg:w="457"/><text x="14.7503%" y="735.50"></text></g><g><title>[unknown] (14,601 samples, 9.28%)</title><rect x="6.2664%" y="773" width="9.2814%" height="15" fill="rgb(225,35,8)" fg:x="9858" fg:w="14601"/><text x="6.5164%" y="783.50">[unknown]</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,191 samples, 0.76%)</title><rect x="14.7908%" y="757" width="0.7571%" height="15" fill="rgb(250,213,24)" fg:x="23268" fg:w="1191"/><text x="15.0408%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (483 samples, 0.31%)</title><rect x="18.2425%" y="453" width="0.3070%" height="15" fill="rgb(247,123,22)" fg:x="28698" fg:w="483"/><text x="18.4925%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (483 samples, 0.31%)</title><rect x="18.2425%" y="437" width="0.3070%" height="15" fill="rgb(231,138,38)" fg:x="28698" fg:w="483"/><text x="18.4925%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (483 samples, 0.31%)</title><rect x="18.2425%" y="421" width="0.3070%" height="15" fill="rgb(231,145,46)" fg:x="28698" fg:w="483"/><text x="18.4925%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,820 samples, 1.79%)</title><rect x="18.5495%" y="453" width="1.7926%" height="15" fill="rgb(251,118,11)" fg:x="29181" fg:w="2820"/><text x="18.7995%" y="463.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2,820 samples, 1.79%)</title><rect x="18.5495%" y="437" width="1.7926%" height="15" fill="rgb(217,147,25)" fg:x="29181" fg:w="2820"/><text x="18.7995%" y="447.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,820 samples, 1.79%)</title><rect x="18.5495%" y="421" width="1.7926%" height="15" fill="rgb(247,81,37)" fg:x="29181" fg:w="2820"/><text x="18.7995%" y="431.50">&lt;..</text></g><g><title>__memcmp_evex_movbe (2,760 samples, 1.75%)</title><rect x="18.5877%" y="405" width="1.7545%" height="15" fill="rgb(209,12,38)" fg:x="29241" fg:w="2760"/><text x="18.8377%" y="415.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (26 samples, 0.02%)</title><rect x="20.3256%" y="389" width="0.0165%" height="15" fill="rgb(227,1,9)" fg:x="31975" fg:w="26"/><text x="20.5756%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (26 samples, 0.02%)</title><rect x="20.3256%" y="373" width="0.0165%" height="15" fill="rgb(248,47,43)" fg:x="31975" fg:w="26"/><text x="20.5756%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,219 samples, 0.77%)</title><rect x="20.3421%" y="453" width="0.7749%" height="15" fill="rgb(221,10,30)" fg:x="32001" fg:w="1219"/><text x="20.5921%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,219 samples, 0.77%)</title><rect x="20.3421%" y="437" width="0.7749%" height="15" fill="rgb(210,229,1)" fg:x="32001" fg:w="1219"/><text x="20.5921%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (412 samples, 0.26%)</title><rect x="22.9884%" y="421" width="0.2619%" height="15" fill="rgb(222,148,37)" fg:x="36164" fg:w="412"/><text x="23.2384%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (388 samples, 0.25%)</title><rect x="23.2503%" y="421" width="0.2466%" height="15" fill="rgb(234,67,33)" fg:x="36576" fg:w="388"/><text x="23.5003%" y="431.50"></text></g><g><title>core::ptr::align_offset (388 samples, 0.25%)</title><rect x="23.2503%" y="405" width="0.2466%" height="15" fill="rgb(247,98,35)" fg:x="36576" fg:w="388"/><text x="23.5003%" y="415.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (794 samples, 0.50%)</title><rect x="23.4970%" y="421" width="0.5047%" height="15" fill="rgb(247,138,52)" fg:x="36964" fg:w="794"/><text x="23.7470%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (75 samples, 0.05%)</title><rect x="23.9540%" y="405" width="0.0477%" height="15" fill="rgb(213,79,30)" fg:x="37683" fg:w="75"/><text x="24.2040%" y="415.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (19,666 samples, 12.50%)</title><rect x="16.1187%" y="469" width="12.5011%" height="15" fill="rgb(246,177,23)" fg:x="25357" fg:w="19666"/><text x="16.3687%" y="479.50">&lt;core::str::pattern..</text></g><g><title>core::slice::memchr::memchr (11,803 samples, 7.50%)</title><rect x="21.1170%" y="453" width="7.5028%" height="15" fill="rgb(230,62,27)" fg:x="33220" fg:w="11803"/><text x="21.3670%" y="463.50">core::slic..</text></g><g><title>core::slice::memchr::memchr_aligned (11,362 samples, 7.22%)</title><rect x="21.3973%" y="437" width="7.2225%" height="15" fill="rgb(216,154,8)" fg:x="33661" fg:w="11362"/><text x="21.6473%" y="447.50">core::slic..</text></g><g><title>core::slice::memchr::memchr_naive (7,265 samples, 4.62%)</title><rect x="24.0017%" y="421" width="4.6182%" height="15" fill="rgb(244,35,45)" fg:x="37758" fg:w="7265"/><text x="24.2517%" y="431.50">core:..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (21,035 samples, 13.37%)</title><rect x="15.5492%" y="501" width="13.3713%" height="15" fill="rgb(251,115,12)" fg:x="24461" fg:w="21035"/><text x="15.7992%" y="511.50">&lt;core::str::iter::Sp..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (21,035 samples, 13.37%)</title><rect x="15.5492%" y="485" width="13.3713%" height="15" fill="rgb(240,54,50)" fg:x="24461" fg:w="21035"/><text x="15.7992%" y="495.50">core::str::iter::Spl..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (468 samples, 0.30%)</title><rect x="28.6230%" y="469" width="0.2975%" height="15" fill="rgb(233,84,52)" fg:x="45028" fg:w="468"/><text x="28.8730%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (468 samples, 0.30%)</title><rect x="28.6230%" y="453" width="0.2975%" height="15" fill="rgb(207,117,47)" fg:x="45028" fg:w="468"/><text x="28.8730%" y="463.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (466 samples, 0.30%)</title><rect x="29.7564%" y="389" width="0.2962%" height="15" fill="rgb(249,43,39)" fg:x="46811" fg:w="466"/><text x="30.0064%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (466 samples, 0.30%)</title><rect x="29.7564%" y="373" width="0.2962%" height="15" fill="rgb(209,38,44)" fg:x="46811" fg:w="466"/><text x="30.0064%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (70 samples, 0.04%)</title><rect x="30.0081%" y="357" width="0.0445%" height="15" fill="rgb(236,212,23)" fg:x="47207" fg:w="70"/><text x="30.2581%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (70 samples, 0.04%)</title><rect x="30.0081%" y="341" width="0.0445%" height="15" fill="rgb(242,79,21)" fg:x="47207" fg:w="70"/><text x="30.2581%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (70 samples, 0.04%)</title><rect x="30.0081%" y="325" width="0.0445%" height="15" fill="rgb(211,96,35)" fg:x="47207" fg:w="70"/><text x="30.2581%" y="335.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (22,817 samples, 14.50%)</title><rect x="15.5492%" y="533" width="14.5041%" height="15" fill="rgb(253,215,40)" fg:x="24461" fg:w="22817"/><text x="15.7992%" y="543.50">&lt;core::str::iter::Line..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22,817 samples, 14.50%)</title><rect x="15.5492%" y="517" width="14.5041%" height="15" fill="rgb(211,81,21)" fg:x="24461" fg:w="22817"/><text x="15.7992%" y="527.50">&lt;core::iter::adapters:..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,782 samples, 1.13%)</title><rect x="28.9205%" y="501" width="1.1328%" height="15" fill="rgb(208,190,38)" fg:x="45496" fg:w="1782"/><text x="29.1705%" y="511.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,782 samples, 1.13%)</title><rect x="28.9205%" y="485" width="1.1328%" height="15" fill="rgb(235,213,38)" fg:x="45496" fg:w="1782"/><text x="29.1705%" y="495.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (1,782 samples, 1.13%)</title><rect x="28.9205%" y="469" width="1.1328%" height="15" fill="rgb(237,122,38)" fg:x="45496" fg:w="1782"/><text x="29.1705%" y="479.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (1,782 samples, 1.13%)</title><rect x="28.9205%" y="453" width="1.1328%" height="15" fill="rgb(244,218,35)" fg:x="45496" fg:w="1782"/><text x="29.1705%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1,762 samples, 1.12%)</title><rect x="28.9332%" y="437" width="1.1201%" height="15" fill="rgb(240,68,47)" fg:x="45516" fg:w="1762"/><text x="29.1832%" y="447.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (1,762 samples, 1.12%)</title><rect x="28.9332%" y="421" width="1.1201%" height="15" fill="rgb(210,16,53)" fg:x="45516" fg:w="1762"/><text x="29.1832%" y="431.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1,762 samples, 1.12%)</title><rect x="28.9332%" y="405" width="1.1201%" height="15" fill="rgb(235,124,12)" fg:x="45516" fg:w="1762"/><text x="29.1832%" y="415.50"></text></g><g><title>checked_request2size (508 samples, 0.32%)</title><rect x="32.7727%" y="261" width="0.3229%" height="15" fill="rgb(224,169,11)" fg:x="51556" fg:w="508"/><text x="33.0227%" y="271.50"></text></g><g><title>__GI___libc_malloc (4,027 samples, 2.56%)</title><rect x="31.4308%" y="277" width="2.5598%" height="15" fill="rgb(250,166,2)" fg:x="49445" fg:w="4027"/><text x="31.6808%" y="287.50">__..</text></g><g><title>tcache_get (1,408 samples, 0.90%)</title><rect x="33.0956%" y="261" width="0.8950%" height="15" fill="rgb(242,216,29)" fg:x="52064" fg:w="1408"/><text x="33.3456%" y="271.50"></text></g><g><title>__rdl_alloc (701 samples, 0.45%)</title><rect x="33.9906%" y="277" width="0.4456%" height="15" fill="rgb(230,116,27)" fg:x="53472" fg:w="701"/><text x="34.2406%" y="287.50"></text></g><g><title>__rust_alloc (376 samples, 0.24%)</title><rect x="34.4362%" y="277" width="0.2390%" height="15" fill="rgb(228,99,48)" fg:x="54173" fg:w="376"/><text x="34.6862%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,476 samples, 3.48%)</title><rect x="31.4308%" y="325" width="3.4809%" height="15" fill="rgb(253,11,6)" fg:x="49445" fg:w="5476"/><text x="31.6808%" y="335.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (5,476 samples, 3.48%)</title><rect x="31.4308%" y="309" width="3.4809%" height="15" fill="rgb(247,143,39)" fg:x="49445" fg:w="5476"/><text x="31.6808%" y="319.50">all..</text></g><g><title>alloc::alloc::alloc (5,476 samples, 3.48%)</title><rect x="31.4308%" y="293" width="3.4809%" height="15" fill="rgb(236,97,10)" fg:x="49445" fg:w="5476"/><text x="31.6808%" y="303.50">all..</text></g><g><title>core::ptr::read_volatile (372 samples, 0.24%)</title><rect x="34.6752%" y="277" width="0.2365%" height="15" fill="rgb(233,208,19)" fg:x="54549" fg:w="372"/><text x="34.9252%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,857 samples, 3.72%)</title><rect x="31.1930%" y="373" width="3.7231%" height="15" fill="rgb(216,164,2)" fg:x="49071" fg:w="5857"/><text x="31.4430%" y="383.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,857 samples, 3.72%)</title><rect x="31.1930%" y="357" width="3.7231%" height="15" fill="rgb(220,129,5)" fg:x="49071" fg:w="5857"/><text x="31.4430%" y="367.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5,857 samples, 3.72%)</title><rect x="31.1930%" y="341" width="3.7231%" height="15" fill="rgb(242,17,10)" fg:x="49071" fg:w="5857"/><text x="31.4430%" y="351.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7,148 samples, 4.54%)</title><rect x="31.1930%" y="389" width="4.5438%" height="15" fill="rgb(242,107,0)" fg:x="49071" fg:w="7148"/><text x="31.4430%" y="399.50">&lt;T as..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,291 samples, 0.82%)</title><rect x="34.9162%" y="373" width="0.8207%" height="15" fill="rgb(251,28,31)" fg:x="54928" fg:w="1291"/><text x="35.1662%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,291 samples, 0.82%)</title><rect x="34.9162%" y="357" width="0.8207%" height="15" fill="rgb(233,223,10)" fg:x="54928" fg:w="1291"/><text x="35.1662%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1,291 samples, 0.82%)</title><rect x="34.9162%" y="341" width="0.8207%" height="15" fill="rgb(215,21,27)" fg:x="54928" fg:w="1291"/><text x="35.1662%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (7,556 samples, 4.80%)</title><rect x="30.9369%" y="453" width="4.8031%" height="15" fill="rgb(232,23,21)" fg:x="48668" fg:w="7556"/><text x="31.1869%" y="463.50">alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7,556 samples, 4.80%)</title><rect x="30.9369%" y="437" width="4.8031%" height="15" fill="rgb(244,5,23)" fg:x="48668" fg:w="7556"/><text x="31.1869%" y="447.50">alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7,556 samples, 4.80%)</title><rect x="30.9369%" y="421" width="4.8031%" height="15" fill="rgb(226,81,46)" fg:x="48668" fg:w="7556"/><text x="31.1869%" y="431.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (7,556 samples, 4.80%)</title><rect x="30.9369%" y="405" width="4.8031%" height="15" fill="rgb(247,70,30)" fg:x="48668" fg:w="7556"/><text x="31.1869%" y="415.50">alloc:..</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (7,909 samples, 5.03%)</title><rect x="30.9369%" y="501" width="5.0275%" height="15" fill="rgb(212,68,19)" fg:x="48668" fg:w="7909"/><text x="31.1869%" y="511.50">&lt;str a..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (7,909 samples, 5.03%)</title><rect x="30.9369%" y="485" width="5.0275%" height="15" fill="rgb(240,187,13)" fg:x="48668" fg:w="7909"/><text x="31.1869%" y="495.50">&lt;alloc..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (7,909 samples, 5.03%)</title><rect x="30.9369%" y="469" width="5.0275%" height="15" fill="rgb(223,113,26)" fg:x="48668" fg:w="7909"/><text x="31.1869%" y="479.50">alloc:..</text></g><g><title>alloc::string::String::from_utf8_unchecked (353 samples, 0.22%)</title><rect x="35.7400%" y="453" width="0.2244%" height="15" fill="rgb(206,192,2)" fg:x="56224" fg:w="353"/><text x="35.9900%" y="463.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (881 samples, 0.56%)</title><rect x="35.9669%" y="501" width="0.5600%" height="15" fill="rgb(241,108,4)" fg:x="56581" fg:w="881"/><text x="36.2169%" y="511.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (953 samples, 0.61%)</title><rect x="36.5269%" y="501" width="0.6058%" height="15" fill="rgb(247,173,49)" fg:x="57462" fg:w="953"/><text x="36.7769%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (441 samples, 0.28%)</title><rect x="37.1327%" y="501" width="0.2803%" height="15" fill="rgb(224,114,35)" fg:x="58415" fg:w="441"/><text x="37.3827%" y="511.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (495 samples, 0.31%)</title><rect x="37.4213%" y="469" width="0.3147%" height="15" fill="rgb(245,159,27)" fg:x="58869" fg:w="495"/><text x="37.6713%" y="479.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (1,605 samples, 1.02%)</title><rect x="39.0633%" y="437" width="1.0203%" height="15" fill="rgb(245,172,44)" fg:x="61452" fg:w="1605"/><text x="39.3133%" y="447.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (2,175 samples, 1.38%)</title><rect x="40.0842%" y="437" width="1.3826%" height="15" fill="rgb(236,23,11)" fg:x="63058" fg:w="2175"/><text x="40.3342%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (382 samples, 0.24%)</title><rect x="41.4667%" y="437" width="0.2428%" height="15" fill="rgb(205,117,38)" fg:x="65233" fg:w="382"/><text x="41.7167%" y="447.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (4,891 samples, 3.11%)</title><rect x="38.6228%" y="453" width="3.1091%" height="15" fill="rgb(237,72,25)" fg:x="60759" fg:w="4891"/><text x="38.8728%" y="463.50">cor..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (35 samples, 0.02%)</title><rect x="41.7096%" y="437" width="0.0222%" height="15" fill="rgb(244,70,9)" fg:x="65615" fg:w="35"/><text x="41.9596%" y="447.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1,572 samples, 1.00%)</title><rect x="42.4978%" y="437" width="0.9993%" height="15" fill="rgb(217,125,39)" fg:x="66855" fg:w="1572"/><text x="42.7478%" y="447.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (437 samples, 0.28%)</title><rect x="47.2005%" y="389" width="0.2778%" height="15" fill="rgb(235,36,10)" fg:x="74253" fg:w="437"/><text x="47.4505%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (432 samples, 0.27%)</title><rect x="47.4808%" y="373" width="0.2746%" height="15" fill="rgb(251,123,47)" fg:x="74694" fg:w="432"/><text x="47.7308%" y="383.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (4,432 samples, 2.82%)</title><rect x="45.1575%" y="405" width="2.8173%" height="15" fill="rgb(221,13,13)" fg:x="71039" fg:w="4432"/><text x="45.4075%" y="415.50">&lt;[..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (781 samples, 0.50%)</title><rect x="47.4783%" y="389" width="0.4965%" height="15" fill="rgb(238,131,9)" fg:x="74690" fg:w="781"/><text x="47.7283%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (345 samples, 0.22%)</title><rect x="47.7554%" y="373" width="0.2193%" height="15" fill="rgb(211,50,8)" fg:x="75126" fg:w="345"/><text x="48.0054%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (5,664 samples, 3.60%)</title><rect x="44.3883%" y="421" width="3.6004%" height="15" fill="rgb(245,182,24)" fg:x="69829" fg:w="5664"/><text x="44.6383%" y="431.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (18 samples, 0.01%)</title><rect x="47.9773%" y="405" width="0.0114%" height="15" fill="rgb(242,14,37)" fg:x="75475" fg:w="18"/><text x="48.2273%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (16,645 samples, 10.58%)</title><rect x="37.4131%" y="501" width="10.5807%" height="15" fill="rgb(246,228,12)" fg:x="58856" fg:w="16645"/><text x="37.6631%" y="511.50">core::str::&lt;imp..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (16,640 samples, 10.58%)</title><rect x="37.4163%" y="485" width="10.5776%" height="15" fill="rgb(213,55,15)" fg:x="58861" fg:w="16640"/><text x="37.6663%" y="495.50">core::num::dec2..</text></g><g><title>core::num::dec2flt::dec2flt (16,137 samples, 10.26%)</title><rect x="37.7360%" y="469" width="10.2578%" height="15" fill="rgb(209,9,3)" fg:x="59364" fg:w="16137"/><text x="37.9860%" y="479.50">core::num::dec2..</text></g><g><title>core::num::dec2flt::parse::parse_number (9,851 samples, 6.26%)</title><rect x="41.7318%" y="453" width="6.2620%" height="15" fill="rgb(230,59,30)" fg:x="65650" fg:w="9851"/><text x="41.9818%" y="463.50">core::nu..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (7,074 samples, 4.50%)</title><rect x="43.4971%" y="437" width="4.4967%" height="15" fill="rgb(209,121,21)" fg:x="68427" fg:w="7074"/><text x="43.7471%" y="447.50">core:..</text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (823 samples, 0.52%)</title><rect x="48.2373%" y="485" width="0.5232%" height="15" fill="rgb(220,109,13)" fg:x="75884" fg:w="823"/><text x="48.4873%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (106 samples, 0.07%)</title><rect x="48.7604%" y="485" width="0.0674%" height="15" fill="rgb(232,18,1)" fg:x="76707" fg:w="106"/><text x="49.0104%" y="495.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (416 samples, 0.26%)</title><rect x="50.5912%" y="469" width="0.2644%" height="15" fill="rgb(215,41,42)" fg:x="79587" fg:w="416"/><text x="50.8412%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (416 samples, 0.26%)</title><rect x="50.5912%" y="453" width="0.2644%" height="15" fill="rgb(224,123,36)" fg:x="79587" fg:w="416"/><text x="50.8412%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (416 samples, 0.26%)</title><rect x="50.5912%" y="437" width="0.2644%" height="15" fill="rgb(240,125,3)" fg:x="79587" fg:w="416"/><text x="50.8412%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,393 samples, 2.16%)</title><rect x="50.8556%" y="469" width="2.1568%" height="15" fill="rgb(205,98,50)" fg:x="80003" fg:w="3393"/><text x="51.1056%" y="479.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3,393 samples, 2.16%)</title><rect x="50.8556%" y="453" width="2.1568%" height="15" fill="rgb(205,185,37)" fg:x="80003" fg:w="3393"/><text x="51.1056%" y="463.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,393 samples, 2.16%)</title><rect x="50.8556%" y="437" width="2.1568%" height="15" fill="rgb(238,207,15)" fg:x="80003" fg:w="3393"/><text x="51.1056%" y="447.50">&lt;..</text></g><g><title>__memcmp_evex_movbe (3,155 samples, 2.01%)</title><rect x="51.0069%" y="421" width="2.0055%" height="15" fill="rgb(213,199,42)" fg:x="80241" fg:w="3155"/><text x="51.2569%" y="431.50">_..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (890 samples, 0.57%)</title><rect x="53.0124%" y="469" width="0.5657%" height="15" fill="rgb(235,201,11)" fg:x="83396" fg:w="890"/><text x="53.2624%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (890 samples, 0.57%)</title><rect x="53.0124%" y="453" width="0.5657%" height="15" fill="rgb(207,46,11)" fg:x="83396" fg:w="890"/><text x="53.2624%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (27 samples, 0.02%)</title><rect x="53.7810%" y="437" width="0.0172%" height="15" fill="rgb(241,35,35)" fg:x="84605" fg:w="27"/><text x="54.0310%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (51 samples, 0.03%)</title><rect x="53.7981%" y="437" width="0.0324%" height="15" fill="rgb(243,32,47)" fg:x="84632" fg:w="51"/><text x="54.0481%" y="447.50"></text></g><g><title>core::ptr::align_offset (51 samples, 0.03%)</title><rect x="53.7981%" y="421" width="0.0324%" height="15" fill="rgb(247,202,23)" fg:x="84632" fg:w="51"/><text x="54.0481%" y="431.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (47 samples, 0.03%)</title><rect x="53.8306%" y="437" width="0.0299%" height="15" fill="rgb(219,102,11)" fg:x="84683" fg:w="47"/><text x="54.0806%" y="447.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,770 samples, 1.13%)</title><rect x="53.6271%" y="453" width="1.1251%" height="15" fill="rgb(243,110,44)" fg:x="84363" fg:w="1770"/><text x="53.8771%" y="463.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,402 samples, 0.89%)</title><rect x="53.8611%" y="437" width="0.8912%" height="15" fill="rgb(222,74,54)" fg:x="84731" fg:w="1402"/><text x="54.1111%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (13,052 samples, 8.30%)</title><rect x="48.8278%" y="485" width="8.2968%" height="15" fill="rgb(216,99,12)" fg:x="76813" fg:w="13052"/><text x="49.0778%" y="495.50">&lt;core::str::..</text></g><g><title>core::slice::memchr::memchr (5,579 samples, 3.55%)</title><rect x="53.5782%" y="469" width="3.5464%" height="15" fill="rgb(226,22,26)" fg:x="84286" fg:w="5579"/><text x="53.8282%" y="479.50">core..</text></g><g><title>core::slice::memchr::memchr_naive (3,732 samples, 2.37%)</title><rect x="54.7523%" y="453" width="2.3723%" height="15" fill="rgb(217,163,10)" fg:x="86133" fg:w="3732"/><text x="55.0023%" y="463.50">co..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (14,373 samples, 9.14%)</title><rect x="47.9938%" y="501" width="9.1365%" height="15" fill="rgb(213,25,53)" fg:x="75501" fg:w="14373"/><text x="48.2438%" y="511.50">core::str::&lt;i..</text></g><g><title>one_brc::round_towards_positive (3,369 samples, 2.14%)</title><rect x="57.1303%" y="501" width="2.1416%" height="15" fill="rgb(252,105,26)" fg:x="89874" fg:w="3369"/><text x="57.3803%" y="511.50">o..</text></g><g><title>std::f64::&lt;impl f64&gt;::round (1,898 samples, 1.21%)</title><rect x="58.0654%" y="485" width="1.2065%" height="15" fill="rgb(220,39,43)" fg:x="91345" fg:w="1898"/><text x="58.3154%" y="495.50"></text></g><g><title>__round (1,898 samples, 1.21%)</title><rect x="58.0654%" y="469" width="1.2065%" height="15" fill="rgb(229,68,48)" fg:x="91345" fg:w="1898"/><text x="58.3154%" y="479.50"></text></g><g><title>_int_free (5,328 samples, 3.39%)</title><rect x="60.3735%" y="309" width="3.3869%" height="15" fill="rgb(252,8,32)" fg:x="94976" fg:w="5328"/><text x="60.6235%" y="319.50">_in..</text></g><g><title>tcache_put (837 samples, 0.53%)</title><rect x="63.2283%" y="293" width="0.5321%" height="15" fill="rgb(223,20,43)" fg:x="99467" fg:w="837"/><text x="63.4783%" y="303.50"></text></g><g><title>arena_for_chunk (1,275 samples, 0.81%)</title><rect x="63.7604%" y="309" width="0.8105%" height="15" fill="rgb(229,81,49)" fg:x="100304" fg:w="1275"/><text x="64.0104%" y="319.50"></text></g><g><title>arena_for_chunk (781 samples, 0.50%)</title><rect x="64.0744%" y="293" width="0.4965%" height="15" fill="rgb(236,28,36)" fg:x="100798" fg:w="781"/><text x="64.3244%" y="303.50"></text></g><g><title>heap_for_ptr (415 samples, 0.26%)</title><rect x="64.3071%" y="277" width="0.2638%" height="15" fill="rgb(249,185,26)" fg:x="101164" fg:w="415"/><text x="64.5571%" y="287.50"></text></g><g><title>__GI___libc_free (7,860 samples, 5.00%)</title><rect x="59.5770%" y="325" width="4.9964%" height="15" fill="rgb(249,174,33)" fg:x="93723" fg:w="7860"/><text x="59.8270%" y="335.50">__GI__..</text></g><g><title>__rdl_dealloc (507 samples, 0.32%)</title><rect x="64.5734%" y="325" width="0.3223%" height="15" fill="rgb(233,201,37)" fg:x="101583" fg:w="507"/><text x="64.8234%" y="335.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (9,266 samples, 5.89%)</title><rect x="59.2719%" y="485" width="5.8901%" height="15" fill="rgb(221,78,26)" fg:x="93243" fg:w="9266"/><text x="59.5219%" y="495.50">std::co..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (9,266 samples, 5.89%)</title><rect x="59.2719%" y="469" width="5.8901%" height="15" fill="rgb(250,127,30)" fg:x="93243" fg:w="9266"/><text x="59.5219%" y="479.50">hashbro..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,one_brc::Measurement&gt;&gt; (9,266 samples, 5.89%)</title><rect x="59.2719%" y="453" width="5.8901%" height="15" fill="rgb(230,49,44)" fg:x="93243" fg:w="9266"/><text x="59.5219%" y="463.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (9,266 samples, 5.89%)</title><rect x="59.2719%" y="437" width="5.8901%" height="15" fill="rgb(229,67,23)" fg:x="93243" fg:w="9266"/><text x="59.5219%" y="447.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9,255 samples, 5.88%)</title><rect x="59.2789%" y="421" width="5.8831%" height="15" fill="rgb(249,83,47)" fg:x="93254" fg:w="9255"/><text x="59.5289%" y="431.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9,255 samples, 5.88%)</title><rect x="59.2789%" y="405" width="5.8831%" height="15" fill="rgb(215,43,3)" fg:x="93254" fg:w="9255"/><text x="59.5289%" y="415.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9,255 samples, 5.88%)</title><rect x="59.2789%" y="389" width="5.8831%" height="15" fill="rgb(238,154,13)" fg:x="93254" fg:w="9255"/><text x="59.5289%" y="399.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,255 samples, 5.88%)</title><rect x="59.2789%" y="373" width="5.8831%" height="15" fill="rgb(219,56,2)" fg:x="93254" fg:w="9255"/><text x="59.5289%" y="383.50">&lt;alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,255 samples, 5.88%)</title><rect x="59.2789%" y="357" width="5.8831%" height="15" fill="rgb(233,0,4)" fg:x="93254" fg:w="9255"/><text x="59.5289%" y="367.50">&lt;alloc:..</text></g><g><title>alloc::alloc::dealloc (9,255 samples, 5.88%)</title><rect x="59.2789%" y="341" width="5.8831%" height="15" fill="rgb(235,30,7)" fg:x="93254" fg:w="9255"/><text x="59.5289%" y="351.50">alloc::..</text></g><g><title>__rust_dealloc (419 samples, 0.27%)</title><rect x="64.8957%" y="325" width="0.2663%" height="15" fill="rgb(250,79,13)" fg:x="102090" fg:w="419"/><text x="65.1457%" y="335.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (9,270 samples, 5.89%)</title><rect x="59.2719%" y="501" width="5.8927%" height="15" fill="rgb(211,146,34)" fg:x="93243" fg:w="9270"/><text x="59.5219%" y="511.50">std::co..</text></g><g><title>core::hash::BuildHasher::hash_one (122 samples, 0.08%)</title><rect x="67.4581%" y="373" width="0.0776%" height="15" fill="rgb(228,22,38)" fg:x="106121" fg:w="122"/><text x="67.7081%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (667 samples, 0.42%)</title><rect x="67.5356%" y="373" width="0.4240%" height="15" fill="rgb(235,168,5)" fg:x="106243" fg:w="667"/><text x="67.7856%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,596 samples, 1.01%)</title><rect x="67.1943%" y="389" width="1.0145%" height="15" fill="rgb(221,155,16)" fg:x="105706" fg:w="1596"/><text x="67.4443%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (392 samples, 0.25%)</title><rect x="67.9596%" y="373" width="0.2492%" height="15" fill="rgb(215,215,53)" fg:x="106910" fg:w="392"/><text x="68.2096%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,733 samples, 1.10%)</title><rect x="68.7765%" y="373" width="1.1016%" height="15" fill="rgb(223,4,10)" fg:x="108195" fg:w="1733"/><text x="69.0265%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,813 samples, 2.42%)</title><rect x="68.2088%" y="389" width="2.4238%" height="15" fill="rgb(234,103,6)" fg:x="107302" fg:w="3813"/><text x="68.4588%" y="399.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,187 samples, 0.75%)</title><rect x="69.8781%" y="373" width="0.7545%" height="15" fill="rgb(227,97,0)" fg:x="109928" fg:w="1187"/><text x="70.1281%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6,644 samples, 4.22%)</title><rect x="66.4099%" y="405" width="4.2234%" height="15" fill="rgb(234,150,53)" fg:x="104472" fg:w="6644"/><text x="66.6599%" y="415.50">&lt;core..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6,655 samples, 4.23%)</title><rect x="66.4099%" y="437" width="4.2304%" height="15" fill="rgb(228,201,54)" fg:x="104472" fg:w="6655"/><text x="66.6599%" y="447.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6,655 samples, 4.23%)</title><rect x="66.4099%" y="421" width="4.2304%" height="15" fill="rgb(222,22,37)" fg:x="104472" fg:w="6655"/><text x="66.6599%" y="431.50">&lt;core..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,031 samples, 0.66%)</title><rect x="70.6402%" y="437" width="0.6554%" height="15" fill="rgb(237,53,32)" fg:x="111127" fg:w="1031"/><text x="70.8902%" y="447.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (539 samples, 0.34%)</title><rect x="70.9530%" y="421" width="0.3426%" height="15" fill="rgb(233,25,53)" fg:x="111619" fg:w="539"/><text x="71.2030%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (539 samples, 0.34%)</title><rect x="70.9530%" y="405" width="0.3426%" height="15" fill="rgb(210,40,34)" fg:x="111619" fg:w="539"/><text x="71.2030%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (539 samples, 0.34%)</title><rect x="70.9530%" y="389" width="0.3426%" height="15" fill="rgb(241,220,44)" fg:x="111619" fg:w="539"/><text x="71.2030%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (377 samples, 0.24%)</title><rect x="73.0965%" y="325" width="0.2396%" height="15" fill="rgb(235,28,35)" fg:x="114991" fg:w="377"/><text x="73.3465%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (327 samples, 0.21%)</title><rect x="73.5891%" y="309" width="0.2079%" height="15" fill="rgb(210,56,17)" fg:x="115766" fg:w="327"/><text x="73.8391%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (979 samples, 0.62%)</title><rect x="73.3361%" y="325" width="0.6223%" height="15" fill="rgb(224,130,29)" fg:x="115368" fg:w="979"/><text x="73.5861%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (254 samples, 0.16%)</title><rect x="73.7970%" y="309" width="0.1615%" height="15" fill="rgb(235,212,8)" fg:x="116093" fg:w="254"/><text x="74.0470%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (2,041 samples, 1.30%)</title><rect x="73.9635%" y="325" width="1.2974%" height="15" fill="rgb(223,33,50)" fg:x="116355" fg:w="2041"/><text x="74.2135%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (62 samples, 0.04%)</title><rect x="75.2215%" y="309" width="0.0394%" height="15" fill="rgb(219,149,13)" fg:x="118334" fg:w="62"/><text x="75.4715%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,816 samples, 3.70%)</title><rect x="71.5740%" y="341" width="3.6971%" height="15" fill="rgb(250,156,29)" fg:x="112596" fg:w="5816"/><text x="71.8240%" y="351.50">&lt;cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="75.2609%" y="325" width="0.0102%" height="15" fill="rgb(216,193,19)" fg:x="118396" fg:w="16"/><text x="75.5109%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (64 samples, 0.04%)</title><rect x="76.6651%" y="309" width="0.0407%" height="15" fill="rgb(216,135,14)" fg:x="120605" fg:w="64"/><text x="76.9151%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (145 samples, 0.09%)</title><rect x="76.7605%" y="293" width="0.0922%" height="15" fill="rgb(241,47,5)" fg:x="120755" fg:w="145"/><text x="77.0105%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (375 samples, 0.24%)</title><rect x="76.7058%" y="309" width="0.2384%" height="15" fill="rgb(233,42,35)" fg:x="120669" fg:w="375"/><text x="76.9558%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (144 samples, 0.09%)</title><rect x="76.8527%" y="293" width="0.0915%" height="15" fill="rgb(231,13,6)" fg:x="120900" fg:w="144"/><text x="77.1027%" y="303.50"></text></g><g><title>core::cmp::min (330 samples, 0.21%)</title><rect x="76.9455%" y="309" width="0.2098%" height="15" fill="rgb(207,181,40)" fg:x="121046" fg:w="330"/><text x="77.1955%" y="319.50"></text></g><g><title>core::cmp::Ord::min (330 samples, 0.21%)</title><rect x="76.9455%" y="293" width="0.2098%" height="15" fill="rgb(254,173,49)" fg:x="121046" fg:w="330"/><text x="77.1955%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (330 samples, 0.21%)</title><rect x="76.9455%" y="277" width="0.2098%" height="15" fill="rgb(221,1,38)" fg:x="121046" fg:w="330"/><text x="77.1955%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,570 samples, 2.91%)</title><rect x="75.5495%" y="325" width="2.9050%" height="15" fill="rgb(206,124,46)" fg:x="118850" fg:w="4570"/><text x="75.7995%" y="335.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (2,044 samples, 1.30%)</title><rect x="77.1552%" y="309" width="1.2993%" height="15" fill="rgb(249,21,11)" fg:x="121376" fg:w="2044"/><text x="77.4052%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (19,303 samples, 12.27%)</title><rect x="66.1848%" y="469" width="12.2704%" height="15" fill="rgb(222,201,40)" fg:x="104118" fg:w="19303"/><text x="66.4348%" y="479.50">hashbrown::map::ma..</text></g><g><title>core::hash::BuildHasher::hash_one (19,302 samples, 12.27%)</title><rect x="66.1855%" y="453" width="12.2697%" height="15" fill="rgb(235,61,29)" fg:x="104119" fg:w="19302"/><text x="66.4355%" y="463.50">core::hash::BuildH..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11,253 samples, 7.15%)</title><rect x="71.3020%" y="437" width="7.1532%" height="15" fill="rgb(219,207,3)" fg:x="112168" fg:w="11253"/><text x="71.5520%" y="447.50">core::hash..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (10,842 samples, 6.89%)</title><rect x="71.5632%" y="421" width="6.8919%" height="15" fill="rgb(222,56,46)" fg:x="112579" fg:w="10842"/><text x="71.8132%" y="431.50">&lt;alloc::s..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (10,842 samples, 6.89%)</title><rect x="71.5632%" y="405" width="6.8919%" height="15" fill="rgb(239,76,54)" fg:x="112579" fg:w="10842"/><text x="71.8132%" y="415.50">core::has..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (10,842 samples, 6.89%)</title><rect x="71.5632%" y="389" width="6.8919%" height="15" fill="rgb(231,124,27)" fg:x="112579" fg:w="10842"/><text x="71.8132%" y="399.50">&lt;std::has..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (10,842 samples, 6.89%)</title><rect x="71.5632%" y="373" width="6.8919%" height="15" fill="rgb(249,195,6)" fg:x="112579" fg:w="10842"/><text x="71.8132%" y="383.50">&lt;core::ha..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (10,842 samples, 6.89%)</title><rect x="71.5632%" y="357" width="6.8919%" height="15" fill="rgb(237,174,47)" fg:x="112579" fg:w="10842"/><text x="71.8132%" y="367.50">&lt;core::ha..</text></g><g><title>core::hash::Hasher::write_u8 (5,008 samples, 3.18%)</title><rect x="75.2717%" y="341" width="3.1834%" height="15" fill="rgb(206,201,31)" fg:x="118413" fg:w="5008"/><text x="75.5217%" y="351.50">cor..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (520 samples, 0.33%)</title><rect x="78.9866%" y="437" width="0.3305%" height="15" fill="rgb(231,57,52)" fg:x="124257" fg:w="520"/><text x="79.2366%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (166 samples, 0.11%)</title><rect x="79.2116%" y="421" width="0.1055%" height="15" fill="rgb(248,177,22)" fg:x="124611" fg:w="166"/><text x="79.4616%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,170 samples, 0.74%)</title><rect x="79.5733%" y="421" width="0.7437%" height="15" fill="rgb(215,211,37)" fg:x="125180" fg:w="1170"/><text x="79.8233%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,170 samples, 0.74%)</title><rect x="79.5733%" y="405" width="0.7437%" height="15" fill="rgb(241,128,51)" fg:x="125180" fg:w="1170"/><text x="79.8233%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,170 samples, 0.74%)</title><rect x="79.5733%" y="389" width="0.7437%" height="15" fill="rgb(227,165,31)" fg:x="125180" fg:w="1170"/><text x="79.8233%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (844 samples, 0.54%)</title><rect x="79.7806%" y="373" width="0.5365%" height="15" fill="rgb(228,167,24)" fg:x="125506" fg:w="844"/><text x="80.0306%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (11,966 samples, 7.61%)</title><rect x="79.3172%" y="437" width="7.6064%" height="15" fill="rgb(228,143,12)" fg:x="124777" fg:w="11966"/><text x="79.5672%" y="447.50">hashbrown:..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (10,393 samples, 6.61%)</title><rect x="80.3171%" y="421" width="6.6065%" height="15" fill="rgb(249,149,8)" fg:x="126350" fg:w="10393"/><text x="80.5671%" y="431.50">hashbrown..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (10,393 samples, 6.61%)</title><rect x="80.3171%" y="405" width="6.6065%" height="15" fill="rgb(243,35,44)" fg:x="126350" fg:w="10393"/><text x="80.5671%" y="415.50">&lt;alloc::s..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (10,393 samples, 6.61%)</title><rect x="80.3171%" y="389" width="6.6065%" height="15" fill="rgb(246,89,9)" fg:x="126350" fg:w="10393"/><text x="80.5671%" y="399.50">alloc::ve..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10,393 samples, 6.61%)</title><rect x="80.3171%" y="373" width="6.6065%" height="15" fill="rgb(233,213,13)" fg:x="126350" fg:w="10393"/><text x="80.5671%" y="383.50">core::sli..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10,393 samples, 6.61%)</title><rect x="80.3171%" y="357" width="6.6065%" height="15" fill="rgb(233,141,41)" fg:x="126350" fg:w="10393"/><text x="80.5671%" y="367.50">&lt;[A] as c..</text></g><g><title>__memcmp_evex_movbe (4,852 samples, 3.08%)</title><rect x="83.8393%" y="341" width="3.0843%" height="15" fill="rgb(239,167,4)" fg:x="131891" fg:w="4852"/><text x="84.0893%" y="351.50">__m..</text></g><g><title>hashbrown::raw::h2 (1,109 samples, 0.70%)</title><rect x="86.9236%" y="437" width="0.7050%" height="15" fill="rgb(209,217,16)" fg:x="136743" fg:w="1109"/><text x="87.1736%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,235 samples, 0.79%)</title><rect x="87.6286%" y="405" width="0.7851%" height="15" fill="rgb(219,88,35)" fg:x="137852" fg:w="1235"/><text x="87.8786%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,463 samples, 0.93%)</title><rect x="87.6286%" y="437" width="0.9300%" height="15" fill="rgb(220,193,23)" fg:x="137852" fg:w="1463"/><text x="87.8786%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,463 samples, 0.93%)</title><rect x="87.6286%" y="421" width="0.9300%" height="15" fill="rgb(230,90,52)" fg:x="137852" fg:w="1463"/><text x="87.8786%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (228 samples, 0.14%)</title><rect x="88.4136%" y="405" width="0.1449%" height="15" fill="rgb(252,106,19)" fg:x="139087" fg:w="228"/><text x="88.6636%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (822 samples, 0.52%)</title><rect x="88.5586%" y="437" width="0.5225%" height="15" fill="rgb(206,74,20)" fg:x="139315" fg:w="822"/><text x="88.8086%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (822 samples, 0.52%)</title><rect x="88.5586%" y="421" width="0.5225%" height="15" fill="rgb(230,138,44)" fg:x="139315" fg:w="822"/><text x="88.8086%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16,772 samples, 10.66%)</title><rect x="78.7056%" y="453" width="10.6615%" height="15" fill="rgb(235,182,43)" fg:x="123815" fg:w="16772"/><text x="78.9556%" y="463.50">hashbrown::raw::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (450 samples, 0.29%)</title><rect x="89.0811%" y="437" width="0.2861%" height="15" fill="rgb(242,16,51)" fg:x="140137" fg:w="450"/><text x="89.3311%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (17,388 samples, 11.05%)</title><rect x="78.4552%" y="469" width="11.0531%" height="15" fill="rgb(248,9,4)" fg:x="123421" fg:w="17388"/><text x="78.7052%" y="479.50">hashbrown::raw::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (222 samples, 0.14%)</title><rect x="89.3671%" y="453" width="0.1411%" height="15" fill="rgb(210,31,22)" fg:x="140587" fg:w="222"/><text x="89.6171%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (38,292 samples, 24.34%)</title><rect x="65.1678%" y="485" width="24.3411%" height="15" fill="rgb(239,54,39)" fg:x="102518" fg:w="38292"/><text x="65.4178%" y="495.50">hashbrown::rustc_entry::&lt;impl hashbrown..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (117,487 samples, 74.68%)</title><rect x="15.5492%" y="565" width="74.6831%" height="15" fill="rgb(230,99,41)" fg:x="24461" fg:w="117487"/><text x="15.7992%" y="575.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (117,487 samples, 74.68%)</title><rect x="15.5492%" y="549" width="74.6831%" height="15" fill="rgb(253,106,12)" fg:x="24461" fg:w="117487"/><text x="15.7992%" y="559.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (94,670 samples, 60.18%)</title><rect x="30.0533%" y="533" width="60.1790%" height="15" fill="rgb(213,46,41)" fg:x="47278" fg:w="94670"/><text x="30.3033%" y="543.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>one_brc::process_lines::_{{closure}} (94,670 samples, 60.18%)</title><rect x="30.0533%" y="517" width="60.1790%" height="15" fill="rgb(215,133,35)" fg:x="47278" fg:w="94670"/><text x="30.3033%" y="527.50">one_brc::process_lines::_{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (39,435 samples, 25.07%)</title><rect x="65.1646%" y="501" width="25.0677%" height="15" fill="rgb(213,28,5)" fg:x="102513" fg:w="39435"/><text x="65.4146%" y="511.50">std::collections::hash::map::HashMap&lt;K,V..</text></g><g><title>std::collections::hash::map::map_entry (1,138 samples, 0.72%)</title><rect x="89.5089%" y="485" width="0.7234%" height="15" fill="rgb(215,77,49)" fg:x="140810" fg:w="1138"/><text x="89.7589%" y="495.50"></text></g><g><title>__mod_memcg_lruvec_state (19 samples, 0.01%)</title><rect x="90.3200%" y="197" width="0.0121%" height="15" fill="rgb(248,100,22)" fg:x="142086" fg:w="19"/><text x="90.5700%" y="207.50"></text></g><g><title>__mod_lruvec_state (28 samples, 0.02%)</title><rect x="90.3181%" y="213" width="0.0178%" height="15" fill="rgb(208,67,9)" fg:x="142083" fg:w="28"/><text x="90.5681%" y="223.50"></text></g><g><title>__mod_lruvec_page_state (44 samples, 0.03%)</title><rect x="90.3124%" y="229" width="0.0280%" height="15" fill="rgb(219,133,21)" fg:x="142074" fg:w="44"/><text x="90.5624%" y="239.50"></text></g><g><title>page_remove_rmap (91 samples, 0.06%)</title><rect x="90.2882%" y="245" width="0.0578%" height="15" fill="rgb(246,46,29)" fg:x="142036" fg:w="91"/><text x="90.5382%" y="255.50"></text></g><g><title>__mem_cgroup_uncharge_list (34 samples, 0.02%)</title><rect x="90.3753%" y="181" width="0.0216%" height="15" fill="rgb(246,185,52)" fg:x="142173" fg:w="34"/><text x="90.6253%" y="191.50"></text></g><g><title>uncharge_folio (19 samples, 0.01%)</title><rect x="90.3848%" y="165" width="0.0121%" height="15" fill="rgb(252,136,11)" fg:x="142188" fg:w="19"/><text x="90.6348%" y="175.50"></text></g><g><title>__free_one_page (69 samples, 0.04%)</title><rect x="90.4274%" y="133" width="0.0439%" height="15" fill="rgb(219,138,53)" fg:x="142255" fg:w="69"/><text x="90.6774%" y="143.50"></text></g><g><title>free_unref_page_commit (95 samples, 0.06%)</title><rect x="90.4141%" y="165" width="0.0604%" height="15" fill="rgb(211,51,23)" fg:x="142234" fg:w="95"/><text x="90.6641%" y="175.50"></text></g><g><title>free_pcppages_bulk (80 samples, 0.05%)</title><rect x="90.4236%" y="149" width="0.0509%" height="15" fill="rgb(247,221,28)" fg:x="142249" fg:w="80"/><text x="90.6736%" y="159.50"></text></g><g><title>free_unref_page_list (147 samples, 0.09%)</title><rect x="90.4039%" y="181" width="0.0934%" height="15" fill="rgb(251,222,45)" fg:x="142218" fg:w="147"/><text x="90.6539%" y="191.50"></text></g><g><title>free_unref_page_prepare (36 samples, 0.02%)</title><rect x="90.4745%" y="165" width="0.0229%" height="15" fill="rgb(217,162,53)" fg:x="142329" fg:w="36"/><text x="90.7245%" y="175.50"></text></g><g><title>__mod_memcg_lruvec_state (19 samples, 0.01%)</title><rect x="90.5495%" y="149" width="0.0121%" height="15" fill="rgb(229,93,14)" fg:x="142447" fg:w="19"/><text x="90.7995%" y="159.50"></text></g><g><title>__mod_lruvec_state (41 samples, 0.03%)</title><rect x="90.5450%" y="165" width="0.0261%" height="15" fill="rgb(209,67,49)" fg:x="142440" fg:w="41"/><text x="90.7950%" y="175.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (138 samples, 0.09%)</title><rect x="90.4986%" y="181" width="0.0877%" height="15" fill="rgb(213,87,29)" fg:x="142367" fg:w="138"/><text x="90.7486%" y="191.50"></text></g><g><title>free_pages_and_swap_cache (381 samples, 0.24%)</title><rect x="90.3461%" y="213" width="0.2422%" height="15" fill="rgb(205,151,52)" fg:x="142127" fg:w="381"/><text x="90.5961%" y="223.50"></text></g><g><title>release_pages (371 samples, 0.24%)</title><rect x="90.3524%" y="197" width="0.2358%" height="15" fill="rgb(253,215,39)" fg:x="142137" fg:w="371"/><text x="90.6024%" y="207.50"></text></g><g><title>tlb_flush_mmu (392 samples, 0.25%)</title><rect x="90.3461%" y="245" width="0.2492%" height="15" fill="rgb(221,220,41)" fg:x="142127" fg:w="392"/><text x="90.5961%" y="255.50"></text></g><g><title>tlb_batch_pages_flush (392 samples, 0.25%)</title><rect x="90.3461%" y="229" width="0.2492%" height="15" fill="rgb(218,133,21)" fg:x="142127" fg:w="392"/><text x="90.5961%" y="239.50"></text></g><g><title>std::panic::catch_unwind (118,059 samples, 75.05%)</title><rect x="15.5492%" y="693" width="75.0467%" height="15" fill="rgb(221,193,43)" fg:x="24461" fg:w="118059"/><text x="15.7992%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (118,059 samples, 75.05%)</title><rect x="15.5492%" y="677" width="75.0467%" height="15" fill="rgb(240,128,52)" fg:x="24461" fg:w="118059"/><text x="15.7992%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (118,059 samples, 75.05%)</title><rect x="15.5492%" y="661" width="75.0467%" height="15" fill="rgb(253,114,12)" fg:x="24461" fg:w="118059"/><text x="15.7992%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (118,059 samples, 75.05%)</title><rect x="15.5492%" y="645" width="75.0467%" height="15" fill="rgb(215,223,47)" fg:x="24461" fg:w="118059"/><text x="15.7992%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (118,059 samples, 75.05%)</title><rect x="15.5492%" y="629" width="75.0467%" height="15" fill="rgb(248,225,23)" fg:x="24461" fg:w="118059"/><text x="15.7992%" y="639.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (118,059 samples, 75.05%)</title><rect x="15.5492%" y="613" width="75.0467%" height="15" fill="rgb(250,108,0)" fg:x="24461" fg:w="118059"/><text x="15.7992%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (118,059 samples, 75.05%)</title><rect x="15.5492%" y="597" width="75.0467%" height="15" fill="rgb(228,208,7)" fg:x="24461" fg:w="118059"/><text x="15.7992%" y="607.50">one_brc::main::_{{closure}}::_{{closure}}</text></g><g><title>one_brc::process_lines (118,059 samples, 75.05%)</title><rect x="15.5492%" y="581" width="75.0467%" height="15" fill="rgb(244,45,10)" fg:x="24461" fg:w="118059"/><text x="15.7992%" y="591.50">one_brc::process_lines</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (572 samples, 0.36%)</title><rect x="90.2323%" y="565" width="0.3636%" height="15" fill="rgb(207,125,25)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (572 samples, 0.36%)</title><rect x="90.2323%" y="549" width="0.3636%" height="15" fill="rgb(210,195,18)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (572 samples, 0.36%)</title><rect x="90.2323%" y="533" width="0.3636%" height="15" fill="rgb(249,80,12)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (572 samples, 0.36%)</title><rect x="90.2323%" y="517" width="0.3636%" height="15" fill="rgb(221,65,9)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (572 samples, 0.36%)</title><rect x="90.2323%" y="501" width="0.3636%" height="15" fill="rgb(235,49,36)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (572 samples, 0.36%)</title><rect x="90.2323%" y="485" width="0.3636%" height="15" fill="rgb(225,32,20)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="495.50"></text></g><g><title>__GI___libc_free (572 samples, 0.36%)</title><rect x="90.2323%" y="469" width="0.3636%" height="15" fill="rgb(215,141,46)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="479.50"></text></g><g><title>__GI___munmap (572 samples, 0.36%)</title><rect x="90.2323%" y="453" width="0.3636%" height="15" fill="rgb(250,160,47)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="463.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (572 samples, 0.36%)</title><rect x="90.2323%" y="437" width="0.3636%" height="15" fill="rgb(216,222,40)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="447.50"></text></g><g><title>do_syscall_64 (572 samples, 0.36%)</title><rect x="90.2323%" y="421" width="0.3636%" height="15" fill="rgb(234,217,39)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="431.50"></text></g><g><title>__x64_sys_munmap (572 samples, 0.36%)</title><rect x="90.2323%" y="405" width="0.3636%" height="15" fill="rgb(207,178,40)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="415.50"></text></g><g><title>__vm_munmap (572 samples, 0.36%)</title><rect x="90.2323%" y="389" width="0.3636%" height="15" fill="rgb(221,136,13)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="399.50"></text></g><g><title>do_vmi_munmap (572 samples, 0.36%)</title><rect x="90.2323%" y="373" width="0.3636%" height="15" fill="rgb(249,199,10)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="383.50"></text></g><g><title>do_vmi_align_munmap (572 samples, 0.36%)</title><rect x="90.2323%" y="357" width="0.3636%" height="15" fill="rgb(249,222,13)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="367.50"></text></g><g><title>unmap_region (572 samples, 0.36%)</title><rect x="90.2323%" y="341" width="0.3636%" height="15" fill="rgb(244,185,38)" fg:x="141948" fg:w="572"/><text x="90.4823%" y="351.50"></text></g><g><title>unmap_vmas (559 samples, 0.36%)</title><rect x="90.2405%" y="325" width="0.3553%" height="15" fill="rgb(236,202,9)" fg:x="141961" fg:w="559"/><text x="90.4905%" y="335.50"></text></g><g><title>unmap_single_vma (559 samples, 0.36%)</title><rect x="90.2405%" y="309" width="0.3553%" height="15" fill="rgb(250,229,37)" fg:x="141961" fg:w="559"/><text x="90.4905%" y="319.50"></text></g><g><title>unmap_page_range (559 samples, 0.36%)</title><rect x="90.2405%" y="293" width="0.3553%" height="15" fill="rgb(206,174,23)" fg:x="141961" fg:w="559"/><text x="90.4905%" y="303.50"></text></g><g><title>zap_pmd_range.isra.0 (559 samples, 0.36%)</title><rect x="90.2405%" y="277" width="0.3553%" height="15" fill="rgb(211,33,43)" fg:x="141961" fg:w="559"/><text x="90.4905%" y="287.50"></text></g><g><title>zap_pte_range (533 samples, 0.34%)</title><rect x="90.2571%" y="261" width="0.3388%" height="15" fill="rgb(245,58,50)" fg:x="141987" fg:w="533"/><text x="90.5071%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (118,064 samples, 75.05%)</title><rect x="15.5492%" y="725" width="75.0499%" height="15" fill="rgb(244,68,36)" fg:x="24461" fg:w="118064"/><text x="15.7992%" y="735.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (118,064 samples, 75.05%)</title><rect x="15.5492%" y="709" width="75.0499%" height="15" fill="rgb(232,229,15)" fg:x="24461" fg:w="118064"/><text x="15.7992%" y="719.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>__clone3 (118,069 samples, 75.05%)</title><rect x="15.5479%" y="773" width="75.0531%" height="15" fill="rgb(254,30,23)" fg:x="24459" fg:w="118069"/><text x="15.7979%" y="783.50">__clone3</text></g><g><title>start_thread (118,067 samples, 75.05%)</title><rect x="15.5492%" y="757" width="75.0518%" height="15" fill="rgb(235,160,14)" fg:x="24461" fg:w="118067"/><text x="15.7992%" y="767.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (118,067 samples, 75.05%)</title><rect x="15.5492%" y="741" width="75.0518%" height="15" fill="rgb(212,155,44)" fg:x="24461" fg:w="118067"/><text x="15.7992%" y="751.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>asm_exc_page_fault (85 samples, 0.05%)</title><rect x="90.6060%" y="213" width="0.0540%" height="15" fill="rgb(226,2,50)" fg:x="142536" fg:w="85"/><text x="90.8560%" y="223.50"></text></g><g><title>__mem_cgroup_charge (38 samples, 0.02%)</title><rect x="90.6817%" y="85" width="0.0242%" height="15" fill="rgb(234,177,6)" fg:x="142655" fg:w="38"/><text x="90.9317%" y="95.50"></text></g><g><title>__handle_mm_fault (94 samples, 0.06%)</title><rect x="90.6753%" y="133" width="0.0598%" height="15" fill="rgb(217,24,9)" fg:x="142645" fg:w="94"/><text x="90.9253%" y="143.50"></text></g><g><title>handle_pte_fault (88 samples, 0.06%)</title><rect x="90.6792%" y="117" width="0.0559%" height="15" fill="rgb(220,13,46)" fg:x="142651" fg:w="88"/><text x="90.9292%" y="127.50"></text></g><g><title>do_anonymous_page (88 samples, 0.06%)</title><rect x="90.6792%" y="101" width="0.0559%" height="15" fill="rgb(239,221,27)" fg:x="142651" fg:w="88"/><text x="90.9292%" y="111.50"></text></g><g><title>vma_alloc_folio (24 samples, 0.02%)</title><rect x="90.7198%" y="85" width="0.0153%" height="15" fill="rgb(222,198,25)" fg:x="142715" fg:w="24"/><text x="90.9698%" y="95.50"></text></g><g><title>__folio_alloc (19 samples, 0.01%)</title><rect x="90.7230%" y="69" width="0.0121%" height="15" fill="rgb(211,99,13)" fg:x="142720" fg:w="19"/><text x="90.9730%" y="79.50"></text></g><g><title>__alloc_pages (19 samples, 0.01%)</title><rect x="90.7230%" y="53" width="0.0121%" height="15" fill="rgb(232,111,31)" fg:x="142720" fg:w="19"/><text x="90.9730%" y="63.50"></text></g><g><title>get_page_from_freelist (16 samples, 0.01%)</title><rect x="90.7249%" y="37" width="0.0102%" height="15" fill="rgb(245,82,37)" fg:x="142723" fg:w="16"/><text x="90.9749%" y="47.50"></text></g><g><title>handle_mm_fault (99 samples, 0.06%)</title><rect x="90.6753%" y="149" width="0.0629%" height="15" fill="rgb(227,149,46)" fg:x="142645" fg:w="99"/><text x="90.9253%" y="159.50"></text></g><g><title>copy_page_to_iter (213 samples, 0.14%)</title><rect x="90.6054%" y="245" width="0.1354%" height="15" fill="rgb(218,36,50)" fg:x="142535" fg:w="213"/><text x="90.8554%" y="255.50"></text></g><g><title>_copy_to_iter (213 samples, 0.14%)</title><rect x="90.6054%" y="229" width="0.1354%" height="15" fill="rgb(226,80,48)" fg:x="142535" fg:w="213"/><text x="90.8554%" y="239.50"></text></g><g><title>copyout (127 samples, 0.08%)</title><rect x="90.6601%" y="213" width="0.0807%" height="15" fill="rgb(238,224,15)" fg:x="142621" fg:w="127"/><text x="90.9101%" y="223.50"></text></g><g><title>asm_exc_page_fault (107 samples, 0.07%)</title><rect x="90.6728%" y="197" width="0.0680%" height="15" fill="rgb(241,136,10)" fg:x="142641" fg:w="107"/><text x="90.9228%" y="207.50"></text></g><g><title>exc_page_fault (107 samples, 0.07%)</title><rect x="90.6728%" y="181" width="0.0680%" height="15" fill="rgb(208,32,45)" fg:x="142641" fg:w="107"/><text x="90.9228%" y="191.50"></text></g><g><title>do_user_addr_fault (106 samples, 0.07%)</title><rect x="90.6734%" y="165" width="0.0674%" height="15" fill="rgb(207,135,9)" fg:x="142642" fg:w="106"/><text x="90.9234%" y="175.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (219 samples, 0.14%)</title><rect x="90.6035%" y="453" width="0.1392%" height="15" fill="rgb(206,86,44)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="463.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (219 samples, 0.14%)</title><rect x="90.6035%" y="437" width="0.1392%" height="15" fill="rgb(245,177,15)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (219 samples, 0.14%)</title><rect x="90.6035%" y="421" width="0.1392%" height="15" fill="rgb(206,64,50)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="431.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (219 samples, 0.14%)</title><rect x="90.6035%" y="405" width="0.1392%" height="15" fill="rgb(234,36,40)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="415.50"></text></g><g><title>__GI___libc_read (219 samples, 0.14%)</title><rect x="90.6035%" y="389" width="0.1392%" height="15" fill="rgb(213,64,8)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (219 samples, 0.14%)</title><rect x="90.6035%" y="373" width="0.1392%" height="15" fill="rgb(210,75,36)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="383.50"></text></g><g><title>do_syscall_64 (219 samples, 0.14%)</title><rect x="90.6035%" y="357" width="0.1392%" height="15" fill="rgb(229,88,21)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="367.50"></text></g><g><title>__x64_sys_read (219 samples, 0.14%)</title><rect x="90.6035%" y="341" width="0.1392%" height="15" fill="rgb(252,204,47)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="351.50"></text></g><g><title>ksys_read (219 samples, 0.14%)</title><rect x="90.6035%" y="325" width="0.1392%" height="15" fill="rgb(208,77,27)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="335.50"></text></g><g><title>vfs_read (219 samples, 0.14%)</title><rect x="90.6035%" y="309" width="0.1392%" height="15" fill="rgb(221,76,26)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="319.50"></text></g><g><title>ext4_file_read_iter (219 samples, 0.14%)</title><rect x="90.6035%" y="293" width="0.1392%" height="15" fill="rgb(225,139,18)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="303.50"></text></g><g><title>generic_file_read_iter (219 samples, 0.14%)</title><rect x="90.6035%" y="277" width="0.1392%" height="15" fill="rgb(230,137,11)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="287.50"></text></g><g><title>filemap_read (219 samples, 0.14%)</title><rect x="90.6035%" y="261" width="0.1392%" height="15" fill="rgb(212,28,1)" fg:x="142532" fg:w="219"/><text x="90.8535%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (62 samples, 0.04%)</title><rect x="92.3357%" y="405" width="0.0394%" height="15" fill="rgb(248,164,17)" fg:x="145257" fg:w="62"/><text x="92.5857%" y="415.50"></text></g><g><title>alloc::string::String::from_utf8 (2,675 samples, 1.70%)</title><rect x="90.7427%" y="453" width="1.7004%" height="15" fill="rgb(222,171,42)" fg:x="142751" fg:w="2675"/><text x="90.9927%" y="463.50"></text></g><g><title>core::str::converts::from_utf8 (2,675 samples, 1.70%)</title><rect x="90.7427%" y="437" width="1.7004%" height="15" fill="rgb(243,84,45)" fg:x="142751" fg:w="2675"/><text x="90.9927%" y="447.50"></text></g><g><title>core::str::validations::run_utf8_validation (2,675 samples, 1.70%)</title><rect x="90.7427%" y="421" width="1.7004%" height="15" fill="rgb(252,49,23)" fg:x="142751" fg:w="2675"/><text x="90.9927%" y="431.50"></text></g><g><title>core::str::validations::utf8_char_width (107 samples, 0.07%)</title><rect x="92.3751%" y="405" width="0.0680%" height="15" fill="rgb(215,19,7)" fg:x="145319" fg:w="107"/><text x="92.6251%" y="415.50"></text></g><g><title>__irqentry_text_end (26 samples, 0.02%)</title><rect x="93.5225%" y="373" width="0.0165%" height="15" fill="rgb(238,81,41)" fg:x="147124" fg:w="26"/><text x="93.7725%" y="383.50"></text></g><g><title>access_error (30 samples, 0.02%)</title><rect x="93.5765%" y="341" width="0.0191%" height="15" fill="rgb(210,199,37)" fg:x="147209" fg:w="30"/><text x="93.8265%" y="351.50"></text></g><g><title>down_read_trylock (38 samples, 0.02%)</title><rect x="93.6465%" y="325" width="0.0242%" height="15" fill="rgb(244,192,49)" fg:x="147319" fg:w="38"/><text x="93.8965%" y="335.50"></text></g><g><title>blk_cgroup_congested (45 samples, 0.03%)</title><rect x="93.9020%" y="245" width="0.0286%" height="15" fill="rgb(226,211,11)" fg:x="147721" fg:w="45"/><text x="94.1520%" y="255.50"></text></g><g><title>__folio_throttle_swaprate (61 samples, 0.04%)</title><rect x="93.8937%" y="261" width="0.0388%" height="15" fill="rgb(236,162,54)" fg:x="147708" fg:w="61"/><text x="94.1437%" y="271.50"></text></g><g><title>__rcu_read_lock (20 samples, 0.01%)</title><rect x="93.9662%" y="245" width="0.0127%" height="15" fill="rgb(220,229,9)" fg:x="147822" fg:w="20"/><text x="94.2162%" y="255.50"></text></g><g><title>__rcu_read_unlock (81 samples, 0.05%)</title><rect x="93.9789%" y="245" width="0.0515%" height="15" fill="rgb(250,87,22)" fg:x="147842" fg:w="81"/><text x="94.2289%" y="255.50"></text></g><g><title>__count_memcg_events (66 samples, 0.04%)</title><rect x="94.0711%" y="229" width="0.0420%" height="15" fill="rgb(239,43,17)" fg:x="147987" fg:w="66"/><text x="94.3211%" y="239.50"></text></g><g><title>cgroup_rstat_updated (29 samples, 0.02%)</title><rect x="94.0946%" y="213" width="0.0184%" height="15" fill="rgb(231,177,25)" fg:x="148024" fg:w="29"/><text x="94.3446%" y="223.50"></text></g><g><title>consume_stock (22 samples, 0.01%)</title><rect x="94.2205%" y="213" width="0.0140%" height="15" fill="rgb(219,179,1)" fg:x="148222" fg:w="22"/><text x="94.4705%" y="223.50"></text></g><g><title>charge_memcg (327 samples, 0.21%)</title><rect x="94.0304%" y="245" width="0.2079%" height="15" fill="rgb(238,219,53)" fg:x="147923" fg:w="327"/><text x="94.2804%" y="255.50"></text></g><g><title>try_charge_memcg (172 samples, 0.11%)</title><rect x="94.1289%" y="229" width="0.1093%" height="15" fill="rgb(232,167,36)" fg:x="148078" fg:w="172"/><text x="94.3789%" y="239.50"></text></g><g><title>get_mem_cgroup_from_mm (223 samples, 0.14%)</title><rect x="94.2383%" y="245" width="0.1418%" height="15" fill="rgb(244,19,51)" fg:x="148250" fg:w="223"/><text x="94.4883%" y="255.50"></text></g><g><title>__mem_cgroup_charge (715 samples, 0.45%)</title><rect x="93.9351%" y="261" width="0.4545%" height="15" fill="rgb(224,6,22)" fg:x="147773" fg:w="715"/><text x="94.1851%" y="271.50"></text></g><g><title>__pte_offset_map_lock (55 samples, 0.03%)</title><rect x="94.4042%" y="261" width="0.0350%" height="15" fill="rgb(224,145,5)" fg:x="148511" fg:w="55"/><text x="94.6542%" y="271.50"></text></g><g><title>__pte_offset_map (21 samples, 0.01%)</title><rect x="94.4258%" y="245" width="0.0133%" height="15" fill="rgb(234,130,49)" fg:x="148545" fg:w="21"/><text x="94.6758%" y="255.50"></text></g><g><title>_raw_spin_lock (26 samples, 0.02%)</title><rect x="94.4506%" y="261" width="0.0165%" height="15" fill="rgb(254,6,2)" fg:x="148584" fg:w="26"/><text x="94.7006%" y="271.50"></text></g><g><title>__mod_memcg_lruvec_state (26 samples, 0.02%)</title><rect x="94.6267%" y="165" width="0.0165%" height="15" fill="rgb(208,96,46)" fg:x="148861" fg:w="26"/><text x="94.8767%" y="175.50"></text></g><g><title>__mod_lruvec_state (46 samples, 0.03%)</title><rect x="94.6229%" y="181" width="0.0292%" height="15" fill="rgb(239,3,39)" fg:x="148855" fg:w="46"/><text x="94.8729%" y="191.50"></text></g><g><title>lru_add_fn (215 samples, 0.14%)</title><rect x="94.5294%" y="213" width="0.1367%" height="15" fill="rgb(233,210,1)" fg:x="148708" fg:w="215"/><text x="94.7794%" y="223.50"></text></g><g><title>lru_gen_add_folio (164 samples, 0.10%)</title><rect x="94.5618%" y="197" width="0.1043%" height="15" fill="rgb(244,137,37)" fg:x="148759" fg:w="164"/><text x="94.8118%" y="207.50"></text></g><g><title>folio_batch_move_lru (271 samples, 0.17%)</title><rect x="94.5091%" y="229" width="0.1723%" height="15" fill="rgb(240,136,2)" fg:x="148676" fg:w="271"/><text x="94.7591%" y="239.50"></text></g><g><title>release_pages (20 samples, 0.01%)</title><rect x="94.6686%" y="213" width="0.0127%" height="15" fill="rgb(239,18,37)" fg:x="148927" fg:w="20"/><text x="94.9186%" y="223.50"></text></g><g><title>folio_add_lru_vma (329 samples, 0.21%)</title><rect x="94.4767%" y="261" width="0.2091%" height="15" fill="rgb(218,185,22)" fg:x="148625" fg:w="329"/><text x="94.7267%" y="271.50"></text></g><g><title>folio_add_lru (328 samples, 0.21%)</title><rect x="94.4773%" y="245" width="0.2085%" height="15" fill="rgb(225,218,4)" fg:x="148626" fg:w="328"/><text x="94.7273%" y="255.50"></text></g><g><title>__mod_memcg_lruvec_state (29 samples, 0.02%)</title><rect x="94.7341%" y="213" width="0.0184%" height="15" fill="rgb(230,182,32)" fg:x="149030" fg:w="29"/><text x="94.9841%" y="223.50"></text></g><g><title>__mod_lruvec_state (53 samples, 0.03%)</title><rect x="94.7284%" y="229" width="0.0337%" height="15" fill="rgb(242,56,43)" fg:x="149021" fg:w="53"/><text x="94.9784%" y="239.50"></text></g><g><title>__mod_lruvec_page_state (82 samples, 0.05%)</title><rect x="94.7112%" y="245" width="0.0521%" height="15" fill="rgb(233,99,24)" fg:x="148994" fg:w="82"/><text x="94.9612%" y="255.50"></text></g><g><title>folio_add_new_anon_rmap (134 samples, 0.09%)</title><rect x="94.6858%" y="261" width="0.0852%" height="15" fill="rgb(234,209,42)" fg:x="148954" fg:w="134"/><text x="94.9358%" y="271.50"></text></g><g><title>inc_mm_counter (32 samples, 0.02%)</title><rect x="94.7735%" y="261" width="0.0203%" height="15" fill="rgb(227,7,12)" fg:x="149092" fg:w="32"/><text x="95.0235%" y="271.50"></text></g><g><title>percpu_counter_add_batch (28 samples, 0.02%)</title><rect x="94.7761%" y="245" width="0.0178%" height="15" fill="rgb(245,203,43)" fg:x="149096" fg:w="28"/><text x="95.0261%" y="255.50"></text></g><g><title>__next_zones_zonelist (20 samples, 0.01%)</title><rect x="94.8917%" y="213" width="0.0127%" height="15" fill="rgb(238,205,33)" fg:x="149278" fg:w="20"/><text x="95.1417%" y="223.50"></text></g><g><title>_raw_spin_trylock (32 samples, 0.02%)</title><rect x="94.9540%" y="197" width="0.0203%" height="15" fill="rgb(231,56,7)" fg:x="149376" fg:w="32"/><text x="95.2040%" y="207.50"></text></g><g><title>clear_page_erms (438 samples, 0.28%)</title><rect x="94.9776%" y="197" width="0.2784%" height="15" fill="rgb(244,186,29)" fg:x="149413" fg:w="438"/><text x="95.2276%" y="207.50"></text></g><g><title>post_alloc_hook (26 samples, 0.02%)</title><rect x="95.2560%" y="197" width="0.0165%" height="15" fill="rgb(234,111,31)" fg:x="149851" fg:w="26"/><text x="95.5060%" y="207.50"></text></g><g><title>__rmqueue_pcplist (114 samples, 0.07%)</title><rect x="95.3119%" y="181" width="0.0725%" height="15" fill="rgb(241,149,10)" fg:x="149939" fg:w="114"/><text x="95.5619%" y="191.50"></text></g><g><title>rmqueue_bulk (77 samples, 0.05%)</title><rect x="95.3354%" y="165" width="0.0489%" height="15" fill="rgb(249,206,44)" fg:x="149976" fg:w="77"/><text x="95.5854%" y="175.50"></text></g><g><title>get_page_from_freelist (756 samples, 0.48%)</title><rect x="94.9045%" y="213" width="0.4806%" height="15" fill="rgb(251,153,30)" fg:x="149298" fg:w="756"/><text x="95.1545%" y="223.50"></text></g><g><title>rmqueue (177 samples, 0.11%)</title><rect x="95.2725%" y="197" width="0.1125%" height="15" fill="rgb(239,152,38)" fg:x="149877" fg:w="177"/><text x="95.5225%" y="207.50"></text></g><g><title>__alloc_pages (855 samples, 0.54%)</title><rect x="94.8460%" y="229" width="0.5435%" height="15" fill="rgb(249,139,47)" fg:x="149206" fg:w="855"/><text x="95.0960%" y="239.50"></text></g><g><title>__folio_alloc (880 samples, 0.56%)</title><rect x="94.8422%" y="245" width="0.5594%" height="15" fill="rgb(244,64,35)" fg:x="149200" fg:w="880"/><text x="95.0922%" y="255.50"></text></g><g><title>do_anonymous_page (2,455 samples, 1.56%)</title><rect x="93.8518%" y="277" width="1.5606%" height="15" fill="rgb(216,46,15)" fg:x="147642" fg:w="2455"/><text x="94.1018%" y="287.50"></text></g><g><title>vma_alloc_folio (946 samples, 0.60%)</title><rect x="94.8110%" y="261" width="0.6013%" height="15" fill="rgb(250,74,19)" fg:x="149151" fg:w="946"/><text x="95.0610%" y="271.50"></text></g><g><title>pte_offset_map_nolock (43 samples, 0.03%)</title><rect x="95.4187%" y="277" width="0.0273%" height="15" fill="rgb(249,42,33)" fg:x="150107" fg:w="43"/><text x="95.6687%" y="287.50"></text></g><g><title>__pte_offset_map (22 samples, 0.01%)</title><rect x="95.4321%" y="261" width="0.0140%" height="15" fill="rgb(242,149,17)" fg:x="150128" fg:w="22"/><text x="95.6821%" y="271.50"></text></g><g><title>handle_pte_fault (2,556 samples, 1.62%)</title><rect x="93.8257%" y="293" width="1.6248%" height="15" fill="rgb(244,29,21)" fg:x="147601" fg:w="2556"/><text x="94.0757%" y="303.50"></text></g><g><title>__handle_mm_fault (2,730 samples, 1.74%)</title><rect x="93.7240%" y="309" width="1.7354%" height="15" fill="rgb(220,130,37)" fg:x="147441" fg:w="2730"/><text x="93.9740%" y="319.50"></text></g><g><title>__count_memcg_events (29 samples, 0.02%)</title><rect x="95.4740%" y="293" width="0.0184%" height="15" fill="rgb(211,67,2)" fg:x="150194" fg:w="29"/><text x="95.7240%" y="303.50"></text></g><g><title>count_memcg_events.constprop.0 (54 samples, 0.03%)</title><rect x="95.4607%" y="309" width="0.0343%" height="15" fill="rgb(235,68,52)" fg:x="150173" fg:w="54"/><text x="95.7107%" y="319.50"></text></g><g><title>handle_mm_fault (2,908 samples, 1.85%)</title><rect x="93.6706%" y="325" width="1.8485%" height="15" fill="rgb(246,142,3)" fg:x="147357" fg:w="2908"/><text x="93.9206%" y="335.50">h..</text></g><g><title>mas_walk (111 samples, 0.07%)</title><rect x="95.5395%" y="309" width="0.0706%" height="15" fill="rgb(241,25,7)" fg:x="150297" fg:w="111"/><text x="95.7895%" y="319.50"></text></g><g><title>mtree_range_walk (84 samples, 0.05%)</title><rect x="95.5567%" y="293" width="0.0534%" height="15" fill="rgb(242,119,39)" fg:x="150324" fg:w="84"/><text x="95.8067%" y="303.50"></text></g><g><title>lock_vma_under_rcu (150 samples, 0.10%)</title><rect x="95.5192%" y="325" width="0.0954%" height="15" fill="rgb(241,98,45)" fg:x="150265" fg:w="150"/><text x="95.7692%" y="335.50"></text></g><g><title>do_user_addr_fault (3,210 samples, 2.04%)</title><rect x="93.5956%" y="341" width="2.0405%" height="15" fill="rgb(254,28,30)" fg:x="147239" fg:w="3210"/><text x="93.8456%" y="351.50">d..</text></g><g><title>up_read (27 samples, 0.02%)</title><rect x="95.6190%" y="325" width="0.0172%" height="15" fill="rgb(241,142,54)" fg:x="150422" fg:w="27"/><text x="95.8690%" y="335.50"></text></g><g><title>exit_to_user_mode_prepare (34 samples, 0.02%)</title><rect x="95.6546%" y="309" width="0.0216%" height="15" fill="rgb(222,85,15)" fg:x="150478" fg:w="34"/><text x="95.9046%" y="319.50"></text></g><g><title>irqentry_exit (59 samples, 0.04%)</title><rect x="95.6418%" y="341" width="0.0375%" height="15" fill="rgb(210,85,47)" fg:x="150458" fg:w="59"/><text x="95.8918%" y="351.50"></text></g><g><title>irqentry_exit_to_user_mode (46 samples, 0.03%)</title><rect x="95.6501%" y="325" width="0.0292%" height="15" fill="rgb(224,206,25)" fg:x="150471" fg:w="46"/><text x="95.9001%" y="335.50"></text></g><g><title>exc_page_fault (3,344 samples, 2.13%)</title><rect x="93.5606%" y="357" width="2.1257%" height="15" fill="rgb(243,201,19)" fg:x="147184" fg:w="3344"/><text x="93.8106%" y="367.50">e..</text></g><g><title>asm_exc_page_fault (3,386 samples, 2.15%)</title><rect x="93.5390%" y="373" width="2.1524%" height="15" fill="rgb(236,59,4)" fg:x="147150" fg:w="3386"/><text x="93.7890%" y="383.50">a..</text></g><g><title>error_entry (42 samples, 0.03%)</title><rect x="95.6921%" y="373" width="0.0267%" height="15" fill="rgb(254,179,45)" fg:x="150537" fg:w="42"/><text x="95.9421%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5,501 samples, 3.50%)</title><rect x="92.4431%" y="453" width="3.4968%" height="15" fill="rgb(226,14,10)" fg:x="145426" fg:w="5501"/><text x="92.6931%" y="463.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5,501 samples, 3.50%)</title><rect x="92.4431%" y="437" width="3.4968%" height="15" fill="rgb(244,27,41)" fg:x="145426" fg:w="5501"/><text x="92.6931%" y="447.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5,501 samples, 3.50%)</title><rect x="92.4431%" y="421" width="3.4968%" height="15" fill="rgb(235,35,32)" fg:x="145426" fg:w="5501"/><text x="92.6931%" y="431.50">all..</text></g><g><title>core::intrinsics::copy_nonoverlapping (5,501 samples, 3.50%)</title><rect x="92.4431%" y="405" width="3.4968%" height="15" fill="rgb(218,68,31)" fg:x="145426" fg:w="5501"/><text x="92.6931%" y="415.50">cor..</text></g><g><title>__memcpy_evex_unaligned_erms (5,501 samples, 3.50%)</title><rect x="92.4431%" y="389" width="3.4968%" height="15" fill="rgb(207,120,37)" fg:x="145426" fg:w="5501"/><text x="92.6931%" y="399.50">__m..</text></g><g><title>sync_regs (341 samples, 0.22%)</title><rect x="95.7232%" y="373" width="0.2168%" height="15" fill="rgb(227,98,0)" fg:x="150586" fg:w="341"/><text x="95.9732%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8,398 samples, 5.34%)</title><rect x="90.6035%" y="629" width="5.3384%" height="15" fill="rgb(207,7,3)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="639.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8,398 samples, 5.34%)</title><rect x="90.6035%" y="613" width="5.3384%" height="15" fill="rgb(206,98,19)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="623.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8,398 samples, 5.34%)</title><rect x="90.6035%" y="597" width="5.3384%" height="15" fill="rgb(217,5,26)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="607.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8,398 samples, 5.34%)</title><rect x="90.6035%" y="581" width="5.3384%" height="15" fill="rgb(235,190,38)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="591.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8,398 samples, 5.34%)</title><rect x="90.6035%" y="565" width="5.3384%" height="15" fill="rgb(247,86,24)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="575.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (8,398 samples, 5.34%)</title><rect x="90.6035%" y="549" width="5.3384%" height="15" fill="rgb(205,101,16)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="559.50">alloc::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,398 samples, 5.34%)</title><rect x="90.6035%" y="533" width="5.3384%" height="15" fill="rgb(246,168,33)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="543.50">core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,398 samples, 5.34%)</title><rect x="90.6035%" y="517" width="5.3384%" height="15" fill="rgb(231,114,1)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="527.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,398 samples, 5.34%)</title><rect x="90.6035%" y="501" width="5.3384%" height="15" fill="rgb(207,184,53)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="511.50">core::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8,398 samples, 5.34%)</title><rect x="90.6035%" y="485" width="5.3384%" height="15" fill="rgb(224,95,51)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="495.50">core::i..</text></g><g><title>one_brc::main::_{{closure}} (8,398 samples, 5.34%)</title><rect x="90.6035%" y="469" width="5.3384%" height="15" fill="rgb(212,188,45)" fg:x="142532" fg:w="8398"/><text x="90.8535%" y="479.50">one_brc..</text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;&gt; (25 samples, 0.02%)</title><rect x="95.9419%" y="629" width="0.0159%" height="15" fill="rgb(223,154,38)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufreader::buffer::Buffer&gt; (25 samples, 0.02%)</title><rect x="95.9419%" y="613" width="0.0159%" height="15" fill="rgb(251,22,52)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::mem::maybe_uninit::MaybeUninit&lt;u8&gt;]&gt;&gt; (25 samples, 0.02%)</title><rect x="95.9419%" y="597" width="0.0159%" height="15" fill="rgb(229,209,22)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="95.9419%" y="581" width="0.0159%" height="15" fill="rgb(234,138,34)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.02%)</title><rect x="95.9419%" y="565" width="0.0159%" height="15" fill="rgb(212,95,11)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.02%)</title><rect x="95.9419%" y="549" width="0.0159%" height="15" fill="rgb(240,179,47)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="559.50"></text></g><g><title>__GI___libc_free (25 samples, 0.02%)</title><rect x="95.9419%" y="533" width="0.0159%" height="15" fill="rgb(240,163,11)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="543.50"></text></g><g><title>__GI___munmap (25 samples, 0.02%)</title><rect x="95.9419%" y="517" width="0.0159%" height="15" fill="rgb(236,37,12)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (25 samples, 0.02%)</title><rect x="95.9419%" y="501" width="0.0159%" height="15" fill="rgb(232,164,16)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="511.50"></text></g><g><title>do_syscall_64 (25 samples, 0.02%)</title><rect x="95.9419%" y="485" width="0.0159%" height="15" fill="rgb(244,205,15)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="495.50"></text></g><g><title>__x64_sys_munmap (25 samples, 0.02%)</title><rect x="95.9419%" y="469" width="0.0159%" height="15" fill="rgb(223,117,47)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="479.50"></text></g><g><title>__vm_munmap (25 samples, 0.02%)</title><rect x="95.9419%" y="453" width="0.0159%" height="15" fill="rgb(244,107,35)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="463.50"></text></g><g><title>do_vmi_munmap (25 samples, 0.02%)</title><rect x="95.9419%" y="437" width="0.0159%" height="15" fill="rgb(205,140,8)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="447.50"></text></g><g><title>do_vmi_align_munmap (25 samples, 0.02%)</title><rect x="95.9419%" y="421" width="0.0159%" height="15" fill="rgb(228,84,46)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="431.50"></text></g><g><title>unmap_region (25 samples, 0.02%)</title><rect x="95.9419%" y="405" width="0.0159%" height="15" fill="rgb(254,188,9)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="415.50"></text></g><g><title>unmap_vmas (25 samples, 0.02%)</title><rect x="95.9419%" y="389" width="0.0159%" height="15" fill="rgb(206,112,54)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="399.50"></text></g><g><title>unmap_single_vma (25 samples, 0.02%)</title><rect x="95.9419%" y="373" width="0.0159%" height="15" fill="rgb(216,84,49)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="383.50"></text></g><g><title>unmap_page_range (25 samples, 0.02%)</title><rect x="95.9419%" y="357" width="0.0159%" height="15" fill="rgb(214,194,35)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="367.50"></text></g><g><title>zap_pmd_range.isra.0 (25 samples, 0.02%)</title><rect x="95.9419%" y="341" width="0.0159%" height="15" fill="rgb(249,28,3)" fg:x="150930" fg:w="25"/><text x="96.1919%" y="351.50"></text></g><g><title>zap_pte_range (21 samples, 0.01%)</title><rect x="95.9444%" y="325" width="0.0133%" height="15" fill="rgb(222,56,52)" fg:x="150934" fg:w="21"/><text x="96.1944%" y="335.50"></text></g><g><title>tlb_flush_mmu (18 samples, 0.01%)</title><rect x="95.9463%" y="309" width="0.0114%" height="15" fill="rgb(245,217,50)" fg:x="150937" fg:w="18"/><text x="96.1963%" y="319.50"></text></g><g><title>tlb_batch_pages_flush (18 samples, 0.01%)</title><rect x="95.9463%" y="293" width="0.0114%" height="15" fill="rgb(213,201,24)" fg:x="150937" fg:w="18"/><text x="96.1963%" y="303.50"></text></g><g><title>free_pages_and_swap_cache (18 samples, 0.01%)</title><rect x="95.9463%" y="277" width="0.0114%" height="15" fill="rgb(248,116,28)" fg:x="150937" fg:w="18"/><text x="96.1963%" y="287.50"></text></g><g><title>release_pages (18 samples, 0.01%)</title><rect x="95.9463%" y="261" width="0.0114%" height="15" fill="rgb(219,72,43)" fg:x="150937" fg:w="18"/><text x="96.1963%" y="271.50"></text></g><g><title>_start (8,426 samples, 5.36%)</title><rect x="90.6029%" y="773" width="5.3562%" height="15" fill="rgb(209,138,14)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="783.50">_start</text></g><g><title>__libc_start_main_impl (8,426 samples, 5.36%)</title><rect x="90.6029%" y="757" width="5.3562%" height="15" fill="rgb(222,18,33)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="767.50">__libc_..</text></g><g><title>__libc_start_call_main (8,426 samples, 5.36%)</title><rect x="90.6029%" y="741" width="5.3562%" height="15" fill="rgb(213,199,7)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="751.50">__libc_..</text></g><g><title>main (8,426 samples, 5.36%)</title><rect x="90.6029%" y="725" width="5.3562%" height="15" fill="rgb(250,110,10)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (8,426 samples, 5.36%)</title><rect x="90.6029%" y="709" width="5.3562%" height="15" fill="rgb(248,123,6)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="719.50">std::rt..</text></g><g><title>std::rt::lang_start::_{{closure}} (8,426 samples, 5.36%)</title><rect x="90.6029%" y="693" width="5.3562%" height="15" fill="rgb(206,91,31)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="703.50">std::rt..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,426 samples, 5.36%)</title><rect x="90.6029%" y="677" width="5.3562%" height="15" fill="rgb(211,154,13)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="687.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once (8,426 samples, 5.36%)</title><rect x="90.6029%" y="661" width="5.3562%" height="15" fill="rgb(225,148,7)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="671.50">core::o..</text></g><g><title>one_brc::main (8,426 samples, 5.36%)</title><rect x="90.6029%" y="645" width="5.3562%" height="15" fill="rgb(220,160,43)" fg:x="142531" fg:w="8426"/><text x="90.8529%" y="655.50">one_brc..</text></g><g><title>asm_exc_page_fault (988 samples, 0.63%)</title><rect x="95.9590%" y="773" width="0.6280%" height="15" fill="rgb(213,52,39)" fg:x="150957" fg:w="988"/><text x="96.2090%" y="783.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (448 samples, 0.28%)</title><rect x="96.5953%" y="725" width="0.2848%" height="15" fill="rgb(243,137,7)" fg:x="151958" fg:w="448"/><text x="96.8453%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (448 samples, 0.28%)</title><rect x="96.5953%" y="709" width="0.2848%" height="15" fill="rgb(230,79,13)" fg:x="151958" fg:w="448"/><text x="96.8453%" y="719.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (448 samples, 0.28%)</title><rect x="96.5953%" y="693" width="0.2848%" height="15" fill="rgb(247,105,23)" fg:x="151958" fg:w="448"/><text x="96.8453%" y="703.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (448 samples, 0.28%)</title><rect x="96.5953%" y="677" width="0.2848%" height="15" fill="rgb(223,179,41)" fg:x="151958" fg:w="448"/><text x="96.8453%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (881 samples, 0.56%)</title><rect x="96.8801%" y="565" width="0.5600%" height="15" fill="rgb(218,9,34)" fg:x="152406" fg:w="881"/><text x="97.1301%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (881 samples, 0.56%)</title><rect x="96.8801%" y="549" width="0.5600%" height="15" fill="rgb(222,106,8)" fg:x="152406" fg:w="881"/><text x="97.1301%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (881 samples, 0.56%)</title><rect x="96.8801%" y="533" width="0.5600%" height="15" fill="rgb(211,220,0)" fg:x="152406" fg:w="881"/><text x="97.1301%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (881 samples, 0.56%)</title><rect x="96.8801%" y="517" width="0.5600%" height="15" fill="rgb(229,52,16)" fg:x="152406" fg:w="881"/><text x="97.1301%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (881 samples, 0.56%)</title><rect x="96.8801%" y="501" width="0.5600%" height="15" fill="rgb(212,155,18)" fg:x="152406" fg:w="881"/><text x="97.1301%" y="511.50"></text></g><g><title>alloc::alloc::alloc (881 samples, 0.56%)</title><rect x="96.8801%" y="485" width="0.5600%" height="15" fill="rgb(242,21,14)" fg:x="152406" fg:w="881"/><text x="97.1301%" y="495.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1,751 samples, 1.11%)</title><rect x="96.8801%" y="693" width="1.1131%" height="15" fill="rgb(222,19,48)" fg:x="152406" fg:w="1751"/><text x="97.1301%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1,751 samples, 1.11%)</title><rect x="96.8801%" y="677" width="1.1131%" height="15" fill="rgb(232,45,27)" fg:x="152406" fg:w="1751"/><text x="97.1301%" y="687.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1,751 samples, 1.11%)</title><rect x="96.8801%" y="661" width="1.1131%" height="15" fill="rgb(249,103,42)" fg:x="152406" fg:w="1751"/><text x="97.1301%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,751 samples, 1.11%)</title><rect x="96.8801%" y="645" width="1.1131%" height="15" fill="rgb(246,81,33)" fg:x="152406" fg:w="1751"/><text x="97.1301%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,751 samples, 1.11%)</title><rect x="96.8801%" y="629" width="1.1131%" height="15" fill="rgb(252,33,42)" fg:x="152406" fg:w="1751"/><text x="97.1301%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,751 samples, 1.11%)</title><rect x="96.8801%" y="613" width="1.1131%" height="15" fill="rgb(209,212,41)" fg:x="152406" fg:w="1751"/><text x="97.1301%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1,751 samples, 1.11%)</title><rect x="96.8801%" y="597" width="1.1131%" height="15" fill="rgb(207,154,6)" fg:x="152406" fg:w="1751"/><text x="97.1301%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,751 samples, 1.11%)</title><rect x="96.8801%" y="581" width="1.1131%" height="15" fill="rgb(223,64,47)" fg:x="152406" fg:w="1751"/><text x="97.1301%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (870 samples, 0.55%)</title><rect x="97.4402%" y="565" width="0.5530%" height="15" fill="rgb(211,161,38)" fg:x="153287" fg:w="870"/><text x="97.6902%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (870 samples, 0.55%)</title><rect x="97.4402%" y="549" width="0.5530%" height="15" fill="rgb(219,138,40)" fg:x="153287" fg:w="870"/><text x="97.6902%" y="559.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (773 samples, 0.49%)</title><rect x="97.9932%" y="693" width="0.4914%" height="15" fill="rgb(241,228,46)" fg:x="154157" fg:w="773"/><text x="98.2432%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (448 samples, 0.28%)</title><rect x="98.4846%" y="693" width="0.2848%" height="15" fill="rgb(223,209,38)" fg:x="154930" fg:w="448"/><text x="98.7346%" y="703.50"></text></g><g><title>one_brc::round_towards_positive (425 samples, 0.27%)</title><rect x="98.7693%" y="693" width="0.2702%" height="15" fill="rgb(236,164,45)" fg:x="155378" fg:w="425"/><text x="99.0193%" y="703.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (425 samples, 0.27%)</title><rect x="98.7693%" y="677" width="0.2702%" height="15" fill="rgb(231,15,5)" fg:x="155378" fg:w="425"/><text x="99.0193%" y="687.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (670 samples, 0.43%)</title><rect x="99.0395%" y="693" width="0.4259%" height="15" fill="rgb(252,35,15)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="703.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (670 samples, 0.43%)</title><rect x="99.0395%" y="677" width="0.4259%" height="15" fill="rgb(248,181,18)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="687.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (670 samples, 0.43%)</title><rect x="99.0395%" y="661" width="0.4259%" height="15" fill="rgb(233,39,42)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,one_brc::Measurement&gt;&gt; (670 samples, 0.43%)</title><rect x="99.0395%" y="645" width="0.4259%" height="15" fill="rgb(238,110,33)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (670 samples, 0.43%)</title><rect x="99.0395%" y="629" width="0.4259%" height="15" fill="rgb(233,195,10)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (670 samples, 0.43%)</title><rect x="99.0395%" y="613" width="0.4259%" height="15" fill="rgb(254,105,3)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (670 samples, 0.43%)</title><rect x="99.0395%" y="597" width="0.4259%" height="15" fill="rgb(221,225,9)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (670 samples, 0.43%)</title><rect x="99.0395%" y="581" width="0.4259%" height="15" fill="rgb(224,227,45)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (670 samples, 0.43%)</title><rect x="99.0395%" y="565" width="0.4259%" height="15" fill="rgb(229,198,43)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (670 samples, 0.43%)</title><rect x="99.0395%" y="549" width="0.4259%" height="15" fill="rgb(206,209,35)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (670 samples, 0.43%)</title><rect x="99.0395%" y="533" width="0.4259%" height="15" fill="rgb(245,195,53)" fg:x="155803" fg:w="670"/><text x="99.2895%" y="543.50"></text></g><g><title>one_brc::process_lines (5,275 samples, 3.35%)</title><rect x="96.5953%" y="773" width="3.3532%" height="15" fill="rgb(240,92,26)" fg:x="151958" fg:w="5275"/><text x="96.8453%" y="783.50">one..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,275 samples, 3.35%)</title><rect x="96.5953%" y="757" width="3.3532%" height="15" fill="rgb(207,40,23)" fg:x="151958" fg:w="5275"/><text x="96.8453%" y="767.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (5,275 samples, 3.35%)</title><rect x="96.5953%" y="741" width="3.3532%" height="15" fill="rgb(223,111,35)" fg:x="151958" fg:w="5275"/><text x="96.8453%" y="751.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,827 samples, 3.07%)</title><rect x="96.8801%" y="725" width="3.0684%" height="15" fill="rgb(229,147,28)" fg:x="152406" fg:w="4827"/><text x="97.1301%" y="735.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (4,827 samples, 3.07%)</title><rect x="96.8801%" y="709" width="3.0684%" height="15" fill="rgb(211,29,28)" fg:x="152406" fg:w="4827"/><text x="97.1301%" y="719.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (760 samples, 0.48%)</title><rect x="99.4654%" y="693" width="0.4831%" height="15" fill="rgb(228,72,33)" fg:x="156473" fg:w="760"/><text x="99.7154%" y="703.50"></text></g><g><title>schedule_tail (72 samples, 0.05%)</title><rect x="99.9504%" y="741" width="0.0458%" height="15" fill="rgb(205,214,31)" fg:x="157236" fg:w="72"/><text x="100.2004%" y="751.50"></text></g><g><title>finish_task_switch.isra.0 (71 samples, 0.05%)</title><rect x="99.9511%" y="725" width="0.0451%" height="15" fill="rgb(224,111,15)" fg:x="157237" fg:w="71"/><text x="100.2011%" y="735.50"></text></g><g><title>__perf_event_task_sched_in (68 samples, 0.04%)</title><rect x="99.9530%" y="709" width="0.0432%" height="15" fill="rgb(253,21,26)" fg:x="157240" fg:w="68"/><text x="100.2030%" y="719.50"></text></g><g><title>perf_ctx_enable (68 samples, 0.04%)</title><rect x="99.9530%" y="693" width="0.0432%" height="15" fill="rgb(245,139,43)" fg:x="157240" fg:w="68"/><text x="100.2030%" y="703.50"></text></g><g><title>x86_pmu_enable (68 samples, 0.04%)</title><rect x="99.9530%" y="677" width="0.0432%" height="15" fill="rgb(252,170,7)" fg:x="157240" fg:w="68"/><text x="100.2030%" y="687.50"></text></g><g><title>intel_pmu_enable_all (68 samples, 0.04%)</title><rect x="99.9530%" y="661" width="0.0432%" height="15" fill="rgb(231,118,14)" fg:x="157240" fg:w="68"/><text x="100.2030%" y="671.50"></text></g><g><title>native_write_msr (68 samples, 0.04%)</title><rect x="99.9530%" y="645" width="0.0432%" height="15" fill="rgb(238,83,0)" fg:x="157240" fg:w="68"/><text x="100.2030%" y="655.50"></text></g><g><title>one-brc (157,309 samples, 100.00%)</title><rect x="0.0000%" y="789" width="99.9968%" height="15" fill="rgb(221,39,39)" fg:x="0" fg:w="157309"/><text x="0.2500%" y="799.50">one-brc</text></g><g><title>ret_from_fork_asm (76 samples, 0.05%)</title><rect x="99.9485%" y="773" width="0.0483%" height="15" fill="rgb(222,119,46)" fg:x="157233" fg:w="76"/><text x="100.1985%" y="783.50"></text></g><g><title>ret_from_fork (76 samples, 0.05%)</title><rect x="99.9485%" y="757" width="0.0483%" height="15" fill="rgb(222,165,49)" fg:x="157233" fg:w="76"/><text x="100.1985%" y="767.50"></text></g><g><title>all (157,314 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(219,113,52)" fg:x="0" fg:w="157314"/><text x="0.2500%" y="815.50"></text></g></svg></svg>