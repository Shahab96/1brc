<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="150484"><g><title>[unknown] (727 samples, 0.48%)</title><rect x="1.0546%" y="693" width="0.4831%" height="15" fill="rgb(227,0,7)" fg:x="1587" fg:w="727"/><text x="1.3046%" y="703.50"></text></g><g><title>[unknown] (727 samples, 0.48%)</title><rect x="1.0546%" y="677" width="0.4831%" height="15" fill="rgb(217,0,24)" fg:x="1587" fg:w="727"/><text x="1.3046%" y="687.50"></text></g><g><title>[unknown] (726 samples, 0.48%)</title><rect x="1.0553%" y="661" width="0.4824%" height="15" fill="rgb(221,193,54)" fg:x="1588" fg:w="726"/><text x="1.3053%" y="671.50"></text></g><g><title>[unknown] (726 samples, 0.48%)</title><rect x="1.0553%" y="645" width="0.4824%" height="15" fill="rgb(248,212,6)" fg:x="1588" fg:w="726"/><text x="1.3053%" y="655.50"></text></g><g><title>[unknown] (722 samples, 0.48%)</title><rect x="1.0579%" y="629" width="0.4798%" height="15" fill="rgb(208,68,35)" fg:x="1592" fg:w="722"/><text x="1.3079%" y="639.50"></text></g><g><title>[unknown] (717 samples, 0.48%)</title><rect x="1.0612%" y="613" width="0.4765%" height="15" fill="rgb(232,128,0)" fg:x="1597" fg:w="717"/><text x="1.3112%" y="623.50"></text></g><g><title>[unknown] (717 samples, 0.48%)</title><rect x="1.0612%" y="597" width="0.4765%" height="15" fill="rgb(207,160,47)" fg:x="1597" fg:w="717"/><text x="1.3112%" y="607.50"></text></g><g><title>[unknown] (716 samples, 0.48%)</title><rect x="1.0619%" y="581" width="0.4758%" height="15" fill="rgb(228,23,34)" fg:x="1598" fg:w="716"/><text x="1.3119%" y="591.50"></text></g><g><title>[unknown] (646 samples, 0.43%)</title><rect x="1.1084%" y="565" width="0.4293%" height="15" fill="rgb(218,30,26)" fg:x="1668" fg:w="646"/><text x="1.3584%" y="575.50"></text></g><g><title>[unknown] (645 samples, 0.43%)</title><rect x="1.1091%" y="549" width="0.4286%" height="15" fill="rgb(220,122,19)" fg:x="1669" fg:w="645"/><text x="1.3591%" y="559.50"></text></g><g><title>[unknown] (644 samples, 0.43%)</title><rect x="1.1098%" y="533" width="0.4280%" height="15" fill="rgb(250,228,42)" fg:x="1670" fg:w="644"/><text x="1.3598%" y="543.50"></text></g><g><title>[unknown] (644 samples, 0.43%)</title><rect x="1.1098%" y="517" width="0.4280%" height="15" fill="rgb(240,193,28)" fg:x="1670" fg:w="644"/><text x="1.3598%" y="527.50"></text></g><g><title>[unknown] (643 samples, 0.43%)</title><rect x="1.1104%" y="501" width="0.4273%" height="15" fill="rgb(216,20,37)" fg:x="1671" fg:w="643"/><text x="1.3604%" y="511.50"></text></g><g><title>[unknown] (557 samples, 0.37%)</title><rect x="1.1676%" y="485" width="0.3701%" height="15" fill="rgb(206,188,39)" fg:x="1757" fg:w="557"/><text x="1.4176%" y="495.50"></text></g><g><title>[unknown] (506 samples, 0.34%)</title><rect x="1.2015%" y="469" width="0.3362%" height="15" fill="rgb(217,207,13)" fg:x="1808" fg:w="506"/><text x="1.4515%" y="479.50"></text></g><g><title>[unknown] (492 samples, 0.33%)</title><rect x="1.2108%" y="453" width="0.3269%" height="15" fill="rgb(231,73,38)" fg:x="1822" fg:w="492"/><text x="1.4608%" y="463.50"></text></g><g><title>[unknown] (457 samples, 0.30%)</title><rect x="1.2340%" y="437" width="0.3037%" height="15" fill="rgb(225,20,46)" fg:x="1857" fg:w="457"/><text x="1.4840%" y="447.50"></text></g><g><title>[unknown] (371 samples, 0.25%)</title><rect x="1.2912%" y="421" width="0.2465%" height="15" fill="rgb(210,31,41)" fg:x="1943" fg:w="371"/><text x="1.5412%" y="431.50"></text></g><g><title>[unknown] (241 samples, 0.16%)</title><rect x="1.3776%" y="405" width="0.1601%" height="15" fill="rgb(221,200,47)" fg:x="2073" fg:w="241"/><text x="1.6276%" y="415.50"></text></g><g><title>[unknown] (148 samples, 0.10%)</title><rect x="1.4394%" y="389" width="0.0983%" height="15" fill="rgb(226,26,5)" fg:x="2166" fg:w="148"/><text x="1.6894%" y="399.50"></text></g><g><title>[unknown] (105 samples, 0.07%)</title><rect x="1.4679%" y="373" width="0.0698%" height="15" fill="rgb(249,33,26)" fg:x="2209" fg:w="105"/><text x="1.7179%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (553 samples, 0.37%)</title><rect x="1.5390%" y="501" width="0.3675%" height="15" fill="rgb(235,183,28)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (553 samples, 0.37%)</title><rect x="1.5390%" y="485" width="0.3675%" height="15" fill="rgb(221,5,38)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (553 samples, 0.37%)</title><rect x="1.5390%" y="469" width="0.3675%" height="15" fill="rgb(247,18,42)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (553 samples, 0.37%)</title><rect x="1.5390%" y="453" width="0.3675%" height="15" fill="rgb(241,131,45)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="463.50"></text></g><g><title>__GI___libc_read (553 samples, 0.37%)</title><rect x="1.5390%" y="437" width="0.3675%" height="15" fill="rgb(249,31,29)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="447.50"></text></g><g><title>[unknown] (553 samples, 0.37%)</title><rect x="1.5390%" y="421" width="0.3675%" height="15" fill="rgb(225,111,53)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="431.50"></text></g><g><title>[unknown] (553 samples, 0.37%)</title><rect x="1.5390%" y="405" width="0.3675%" height="15" fill="rgb(238,160,17)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="415.50"></text></g><g><title>[unknown] (553 samples, 0.37%)</title><rect x="1.5390%" y="389" width="0.3675%" height="15" fill="rgb(214,148,48)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="399.50"></text></g><g><title>[unknown] (553 samples, 0.37%)</title><rect x="1.5390%" y="373" width="0.3675%" height="15" fill="rgb(232,36,49)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="383.50"></text></g><g><title>[unknown] (553 samples, 0.37%)</title><rect x="1.5390%" y="357" width="0.3675%" height="15" fill="rgb(209,103,24)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="367.50"></text></g><g><title>[unknown] (553 samples, 0.37%)</title><rect x="1.5390%" y="341" width="0.3675%" height="15" fill="rgb(229,88,8)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="351.50"></text></g><g><title>[unknown] (553 samples, 0.37%)</title><rect x="1.5390%" y="325" width="0.3675%" height="15" fill="rgb(213,181,19)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="335.50"></text></g><g><title>[unknown] (553 samples, 0.37%)</title><rect x="1.5390%" y="309" width="0.3675%" height="15" fill="rgb(254,191,54)" fg:x="2316" fg:w="553"/><text x="1.7890%" y="319.50"></text></g><g><title>[unknown] (549 samples, 0.36%)</title><rect x="1.5417%" y="293" width="0.3648%" height="15" fill="rgb(241,83,37)" fg:x="2320" fg:w="549"/><text x="1.7917%" y="303.50"></text></g><g><title>[unknown] (546 samples, 0.36%)</title><rect x="1.5437%" y="277" width="0.3628%" height="15" fill="rgb(233,36,39)" fg:x="2323" fg:w="546"/><text x="1.7937%" y="287.50"></text></g><g><title>[unknown] (523 samples, 0.35%)</title><rect x="1.5590%" y="261" width="0.3475%" height="15" fill="rgb(226,3,54)" fg:x="2346" fg:w="523"/><text x="1.8090%" y="271.50"></text></g><g><title>[unknown] (280 samples, 0.19%)</title><rect x="1.7204%" y="245" width="0.1861%" height="15" fill="rgb(245,192,40)" fg:x="2589" fg:w="280"/><text x="1.9704%" y="255.50"></text></g><g><title>[unknown] (280 samples, 0.19%)</title><rect x="1.7204%" y="229" width="0.1861%" height="15" fill="rgb(238,167,29)" fg:x="2589" fg:w="280"/><text x="1.9704%" y="239.50"></text></g><g><title>[unknown] (276 samples, 0.18%)</title><rect x="1.7231%" y="213" width="0.1834%" height="15" fill="rgb(232,182,51)" fg:x="2593" fg:w="276"/><text x="1.9731%" y="223.50"></text></g><g><title>[unknown] (267 samples, 0.18%)</title><rect x="1.7291%" y="197" width="0.1774%" height="15" fill="rgb(231,60,39)" fg:x="2602" fg:w="267"/><text x="1.9791%" y="207.50"></text></g><g><title>[unknown] (252 samples, 0.17%)</title><rect x="1.7391%" y="181" width="0.1675%" height="15" fill="rgb(208,69,12)" fg:x="2617" fg:w="252"/><text x="1.9891%" y="191.50"></text></g><g><title>[unknown] (240 samples, 0.16%)</title><rect x="1.7470%" y="165" width="0.1595%" height="15" fill="rgb(235,93,37)" fg:x="2629" fg:w="240"/><text x="1.9970%" y="175.50"></text></g><g><title>[unknown] (226 samples, 0.15%)</title><rect x="1.7563%" y="149" width="0.1502%" height="15" fill="rgb(213,116,39)" fg:x="2643" fg:w="226"/><text x="2.0063%" y="159.50"></text></g><g><title>[unknown] (213 samples, 0.14%)</title><rect x="1.7650%" y="133" width="0.1415%" height="15" fill="rgb(222,207,29)" fg:x="2656" fg:w="213"/><text x="2.0150%" y="143.50"></text></g><g><title>[unknown] (188 samples, 0.12%)</title><rect x="1.7816%" y="117" width="0.1249%" height="15" fill="rgb(206,96,30)" fg:x="2681" fg:w="188"/><text x="2.0316%" y="127.50"></text></g><g><title>[unknown] (115 samples, 0.08%)</title><rect x="1.8301%" y="101" width="0.0764%" height="15" fill="rgb(218,138,4)" fg:x="2754" fg:w="115"/><text x="2.0801%" y="111.50"></text></g><g><title>[unknown] (73 samples, 0.05%)</title><rect x="1.8580%" y="85" width="0.0485%" height="15" fill="rgb(250,191,14)" fg:x="2796" fg:w="73"/><text x="2.1080%" y="95.50"></text></g><g><title>[unknown] (47 samples, 0.03%)</title><rect x="1.8753%" y="69" width="0.0312%" height="15" fill="rgb(239,60,40)" fg:x="2822" fg:w="47"/><text x="2.1253%" y="79.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="1.8946%" y="53" width="0.0120%" height="15" fill="rgb(206,27,48)" fg:x="2851" fg:w="18"/><text x="2.1446%" y="63.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="1.8952%" y="37" width="0.0113%" height="15" fill="rgb(225,35,8)" fg:x="2852" fg:w="17"/><text x="2.1452%" y="47.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (101 samples, 0.07%)</title><rect x="4.1646%" y="453" width="0.0671%" height="15" fill="rgb(250,213,24)" fg:x="6267" fg:w="101"/><text x="4.4146%" y="463.50"></text></g><g><title>alloc::string::String::from_utf8 (3,680 samples, 2.45%)</title><rect x="1.9065%" y="501" width="2.4454%" height="15" fill="rgb(247,123,22)" fg:x="2869" fg:w="3680"/><text x="2.1565%" y="511.50">al..</text></g><g><title>core::str::converts::from_utf8 (3,680 samples, 2.45%)</title><rect x="1.9065%" y="485" width="2.4454%" height="15" fill="rgb(231,138,38)" fg:x="2869" fg:w="3680"/><text x="2.1565%" y="495.50">co..</text></g><g><title>core::str::validations::run_utf8_validation (3,680 samples, 2.45%)</title><rect x="1.9065%" y="469" width="2.4454%" height="15" fill="rgb(231,145,46)" fg:x="2869" fg:w="3680"/><text x="2.1565%" y="479.50">co..</text></g><g><title>core::str::validations::utf8_char_width (181 samples, 0.12%)</title><rect x="4.2317%" y="453" width="0.1203%" height="15" fill="rgb(251,118,11)" fg:x="6368" fg:w="181"/><text x="4.4817%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7,917 samples, 5.26%)</title><rect x="4.3520%" y="501" width="5.2610%" height="15" fill="rgb(217,147,25)" fg:x="6549" fg:w="7917"/><text x="4.6020%" y="511.50">alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7,917 samples, 5.26%)</title><rect x="4.3520%" y="485" width="5.2610%" height="15" fill="rgb(247,81,37)" fg:x="6549" fg:w="7917"/><text x="4.6020%" y="495.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7,917 samples, 5.26%)</title><rect x="4.3520%" y="469" width="5.2610%" height="15" fill="rgb(209,12,38)" fg:x="6549" fg:w="7917"/><text x="4.6020%" y="479.50">alloc:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7,917 samples, 5.26%)</title><rect x="4.3520%" y="453" width="5.2610%" height="15" fill="rgb(227,1,9)" fg:x="6549" fg:w="7917"/><text x="4.6020%" y="463.50">core::..</text></g><g><title>__memcpy_evex_unaligned_erms (7,917 samples, 5.26%)</title><rect x="4.3520%" y="437" width="5.2610%" height="15" fill="rgb(248,47,43)" fg:x="6549" fg:w="7917"/><text x="4.6020%" y="447.50">__memc..</text></g><g><title>[unknown] (5,259 samples, 3.49%)</title><rect x="6.1183%" y="421" width="3.4947%" height="15" fill="rgb(221,10,30)" fg:x="9207" fg:w="5259"/><text x="6.3683%" y="431.50">[un..</text></g><g><title>[unknown] (4,619 samples, 3.07%)</title><rect x="6.5436%" y="405" width="3.0694%" height="15" fill="rgb(210,229,1)" fg:x="9847" fg:w="4619"/><text x="6.7936%" y="415.50">[un..</text></g><g><title>[unknown] (4,586 samples, 3.05%)</title><rect x="6.5655%" y="389" width="3.0475%" height="15" fill="rgb(222,148,37)" fg:x="9880" fg:w="4586"/><text x="6.8155%" y="399.50">[un..</text></g><g><title>[unknown] (4,455 samples, 2.96%)</title><rect x="6.6525%" y="373" width="2.9604%" height="15" fill="rgb(234,67,33)" fg:x="10011" fg:w="4455"/><text x="6.9025%" y="383.50">[un..</text></g><g><title>[unknown] (4,176 samples, 2.78%)</title><rect x="6.8379%" y="357" width="2.7750%" height="15" fill="rgb(247,98,35)" fg:x="10290" fg:w="4176"/><text x="7.0879%" y="367.50">[u..</text></g><g><title>[unknown] (3,867 samples, 2.57%)</title><rect x="7.0433%" y="341" width="2.5697%" height="15" fill="rgb(247,138,52)" fg:x="10599" fg:w="3867"/><text x="7.2933%" y="351.50">[u..</text></g><g><title>[unknown] (3,696 samples, 2.46%)</title><rect x="7.1569%" y="325" width="2.4561%" height="15" fill="rgb(213,79,30)" fg:x="10770" fg:w="3696"/><text x="7.4069%" y="335.50">[u..</text></g><g><title>[unknown] (3,494 samples, 2.32%)</title><rect x="7.2911%" y="309" width="2.3218%" height="15" fill="rgb(246,177,23)" fg:x="10972" fg:w="3494"/><text x="7.5411%" y="319.50">[..</text></g><g><title>[unknown] (3,036 samples, 2.02%)</title><rect x="7.5955%" y="293" width="2.0175%" height="15" fill="rgb(230,62,27)" fg:x="11430" fg:w="3036"/><text x="7.8455%" y="303.50">[..</text></g><g><title>[unknown] (2,140 samples, 1.42%)</title><rect x="8.1909%" y="277" width="1.4221%" height="15" fill="rgb(216,154,8)" fg:x="12326" fg:w="2140"/><text x="8.4409%" y="287.50"></text></g><g><title>[unknown] (1,557 samples, 1.03%)</title><rect x="8.5783%" y="261" width="1.0347%" height="15" fill="rgb(244,35,45)" fg:x="12909" fg:w="1557"/><text x="8.8283%" y="271.50"></text></g><g><title>[unknown] (1,160 samples, 0.77%)</title><rect x="8.8421%" y="245" width="0.7708%" height="15" fill="rgb(251,115,12)" fg:x="13306" fg:w="1160"/><text x="9.0921%" y="255.50"></text></g><g><title>[unknown] (276 samples, 0.18%)</title><rect x="9.4296%" y="229" width="0.1834%" height="15" fill="rgb(240,54,50)" fg:x="14190" fg:w="276"/><text x="9.6796%" y="239.50"></text></g><g><title>[unknown] (171 samples, 0.11%)</title><rect x="9.4993%" y="213" width="0.1136%" height="15" fill="rgb(233,84,52)" fg:x="14295" fg:w="171"/><text x="9.7493%" y="223.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="9.6023%" y="197" width="0.0106%" height="15" fill="rgb(207,117,47)" fg:x="14450" fg:w="16"/><text x="9.8523%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12,159 samples, 8.08%)</title><rect x="1.5390%" y="677" width="8.0799%" height="15" fill="rgb(249,43,39)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="687.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (12,159 samples, 8.08%)</title><rect x="1.5390%" y="661" width="8.0799%" height="15" fill="rgb(209,38,44)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="671.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12,159 samples, 8.08%)</title><rect x="1.5390%" y="645" width="8.0799%" height="15" fill="rgb(236,212,23)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="655.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (12,159 samples, 8.08%)</title><rect x="1.5390%" y="629" width="8.0799%" height="15" fill="rgb(242,79,21)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="639.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12,159 samples, 8.08%)</title><rect x="1.5390%" y="613" width="8.0799%" height="15" fill="rgb(211,96,35)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="623.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (12,159 samples, 8.08%)</title><rect x="1.5390%" y="597" width="8.0799%" height="15" fill="rgb(253,215,40)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="607.50">alloc::vec:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12,159 samples, 8.08%)</title><rect x="1.5390%" y="581" width="8.0799%" height="15" fill="rgb(211,81,21)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="591.50">core::iter:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,159 samples, 8.08%)</title><rect x="1.5390%" y="565" width="8.0799%" height="15" fill="rgb(208,190,38)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="575.50">&lt;core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12,159 samples, 8.08%)</title><rect x="1.5390%" y="549" width="8.0799%" height="15" fill="rgb(235,213,38)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="559.50">core::iter:..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12,159 samples, 8.08%)</title><rect x="1.5390%" y="533" width="8.0799%" height="15" fill="rgb(237,122,38)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="543.50">core::iter:..</text></g><g><title>one_brc::main::_{{closure}} (12,159 samples, 8.08%)</title><rect x="1.5390%" y="517" width="8.0799%" height="15" fill="rgb(244,218,35)" fg:x="2316" fg:w="12159"/><text x="1.7890%" y="527.50">one_brc::ma..</text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;&gt; (65 samples, 0.04%)</title><rect x="9.6196%" y="677" width="0.0432%" height="15" fill="rgb(240,68,47)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufreader::buffer::Buffer&gt; (65 samples, 0.04%)</title><rect x="9.6196%" y="661" width="0.0432%" height="15" fill="rgb(210,16,53)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::mem::maybe_uninit::MaybeUninit&lt;u8&gt;]&gt;&gt; (65 samples, 0.04%)</title><rect x="9.6196%" y="645" width="0.0432%" height="15" fill="rgb(235,124,12)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.04%)</title><rect x="9.6196%" y="629" width="0.0432%" height="15" fill="rgb(224,169,11)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (65 samples, 0.04%)</title><rect x="9.6196%" y="613" width="0.0432%" height="15" fill="rgb(250,166,2)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (65 samples, 0.04%)</title><rect x="9.6196%" y="597" width="0.0432%" height="15" fill="rgb(242,216,29)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="607.50"></text></g><g><title>__GI___libc_free (65 samples, 0.04%)</title><rect x="9.6196%" y="581" width="0.0432%" height="15" fill="rgb(230,116,27)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="591.50"></text></g><g><title>__GI___munmap (65 samples, 0.04%)</title><rect x="9.6196%" y="565" width="0.0432%" height="15" fill="rgb(228,99,48)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="575.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="549" width="0.0432%" height="15" fill="rgb(253,11,6)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="559.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="533" width="0.0432%" height="15" fill="rgb(247,143,39)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="543.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="517" width="0.0432%" height="15" fill="rgb(236,97,10)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="527.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="501" width="0.0432%" height="15" fill="rgb(233,208,19)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="511.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="485" width="0.0432%" height="15" fill="rgb(216,164,2)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="495.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="469" width="0.0432%" height="15" fill="rgb(220,129,5)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="479.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="453" width="0.0432%" height="15" fill="rgb(242,17,10)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="463.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="437" width="0.0432%" height="15" fill="rgb(242,107,0)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="447.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="421" width="0.0432%" height="15" fill="rgb(251,28,31)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="431.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="405" width="0.0432%" height="15" fill="rgb(233,223,10)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="415.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="389" width="0.0432%" height="15" fill="rgb(215,21,27)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="399.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="9.6196%" y="373" width="0.0432%" height="15" fill="rgb(232,23,21)" fg:x="14476" fg:w="65"/><text x="9.8696%" y="383.50"></text></g><g><title>[unknown] (45 samples, 0.03%)</title><rect x="9.6329%" y="357" width="0.0299%" height="15" fill="rgb(244,5,23)" fg:x="14496" fg:w="45"/><text x="9.8829%" y="367.50"></text></g><g><title>[unknown] (43 samples, 0.03%)</title><rect x="9.6342%" y="341" width="0.0286%" height="15" fill="rgb(226,81,46)" fg:x="14498" fg:w="43"/><text x="9.8842%" y="351.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="9.6369%" y="325" width="0.0259%" height="15" fill="rgb(247,70,30)" fg:x="14502" fg:w="39"/><text x="9.8869%" y="335.50"></text></g><g><title>[unknown] (36 samples, 0.02%)</title><rect x="9.6389%" y="309" width="0.0239%" height="15" fill="rgb(212,68,19)" fg:x="14505" fg:w="36"/><text x="9.8889%" y="319.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="9.6429%" y="293" width="0.0199%" height="15" fill="rgb(240,187,13)" fg:x="14511" fg:w="30"/><text x="9.8929%" y="303.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="9.6462%" y="277" width="0.0166%" height="15" fill="rgb(223,113,26)" fg:x="14516" fg:w="25"/><text x="9.8962%" y="287.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="9.6502%" y="261" width="0.0126%" height="15" fill="rgb(206,192,2)" fg:x="14522" fg:w="19"/><text x="9.9002%" y="271.50"></text></g><g><title>[unknown] (14,549 samples, 9.67%)</title><rect x="0.0007%" y="709" width="9.6681%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="14549"/><text x="0.2507%" y="719.50">[unknown]</text></g><g><title>one_brc::main (12,236 samples, 8.13%)</title><rect x="1.5377%" y="693" width="8.1311%" height="15" fill="rgb(247,173,49)" fg:x="2314" fg:w="12236"/><text x="1.7877%" y="703.50">one_brc::ma..</text></g><g><title>one-brc (14,552 samples, 9.67%)</title><rect x="0.0000%" y="725" width="9.6701%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="14552"/><text x="0.2500%" y="735.50">one-brc</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (96 samples, 0.06%)</title><rect x="9.7572%" y="677" width="0.0638%" height="15" fill="rgb(245,159,27)" fg:x="14683" fg:w="96"/><text x="10.0072%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (96 samples, 0.06%)</title><rect x="9.7572%" y="661" width="0.0638%" height="15" fill="rgb(245,172,44)" fg:x="14683" fg:w="96"/><text x="10.0072%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (96 samples, 0.06%)</title><rect x="9.7572%" y="645" width="0.0638%" height="15" fill="rgb(236,23,11)" fg:x="14683" fg:w="96"/><text x="10.0072%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (290 samples, 0.19%)</title><rect x="9.6735%" y="693" width="0.1927%" height="15" fill="rgb(205,117,38)" fg:x="14557" fg:w="290"/><text x="9.9235%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (68 samples, 0.05%)</title><rect x="9.8210%" y="677" width="0.0452%" height="15" fill="rgb(237,72,25)" fg:x="14779" fg:w="68"/><text x="10.0710%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (60 samples, 0.04%)</title><rect x="9.8662%" y="693" width="0.0399%" height="15" fill="rgb(244,70,9)" fg:x="14847" fg:w="60"/><text x="10.1162%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (84 samples, 0.06%)</title><rect x="9.9060%" y="693" width="0.0558%" height="15" fill="rgb(217,125,39)" fg:x="14907" fg:w="84"/><text x="10.1560%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (84 samples, 0.06%)</title><rect x="9.9060%" y="677" width="0.0558%" height="15" fill="rgb(235,36,10)" fg:x="14907" fg:w="84"/><text x="10.1560%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (84 samples, 0.06%)</title><rect x="9.9060%" y="661" width="0.0558%" height="15" fill="rgb(251,123,47)" fg:x="14907" fg:w="84"/><text x="10.1560%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (84 samples, 0.06%)</title><rect x="9.9060%" y="645" width="0.0558%" height="15" fill="rgb(221,13,13)" fg:x="14907" fg:w="84"/><text x="10.1560%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (84 samples, 0.06%)</title><rect x="9.9060%" y="629" width="0.0558%" height="15" fill="rgb(238,131,9)" fg:x="14907" fg:w="84"/><text x="10.1560%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (84 samples, 0.06%)</title><rect x="9.9060%" y="613" width="0.0558%" height="15" fill="rgb(211,50,8)" fg:x="14907" fg:w="84"/><text x="10.1560%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (84 samples, 0.06%)</title><rect x="9.9060%" y="597" width="0.0558%" height="15" fill="rgb(245,182,24)" fg:x="14907" fg:w="84"/><text x="10.1560%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (32 samples, 0.02%)</title><rect x="9.9406%" y="581" width="0.0213%" height="15" fill="rgb(242,14,37)" fg:x="14959" fg:w="32"/><text x="10.1906%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (67 samples, 0.04%)</title><rect x="9.9619%" y="693" width="0.0445%" height="15" fill="rgb(246,228,12)" fg:x="14991" fg:w="67"/><text x="10.2119%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (43 samples, 0.03%)</title><rect x="9.9778%" y="677" width="0.0286%" height="15" fill="rgb(213,55,15)" fg:x="15015" fg:w="43"/><text x="10.2278%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (19 samples, 0.01%)</title><rect x="10.0064%" y="693" width="0.0126%" height="15" fill="rgb(209,9,3)" fg:x="15058" fg:w="19"/><text x="10.2564%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (19 samples, 0.01%)</title><rect x="10.0064%" y="677" width="0.0126%" height="15" fill="rgb(230,59,30)" fg:x="15058" fg:w="19"/><text x="10.2564%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (19 samples, 0.01%)</title><rect x="10.0064%" y="661" width="0.0126%" height="15" fill="rgb(209,121,21)" fg:x="15058" fg:w="19"/><text x="10.2564%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (75 samples, 0.05%)</title><rect x="10.0190%" y="693" width="0.0498%" height="15" fill="rgb(220,109,13)" fg:x="15077" fg:w="75"/><text x="10.2690%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.02%)</title><rect x="10.0775%" y="677" width="0.0166%" height="15" fill="rgb(232,18,1)" fg:x="15165" fg:w="25"/><text x="10.3275%" y="687.50"></text></g><g><title>[anon] (665 samples, 0.44%)</title><rect x="9.6735%" y="709" width="0.4419%" height="15" fill="rgb(215,41,42)" fg:x="14557" fg:w="665"/><text x="9.9235%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (70 samples, 0.05%)</title><rect x="10.0688%" y="693" width="0.0465%" height="15" fill="rgb(224,123,36)" fg:x="15152" fg:w="70"/><text x="10.3188%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (32 samples, 0.02%)</title><rect x="10.0941%" y="677" width="0.0213%" height="15" fill="rgb(240,125,3)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (32 samples, 0.02%)</title><rect x="10.0941%" y="661" width="0.0213%" height="15" fill="rgb(205,98,50)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (32 samples, 0.02%)</title><rect x="10.0941%" y="645" width="0.0213%" height="15" fill="rgb(205,185,37)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (32 samples, 0.02%)</title><rect x="10.0941%" y="629" width="0.0213%" height="15" fill="rgb(238,207,15)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.02%)</title><rect x="10.0941%" y="613" width="0.0213%" height="15" fill="rgb(213,199,42)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (32 samples, 0.02%)</title><rect x="10.0941%" y="597" width="0.0213%" height="15" fill="rgb(235,201,11)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.02%)</title><rect x="10.0941%" y="581" width="0.0213%" height="15" fill="rgb(207,46,11)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (32 samples, 0.02%)</title><rect x="10.0941%" y="565" width="0.0213%" height="15" fill="rgb(241,35,35)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (32 samples, 0.02%)</title><rect x="10.0941%" y="549" width="0.0213%" height="15" fill="rgb(243,32,47)" fg:x="15190" fg:w="32"/><text x="10.3441%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (96 samples, 0.06%)</title><rect x="10.1154%" y="693" width="0.0638%" height="15" fill="rgb(247,202,23)" fg:x="15222" fg:w="96"/><text x="10.3654%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (186 samples, 0.12%)</title><rect x="10.1792%" y="693" width="0.1236%" height="15" fill="rgb(219,102,11)" fg:x="15318" fg:w="186"/><text x="10.4292%" y="703.50"></text></g><g><title>__memcmp_evex_movbe (23 samples, 0.02%)</title><rect x="10.3028%" y="693" width="0.0153%" height="15" fill="rgb(243,110,44)" fg:x="15504" fg:w="23"/><text x="10.5528%" y="703.50"></text></g><g><title>__round (26 samples, 0.02%)</title><rect x="10.3180%" y="693" width="0.0173%" height="15" fill="rgb(222,74,54)" fg:x="15527" fg:w="26"/><text x="10.5680%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (50 samples, 0.03%)</title><rect x="10.3353%" y="693" width="0.0332%" height="15" fill="rgb(216,99,12)" fg:x="15553" fg:w="50"/><text x="10.5853%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (97 samples, 0.06%)</title><rect x="10.3685%" y="693" width="0.0645%" height="15" fill="rgb(226,22,26)" fg:x="15603" fg:w="97"/><text x="10.6185%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (111 samples, 0.07%)</title><rect x="10.4330%" y="693" width="0.0738%" height="15" fill="rgb(217,163,10)" fg:x="15700" fg:w="111"/><text x="10.6830%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (26 samples, 0.02%)</title><rect x="10.4895%" y="677" width="0.0173%" height="15" fill="rgb(213,25,53)" fg:x="15785" fg:w="26"/><text x="10.7395%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (26 samples, 0.02%)</title><rect x="10.4895%" y="661" width="0.0173%" height="15" fill="rgb(252,105,26)" fg:x="15785" fg:w="26"/><text x="10.7395%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (125 samples, 0.08%)</title><rect x="10.5068%" y="693" width="0.0831%" height="15" fill="rgb(220,39,43)" fg:x="15811" fg:w="125"/><text x="10.7568%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="10.5898%" y="645" width="0.0332%" height="15" fill="rgb(229,68,48)" fg:x="15936" fg:w="50"/><text x="10.8398%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="10.5898%" y="629" width="0.0332%" height="15" fill="rgb(252,8,32)" fg:x="15936" fg:w="50"/><text x="10.8398%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="10.5898%" y="613" width="0.0332%" height="15" fill="rgb(223,20,43)" fg:x="15936" fg:w="50"/><text x="10.8398%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (50 samples, 0.03%)</title><rect x="10.5898%" y="597" width="0.0332%" height="15" fill="rgb(229,81,49)" fg:x="15936" fg:w="50"/><text x="10.8398%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (51 samples, 0.03%)</title><rect x="10.6231%" y="613" width="0.0339%" height="15" fill="rgb(236,28,36)" fg:x="15986" fg:w="51"/><text x="10.8731%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (54 samples, 0.04%)</title><rect x="10.6569%" y="613" width="0.0359%" height="15" fill="rgb(249,185,26)" fg:x="16037" fg:w="54"/><text x="10.9069%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (61 samples, 0.04%)</title><rect x="10.6928%" y="613" width="0.0405%" height="15" fill="rgb(249,174,33)" fg:x="16091" fg:w="61"/><text x="10.9428%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (61 samples, 0.04%)</title><rect x="10.6928%" y="597" width="0.0405%" height="15" fill="rgb(233,201,37)" fg:x="16091" fg:w="61"/><text x="10.9428%" y="607.50"></text></g><g><title>[unknown] (957 samples, 0.64%)</title><rect x="10.1154%" y="709" width="0.6359%" height="15" fill="rgb(221,78,26)" fg:x="15222" fg:w="957"/><text x="10.3654%" y="719.50"></text></g><g><title>one_brc::process_lines (243 samples, 0.16%)</title><rect x="10.5898%" y="693" width="0.1615%" height="15" fill="rgb(250,127,30)" fg:x="15936" fg:w="243"/><text x="10.8398%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (243 samples, 0.16%)</title><rect x="10.5898%" y="677" width="0.1615%" height="15" fill="rgb(230,49,44)" fg:x="15936" fg:w="243"/><text x="10.8398%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (243 samples, 0.16%)</title><rect x="10.5898%" y="661" width="0.1615%" height="15" fill="rgb(229,67,23)" fg:x="15936" fg:w="243"/><text x="10.8398%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (193 samples, 0.13%)</title><rect x="10.6231%" y="645" width="0.1283%" height="15" fill="rgb(249,83,47)" fg:x="15986" fg:w="193"/><text x="10.8731%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (193 samples, 0.13%)</title><rect x="10.6231%" y="629" width="0.1283%" height="15" fill="rgb(215,43,3)" fg:x="15986" fg:w="193"/><text x="10.8731%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (27 samples, 0.02%)</title><rect x="10.7334%" y="613" width="0.0179%" height="15" fill="rgb(238,154,13)" fg:x="16152" fg:w="27"/><text x="10.9834%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (28 samples, 0.02%)</title><rect x="10.9241%" y="389" width="0.0186%" height="15" fill="rgb(219,56,2)" fg:x="16439" fg:w="28"/><text x="11.1741%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (28 samples, 0.02%)</title><rect x="10.9241%" y="373" width="0.0186%" height="15" fill="rgb(233,0,4)" fg:x="16439" fg:w="28"/><text x="11.1741%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (28 samples, 0.02%)</title><rect x="10.9241%" y="357" width="0.0186%" height="15" fill="rgb(235,30,7)" fg:x="16439" fg:w="28"/><text x="11.1741%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (156 samples, 0.10%)</title><rect x="10.9427%" y="389" width="0.1037%" height="15" fill="rgb(250,79,13)" fg:x="16467" fg:w="156"/><text x="11.1927%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (156 samples, 0.10%)</title><rect x="10.9427%" y="373" width="0.1037%" height="15" fill="rgb(211,146,34)" fg:x="16467" fg:w="156"/><text x="11.1927%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (156 samples, 0.10%)</title><rect x="10.9427%" y="357" width="0.1037%" height="15" fill="rgb(228,22,38)" fg:x="16467" fg:w="156"/><text x="11.1927%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (154 samples, 0.10%)</title><rect x="10.9440%" y="341" width="0.1023%" height="15" fill="rgb(235,168,5)" fg:x="16469" fg:w="154"/><text x="11.1940%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (71 samples, 0.05%)</title><rect x="11.0464%" y="389" width="0.0472%" height="15" fill="rgb(221,155,16)" fg:x="16623" fg:w="71"/><text x="11.2964%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (71 samples, 0.05%)</title><rect x="11.0464%" y="373" width="0.0472%" height="15" fill="rgb(215,215,53)" fg:x="16623" fg:w="71"/><text x="11.2964%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (29 samples, 0.02%)</title><rect x="11.1872%" y="357" width="0.0193%" height="15" fill="rgb(223,4,10)" fg:x="16835" fg:w="29"/><text x="11.4372%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (33 samples, 0.02%)</title><rect x="11.2065%" y="357" width="0.0219%" height="15" fill="rgb(234,103,6)" fg:x="16864" fg:w="33"/><text x="11.4565%" y="367.50"></text></g><g><title>core::ptr::align_offset (33 samples, 0.02%)</title><rect x="11.2065%" y="341" width="0.0219%" height="15" fill="rgb(227,97,0)" fg:x="16864" fg:w="33"/><text x="11.4565%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (76 samples, 0.05%)</title><rect x="11.2284%" y="357" width="0.0505%" height="15" fill="rgb(234,150,53)" fg:x="16897" fg:w="76"/><text x="11.4784%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,300 samples, 0.86%)</title><rect x="10.7985%" y="405" width="0.8639%" height="15" fill="rgb(228,201,54)" fg:x="16250" fg:w="1300"/><text x="11.0485%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (856 samples, 0.57%)</title><rect x="11.0935%" y="389" width="0.5688%" height="15" fill="rgb(222,22,37)" fg:x="16694" fg:w="856"/><text x="11.3435%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (832 samples, 0.55%)</title><rect x="11.1095%" y="373" width="0.5529%" height="15" fill="rgb(237,53,32)" fg:x="16718" fg:w="832"/><text x="11.3595%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (577 samples, 0.38%)</title><rect x="11.2789%" y="357" width="0.3834%" height="15" fill="rgb(233,25,53)" fg:x="16973" fg:w="577"/><text x="11.5289%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,407 samples, 0.93%)</title><rect x="10.7520%" y="437" width="0.9350%" height="15" fill="rgb(210,40,34)" fg:x="16180" fg:w="1407"/><text x="11.0020%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,407 samples, 0.93%)</title><rect x="10.7520%" y="421" width="0.9350%" height="15" fill="rgb(241,220,44)" fg:x="16180" fg:w="1407"/><text x="11.0020%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (37 samples, 0.02%)</title><rect x="11.6624%" y="405" width="0.0246%" height="15" fill="rgb(235,28,35)" fg:x="17550" fg:w="37"/><text x="11.9124%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (37 samples, 0.02%)</title><rect x="11.6624%" y="389" width="0.0246%" height="15" fill="rgb(210,56,17)" fg:x="17550" fg:w="37"/><text x="11.9124%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,542 samples, 1.02%)</title><rect x="10.7520%" y="469" width="1.0247%" height="15" fill="rgb(224,130,29)" fg:x="16180" fg:w="1542"/><text x="11.0020%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,542 samples, 1.02%)</title><rect x="10.7520%" y="453" width="1.0247%" height="15" fill="rgb(235,212,8)" fg:x="16180" fg:w="1542"/><text x="11.0020%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (135 samples, 0.09%)</title><rect x="11.6870%" y="437" width="0.0897%" height="15" fill="rgb(223,33,50)" fg:x="17587" fg:w="135"/><text x="11.9370%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (135 samples, 0.09%)</title><rect x="11.6870%" y="421" width="0.0897%" height="15" fill="rgb(219,149,13)" fg:x="17587" fg:w="135"/><text x="11.9370%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (135 samples, 0.09%)</title><rect x="11.6870%" y="405" width="0.0897%" height="15" fill="rgb(250,156,29)" fg:x="17587" fg:w="135"/><text x="11.9370%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (135 samples, 0.09%)</title><rect x="11.6870%" y="389" width="0.0897%" height="15" fill="rgb(216,193,19)" fg:x="17587" fg:w="135"/><text x="11.9370%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (74 samples, 0.05%)</title><rect x="11.7275%" y="373" width="0.0492%" height="15" fill="rgb(216,135,14)" fg:x="17648" fg:w="74"/><text x="11.9775%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (74 samples, 0.05%)</title><rect x="11.7275%" y="357" width="0.0492%" height="15" fill="rgb(241,47,5)" fg:x="17648" fg:w="74"/><text x="11.9775%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (74 samples, 0.05%)</title><rect x="11.7275%" y="341" width="0.0492%" height="15" fill="rgb(233,42,35)" fg:x="17648" fg:w="74"/><text x="11.9775%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (74 samples, 0.05%)</title><rect x="11.7275%" y="325" width="0.0492%" height="15" fill="rgb(231,13,6)" fg:x="17648" fg:w="74"/><text x="11.9775%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (74 samples, 0.05%)</title><rect x="11.7275%" y="309" width="0.0492%" height="15" fill="rgb(207,181,40)" fg:x="17648" fg:w="74"/><text x="11.9775%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (33 samples, 0.02%)</title><rect x="11.7966%" y="437" width="0.0219%" height="15" fill="rgb(254,173,49)" fg:x="17752" fg:w="33"/><text x="12.0466%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (31 samples, 0.02%)</title><rect x="11.8185%" y="405" width="0.0206%" height="15" fill="rgb(221,1,38)" fg:x="17785" fg:w="31"/><text x="12.0685%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (81 samples, 0.05%)</title><rect x="11.9242%" y="373" width="0.0538%" height="15" fill="rgb(206,124,46)" fg:x="17944" fg:w="81"/><text x="12.1742%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (85 samples, 0.06%)</title><rect x="11.9780%" y="373" width="0.0565%" height="15" fill="rgb(249,21,11)" fg:x="18025" fg:w="85"/><text x="12.2280%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (249 samples, 0.17%)</title><rect x="11.8910%" y="389" width="0.1655%" height="15" fill="rgb(222,201,40)" fg:x="17894" fg:w="249"/><text x="12.1410%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (32 samples, 0.02%)</title><rect x="12.0352%" y="373" width="0.0213%" height="15" fill="rgb(235,61,29)" fg:x="18111" fg:w="32"/><text x="12.2852%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (107 samples, 0.07%)</title><rect x="12.0897%" y="373" width="0.0711%" height="15" fill="rgb(219,207,3)" fg:x="18193" fg:w="107"/><text x="12.3397%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (27 samples, 0.02%)</title><rect x="12.4080%" y="325" width="0.0179%" height="15" fill="rgb(222,56,46)" fg:x="18672" fg:w="27"/><text x="12.6580%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.02%)</title><rect x="12.4259%" y="309" width="0.0173%" height="15" fill="rgb(239,76,54)" fg:x="18699" fg:w="26"/><text x="12.6759%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (280 samples, 0.19%)</title><rect x="12.2764%" y="341" width="0.1861%" height="15" fill="rgb(231,124,27)" fg:x="18474" fg:w="280"/><text x="12.5264%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (55 samples, 0.04%)</title><rect x="12.4259%" y="325" width="0.0365%" height="15" fill="rgb(249,195,6)" fg:x="18699" fg:w="55"/><text x="12.6759%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (29 samples, 0.02%)</title><rect x="12.4432%" y="309" width="0.0193%" height="15" fill="rgb(237,174,47)" fg:x="18725" fg:w="29"/><text x="12.6932%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (973 samples, 0.65%)</title><rect x="11.8185%" y="437" width="0.6466%" height="15" fill="rgb(206,201,31)" fg:x="17785" fg:w="973"/><text x="12.0685%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (973 samples, 0.65%)</title><rect x="11.8185%" y="421" width="0.6466%" height="15" fill="rgb(231,57,52)" fg:x="17785" fg:w="973"/><text x="12.0685%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (942 samples, 0.63%)</title><rect x="11.8391%" y="405" width="0.6260%" height="15" fill="rgb(248,177,22)" fg:x="17816" fg:w="942"/><text x="12.0891%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (615 samples, 0.41%)</title><rect x="12.0564%" y="389" width="0.4087%" height="15" fill="rgb(215,211,37)" fg:x="18143" fg:w="615"/><text x="12.3064%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (458 samples, 0.30%)</title><rect x="12.1608%" y="373" width="0.3044%" height="15" fill="rgb(241,128,51)" fg:x="18300" fg:w="458"/><text x="12.4108%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (379 samples, 0.25%)</title><rect x="12.2133%" y="357" width="0.2519%" height="15" fill="rgb(227,165,31)" fg:x="18379" fg:w="379"/><text x="12.4633%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (51 samples, 0.03%)</title><rect x="12.4804%" y="421" width="0.0339%" height="15" fill="rgb(228,167,24)" fg:x="18781" fg:w="51"/><text x="12.7304%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (31 samples, 0.02%)</title><rect x="12.6572%" y="405" width="0.0206%" height="15" fill="rgb(228,143,12)" fg:x="19047" fg:w="31"/><text x="12.9072%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (31 samples, 0.02%)</title><rect x="12.6572%" y="389" width="0.0206%" height="15" fill="rgb(249,149,8)" fg:x="19047" fg:w="31"/><text x="12.9072%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.02%)</title><rect x="12.6572%" y="373" width="0.0206%" height="15" fill="rgb(243,35,44)" fg:x="19047" fg:w="31"/><text x="12.9072%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (308 samples, 0.20%)</title><rect x="12.6778%" y="405" width="0.2047%" height="15" fill="rgb(246,89,9)" fg:x="19078" fg:w="308"/><text x="12.9278%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (308 samples, 0.20%)</title><rect x="12.6778%" y="389" width="0.2047%" height="15" fill="rgb(233,213,13)" fg:x="19078" fg:w="308"/><text x="12.9278%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (308 samples, 0.20%)</title><rect x="12.6778%" y="373" width="0.2047%" height="15" fill="rgb(233,141,41)" fg:x="19078" fg:w="308"/><text x="12.9278%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (291 samples, 0.19%)</title><rect x="12.6891%" y="357" width="0.1934%" height="15" fill="rgb(239,167,4)" fg:x="19095" fg:w="291"/><text x="12.9391%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (49 samples, 0.03%)</title><rect x="12.8824%" y="405" width="0.0326%" height="15" fill="rgb(209,217,16)" fg:x="19386" fg:w="49"/><text x="13.1324%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (49 samples, 0.03%)</title><rect x="12.8824%" y="389" width="0.0326%" height="15" fill="rgb(219,88,35)" fg:x="19386" fg:w="49"/><text x="13.1324%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (152 samples, 0.10%)</title><rect x="12.9216%" y="389" width="0.1010%" height="15" fill="rgb(220,193,23)" fg:x="19445" fg:w="152"/><text x="13.1716%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (117 samples, 0.08%)</title><rect x="12.9449%" y="373" width="0.0777%" height="15" fill="rgb(230,90,52)" fg:x="19480" fg:w="117"/><text x="13.1949%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,164 samples, 0.77%)</title><rect x="12.4651%" y="437" width="0.7735%" height="15" fill="rgb(252,106,19)" fg:x="18758" fg:w="1164"/><text x="12.7151%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,088 samples, 0.72%)</title><rect x="12.5156%" y="421" width="0.7230%" height="15" fill="rgb(206,74,20)" fg:x="18834" fg:w="1088"/><text x="12.7656%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (487 samples, 0.32%)</title><rect x="12.9150%" y="405" width="0.3236%" height="15" fill="rgb(230,138,44)" fg:x="19435" fg:w="487"/><text x="13.1650%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (325 samples, 0.22%)</title><rect x="13.0226%" y="389" width="0.2160%" height="15" fill="rgb(235,182,43)" fg:x="19597" fg:w="325"/><text x="13.2726%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (199 samples, 0.13%)</title><rect x="13.2386%" y="437" width="0.1322%" height="15" fill="rgb(242,16,51)" fg:x="19922" fg:w="199"/><text x="13.4886%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (129 samples, 0.09%)</title><rect x="13.2851%" y="421" width="0.0857%" height="15" fill="rgb(248,9,4)" fg:x="19992" fg:w="129"/><text x="13.5351%" y="431.50"></text></g><g><title>__round (129 samples, 0.09%)</title><rect x="13.2851%" y="405" width="0.0857%" height="15" fill="rgb(210,31,22)" fg:x="19992" fg:w="129"/><text x="13.5351%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (44 samples, 0.03%)</title><rect x="13.4313%" y="389" width="0.0292%" height="15" fill="rgb(239,54,39)" fg:x="20212" fg:w="44"/><text x="13.6813%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (177 samples, 0.12%)</title><rect x="13.3709%" y="437" width="0.1176%" height="15" fill="rgb(230,99,41)" fg:x="20121" fg:w="177"/><text x="13.6209%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (177 samples, 0.12%)</title><rect x="13.3709%" y="421" width="0.1176%" height="15" fill="rgb(253,106,12)" fg:x="20121" fg:w="177"/><text x="13.6209%" y="431.50"></text></g><g><title>one_brc::Measurement::record (177 samples, 0.12%)</title><rect x="13.3709%" y="405" width="0.1176%" height="15" fill="rgb(213,46,41)" fg:x="20121" fg:w="177"/><text x="13.6209%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (42 samples, 0.03%)</title><rect x="13.4606%" y="389" width="0.0279%" height="15" fill="rgb(215,133,35)" fg:x="20256" fg:w="42"/><text x="13.7106%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (56 samples, 0.04%)</title><rect x="13.6672%" y="309" width="0.0372%" height="15" fill="rgb(213,28,5)" fg:x="20567" fg:w="56"/><text x="13.9172%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 0.08%)</title><rect x="13.6407%" y="325" width="0.0811%" height="15" fill="rgb(215,77,49)" fg:x="20527" fg:w="122"/><text x="13.8907%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.02%)</title><rect x="13.7044%" y="309" width="0.0173%" height="15" fill="rgb(248,100,22)" fg:x="20623" fg:w="26"/><text x="13.9544%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (154 samples, 0.10%)</title><rect x="13.7623%" y="309" width="0.1023%" height="15" fill="rgb(208,67,9)" fg:x="20710" fg:w="154"/><text x="14.0123%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (481 samples, 0.32%)</title><rect x="13.5981%" y="373" width="0.3196%" height="15" fill="rgb(219,133,21)" fg:x="20463" fg:w="481"/><text x="13.8481%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (481 samples, 0.32%)</title><rect x="13.5981%" y="357" width="0.3196%" height="15" fill="rgb(246,46,29)" fg:x="20463" fg:w="481"/><text x="13.8481%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (481 samples, 0.32%)</title><rect x="13.5981%" y="341" width="0.3196%" height="15" fill="rgb(246,185,52)" fg:x="20463" fg:w="481"/><text x="13.8481%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (295 samples, 0.20%)</title><rect x="13.7217%" y="325" width="0.1960%" height="15" fill="rgb(252,136,11)" fg:x="20649" fg:w="295"/><text x="13.9717%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (80 samples, 0.05%)</title><rect x="13.8646%" y="309" width="0.0532%" height="15" fill="rgb(219,138,53)" fg:x="20864" fg:w="80"/><text x="14.1146%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (49 samples, 0.03%)</title><rect x="13.9178%" y="373" width="0.0326%" height="15" fill="rgb(211,51,23)" fg:x="20944" fg:w="49"/><text x="14.1678%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (22 samples, 0.01%)</title><rect x="13.9357%" y="357" width="0.0146%" height="15" fill="rgb(247,221,28)" fg:x="20971" fg:w="22"/><text x="14.1857%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (22 samples, 0.01%)</title><rect x="13.9357%" y="341" width="0.0146%" height="15" fill="rgb(251,222,45)" fg:x="20971" fg:w="22"/><text x="14.1857%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (22 samples, 0.01%)</title><rect x="13.9357%" y="325" width="0.0146%" height="15" fill="rgb(217,162,53)" fg:x="20971" fg:w="22"/><text x="14.1857%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.01%)</title><rect x="14.0653%" y="245" width="0.0126%" height="15" fill="rgb(229,93,14)" fg:x="21166" fg:w="19"/><text x="14.3153%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (67 samples, 0.04%)</title><rect x="14.0434%" y="261" width="0.0445%" height="15" fill="rgb(209,67,49)" fg:x="21133" fg:w="67"/><text x="14.2934%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (28 samples, 0.02%)</title><rect x="14.0885%" y="261" width="0.0186%" height="15" fill="rgb(213,87,29)" fg:x="21201" fg:w="28"/><text x="14.3385%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (361 samples, 0.24%)</title><rect x="13.9649%" y="277" width="0.2399%" height="15" fill="rgb(205,151,52)" fg:x="21015" fg:w="361"/><text x="14.2149%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (147 samples, 0.10%)</title><rect x="14.1071%" y="261" width="0.0977%" height="15" fill="rgb(253,215,39)" fg:x="21229" fg:w="147"/><text x="14.3571%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (46 samples, 0.03%)</title><rect x="14.2048%" y="277" width="0.0306%" height="15" fill="rgb(221,220,41)" fg:x="21376" fg:w="46"/><text x="14.4548%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (25 samples, 0.02%)</title><rect x="14.3145%" y="245" width="0.0166%" height="15" fill="rgb(218,133,21)" fg:x="21541" fg:w="25"/><text x="14.5645%" y="255.50"></text></g><g><title>core::cmp::min (21 samples, 0.01%)</title><rect x="14.3344%" y="245" width="0.0140%" height="15" fill="rgb(221,193,43)" fg:x="21571" fg:w="21"/><text x="14.5844%" y="255.50"></text></g><g><title>core::cmp::Ord::min (21 samples, 0.01%)</title><rect x="14.3344%" y="229" width="0.0140%" height="15" fill="rgb(240,128,52)" fg:x="21571" fg:w="21"/><text x="14.5844%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (21 samples, 0.01%)</title><rect x="14.3344%" y="213" width="0.0140%" height="15" fill="rgb(253,114,12)" fg:x="21571" fg:w="21"/><text x="14.5844%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (272 samples, 0.18%)</title><rect x="14.2487%" y="261" width="0.1808%" height="15" fill="rgb(215,223,47)" fg:x="21442" fg:w="272"/><text x="14.4987%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (122 samples, 0.08%)</title><rect x="14.3484%" y="245" width="0.0811%" height="15" fill="rgb(248,225,23)" fg:x="21592" fg:w="122"/><text x="14.5984%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,280 samples, 0.85%)</title><rect x="13.5822%" y="405" width="0.8506%" height="15" fill="rgb(250,108,0)" fg:x="20439" fg:w="1280"/><text x="13.8322%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,280 samples, 0.85%)</title><rect x="13.5822%" y="389" width="0.8506%" height="15" fill="rgb(228,208,7)" fg:x="20439" fg:w="1280"/><text x="13.8322%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (725 samples, 0.48%)</title><rect x="13.9510%" y="373" width="0.4818%" height="15" fill="rgb(244,45,10)" fg:x="20994" fg:w="725"/><text x="14.2010%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (704 samples, 0.47%)</title><rect x="13.9649%" y="357" width="0.4678%" height="15" fill="rgb(207,125,25)" fg:x="21015" fg:w="704"/><text x="14.2149%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (704 samples, 0.47%)</title><rect x="13.9649%" y="341" width="0.4678%" height="15" fill="rgb(210,195,18)" fg:x="21015" fg:w="704"/><text x="14.2149%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (704 samples, 0.47%)</title><rect x="13.9649%" y="325" width="0.4678%" height="15" fill="rgb(249,80,12)" fg:x="21015" fg:w="704"/><text x="14.2149%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (704 samples, 0.47%)</title><rect x="13.9649%" y="309" width="0.4678%" height="15" fill="rgb(221,65,9)" fg:x="21015" fg:w="704"/><text x="14.2149%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (704 samples, 0.47%)</title><rect x="13.9649%" y="293" width="0.4678%" height="15" fill="rgb(235,49,36)" fg:x="21015" fg:w="704"/><text x="14.2149%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (297 samples, 0.20%)</title><rect x="14.2354%" y="277" width="0.1974%" height="15" fill="rgb(225,32,20)" fg:x="21422" fg:w="297"/><text x="14.4854%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.02%)</title><rect x="14.4620%" y="373" width="0.0213%" height="15" fill="rgb(215,141,46)" fg:x="21763" fg:w="32"/><text x="14.7120%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (44 samples, 0.03%)</title><rect x="14.5032%" y="357" width="0.0292%" height="15" fill="rgb(250,160,47)" fg:x="21825" fg:w="44"/><text x="14.7532%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (44 samples, 0.03%)</title><rect x="14.5032%" y="341" width="0.0292%" height="15" fill="rgb(216,222,40)" fg:x="21825" fg:w="44"/><text x="14.7532%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (44 samples, 0.03%)</title><rect x="14.5032%" y="325" width="0.0292%" height="15" fill="rgb(234,217,39)" fg:x="21825" fg:w="44"/><text x="14.7532%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (719 samples, 0.48%)</title><rect x="14.4833%" y="373" width="0.4778%" height="15" fill="rgb(207,178,40)" fg:x="21795" fg:w="719"/><text x="14.7333%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (645 samples, 0.43%)</title><rect x="14.5324%" y="357" width="0.4286%" height="15" fill="rgb(221,136,13)" fg:x="21869" fg:w="645"/><text x="14.7824%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (645 samples, 0.43%)</title><rect x="14.5324%" y="341" width="0.4286%" height="15" fill="rgb(249,199,10)" fg:x="21869" fg:w="645"/><text x="14.7824%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (645 samples, 0.43%)</title><rect x="14.5324%" y="325" width="0.4286%" height="15" fill="rgb(249,222,13)" fg:x="21869" fg:w="645"/><text x="14.7824%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (645 samples, 0.43%)</title><rect x="14.5324%" y="309" width="0.4286%" height="15" fill="rgb(244,185,38)" fg:x="21869" fg:w="645"/><text x="14.7824%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (645 samples, 0.43%)</title><rect x="14.5324%" y="293" width="0.4286%" height="15" fill="rgb(236,202,9)" fg:x="21869" fg:w="645"/><text x="14.7824%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (645 samples, 0.43%)</title><rect x="14.5324%" y="277" width="0.4286%" height="15" fill="rgb(250,229,37)" fg:x="21869" fg:w="645"/><text x="14.7824%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (389 samples, 0.26%)</title><rect x="14.7026%" y="261" width="0.2585%" height="15" fill="rgb(206,174,23)" fg:x="22125" fg:w="389"/><text x="14.9526%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (81 samples, 0.05%)</title><rect x="14.9611%" y="373" width="0.0538%" height="15" fill="rgb(211,33,43)" fg:x="22514" fg:w="81"/><text x="15.2111%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.02%)</title><rect x="15.0149%" y="341" width="0.0239%" height="15" fill="rgb(245,58,50)" fg:x="22595" fg:w="36"/><text x="15.2649%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (40 samples, 0.03%)</title><rect x="15.0149%" y="373" width="0.0266%" height="15" fill="rgb(244,68,36)" fg:x="22595" fg:w="40"/><text x="15.2649%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (40 samples, 0.03%)</title><rect x="15.0149%" y="357" width="0.0266%" height="15" fill="rgb(232,229,15)" fg:x="22595" fg:w="40"/><text x="15.2649%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="15.0415%" y="373" width="0.0106%" height="15" fill="rgb(254,30,23)" fg:x="22635" fg:w="16"/><text x="15.2915%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="15.0415%" y="357" width="0.0106%" height="15" fill="rgb(235,160,14)" fg:x="22635" fg:w="16"/><text x="15.2915%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,332 samples, 1.55%)</title><rect x="13.5031%" y="421" width="1.5497%" height="15" fill="rgb(212,155,44)" fg:x="20320" fg:w="2332"/><text x="13.7531%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (933 samples, 0.62%)</title><rect x="14.4328%" y="405" width="0.6200%" height="15" fill="rgb(226,2,50)" fg:x="21719" fg:w="933"/><text x="14.6828%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (895 samples, 0.59%)</title><rect x="14.4580%" y="389" width="0.5947%" height="15" fill="rgb(234,177,6)" fg:x="21757" fg:w="895"/><text x="14.7080%" y="399.50"></text></g><g><title>worker-0 (8,121 samples, 5.40%)</title><rect x="9.6735%" y="725" width="5.3966%" height="15" fill="rgb(217,24,9)" fg:x="14557" fg:w="8121"/><text x="9.9235%" y="735.50">worker-0</text></g><g><title>__clone3 (6,499 samples, 4.32%)</title><rect x="10.7513%" y="709" width="4.3187%" height="15" fill="rgb(220,13,46)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="719.50">__clo..</text></g><g><title>start_thread (6,499 samples, 4.32%)</title><rect x="10.7513%" y="693" width="4.3187%" height="15" fill="rgb(239,221,27)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,499 samples, 4.32%)</title><rect x="10.7513%" y="677" width="4.3187%" height="15" fill="rgb(222,198,25)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,499 samples, 4.32%)</title><rect x="10.7513%" y="661" width="4.3187%" height="15" fill="rgb(211,99,13)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,499 samples, 4.32%)</title><rect x="10.7513%" y="645" width="4.3187%" height="15" fill="rgb(232,111,31)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="655.50">std::..</text></g><g><title>std::panic::catch_unwind (6,499 samples, 4.32%)</title><rect x="10.7513%" y="629" width="4.3187%" height="15" fill="rgb(245,82,37)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,499 samples, 4.32%)</title><rect x="10.7513%" y="613" width="4.3187%" height="15" fill="rgb(227,149,46)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,499 samples, 4.32%)</title><rect x="10.7513%" y="597" width="4.3187%" height="15" fill="rgb(218,36,50)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,499 samples, 4.32%)</title><rect x="10.7513%" y="581" width="4.3187%" height="15" fill="rgb(226,80,48)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,499 samples, 4.32%)</title><rect x="10.7513%" y="565" width="4.3187%" height="15" fill="rgb(238,224,15)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,499 samples, 4.32%)</title><rect x="10.7513%" y="549" width="4.3187%" height="15" fill="rgb(241,136,10)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,499 samples, 4.32%)</title><rect x="10.7513%" y="533" width="4.3187%" height="15" fill="rgb(208,32,45)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,499 samples, 4.32%)</title><rect x="10.7513%" y="517" width="4.3187%" height="15" fill="rgb(207,135,9)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="527.50">one_b..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,499 samples, 4.32%)</title><rect x="10.7513%" y="501" width="4.3187%" height="15" fill="rgb(206,86,44)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,499 samples, 4.32%)</title><rect x="10.7513%" y="485" width="4.3187%" height="15" fill="rgb(245,177,15)" fg:x="16179" fg:w="6499"/><text x="11.0013%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,956 samples, 3.29%)</title><rect x="11.7767%" y="469" width="3.2934%" height="15" fill="rgb(206,64,50)" fg:x="17722" fg:w="4956"/><text x="12.0267%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (4,956 samples, 3.29%)</title><rect x="11.7767%" y="453" width="3.2934%" height="15" fill="rgb(234,36,40)" fg:x="17722" fg:w="4956"/><text x="12.0267%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,379 samples, 1.58%)</title><rect x="13.4891%" y="437" width="1.5809%" height="15" fill="rgb(213,64,8)" fg:x="20299" fg:w="2379"/><text x="13.7391%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (26 samples, 0.02%)</title><rect x="15.0528%" y="421" width="0.0173%" height="15" fill="rgb(210,75,36)" fg:x="22652" fg:w="26"/><text x="15.3028%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (103 samples, 0.07%)</title><rect x="15.1524%" y="677" width="0.0684%" height="15" fill="rgb(229,88,21)" fg:x="22802" fg:w="103"/><text x="15.4024%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (103 samples, 0.07%)</title><rect x="15.1524%" y="661" width="0.0684%" height="15" fill="rgb(252,204,47)" fg:x="22802" fg:w="103"/><text x="15.4024%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (103 samples, 0.07%)</title><rect x="15.1524%" y="645" width="0.0684%" height="15" fill="rgb(208,77,27)" fg:x="22802" fg:w="103"/><text x="15.4024%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (303 samples, 0.20%)</title><rect x="15.0700%" y="693" width="0.2014%" height="15" fill="rgb(221,76,26)" fg:x="22678" fg:w="303"/><text x="15.3200%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (76 samples, 0.05%)</title><rect x="15.2209%" y="677" width="0.0505%" height="15" fill="rgb(225,139,18)" fg:x="22905" fg:w="76"/><text x="15.4709%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (94 samples, 0.06%)</title><rect x="15.2714%" y="693" width="0.0625%" height="15" fill="rgb(230,137,11)" fg:x="22981" fg:w="94"/><text x="15.5214%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (156 samples, 0.10%)</title><rect x="15.3339%" y="693" width="0.1037%" height="15" fill="rgb(212,28,1)" fg:x="23075" fg:w="156"/><text x="15.5839%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (85 samples, 0.06%)</title><rect x="15.3810%" y="677" width="0.0565%" height="15" fill="rgb(248,164,17)" fg:x="23146" fg:w="85"/><text x="15.6310%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (85 samples, 0.06%)</title><rect x="15.3810%" y="661" width="0.0565%" height="15" fill="rgb(222,171,42)" fg:x="23146" fg:w="85"/><text x="15.6310%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (85 samples, 0.06%)</title><rect x="15.3810%" y="645" width="0.0565%" height="15" fill="rgb(243,84,45)" fg:x="23146" fg:w="85"/><text x="15.6310%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (85 samples, 0.06%)</title><rect x="15.3810%" y="629" width="0.0565%" height="15" fill="rgb(252,49,23)" fg:x="23146" fg:w="85"/><text x="15.6310%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (85 samples, 0.06%)</title><rect x="15.3810%" y="613" width="0.0565%" height="15" fill="rgb(215,19,7)" fg:x="23146" fg:w="85"/><text x="15.6310%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (85 samples, 0.06%)</title><rect x="15.3810%" y="597" width="0.0565%" height="15" fill="rgb(238,81,41)" fg:x="23146" fg:w="85"/><text x="15.6310%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (32 samples, 0.02%)</title><rect x="15.4163%" y="581" width="0.0213%" height="15" fill="rgb(210,199,37)" fg:x="23199" fg:w="32"/><text x="15.6663%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (103 samples, 0.07%)</title><rect x="15.4375%" y="693" width="0.0684%" height="15" fill="rgb(244,192,49)" fg:x="23231" fg:w="103"/><text x="15.6875%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (68 samples, 0.05%)</title><rect x="15.4608%" y="677" width="0.0452%" height="15" fill="rgb(226,211,11)" fg:x="23266" fg:w="68"/><text x="15.7108%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (28 samples, 0.02%)</title><rect x="15.5060%" y="693" width="0.0186%" height="15" fill="rgb(236,162,54)" fg:x="23334" fg:w="28"/><text x="15.7560%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (28 samples, 0.02%)</title><rect x="15.5060%" y="677" width="0.0186%" height="15" fill="rgb(220,229,9)" fg:x="23334" fg:w="28"/><text x="15.7560%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (28 samples, 0.02%)</title><rect x="15.5060%" y="661" width="0.0186%" height="15" fill="rgb(250,87,22)" fg:x="23334" fg:w="28"/><text x="15.7560%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (95 samples, 0.06%)</title><rect x="15.5246%" y="693" width="0.0631%" height="15" fill="rgb(239,43,17)" fg:x="23362" fg:w="95"/><text x="15.7746%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (40 samples, 0.03%)</title><rect x="15.6342%" y="677" width="0.0266%" height="15" fill="rgb(231,177,25)" fg:x="23527" fg:w="40"/><text x="15.8842%" y="687.50"></text></g><g><title>[anon] (955 samples, 0.63%)</title><rect x="15.0700%" y="709" width="0.6346%" height="15" fill="rgb(219,179,1)" fg:x="22678" fg:w="955"/><text x="15.3200%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (176 samples, 0.12%)</title><rect x="15.5877%" y="693" width="0.1170%" height="15" fill="rgb(238,219,53)" fg:x="23457" fg:w="176"/><text x="15.8377%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (66 samples, 0.04%)</title><rect x="15.6608%" y="677" width="0.0439%" height="15" fill="rgb(232,167,36)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (66 samples, 0.04%)</title><rect x="15.6608%" y="661" width="0.0439%" height="15" fill="rgb(244,19,51)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (66 samples, 0.04%)</title><rect x="15.6608%" y="645" width="0.0439%" height="15" fill="rgb(224,6,22)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (66 samples, 0.04%)</title><rect x="15.6608%" y="629" width="0.0439%" height="15" fill="rgb(224,145,5)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (66 samples, 0.04%)</title><rect x="15.6608%" y="613" width="0.0439%" height="15" fill="rgb(234,130,49)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (66 samples, 0.04%)</title><rect x="15.6608%" y="597" width="0.0439%" height="15" fill="rgb(254,6,2)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (66 samples, 0.04%)</title><rect x="15.6608%" y="581" width="0.0439%" height="15" fill="rgb(208,96,46)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (66 samples, 0.04%)</title><rect x="15.6608%" y="565" width="0.0439%" height="15" fill="rgb(239,3,39)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (66 samples, 0.04%)</title><rect x="15.6608%" y="549" width="0.0439%" height="15" fill="rgb(233,210,1)" fg:x="23567" fg:w="66"/><text x="15.9108%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (137 samples, 0.09%)</title><rect x="15.7060%" y="693" width="0.0910%" height="15" fill="rgb(244,137,37)" fg:x="23635" fg:w="137"/><text x="15.9560%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (210 samples, 0.14%)</title><rect x="15.7970%" y="693" width="0.1395%" height="15" fill="rgb(240,136,2)" fg:x="23772" fg:w="210"/><text x="16.0470%" y="703.50"></text></g><g><title>__round (34 samples, 0.02%)</title><rect x="15.9366%" y="693" width="0.0226%" height="15" fill="rgb(239,18,37)" fg:x="23982" fg:w="34"/><text x="16.1866%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (119 samples, 0.08%)</title><rect x="15.9592%" y="693" width="0.0791%" height="15" fill="rgb(218,185,22)" fg:x="24016" fg:w="119"/><text x="16.2092%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (138 samples, 0.09%)</title><rect x="16.0382%" y="693" width="0.0917%" height="15" fill="rgb(225,218,4)" fg:x="24135" fg:w="138"/><text x="16.2882%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (31 samples, 0.02%)</title><rect x="16.1094%" y="677" width="0.0206%" height="15" fill="rgb(230,182,32)" fg:x="24242" fg:w="31"/><text x="16.3594%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (31 samples, 0.02%)</title><rect x="16.1094%" y="661" width="0.0206%" height="15" fill="rgb(242,56,43)" fg:x="24242" fg:w="31"/><text x="16.3594%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (114 samples, 0.08%)</title><rect x="16.1300%" y="693" width="0.0758%" height="15" fill="rgb(233,99,24)" fg:x="24273" fg:w="114"/><text x="16.3800%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.05%)</title><rect x="16.2057%" y="645" width="0.0452%" height="15" fill="rgb(234,209,42)" fg:x="24387" fg:w="68"/><text x="16.4557%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.05%)</title><rect x="16.2057%" y="629" width="0.0452%" height="15" fill="rgb(227,7,12)" fg:x="24387" fg:w="68"/><text x="16.4557%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.05%)</title><rect x="16.2057%" y="613" width="0.0452%" height="15" fill="rgb(245,203,43)" fg:x="24387" fg:w="68"/><text x="16.4557%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (68 samples, 0.05%)</title><rect x="16.2057%" y="597" width="0.0452%" height="15" fill="rgb(238,205,33)" fg:x="24387" fg:w="68"/><text x="16.4557%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (68 samples, 0.05%)</title><rect x="16.2509%" y="613" width="0.0452%" height="15" fill="rgb(231,56,7)" fg:x="24455" fg:w="68"/><text x="16.5009%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (87 samples, 0.06%)</title><rect x="16.2961%" y="613" width="0.0578%" height="15" fill="rgb(244,186,29)" fg:x="24523" fg:w="87"/><text x="16.5461%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (89 samples, 0.06%)</title><rect x="16.3539%" y="613" width="0.0591%" height="15" fill="rgb(234,111,31)" fg:x="24610" fg:w="89"/><text x="16.6039%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (89 samples, 0.06%)</title><rect x="16.3539%" y="597" width="0.0591%" height="15" fill="rgb(241,149,10)" fg:x="24610" fg:w="89"/><text x="16.6039%" y="607.50"></text></g><g><title>[unknown] (1,093 samples, 0.73%)</title><rect x="15.7047%" y="709" width="0.7263%" height="15" fill="rgb(249,206,44)" fg:x="23633" fg:w="1093"/><text x="15.9547%" y="719.50"></text></g><g><title>one_brc::process_lines (339 samples, 0.23%)</title><rect x="16.2057%" y="693" width="0.2253%" height="15" fill="rgb(251,153,30)" fg:x="24387" fg:w="339"/><text x="16.4557%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (339 samples, 0.23%)</title><rect x="16.2057%" y="677" width="0.2253%" height="15" fill="rgb(239,152,38)" fg:x="24387" fg:w="339"/><text x="16.4557%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (339 samples, 0.23%)</title><rect x="16.2057%" y="661" width="0.2253%" height="15" fill="rgb(249,139,47)" fg:x="24387" fg:w="339"/><text x="16.4557%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (271 samples, 0.18%)</title><rect x="16.2509%" y="645" width="0.1801%" height="15" fill="rgb(244,64,35)" fg:x="24455" fg:w="271"/><text x="16.5009%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (271 samples, 0.18%)</title><rect x="16.2509%" y="629" width="0.1801%" height="15" fill="rgb(216,46,15)" fg:x="24455" fg:w="271"/><text x="16.5009%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (27 samples, 0.02%)</title><rect x="16.4130%" y="613" width="0.0179%" height="15" fill="rgb(250,74,19)" fg:x="24699" fg:w="27"/><text x="16.6630%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (41 samples, 0.03%)</title><rect x="16.6582%" y="389" width="0.0272%" height="15" fill="rgb(249,42,33)" fg:x="25068" fg:w="41"/><text x="16.9082%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.03%)</title><rect x="16.6582%" y="373" width="0.0272%" height="15" fill="rgb(242,149,17)" fg:x="25068" fg:w="41"/><text x="16.9082%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.03%)</title><rect x="16.6582%" y="357" width="0.0272%" height="15" fill="rgb(244,29,21)" fg:x="25068" fg:w="41"/><text x="16.9082%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (152 samples, 0.10%)</title><rect x="16.6855%" y="389" width="0.1010%" height="15" fill="rgb(220,130,37)" fg:x="25109" fg:w="152"/><text x="16.9355%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (152 samples, 0.10%)</title><rect x="16.6855%" y="373" width="0.1010%" height="15" fill="rgb(211,67,2)" fg:x="25109" fg:w="152"/><text x="16.9355%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (152 samples, 0.10%)</title><rect x="16.6855%" y="357" width="0.1010%" height="15" fill="rgb(235,68,52)" fg:x="25109" fg:w="152"/><text x="16.9355%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (149 samples, 0.10%)</title><rect x="16.6875%" y="341" width="0.0990%" height="15" fill="rgb(246,142,3)" fg:x="25112" fg:w="149"/><text x="16.9375%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (107 samples, 0.07%)</title><rect x="16.7865%" y="389" width="0.0711%" height="15" fill="rgb(241,25,7)" fg:x="25261" fg:w="107"/><text x="17.0365%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (107 samples, 0.07%)</title><rect x="16.7865%" y="373" width="0.0711%" height="15" fill="rgb(242,119,39)" fg:x="25261" fg:w="107"/><text x="17.0365%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (39 samples, 0.03%)</title><rect x="17.0025%" y="357" width="0.0259%" height="15" fill="rgb(241,98,45)" fg:x="25586" fg:w="39"/><text x="17.2525%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (36 samples, 0.02%)</title><rect x="17.0284%" y="357" width="0.0239%" height="15" fill="rgb(254,28,30)" fg:x="25625" fg:w="36"/><text x="17.2784%" y="367.50"></text></g><g><title>core::ptr::align_offset (36 samples, 0.02%)</title><rect x="17.0284%" y="341" width="0.0239%" height="15" fill="rgb(241,142,54)" fg:x="25625" fg:w="36"/><text x="17.2784%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (78 samples, 0.05%)</title><rect x="17.0523%" y="357" width="0.0518%" height="15" fill="rgb(222,85,15)" fg:x="25661" fg:w="78"/><text x="17.3023%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,614 samples, 1.07%)</title><rect x="16.5021%" y="405" width="1.0725%" height="15" fill="rgb(210,85,47)" fg:x="24833" fg:w="1614"/><text x="16.7521%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (1,079 samples, 0.72%)</title><rect x="16.8576%" y="389" width="0.7170%" height="15" fill="rgb(224,206,25)" fg:x="25368" fg:w="1079"/><text x="17.1076%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,032 samples, 0.69%)</title><rect x="16.8888%" y="373" width="0.6858%" height="15" fill="rgb(243,201,19)" fg:x="25415" fg:w="1032"/><text x="17.1388%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (708 samples, 0.47%)</title><rect x="17.1041%" y="357" width="0.4705%" height="15" fill="rgb(236,59,4)" fg:x="25739" fg:w="708"/><text x="17.3541%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,748 samples, 1.16%)</title><rect x="16.4343%" y="437" width="1.1616%" height="15" fill="rgb(254,179,45)" fg:x="24731" fg:w="1748"/><text x="16.6843%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,748 samples, 1.16%)</title><rect x="16.4343%" y="421" width="1.1616%" height="15" fill="rgb(226,14,10)" fg:x="24731" fg:w="1748"/><text x="16.6843%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (32 samples, 0.02%)</title><rect x="17.5746%" y="405" width="0.0213%" height="15" fill="rgb(244,27,41)" fg:x="26447" fg:w="32"/><text x="17.8246%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (32 samples, 0.02%)</title><rect x="17.5746%" y="389" width="0.0213%" height="15" fill="rgb(235,35,32)" fg:x="26447" fg:w="32"/><text x="17.8246%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,877 samples, 1.25%)</title><rect x="16.4343%" y="469" width="1.2473%" height="15" fill="rgb(218,68,31)" fg:x="24731" fg:w="1877"/><text x="16.6843%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,877 samples, 1.25%)</title><rect x="16.4343%" y="453" width="1.2473%" height="15" fill="rgb(207,120,37)" fg:x="24731" fg:w="1877"/><text x="16.6843%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (129 samples, 0.09%)</title><rect x="17.5959%" y="437" width="0.0857%" height="15" fill="rgb(227,98,0)" fg:x="26479" fg:w="129"/><text x="17.8459%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (129 samples, 0.09%)</title><rect x="17.5959%" y="421" width="0.0857%" height="15" fill="rgb(207,7,3)" fg:x="26479" fg:w="129"/><text x="17.8459%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (129 samples, 0.09%)</title><rect x="17.5959%" y="405" width="0.0857%" height="15" fill="rgb(206,98,19)" fg:x="26479" fg:w="129"/><text x="17.8459%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (129 samples, 0.09%)</title><rect x="17.5959%" y="389" width="0.0857%" height="15" fill="rgb(217,5,26)" fg:x="26479" fg:w="129"/><text x="17.8459%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (60 samples, 0.04%)</title><rect x="17.6417%" y="373" width="0.0399%" height="15" fill="rgb(235,190,38)" fg:x="26548" fg:w="60"/><text x="17.8917%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (60 samples, 0.04%)</title><rect x="17.6417%" y="357" width="0.0399%" height="15" fill="rgb(247,86,24)" fg:x="26548" fg:w="60"/><text x="17.8917%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (60 samples, 0.04%)</title><rect x="17.6417%" y="341" width="0.0399%" height="15" fill="rgb(205,101,16)" fg:x="26548" fg:w="60"/><text x="17.8917%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (60 samples, 0.04%)</title><rect x="17.6417%" y="325" width="0.0399%" height="15" fill="rgb(246,168,33)" fg:x="26548" fg:w="60"/><text x="17.8917%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (60 samples, 0.04%)</title><rect x="17.6417%" y="309" width="0.0399%" height="15" fill="rgb(231,114,1)" fg:x="26548" fg:w="60"/><text x="17.8917%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (46 samples, 0.03%)</title><rect x="17.7135%" y="437" width="0.0306%" height="15" fill="rgb(207,184,53)" fg:x="26656" fg:w="46"/><text x="17.9635%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (36 samples, 0.02%)</title><rect x="17.7447%" y="405" width="0.0239%" height="15" fill="rgb(224,95,51)" fg:x="26703" fg:w="36"/><text x="17.9947%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (82 samples, 0.05%)</title><rect x="17.8697%" y="373" width="0.0545%" height="15" fill="rgb(212,188,45)" fg:x="26891" fg:w="82"/><text x="18.1197%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (161 samples, 0.11%)</title><rect x="17.9242%" y="373" width="0.1070%" height="15" fill="rgb(223,154,38)" fg:x="26973" fg:w="161"/><text x="18.1742%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (26 samples, 0.02%)</title><rect x="18.0312%" y="373" width="0.0173%" height="15" fill="rgb(251,22,52)" fg:x="27134" fg:w="26"/><text x="18.2812%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (323 samples, 0.21%)</title><rect x="17.8351%" y="389" width="0.2146%" height="15" fill="rgb(229,209,22)" fg:x="26839" fg:w="323"/><text x="18.0851%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (128 samples, 0.09%)</title><rect x="18.0969%" y="373" width="0.0851%" height="15" fill="rgb(234,138,34)" fg:x="27233" fg:w="128"/><text x="18.3469%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (30 samples, 0.02%)</title><rect x="18.4923%" y="325" width="0.0199%" height="15" fill="rgb(212,95,11)" fg:x="27828" fg:w="30"/><text x="18.7423%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (31 samples, 0.02%)</title><rect x="18.5136%" y="309" width="0.0206%" height="15" fill="rgb(240,179,47)" fg:x="27860" fg:w="31"/><text x="18.7636%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (352 samples, 0.23%)</title><rect x="18.3202%" y="341" width="0.2339%" height="15" fill="rgb(240,163,11)" fg:x="27569" fg:w="352"/><text x="18.5702%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (63 samples, 0.04%)</title><rect x="18.5123%" y="325" width="0.0419%" height="15" fill="rgb(236,37,12)" fg:x="27858" fg:w="63"/><text x="18.7623%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (30 samples, 0.02%)</title><rect x="18.5342%" y="309" width="0.0199%" height="15" fill="rgb(232,164,16)" fg:x="27891" fg:w="30"/><text x="18.7842%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (455 samples, 0.30%)</title><rect x="18.2551%" y="357" width="0.3024%" height="15" fill="rgb(244,205,15)" fg:x="27471" fg:w="455"/><text x="18.5051%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,225 samples, 0.81%)</title><rect x="17.7441%" y="437" width="0.8140%" height="15" fill="rgb(223,117,47)" fg:x="26702" fg:w="1225"/><text x="17.9941%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,225 samples, 0.81%)</title><rect x="17.7441%" y="421" width="0.8140%" height="15" fill="rgb(244,107,35)" fg:x="26702" fg:w="1225"/><text x="17.9941%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,188 samples, 0.79%)</title><rect x="17.7687%" y="405" width="0.7895%" height="15" fill="rgb(205,140,8)" fg:x="26739" fg:w="1188"/><text x="18.0187%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (765 samples, 0.51%)</title><rect x="18.0498%" y="389" width="0.5084%" height="15" fill="rgb(228,84,46)" fg:x="27162" fg:w="765"/><text x="18.2998%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (566 samples, 0.38%)</title><rect x="18.1820%" y="373" width="0.3761%" height="15" fill="rgb(254,188,9)" fg:x="27361" fg:w="566"/><text x="18.4320%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (66 samples, 0.04%)</title><rect x="18.5847%" y="421" width="0.0439%" height="15" fill="rgb(206,112,54)" fg:x="27967" fg:w="66"/><text x="18.8347%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (36 samples, 0.02%)</title><rect x="18.7900%" y="405" width="0.0239%" height="15" fill="rgb(216,84,49)" fg:x="28276" fg:w="36"/><text x="19.0400%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (36 samples, 0.02%)</title><rect x="18.7900%" y="389" width="0.0239%" height="15" fill="rgb(214,194,35)" fg:x="28276" fg:w="36"/><text x="19.0400%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (36 samples, 0.02%)</title><rect x="18.7900%" y="373" width="0.0239%" height="15" fill="rgb(249,28,3)" fg:x="28276" fg:w="36"/><text x="19.0400%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (265 samples, 0.18%)</title><rect x="18.8140%" y="405" width="0.1761%" height="15" fill="rgb(222,56,52)" fg:x="28312" fg:w="265"/><text x="19.0640%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (265 samples, 0.18%)</title><rect x="18.8140%" y="389" width="0.1761%" height="15" fill="rgb(245,217,50)" fg:x="28312" fg:w="265"/><text x="19.0640%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (265 samples, 0.18%)</title><rect x="18.8140%" y="373" width="0.1761%" height="15" fill="rgb(213,201,24)" fg:x="28312" fg:w="265"/><text x="19.0640%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (237 samples, 0.16%)</title><rect x="18.8326%" y="357" width="0.1575%" height="15" fill="rgb(248,116,28)" fg:x="28340" fg:w="237"/><text x="19.0826%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (75 samples, 0.05%)</title><rect x="18.9901%" y="405" width="0.0498%" height="15" fill="rgb(219,72,43)" fg:x="28577" fg:w="75"/><text x="19.2401%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (75 samples, 0.05%)</title><rect x="18.9901%" y="389" width="0.0498%" height="15" fill="rgb(209,138,14)" fg:x="28577" fg:w="75"/><text x="19.2401%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (194 samples, 0.13%)</title><rect x="19.0452%" y="389" width="0.1289%" height="15" fill="rgb(222,18,33)" fg:x="28660" fg:w="194"/><text x="19.2952%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (149 samples, 0.10%)</title><rect x="19.0751%" y="373" width="0.0990%" height="15" fill="rgb(213,199,7)" fg:x="28705" fg:w="149"/><text x="19.3251%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,286 samples, 0.85%)</title><rect x="18.5581%" y="437" width="0.8546%" height="15" fill="rgb(250,110,10)" fg:x="27927" fg:w="1286"/><text x="18.8081%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,175 samples, 0.78%)</title><rect x="18.6319%" y="421" width="0.7808%" height="15" fill="rgb(248,123,6)" fg:x="28038" fg:w="1175"/><text x="18.8819%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (561 samples, 0.37%)</title><rect x="19.0399%" y="405" width="0.3728%" height="15" fill="rgb(206,91,31)" fg:x="28652" fg:w="561"/><text x="19.2899%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (359 samples, 0.24%)</title><rect x="19.1741%" y="389" width="0.2386%" height="15" fill="rgb(211,154,13)" fg:x="28854" fg:w="359"/><text x="19.4241%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (241 samples, 0.16%)</title><rect x="19.4127%" y="437" width="0.1601%" height="15" fill="rgb(225,148,7)" fg:x="29213" fg:w="241"/><text x="19.6627%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (165 samples, 0.11%)</title><rect x="19.4632%" y="421" width="0.1096%" height="15" fill="rgb(220,160,43)" fg:x="29289" fg:w="165"/><text x="19.7132%" y="431.50"></text></g><g><title>__round (165 samples, 0.11%)</title><rect x="19.4632%" y="405" width="0.1096%" height="15" fill="rgb(213,52,39)" fg:x="29289" fg:w="165"/><text x="19.7132%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (65 samples, 0.04%)</title><rect x="19.6645%" y="389" width="0.0432%" height="15" fill="rgb(243,137,7)" fg:x="29592" fg:w="65"/><text x="19.9145%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (246 samples, 0.16%)</title><rect x="19.5728%" y="437" width="0.1635%" height="15" fill="rgb(230,79,13)" fg:x="29454" fg:w="246"/><text x="19.8228%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (246 samples, 0.16%)</title><rect x="19.5728%" y="421" width="0.1635%" height="15" fill="rgb(247,105,23)" fg:x="29454" fg:w="246"/><text x="19.8228%" y="431.50"></text></g><g><title>one_brc::Measurement::record (246 samples, 0.16%)</title><rect x="19.5728%" y="405" width="0.1635%" height="15" fill="rgb(223,179,41)" fg:x="29454" fg:w="246"/><text x="19.8228%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (43 samples, 0.03%)</title><rect x="19.7077%" y="389" width="0.0286%" height="15" fill="rgb(218,9,34)" fg:x="29657" fg:w="43"/><text x="19.9577%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (64 samples, 0.04%)</title><rect x="19.9682%" y="309" width="0.0425%" height="15" fill="rgb(222,106,8)" fg:x="30049" fg:w="64"/><text x="20.2182%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (157 samples, 0.10%)</title><rect x="19.9397%" y="325" width="0.1043%" height="15" fill="rgb(211,220,0)" fg:x="30006" fg:w="157"/><text x="20.1897%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (50 samples, 0.03%)</title><rect x="20.0108%" y="309" width="0.0332%" height="15" fill="rgb(229,52,16)" fg:x="30113" fg:w="50"/><text x="20.2608%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (192 samples, 0.13%)</title><rect x="20.0991%" y="309" width="0.1276%" height="15" fill="rgb(212,155,18)" fg:x="30246" fg:w="192"/><text x="20.3491%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (648 samples, 0.43%)</title><rect x="19.8745%" y="373" width="0.4306%" height="15" fill="rgb(242,21,14)" fg:x="29908" fg:w="648"/><text x="20.1245%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (648 samples, 0.43%)</title><rect x="19.8745%" y="357" width="0.4306%" height="15" fill="rgb(222,19,48)" fg:x="29908" fg:w="648"/><text x="20.1245%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (648 samples, 0.43%)</title><rect x="19.8745%" y="341" width="0.4306%" height="15" fill="rgb(232,45,27)" fg:x="29908" fg:w="648"/><text x="20.1245%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (393 samples, 0.26%)</title><rect x="20.0440%" y="325" width="0.2612%" height="15" fill="rgb(249,103,42)" fg:x="30163" fg:w="393"/><text x="20.2940%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (118 samples, 0.08%)</title><rect x="20.2267%" y="309" width="0.0784%" height="15" fill="rgb(246,81,33)" fg:x="30438" fg:w="118"/><text x="20.4767%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (54 samples, 0.04%)</title><rect x="20.3051%" y="373" width="0.0359%" height="15" fill="rgb(252,33,42)" fg:x="30556" fg:w="54"/><text x="20.5551%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (29 samples, 0.02%)</title><rect x="20.3218%" y="357" width="0.0193%" height="15" fill="rgb(209,212,41)" fg:x="30581" fg:w="29"/><text x="20.5718%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (29 samples, 0.02%)</title><rect x="20.3218%" y="341" width="0.0193%" height="15" fill="rgb(207,154,6)" fg:x="30581" fg:w="29"/><text x="20.5718%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (29 samples, 0.02%)</title><rect x="20.3218%" y="325" width="0.0193%" height="15" fill="rgb(223,64,47)" fg:x="30581" fg:w="29"/><text x="20.5718%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (24 samples, 0.02%)</title><rect x="20.4912%" y="245" width="0.0159%" height="15" fill="rgb(211,161,38)" fg:x="30836" fg:w="24"/><text x="20.7412%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (74 samples, 0.05%)</title><rect x="20.4653%" y="261" width="0.0492%" height="15" fill="rgb(219,138,40)" fg:x="30797" fg:w="74"/><text x="20.7153%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (35 samples, 0.02%)</title><rect x="20.5145%" y="261" width="0.0233%" height="15" fill="rgb(241,228,46)" fg:x="30871" fg:w="35"/><text x="20.7645%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (406 samples, 0.27%)</title><rect x="20.3676%" y="277" width="0.2698%" height="15" fill="rgb(223,209,38)" fg:x="30650" fg:w="406"/><text x="20.6176%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (150 samples, 0.10%)</title><rect x="20.5377%" y="261" width="0.0997%" height="15" fill="rgb(236,164,45)" fg:x="30906" fg:w="150"/><text x="20.7877%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (49 samples, 0.03%)</title><rect x="20.6374%" y="277" width="0.0326%" height="15" fill="rgb(231,15,5)" fg:x="31056" fg:w="49"/><text x="20.8874%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.02%)</title><rect x="20.7809%" y="245" width="0.0159%" height="15" fill="rgb(252,35,15)" fg:x="31272" fg:w="24"/><text x="21.0309%" y="255.50"></text></g><g><title>core::cmp::min (28 samples, 0.02%)</title><rect x="20.8042%" y="245" width="0.0186%" height="15" fill="rgb(248,181,18)" fg:x="31307" fg:w="28"/><text x="21.0542%" y="255.50"></text></g><g><title>core::cmp::Ord::min (28 samples, 0.02%)</title><rect x="20.8042%" y="229" width="0.0186%" height="15" fill="rgb(233,39,42)" fg:x="31307" fg:w="28"/><text x="21.0542%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (28 samples, 0.02%)</title><rect x="20.8042%" y="213" width="0.0186%" height="15" fill="rgb(238,110,33)" fg:x="31307" fg:w="28"/><text x="21.0542%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (368 samples, 0.24%)</title><rect x="20.6952%" y="261" width="0.2445%" height="15" fill="rgb(233,195,10)" fg:x="31143" fg:w="368"/><text x="20.9452%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (176 samples, 0.12%)</title><rect x="20.8228%" y="245" width="0.1170%" height="15" fill="rgb(254,105,3)" fg:x="31335" fg:w="176"/><text x="21.0728%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,652 samples, 1.10%)</title><rect x="19.8506%" y="405" width="1.0978%" height="15" fill="rgb(221,225,9)" fg:x="29872" fg:w="1652"/><text x="20.1006%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,652 samples, 1.10%)</title><rect x="19.8506%" y="389" width="1.0978%" height="15" fill="rgb(224,227,45)" fg:x="29872" fg:w="1652"/><text x="20.1006%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (914 samples, 0.61%)</title><rect x="20.3410%" y="373" width="0.6074%" height="15" fill="rgb(229,198,43)" fg:x="30610" fg:w="914"/><text x="20.5910%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (874 samples, 0.58%)</title><rect x="20.3676%" y="357" width="0.5808%" height="15" fill="rgb(206,209,35)" fg:x="30650" fg:w="874"/><text x="20.6176%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (874 samples, 0.58%)</title><rect x="20.3676%" y="341" width="0.5808%" height="15" fill="rgb(245,195,53)" fg:x="30650" fg:w="874"/><text x="20.6176%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (874 samples, 0.58%)</title><rect x="20.3676%" y="325" width="0.5808%" height="15" fill="rgb(240,92,26)" fg:x="30650" fg:w="874"/><text x="20.6176%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (874 samples, 0.58%)</title><rect x="20.3676%" y="309" width="0.5808%" height="15" fill="rgb(207,40,23)" fg:x="30650" fg:w="874"/><text x="20.6176%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (874 samples, 0.58%)</title><rect x="20.3676%" y="293" width="0.5808%" height="15" fill="rgb(223,111,35)" fg:x="30650" fg:w="874"/><text x="20.6176%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (419 samples, 0.28%)</title><rect x="20.6700%" y="277" width="0.2784%" height="15" fill="rgb(229,147,28)" fg:x="31105" fg:w="419"/><text x="20.9200%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.04%)</title><rect x="20.9816%" y="373" width="0.0385%" height="15" fill="rgb(211,29,28)" fg:x="31574" fg:w="58"/><text x="21.2316%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (44 samples, 0.03%)</title><rect x="21.0381%" y="357" width="0.0292%" height="15" fill="rgb(228,72,33)" fg:x="31659" fg:w="44"/><text x="21.2881%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (44 samples, 0.03%)</title><rect x="21.0381%" y="341" width="0.0292%" height="15" fill="rgb(205,214,31)" fg:x="31659" fg:w="44"/><text x="21.2881%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (44 samples, 0.03%)</title><rect x="21.0381%" y="325" width="0.0292%" height="15" fill="rgb(224,111,15)" fg:x="31659" fg:w="44"/><text x="21.2881%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (846 samples, 0.56%)</title><rect x="21.0202%" y="373" width="0.5622%" height="15" fill="rgb(253,21,26)" fg:x="31632" fg:w="846"/><text x="21.2702%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (775 samples, 0.52%)</title><rect x="21.0674%" y="357" width="0.5150%" height="15" fill="rgb(245,139,43)" fg:x="31703" fg:w="775"/><text x="21.3174%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (775 samples, 0.52%)</title><rect x="21.0674%" y="341" width="0.5150%" height="15" fill="rgb(252,170,7)" fg:x="31703" fg:w="775"/><text x="21.3174%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (775 samples, 0.52%)</title><rect x="21.0674%" y="325" width="0.5150%" height="15" fill="rgb(231,118,14)" fg:x="31703" fg:w="775"/><text x="21.3174%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (775 samples, 0.52%)</title><rect x="21.0674%" y="309" width="0.5150%" height="15" fill="rgb(238,83,0)" fg:x="31703" fg:w="775"/><text x="21.3174%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (775 samples, 0.52%)</title><rect x="21.0674%" y="293" width="0.5150%" height="15" fill="rgb(221,39,39)" fg:x="31703" fg:w="775"/><text x="21.3174%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (775 samples, 0.52%)</title><rect x="21.0674%" y="277" width="0.5150%" height="15" fill="rgb(222,119,46)" fg:x="31703" fg:w="775"/><text x="21.3174%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (488 samples, 0.32%)</title><rect x="21.2581%" y="261" width="0.3243%" height="15" fill="rgb(222,165,49)" fg:x="31990" fg:w="488"/><text x="21.5081%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (83 samples, 0.06%)</title><rect x="21.5824%" y="373" width="0.0552%" height="15" fill="rgb(219,113,52)" fg:x="32478" fg:w="83"/><text x="21.8324%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (54 samples, 0.04%)</title><rect x="21.6375%" y="341" width="0.0359%" height="15" fill="rgb(214,7,15)" fg:x="32561" fg:w="54"/><text x="21.8875%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (59 samples, 0.04%)</title><rect x="21.6375%" y="373" width="0.0392%" height="15" fill="rgb(235,32,4)" fg:x="32561" fg:w="59"/><text x="21.8875%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (59 samples, 0.04%)</title><rect x="21.6375%" y="357" width="0.0392%" height="15" fill="rgb(238,90,54)" fg:x="32561" fg:w="59"/><text x="21.8875%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (25 samples, 0.02%)</title><rect x="21.6767%" y="373" width="0.0166%" height="15" fill="rgb(213,208,19)" fg:x="32620" fg:w="25"/><text x="21.9267%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.02%)</title><rect x="21.6767%" y="357" width="0.0166%" height="15" fill="rgb(233,156,4)" fg:x="32620" fg:w="25"/><text x="21.9267%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,913 samples, 1.94%)</title><rect x="19.7602%" y="421" width="1.9358%" height="15" fill="rgb(207,194,5)" fg:x="29736" fg:w="2913"/><text x="20.0102%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,125 samples, 0.75%)</title><rect x="20.9484%" y="405" width="0.7476%" height="15" fill="rgb(206,111,30)" fg:x="31524" fg:w="1125"/><text x="21.1984%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,083 samples, 0.72%)</title><rect x="20.9763%" y="389" width="0.7197%" height="15" fill="rgb(243,70,54)" fg:x="31566" fg:w="1083"/><text x="21.2263%" y="399.50"></text></g><g><title>worker-10 (10,009 samples, 6.65%)</title><rect x="15.0700%" y="725" width="6.6512%" height="15" fill="rgb(242,28,8)" fg:x="22678" fg:w="10009"/><text x="15.3200%" y="735.50">worker-10</text></g><g><title>__clone3 (7,961 samples, 5.29%)</title><rect x="16.4310%" y="709" width="5.2903%" height="15" fill="rgb(219,106,18)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="719.50">__clon..</text></g><g><title>start_thread (7,961 samples, 5.29%)</title><rect x="16.4310%" y="693" width="5.2903%" height="15" fill="rgb(244,222,10)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="703.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (7,961 samples, 5.29%)</title><rect x="16.4310%" y="677" width="5.2903%" height="15" fill="rgb(236,179,52)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="687.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7,961 samples, 5.29%)</title><rect x="16.4310%" y="661" width="5.2903%" height="15" fill="rgb(213,23,39)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="671.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (7,961 samples, 5.29%)</title><rect x="16.4310%" y="645" width="5.2903%" height="15" fill="rgb(238,48,10)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="655.50">std::t..</text></g><g><title>std::panic::catch_unwind (7,961 samples, 5.29%)</title><rect x="16.4310%" y="629" width="5.2903%" height="15" fill="rgb(251,196,23)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="639.50">std::p..</text></g><g><title>std::panicking::try (7,961 samples, 5.29%)</title><rect x="16.4310%" y="613" width="5.2903%" height="15" fill="rgb(250,152,24)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="623.50">std::p..</text></g><g><title>std::panicking::try::do_call (7,961 samples, 5.29%)</title><rect x="16.4310%" y="597" width="5.2903%" height="15" fill="rgb(209,150,17)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="607.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,961 samples, 5.29%)</title><rect x="16.4310%" y="581" width="5.2903%" height="15" fill="rgb(234,202,34)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="591.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (7,961 samples, 5.29%)</title><rect x="16.4310%" y="565" width="5.2903%" height="15" fill="rgb(253,148,53)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="575.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7,961 samples, 5.29%)</title><rect x="16.4310%" y="549" width="5.2903%" height="15" fill="rgb(218,129,16)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="559.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (7,961 samples, 5.29%)</title><rect x="16.4310%" y="533" width="5.2903%" height="15" fill="rgb(216,85,19)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="543.50">one_br..</text></g><g><title>one_brc::process_lines (7,961 samples, 5.29%)</title><rect x="16.4310%" y="517" width="5.2903%" height="15" fill="rgb(235,228,7)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="527.50">one_br..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7,961 samples, 5.29%)</title><rect x="16.4310%" y="501" width="5.2903%" height="15" fill="rgb(245,175,0)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="511.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7,961 samples, 5.29%)</title><rect x="16.4310%" y="485" width="5.2903%" height="15" fill="rgb(208,168,36)" fg:x="24726" fg:w="7961"/><text x="16.6810%" y="495.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6,079 samples, 4.04%)</title><rect x="17.6816%" y="469" width="4.0396%" height="15" fill="rgb(246,171,24)" fg:x="26608" fg:w="6079"/><text x="17.9316%" y="479.50">core..</text></g><g><title>one_brc::process_lines::_{{closure}} (6,079 samples, 4.04%)</title><rect x="17.6816%" y="453" width="4.0396%" height="15" fill="rgb(215,142,24)" fg:x="26608" fg:w="6079"/><text x="17.9316%" y="463.50">one_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,987 samples, 1.98%)</title><rect x="19.7363%" y="437" width="1.9849%" height="15" fill="rgb(250,187,7)" fg:x="29700" fg:w="2987"/><text x="19.9863%" y="447.50">s..</text></g><g><title>std::collections::hash::map::map_entry (38 samples, 0.03%)</title><rect x="21.6960%" y="421" width="0.0253%" height="15" fill="rgb(228,66,33)" fg:x="32649" fg:w="38"/><text x="21.9460%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (78 samples, 0.05%)</title><rect x="21.7943%" y="677" width="0.0518%" height="15" fill="rgb(234,215,21)" fg:x="32797" fg:w="78"/><text x="22.0443%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (78 samples, 0.05%)</title><rect x="21.7943%" y="661" width="0.0518%" height="15" fill="rgb(222,191,20)" fg:x="32797" fg:w="78"/><text x="22.0443%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (78 samples, 0.05%)</title><rect x="21.7943%" y="645" width="0.0518%" height="15" fill="rgb(245,79,54)" fg:x="32797" fg:w="78"/><text x="22.0443%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (280 samples, 0.19%)</title><rect x="21.7232%" y="693" width="0.1861%" height="15" fill="rgb(240,10,37)" fg:x="32690" fg:w="280"/><text x="21.9732%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (95 samples, 0.06%)</title><rect x="21.8462%" y="677" width="0.0631%" height="15" fill="rgb(214,192,32)" fg:x="32875" fg:w="95"/><text x="22.0962%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (106 samples, 0.07%)</title><rect x="21.9093%" y="693" width="0.0704%" height="15" fill="rgb(209,36,54)" fg:x="32970" fg:w="106"/><text x="22.1593%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (164 samples, 0.11%)</title><rect x="21.9797%" y="693" width="0.1090%" height="15" fill="rgb(220,10,11)" fg:x="33076" fg:w="164"/><text x="22.2297%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (91 samples, 0.06%)</title><rect x="22.0283%" y="677" width="0.0605%" height="15" fill="rgb(221,106,17)" fg:x="33149" fg:w="91"/><text x="22.2783%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (91 samples, 0.06%)</title><rect x="22.0283%" y="661" width="0.0605%" height="15" fill="rgb(251,142,44)" fg:x="33149" fg:w="91"/><text x="22.2783%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (91 samples, 0.06%)</title><rect x="22.0283%" y="645" width="0.0605%" height="15" fill="rgb(238,13,15)" fg:x="33149" fg:w="91"/><text x="22.2783%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (91 samples, 0.06%)</title><rect x="22.0283%" y="629" width="0.0605%" height="15" fill="rgb(208,107,27)" fg:x="33149" fg:w="91"/><text x="22.2783%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (91 samples, 0.06%)</title><rect x="22.0283%" y="613" width="0.0605%" height="15" fill="rgb(205,136,37)" fg:x="33149" fg:w="91"/><text x="22.2783%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (91 samples, 0.06%)</title><rect x="22.0283%" y="597" width="0.0605%" height="15" fill="rgb(250,205,27)" fg:x="33149" fg:w="91"/><text x="22.2783%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (37 samples, 0.02%)</title><rect x="22.0641%" y="581" width="0.0246%" height="15" fill="rgb(210,80,43)" fg:x="33203" fg:w="37"/><text x="22.3141%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (84 samples, 0.06%)</title><rect x="22.0887%" y="693" width="0.0558%" height="15" fill="rgb(247,160,36)" fg:x="33240" fg:w="84"/><text x="22.3387%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (54 samples, 0.04%)</title><rect x="22.1087%" y="677" width="0.0359%" height="15" fill="rgb(234,13,49)" fg:x="33270" fg:w="54"/><text x="22.3587%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (29 samples, 0.02%)</title><rect x="22.1445%" y="693" width="0.0193%" height="15" fill="rgb(234,122,0)" fg:x="33324" fg:w="29"/><text x="22.3945%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (29 samples, 0.02%)</title><rect x="22.1445%" y="677" width="0.0193%" height="15" fill="rgb(207,146,38)" fg:x="33324" fg:w="29"/><text x="22.3945%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (29 samples, 0.02%)</title><rect x="22.1445%" y="661" width="0.0193%" height="15" fill="rgb(207,177,25)" fg:x="33324" fg:w="29"/><text x="22.3945%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (93 samples, 0.06%)</title><rect x="22.1638%" y="693" width="0.0618%" height="15" fill="rgb(211,178,42)" fg:x="33353" fg:w="93"/><text x="22.4138%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 0.02%)</title><rect x="22.2708%" y="677" width="0.0193%" height="15" fill="rgb(230,69,54)" fg:x="33514" fg:w="29"/><text x="22.5208%" y="687.50"></text></g><g><title>[anon] (895 samples, 0.59%)</title><rect x="21.7212%" y="709" width="0.5947%" height="15" fill="rgb(214,135,41)" fg:x="32687" fg:w="895"/><text x="21.9712%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (136 samples, 0.09%)</title><rect x="22.2256%" y="693" width="0.0904%" height="15" fill="rgb(237,67,25)" fg:x="33446" fg:w="136"/><text x="22.4756%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (39 samples, 0.03%)</title><rect x="22.2901%" y="677" width="0.0259%" height="15" fill="rgb(222,189,50)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (39 samples, 0.03%)</title><rect x="22.2901%" y="661" width="0.0259%" height="15" fill="rgb(245,148,34)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (39 samples, 0.03%)</title><rect x="22.2901%" y="645" width="0.0259%" height="15" fill="rgb(222,29,6)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (39 samples, 0.03%)</title><rect x="22.2901%" y="629" width="0.0259%" height="15" fill="rgb(221,189,43)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (39 samples, 0.03%)</title><rect x="22.2901%" y="613" width="0.0259%" height="15" fill="rgb(207,36,27)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (39 samples, 0.03%)</title><rect x="22.2901%" y="597" width="0.0259%" height="15" fill="rgb(217,90,24)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (39 samples, 0.03%)</title><rect x="22.2901%" y="581" width="0.0259%" height="15" fill="rgb(224,66,35)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (39 samples, 0.03%)</title><rect x="22.2901%" y="565" width="0.0259%" height="15" fill="rgb(221,13,50)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (39 samples, 0.03%)</title><rect x="22.2901%" y="549" width="0.0259%" height="15" fill="rgb(236,68,49)" fg:x="33543" fg:w="39"/><text x="22.5401%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (125 samples, 0.08%)</title><rect x="22.3167%" y="693" width="0.0831%" height="15" fill="rgb(229,146,28)" fg:x="33583" fg:w="125"/><text x="22.5667%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (156 samples, 0.10%)</title><rect x="22.3997%" y="693" width="0.1037%" height="15" fill="rgb(225,31,38)" fg:x="33708" fg:w="156"/><text x="22.6497%" y="703.50"></text></g><g><title>__round (32 samples, 0.02%)</title><rect x="22.5034%" y="693" width="0.0213%" height="15" fill="rgb(250,208,3)" fg:x="33864" fg:w="32"/><text x="22.7534%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (102 samples, 0.07%)</title><rect x="22.5247%" y="693" width="0.0678%" height="15" fill="rgb(246,54,23)" fg:x="33896" fg:w="102"/><text x="22.7747%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (107 samples, 0.07%)</title><rect x="22.5924%" y="693" width="0.0711%" height="15" fill="rgb(243,76,11)" fg:x="33998" fg:w="107"/><text x="22.8424%" y="703.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (82 samples, 0.05%)</title><rect x="22.6635%" y="693" width="0.0545%" height="15" fill="rgb(245,21,50)" fg:x="34105" fg:w="82"/><text x="22.9135%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.03%)</title><rect x="22.7180%" y="645" width="0.0339%" height="15" fill="rgb(228,9,43)" fg:x="34187" fg:w="51"/><text x="22.9680%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.03%)</title><rect x="22.7180%" y="629" width="0.0339%" height="15" fill="rgb(208,100,47)" fg:x="34187" fg:w="51"/><text x="22.9680%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.03%)</title><rect x="22.7180%" y="613" width="0.0339%" height="15" fill="rgb(232,26,8)" fg:x="34187" fg:w="51"/><text x="22.9680%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (51 samples, 0.03%)</title><rect x="22.7180%" y="597" width="0.0339%" height="15" fill="rgb(216,166,38)" fg:x="34187" fg:w="51"/><text x="22.9680%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (55 samples, 0.04%)</title><rect x="22.7519%" y="613" width="0.0365%" height="15" fill="rgb(251,202,51)" fg:x="34238" fg:w="55"/><text x="23.0019%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (61 samples, 0.04%)</title><rect x="22.7885%" y="613" width="0.0405%" height="15" fill="rgb(254,216,34)" fg:x="34293" fg:w="61"/><text x="23.0385%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (60 samples, 0.04%)</title><rect x="22.8290%" y="613" width="0.0399%" height="15" fill="rgb(251,32,27)" fg:x="34354" fg:w="60"/><text x="23.0790%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (60 samples, 0.04%)</title><rect x="22.8290%" y="597" width="0.0399%" height="15" fill="rgb(208,127,28)" fg:x="34354" fg:w="60"/><text x="23.0790%" y="607.50"></text></g><g><title>[unknown] (852 samples, 0.57%)</title><rect x="22.3160%" y="709" width="0.5662%" height="15" fill="rgb(224,137,22)" fg:x="33582" fg:w="852"/><text x="22.5660%" y="719.50"></text></g><g><title>one_brc::process_lines (247 samples, 0.16%)</title><rect x="22.7180%" y="693" width="0.1641%" height="15" fill="rgb(254,70,32)" fg:x="34187" fg:w="247"/><text x="22.9680%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (247 samples, 0.16%)</title><rect x="22.7180%" y="677" width="0.1641%" height="15" fill="rgb(229,75,37)" fg:x="34187" fg:w="247"/><text x="22.9680%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (247 samples, 0.16%)</title><rect x="22.7180%" y="661" width="0.1641%" height="15" fill="rgb(252,64,23)" fg:x="34187" fg:w="247"/><text x="22.9680%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (196 samples, 0.13%)</title><rect x="22.7519%" y="645" width="0.1302%" height="15" fill="rgb(232,162,48)" fg:x="34238" fg:w="196"/><text x="23.0019%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (196 samples, 0.13%)</title><rect x="22.7519%" y="629" width="0.1302%" height="15" fill="rgb(246,160,12)" fg:x="34238" fg:w="196"/><text x="23.0019%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (20 samples, 0.01%)</title><rect x="22.8689%" y="613" width="0.0133%" height="15" fill="rgb(247,166,0)" fg:x="34414" fg:w="20"/><text x="23.1189%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (27 samples, 0.02%)</title><rect x="23.0490%" y="389" width="0.0179%" height="15" fill="rgb(249,219,21)" fg:x="34685" fg:w="27"/><text x="23.2990%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.02%)</title><rect x="23.0490%" y="373" width="0.0179%" height="15" fill="rgb(205,209,3)" fg:x="34685" fg:w="27"/><text x="23.2990%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.02%)</title><rect x="23.0490%" y="357" width="0.0179%" height="15" fill="rgb(243,44,1)" fg:x="34685" fg:w="27"/><text x="23.2990%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (177 samples, 0.12%)</title><rect x="23.0669%" y="389" width="0.1176%" height="15" fill="rgb(206,159,16)" fg:x="34712" fg:w="177"/><text x="23.3169%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (177 samples, 0.12%)</title><rect x="23.0669%" y="373" width="0.1176%" height="15" fill="rgb(244,77,30)" fg:x="34712" fg:w="177"/><text x="23.3169%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (177 samples, 0.12%)</title><rect x="23.0669%" y="357" width="0.1176%" height="15" fill="rgb(218,69,12)" fg:x="34712" fg:w="177"/><text x="23.3169%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (176 samples, 0.12%)</title><rect x="23.0676%" y="341" width="0.1170%" height="15" fill="rgb(212,87,7)" fg:x="34713" fg:w="176"/><text x="23.3176%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (102 samples, 0.07%)</title><rect x="23.1845%" y="389" width="0.0678%" height="15" fill="rgb(245,114,25)" fg:x="34889" fg:w="102"/><text x="23.4345%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (102 samples, 0.07%)</title><rect x="23.1845%" y="373" width="0.0678%" height="15" fill="rgb(210,61,42)" fg:x="34889" fg:w="102"/><text x="23.4345%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (32 samples, 0.02%)</title><rect x="23.3414%" y="357" width="0.0213%" height="15" fill="rgb(211,52,33)" fg:x="35125" fg:w="32"/><text x="23.5914%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (34 samples, 0.02%)</title><rect x="23.3626%" y="357" width="0.0226%" height="15" fill="rgb(234,58,33)" fg:x="35157" fg:w="34"/><text x="23.6126%" y="367.50"></text></g><g><title>core::ptr::align_offset (34 samples, 0.02%)</title><rect x="23.3626%" y="341" width="0.0226%" height="15" fill="rgb(220,115,36)" fg:x="35157" fg:w="34"/><text x="23.6126%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (58 samples, 0.04%)</title><rect x="23.3852%" y="357" width="0.0385%" height="15" fill="rgb(243,153,54)" fg:x="35191" fg:w="58"/><text x="23.6352%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,326 samples, 0.88%)</title><rect x="22.9247%" y="405" width="0.8812%" height="15" fill="rgb(251,47,18)" fg:x="34498" fg:w="1326"/><text x="23.1747%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (833 samples, 0.55%)</title><rect x="23.2523%" y="389" width="0.5535%" height="15" fill="rgb(242,102,42)" fg:x="34991" fg:w="833"/><text x="23.5023%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (811 samples, 0.54%)</title><rect x="23.2669%" y="373" width="0.5389%" height="15" fill="rgb(234,31,38)" fg:x="35013" fg:w="811"/><text x="23.5169%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (575 samples, 0.38%)</title><rect x="23.4238%" y="357" width="0.3821%" height="15" fill="rgb(221,117,51)" fg:x="35249" fg:w="575"/><text x="23.6738%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,414 samples, 0.94%)</title><rect x="22.8828%" y="437" width="0.9396%" height="15" fill="rgb(212,20,18)" fg:x="34435" fg:w="1414"/><text x="23.1328%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,414 samples, 0.94%)</title><rect x="22.8828%" y="421" width="0.9396%" height="15" fill="rgb(245,133,36)" fg:x="34435" fg:w="1414"/><text x="23.1328%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (25 samples, 0.02%)</title><rect x="23.8059%" y="405" width="0.0166%" height="15" fill="rgb(212,6,19)" fg:x="35824" fg:w="25"/><text x="24.0559%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (25 samples, 0.02%)</title><rect x="23.8059%" y="389" width="0.0166%" height="15" fill="rgb(218,1,36)" fg:x="35824" fg:w="25"/><text x="24.0559%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,547 samples, 1.03%)</title><rect x="22.8828%" y="469" width="1.0280%" height="15" fill="rgb(246,84,54)" fg:x="34435" fg:w="1547"/><text x="23.1328%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,547 samples, 1.03%)</title><rect x="22.8828%" y="453" width="1.0280%" height="15" fill="rgb(242,110,6)" fg:x="34435" fg:w="1547"/><text x="23.1328%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (133 samples, 0.09%)</title><rect x="23.8225%" y="437" width="0.0884%" height="15" fill="rgb(214,47,5)" fg:x="35849" fg:w="133"/><text x="24.0725%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (133 samples, 0.09%)</title><rect x="23.8225%" y="421" width="0.0884%" height="15" fill="rgb(218,159,25)" fg:x="35849" fg:w="133"/><text x="24.0725%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (133 samples, 0.09%)</title><rect x="23.8225%" y="405" width="0.0884%" height="15" fill="rgb(215,211,28)" fg:x="35849" fg:w="133"/><text x="24.0725%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (133 samples, 0.09%)</title><rect x="23.8225%" y="389" width="0.0884%" height="15" fill="rgb(238,59,32)" fg:x="35849" fg:w="133"/><text x="24.0725%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (63 samples, 0.04%)</title><rect x="23.8690%" y="373" width="0.0419%" height="15" fill="rgb(226,82,3)" fg:x="35919" fg:w="63"/><text x="24.1190%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (63 samples, 0.04%)</title><rect x="23.8690%" y="357" width="0.0419%" height="15" fill="rgb(240,164,32)" fg:x="35919" fg:w="63"/><text x="24.1190%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (63 samples, 0.04%)</title><rect x="23.8690%" y="341" width="0.0419%" height="15" fill="rgb(232,46,7)" fg:x="35919" fg:w="63"/><text x="24.1190%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (63 samples, 0.04%)</title><rect x="23.8690%" y="325" width="0.0419%" height="15" fill="rgb(229,129,53)" fg:x="35919" fg:w="63"/><text x="24.1190%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (63 samples, 0.04%)</title><rect x="23.8690%" y="309" width="0.0419%" height="15" fill="rgb(234,188,29)" fg:x="35919" fg:w="63"/><text x="24.1190%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (40 samples, 0.03%)</title><rect x="23.9261%" y="437" width="0.0266%" height="15" fill="rgb(246,141,4)" fg:x="36005" fg:w="40"/><text x="24.1761%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (33 samples, 0.02%)</title><rect x="23.9527%" y="405" width="0.0219%" height="15" fill="rgb(229,23,39)" fg:x="36045" fg:w="33"/><text x="24.2027%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (58 samples, 0.04%)</title><rect x="24.0663%" y="373" width="0.0385%" height="15" fill="rgb(206,12,3)" fg:x="36216" fg:w="58"/><text x="24.3163%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (97 samples, 0.06%)</title><rect x="24.1056%" y="373" width="0.0645%" height="15" fill="rgb(252,226,20)" fg:x="36275" fg:w="97"/><text x="24.3556%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (226 samples, 0.15%)</title><rect x="24.0318%" y="389" width="0.1502%" height="15" fill="rgb(216,123,35)" fg:x="36164" fg:w="226"/><text x="24.2818%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (18 samples, 0.01%)</title><rect x="24.1700%" y="373" width="0.0120%" height="15" fill="rgb(212,68,40)" fg:x="36372" fg:w="18"/><text x="24.4200%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (108 samples, 0.07%)</title><rect x="24.2112%" y="373" width="0.0718%" height="15" fill="rgb(254,125,32)" fg:x="36434" fg:w="108"/><text x="24.4612%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (23 samples, 0.02%)</title><rect x="24.5408%" y="325" width="0.0153%" height="15" fill="rgb(253,97,22)" fg:x="36930" fg:w="23"/><text x="24.7908%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (21 samples, 0.01%)</title><rect x="24.5561%" y="309" width="0.0140%" height="15" fill="rgb(241,101,14)" fg:x="36953" fg:w="21"/><text x="24.8061%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (281 samples, 0.19%)</title><rect x="24.4006%" y="341" width="0.1867%" height="15" fill="rgb(238,103,29)" fg:x="36719" fg:w="281"/><text x="24.6506%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (47 samples, 0.03%)</title><rect x="24.5561%" y="325" width="0.0312%" height="15" fill="rgb(233,195,47)" fg:x="36953" fg:w="47"/><text x="24.8061%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (26 samples, 0.02%)</title><rect x="24.5701%" y="309" width="0.0173%" height="15" fill="rgb(246,218,30)" fg:x="36974" fg:w="26"/><text x="24.8201%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (958 samples, 0.64%)</title><rect x="23.9527%" y="437" width="0.6366%" height="15" fill="rgb(219,145,47)" fg:x="36045" fg:w="958"/><text x="24.2027%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (958 samples, 0.64%)</title><rect x="23.9527%" y="421" width="0.6366%" height="15" fill="rgb(243,12,26)" fg:x="36045" fg:w="958"/><text x="24.2027%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (925 samples, 0.61%)</title><rect x="23.9746%" y="405" width="0.6147%" height="15" fill="rgb(214,87,16)" fg:x="36078" fg:w="925"/><text x="24.2246%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (613 samples, 0.41%)</title><rect x="24.1820%" y="389" width="0.4074%" height="15" fill="rgb(208,99,42)" fg:x="36390" fg:w="613"/><text x="24.4320%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (461 samples, 0.31%)</title><rect x="24.2830%" y="373" width="0.3063%" height="15" fill="rgb(253,99,2)" fg:x="36542" fg:w="461"/><text x="24.5330%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (357 samples, 0.24%)</title><rect x="24.3521%" y="357" width="0.2372%" height="15" fill="rgb(220,168,23)" fg:x="36646" fg:w="357"/><text x="24.6021%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (58 samples, 0.04%)</title><rect x="24.6066%" y="421" width="0.0385%" height="15" fill="rgb(242,38,24)" fg:x="37029" fg:w="58"/><text x="24.8566%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (35 samples, 0.02%)</title><rect x="24.7893%" y="405" width="0.0233%" height="15" fill="rgb(225,182,9)" fg:x="37304" fg:w="35"/><text x="25.0393%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (35 samples, 0.02%)</title><rect x="24.7893%" y="389" width="0.0233%" height="15" fill="rgb(243,178,37)" fg:x="37304" fg:w="35"/><text x="25.0393%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (35 samples, 0.02%)</title><rect x="24.7893%" y="373" width="0.0233%" height="15" fill="rgb(232,139,19)" fg:x="37304" fg:w="35"/><text x="25.0393%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (288 samples, 0.19%)</title><rect x="24.8126%" y="405" width="0.1914%" height="15" fill="rgb(225,201,24)" fg:x="37339" fg:w="288"/><text x="25.0626%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (288 samples, 0.19%)</title><rect x="24.8126%" y="389" width="0.1914%" height="15" fill="rgb(221,47,46)" fg:x="37339" fg:w="288"/><text x="25.0626%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (288 samples, 0.19%)</title><rect x="24.8126%" y="373" width="0.1914%" height="15" fill="rgb(249,23,13)" fg:x="37339" fg:w="288"/><text x="25.0626%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (259 samples, 0.17%)</title><rect x="24.8319%" y="357" width="0.1721%" height="15" fill="rgb(219,9,5)" fg:x="37368" fg:w="259"/><text x="25.0819%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (59 samples, 0.04%)</title><rect x="25.0040%" y="405" width="0.0392%" height="15" fill="rgb(254,171,16)" fg:x="37627" fg:w="59"/><text x="25.2540%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (59 samples, 0.04%)</title><rect x="25.0040%" y="389" width="0.0392%" height="15" fill="rgb(230,171,20)" fg:x="37627" fg:w="59"/><text x="25.2540%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (154 samples, 0.10%)</title><rect x="25.0472%" y="389" width="0.1023%" height="15" fill="rgb(210,71,41)" fg:x="37692" fg:w="154"/><text x="25.2972%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (120 samples, 0.08%)</title><rect x="25.0698%" y="373" width="0.0797%" height="15" fill="rgb(206,173,20)" fg:x="37726" fg:w="120"/><text x="25.3198%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,147 samples, 0.76%)</title><rect x="24.5893%" y="437" width="0.7622%" height="15" fill="rgb(233,88,34)" fg:x="37003" fg:w="1147"/><text x="24.8393%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,062 samples, 0.71%)</title><rect x="24.6458%" y="421" width="0.7057%" height="15" fill="rgb(223,209,46)" fg:x="37088" fg:w="1062"/><text x="24.8958%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (464 samples, 0.31%)</title><rect x="25.0432%" y="405" width="0.3083%" height="15" fill="rgb(250,43,18)" fg:x="37686" fg:w="464"/><text x="25.2932%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (304 samples, 0.20%)</title><rect x="25.1495%" y="389" width="0.2020%" height="15" fill="rgb(208,13,10)" fg:x="37846" fg:w="304"/><text x="25.3995%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (199 samples, 0.13%)</title><rect x="25.3515%" y="437" width="0.1322%" height="15" fill="rgb(212,200,36)" fg:x="38150" fg:w="199"/><text x="25.6015%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (148 samples, 0.10%)</title><rect x="25.3854%" y="421" width="0.0983%" height="15" fill="rgb(225,90,30)" fg:x="38201" fg:w="148"/><text x="25.6354%" y="431.50"></text></g><g><title>__round (148 samples, 0.10%)</title><rect x="25.3854%" y="405" width="0.0983%" height="15" fill="rgb(236,182,39)" fg:x="38201" fg:w="148"/><text x="25.6354%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (40 samples, 0.03%)</title><rect x="25.5496%" y="389" width="0.0266%" height="15" fill="rgb(212,144,35)" fg:x="38448" fg:w="40"/><text x="25.7996%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (180 samples, 0.12%)</title><rect x="25.4838%" y="437" width="0.1196%" height="15" fill="rgb(228,63,44)" fg:x="38349" fg:w="180"/><text x="25.7338%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (180 samples, 0.12%)</title><rect x="25.4838%" y="421" width="0.1196%" height="15" fill="rgb(228,109,6)" fg:x="38349" fg:w="180"/><text x="25.7338%" y="431.50"></text></g><g><title>one_brc::Measurement::record (180 samples, 0.12%)</title><rect x="25.4838%" y="405" width="0.1196%" height="15" fill="rgb(238,117,24)" fg:x="38349" fg:w="180"/><text x="25.7338%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (41 samples, 0.03%)</title><rect x="25.5761%" y="389" width="0.0272%" height="15" fill="rgb(242,26,26)" fg:x="38488" fg:w="41"/><text x="25.8261%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (47 samples, 0.03%)</title><rect x="25.7828%" y="309" width="0.0312%" height="15" fill="rgb(221,92,48)" fg:x="38799" fg:w="47"/><text x="26.0328%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (106 samples, 0.07%)</title><rect x="25.7595%" y="325" width="0.0704%" height="15" fill="rgb(209,209,32)" fg:x="38764" fg:w="106"/><text x="26.0095%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 0.02%)</title><rect x="25.8140%" y="309" width="0.0159%" height="15" fill="rgb(221,70,22)" fg:x="38846" fg:w="24"/><text x="26.0640%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (180 samples, 0.12%)</title><rect x="25.8845%" y="309" width="0.1196%" height="15" fill="rgb(248,145,5)" fg:x="38952" fg:w="180"/><text x="26.1345%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (534 samples, 0.35%)</title><rect x="25.7223%" y="373" width="0.3549%" height="15" fill="rgb(226,116,26)" fg:x="38708" fg:w="534"/><text x="25.9723%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (534 samples, 0.35%)</title><rect x="25.7223%" y="357" width="0.3549%" height="15" fill="rgb(244,5,17)" fg:x="38708" fg:w="534"/><text x="25.9723%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (534 samples, 0.35%)</title><rect x="25.7223%" y="341" width="0.3549%" height="15" fill="rgb(252,159,33)" fg:x="38708" fg:w="534"/><text x="25.9723%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (372 samples, 0.25%)</title><rect x="25.8300%" y="325" width="0.2472%" height="15" fill="rgb(206,71,0)" fg:x="38870" fg:w="372"/><text x="26.0800%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (110 samples, 0.07%)</title><rect x="26.0041%" y="309" width="0.0731%" height="15" fill="rgb(233,118,54)" fg:x="39132" fg:w="110"/><text x="26.2541%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (58 samples, 0.04%)</title><rect x="26.0772%" y="373" width="0.0385%" height="15" fill="rgb(234,83,48)" fg:x="39242" fg:w="58"/><text x="26.3272%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (25 samples, 0.02%)</title><rect x="26.0991%" y="357" width="0.0166%" height="15" fill="rgb(228,3,54)" fg:x="39275" fg:w="25"/><text x="26.3491%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (25 samples, 0.02%)</title><rect x="26.0991%" y="341" width="0.0166%" height="15" fill="rgb(226,155,13)" fg:x="39275" fg:w="25"/><text x="26.3491%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (25 samples, 0.02%)</title><rect x="26.0991%" y="325" width="0.0166%" height="15" fill="rgb(241,28,37)" fg:x="39275" fg:w="25"/><text x="26.3491%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (67 samples, 0.04%)</title><rect x="26.1955%" y="261" width="0.0445%" height="15" fill="rgb(233,93,10)" fg:x="39420" fg:w="67"/><text x="26.4455%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (17 samples, 0.01%)</title><rect x="26.2287%" y="245" width="0.0113%" height="15" fill="rgb(225,113,19)" fg:x="39470" fg:w="17"/><text x="26.4787%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (25 samples, 0.02%)</title><rect x="26.2400%" y="261" width="0.0166%" height="15" fill="rgb(241,2,18)" fg:x="39487" fg:w="25"/><text x="26.4900%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (316 samples, 0.21%)</title><rect x="26.1343%" y="277" width="0.2100%" height="15" fill="rgb(228,207,21)" fg:x="39328" fg:w="316"/><text x="26.3843%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (132 samples, 0.09%)</title><rect x="26.2566%" y="261" width="0.0877%" height="15" fill="rgb(213,211,35)" fg:x="39512" fg:w="132"/><text x="26.5066%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (46 samples, 0.03%)</title><rect x="26.3443%" y="277" width="0.0306%" height="15" fill="rgb(209,83,10)" fg:x="39644" fg:w="46"/><text x="26.5943%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.02%)</title><rect x="26.4619%" y="245" width="0.0159%" height="15" fill="rgb(209,164,1)" fg:x="39821" fg:w="24"/><text x="26.7119%" y="255.50"></text></g><g><title>core::cmp::min (25 samples, 0.02%)</title><rect x="26.4819%" y="245" width="0.0166%" height="15" fill="rgb(213,184,43)" fg:x="39851" fg:w="25"/><text x="26.7319%" y="255.50"></text></g><g><title>core::cmp::Ord::min (25 samples, 0.02%)</title><rect x="26.4819%" y="229" width="0.0166%" height="15" fill="rgb(231,61,34)" fg:x="39851" fg:w="25"/><text x="26.7319%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (25 samples, 0.02%)</title><rect x="26.4819%" y="213" width="0.0166%" height="15" fill="rgb(235,75,3)" fg:x="39851" fg:w="25"/><text x="26.7319%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (287 samples, 0.19%)</title><rect x="26.3982%" y="261" width="0.1907%" height="15" fill="rgb(220,106,47)" fg:x="39725" fg:w="287"/><text x="26.6482%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (136 samples, 0.09%)</title><rect x="26.4985%" y="245" width="0.0904%" height="15" fill="rgb(210,196,33)" fg:x="39876" fg:w="136"/><text x="26.7485%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,342 samples, 0.89%)</title><rect x="25.7017%" y="405" width="0.8918%" height="15" fill="rgb(229,154,42)" fg:x="38677" fg:w="1342"/><text x="25.9517%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,342 samples, 0.89%)</title><rect x="25.7017%" y="389" width="0.8918%" height="15" fill="rgb(228,114,26)" fg:x="38677" fg:w="1342"/><text x="25.9517%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (719 samples, 0.48%)</title><rect x="26.1157%" y="373" width="0.4778%" height="15" fill="rgb(208,144,1)" fg:x="39300" fg:w="719"/><text x="26.3657%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (691 samples, 0.46%)</title><rect x="26.1343%" y="357" width="0.4592%" height="15" fill="rgb(239,112,37)" fg:x="39328" fg:w="691"/><text x="26.3843%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (691 samples, 0.46%)</title><rect x="26.1343%" y="341" width="0.4592%" height="15" fill="rgb(210,96,50)" fg:x="39328" fg:w="691"/><text x="26.3843%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (691 samples, 0.46%)</title><rect x="26.1343%" y="325" width="0.4592%" height="15" fill="rgb(222,178,2)" fg:x="39328" fg:w="691"/><text x="26.3843%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (691 samples, 0.46%)</title><rect x="26.1343%" y="309" width="0.4592%" height="15" fill="rgb(226,74,18)" fg:x="39328" fg:w="691"/><text x="26.3843%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (691 samples, 0.46%)</title><rect x="26.1343%" y="293" width="0.4592%" height="15" fill="rgb(225,67,54)" fg:x="39328" fg:w="691"/><text x="26.3843%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (329 samples, 0.22%)</title><rect x="26.3749%" y="277" width="0.2186%" height="15" fill="rgb(251,92,32)" fg:x="39690" fg:w="329"/><text x="26.6249%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.02%)</title><rect x="26.6221%" y="373" width="0.0233%" height="15" fill="rgb(228,149,22)" fg:x="40062" fg:w="35"/><text x="26.8721%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (39 samples, 0.03%)</title><rect x="26.6593%" y="357" width="0.0259%" height="15" fill="rgb(243,54,13)" fg:x="40118" fg:w="39"/><text x="26.9093%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (39 samples, 0.03%)</title><rect x="26.6593%" y="341" width="0.0259%" height="15" fill="rgb(243,180,28)" fg:x="40118" fg:w="39"/><text x="26.9093%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (39 samples, 0.03%)</title><rect x="26.6593%" y="325" width="0.0259%" height="15" fill="rgb(208,167,24)" fg:x="40118" fg:w="39"/><text x="26.9093%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (713 samples, 0.47%)</title><rect x="26.6454%" y="373" width="0.4738%" height="15" fill="rgb(245,73,45)" fg:x="40097" fg:w="713"/><text x="26.8954%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (653 samples, 0.43%)</title><rect x="26.6852%" y="357" width="0.4339%" height="15" fill="rgb(237,203,48)" fg:x="40157" fg:w="653"/><text x="26.9352%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (653 samples, 0.43%)</title><rect x="26.6852%" y="341" width="0.4339%" height="15" fill="rgb(211,197,16)" fg:x="40157" fg:w="653"/><text x="26.9352%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (653 samples, 0.43%)</title><rect x="26.6852%" y="325" width="0.4339%" height="15" fill="rgb(243,99,51)" fg:x="40157" fg:w="653"/><text x="26.9352%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (653 samples, 0.43%)</title><rect x="26.6852%" y="309" width="0.4339%" height="15" fill="rgb(215,123,29)" fg:x="40157" fg:w="653"/><text x="26.9352%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (653 samples, 0.43%)</title><rect x="26.6852%" y="293" width="0.4339%" height="15" fill="rgb(239,186,37)" fg:x="40157" fg:w="653"/><text x="26.9352%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (653 samples, 0.43%)</title><rect x="26.6852%" y="277" width="0.4339%" height="15" fill="rgb(252,136,39)" fg:x="40157" fg:w="653"/><text x="26.9352%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (421 samples, 0.28%)</title><rect x="26.8394%" y="261" width="0.2798%" height="15" fill="rgb(223,213,32)" fg:x="40389" fg:w="421"/><text x="27.0894%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (62 samples, 0.04%)</title><rect x="27.1192%" y="373" width="0.0412%" height="15" fill="rgb(233,115,5)" fg:x="40810" fg:w="62"/><text x="27.3692%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40 samples, 0.03%)</title><rect x="27.1604%" y="341" width="0.0266%" height="15" fill="rgb(207,226,44)" fg:x="40872" fg:w="40"/><text x="27.4104%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (47 samples, 0.03%)</title><rect x="27.1604%" y="373" width="0.0312%" height="15" fill="rgb(208,126,0)" fg:x="40872" fg:w="47"/><text x="27.4104%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (47 samples, 0.03%)</title><rect x="27.1604%" y="357" width="0.0312%" height="15" fill="rgb(244,66,21)" fg:x="40872" fg:w="47"/><text x="27.4104%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,389 samples, 1.59%)</title><rect x="25.6187%" y="421" width="1.5875%" height="15" fill="rgb(222,97,12)" fg:x="38552" fg:w="2389"/><text x="25.8687%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (922 samples, 0.61%)</title><rect x="26.5935%" y="405" width="0.6127%" height="15" fill="rgb(219,213,19)" fg:x="40019" fg:w="922"/><text x="26.8435%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (888 samples, 0.59%)</title><rect x="26.6161%" y="389" width="0.5901%" height="15" fill="rgb(252,169,30)" fg:x="40053" fg:w="888"/><text x="26.8661%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (22 samples, 0.01%)</title><rect x="27.1916%" y="373" width="0.0146%" height="15" fill="rgb(206,32,51)" fg:x="40919" fg:w="22"/><text x="27.4416%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.01%)</title><rect x="27.1916%" y="357" width="0.0146%" height="15" fill="rgb(250,172,42)" fg:x="40919" fg:w="22"/><text x="27.4416%" y="367.50"></text></g><g><title>worker-11 (8,287 samples, 5.51%)</title><rect x="21.7212%" y="725" width="5.5069%" height="15" fill="rgb(209,34,43)" fg:x="32687" fg:w="8287"/><text x="21.9712%" y="735.50">worker-..</text></g><g><title>__clone3 (6,540 samples, 4.35%)</title><rect x="22.8822%" y="709" width="4.3460%" height="15" fill="rgb(223,11,35)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="719.50">__clo..</text></g><g><title>start_thread (6,540 samples, 4.35%)</title><rect x="22.8822%" y="693" width="4.3460%" height="15" fill="rgb(251,219,26)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,540 samples, 4.35%)</title><rect x="22.8822%" y="677" width="4.3460%" height="15" fill="rgb(231,119,3)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,540 samples, 4.35%)</title><rect x="22.8822%" y="661" width="4.3460%" height="15" fill="rgb(216,97,11)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,540 samples, 4.35%)</title><rect x="22.8822%" y="645" width="4.3460%" height="15" fill="rgb(223,59,9)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="655.50">std::..</text></g><g><title>std::panic::catch_unwind (6,540 samples, 4.35%)</title><rect x="22.8822%" y="629" width="4.3460%" height="15" fill="rgb(233,93,31)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,540 samples, 4.35%)</title><rect x="22.8822%" y="613" width="4.3460%" height="15" fill="rgb(239,81,33)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,540 samples, 4.35%)</title><rect x="22.8822%" y="597" width="4.3460%" height="15" fill="rgb(213,120,34)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,540 samples, 4.35%)</title><rect x="22.8822%" y="581" width="4.3460%" height="15" fill="rgb(243,49,53)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,540 samples, 4.35%)</title><rect x="22.8822%" y="565" width="4.3460%" height="15" fill="rgb(247,216,33)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,540 samples, 4.35%)</title><rect x="22.8822%" y="549" width="4.3460%" height="15" fill="rgb(226,26,14)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,540 samples, 4.35%)</title><rect x="22.8822%" y="533" width="4.3460%" height="15" fill="rgb(215,49,53)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,540 samples, 4.35%)</title><rect x="22.8822%" y="517" width="4.3460%" height="15" fill="rgb(245,162,40)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="527.50">one_b..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,540 samples, 4.35%)</title><rect x="22.8822%" y="501" width="4.3460%" height="15" fill="rgb(229,68,17)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,540 samples, 4.35%)</title><rect x="22.8822%" y="485" width="4.3460%" height="15" fill="rgb(213,182,10)" fg:x="34434" fg:w="6540"/><text x="23.1322%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,992 samples, 3.32%)</title><rect x="23.9108%" y="469" width="3.3173%" height="15" fill="rgb(245,125,30)" fg:x="35982" fg:w="4992"/><text x="24.1608%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (4,992 samples, 3.32%)</title><rect x="23.9108%" y="453" width="3.3173%" height="15" fill="rgb(232,202,2)" fg:x="35982" fg:w="4992"/><text x="24.1608%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,445 samples, 1.62%)</title><rect x="25.6034%" y="437" width="1.6248%" height="15" fill="rgb(237,140,51)" fg:x="38529" fg:w="2445"/><text x="25.8534%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (33 samples, 0.02%)</title><rect x="27.2062%" y="421" width="0.0219%" height="15" fill="rgb(236,157,25)" fg:x="40941" fg:w="33"/><text x="27.4562%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (78 samples, 0.05%)</title><rect x="27.3185%" y="677" width="0.0518%" height="15" fill="rgb(219,209,0)" fg:x="41110" fg:w="78"/><text x="27.5685%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (78 samples, 0.05%)</title><rect x="27.3185%" y="661" width="0.0518%" height="15" fill="rgb(240,116,54)" fg:x="41110" fg:w="78"/><text x="27.5685%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (78 samples, 0.05%)</title><rect x="27.3185%" y="645" width="0.0518%" height="15" fill="rgb(216,10,36)" fg:x="41110" fg:w="78"/><text x="27.5685%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (281 samples, 0.19%)</title><rect x="27.2281%" y="693" width="0.1867%" height="15" fill="rgb(222,72,44)" fg:x="40974" fg:w="281"/><text x="27.4781%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (67 samples, 0.04%)</title><rect x="27.3704%" y="677" width="0.0445%" height="15" fill="rgb(232,159,9)" fg:x="41188" fg:w="67"/><text x="27.6204%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (91 samples, 0.06%)</title><rect x="27.4149%" y="693" width="0.0605%" height="15" fill="rgb(210,39,32)" fg:x="41255" fg:w="91"/><text x="27.6649%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (169 samples, 0.11%)</title><rect x="27.4753%" y="693" width="0.1123%" height="15" fill="rgb(216,194,45)" fg:x="41346" fg:w="169"/><text x="27.7253%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (100 samples, 0.07%)</title><rect x="27.5212%" y="677" width="0.0665%" height="15" fill="rgb(218,18,35)" fg:x="41415" fg:w="100"/><text x="27.7712%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (100 samples, 0.07%)</title><rect x="27.5212%" y="661" width="0.0665%" height="15" fill="rgb(207,83,51)" fg:x="41415" fg:w="100"/><text x="27.7712%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (100 samples, 0.07%)</title><rect x="27.5212%" y="645" width="0.0665%" height="15" fill="rgb(225,63,43)" fg:x="41415" fg:w="100"/><text x="27.7712%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (100 samples, 0.07%)</title><rect x="27.5212%" y="629" width="0.0665%" height="15" fill="rgb(207,57,36)" fg:x="41415" fg:w="100"/><text x="27.7712%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (100 samples, 0.07%)</title><rect x="27.5212%" y="613" width="0.0665%" height="15" fill="rgb(216,99,33)" fg:x="41415" fg:w="100"/><text x="27.7712%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (100 samples, 0.07%)</title><rect x="27.5212%" y="597" width="0.0665%" height="15" fill="rgb(225,42,16)" fg:x="41415" fg:w="100"/><text x="27.7712%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (32 samples, 0.02%)</title><rect x="27.5664%" y="581" width="0.0213%" height="15" fill="rgb(220,201,45)" fg:x="41483" fg:w="32"/><text x="27.8164%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (81 samples, 0.05%)</title><rect x="27.5877%" y="693" width="0.0538%" height="15" fill="rgb(225,33,4)" fg:x="41515" fg:w="81"/><text x="27.8377%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (53 samples, 0.04%)</title><rect x="27.6063%" y="677" width="0.0352%" height="15" fill="rgb(224,33,50)" fg:x="41543" fg:w="53"/><text x="27.8563%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (23 samples, 0.02%)</title><rect x="27.6415%" y="693" width="0.0153%" height="15" fill="rgb(246,198,51)" fg:x="41596" fg:w="23"/><text x="27.8915%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (23 samples, 0.02%)</title><rect x="27.6415%" y="677" width="0.0153%" height="15" fill="rgb(205,22,4)" fg:x="41596" fg:w="23"/><text x="27.8915%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (23 samples, 0.02%)</title><rect x="27.6415%" y="661" width="0.0153%" height="15" fill="rgb(206,3,8)" fg:x="41596" fg:w="23"/><text x="27.8915%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (74 samples, 0.05%)</title><rect x="27.6568%" y="693" width="0.0492%" height="15" fill="rgb(251,23,15)" fg:x="41619" fg:w="74"/><text x="27.9068%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.03%)</title><rect x="27.7525%" y="677" width="0.0272%" height="15" fill="rgb(252,88,28)" fg:x="41763" fg:w="41"/><text x="28.0025%" y="687.50"></text></g><g><title>[anon] (863 samples, 0.57%)</title><rect x="27.2281%" y="709" width="0.5735%" height="15" fill="rgb(212,127,14)" fg:x="40974" fg:w="863"/><text x="27.4781%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (144 samples, 0.10%)</title><rect x="27.7059%" y="693" width="0.0957%" height="15" fill="rgb(247,145,37)" fg:x="41693" fg:w="144"/><text x="27.9559%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (33 samples, 0.02%)</title><rect x="27.7797%" y="677" width="0.0219%" height="15" fill="rgb(209,117,53)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (33 samples, 0.02%)</title><rect x="27.7797%" y="661" width="0.0219%" height="15" fill="rgb(212,90,42)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (33 samples, 0.02%)</title><rect x="27.7797%" y="645" width="0.0219%" height="15" fill="rgb(218,164,37)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (33 samples, 0.02%)</title><rect x="27.7797%" y="629" width="0.0219%" height="15" fill="rgb(246,65,34)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (33 samples, 0.02%)</title><rect x="27.7797%" y="613" width="0.0219%" height="15" fill="rgb(231,100,33)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (33 samples, 0.02%)</title><rect x="27.7797%" y="597" width="0.0219%" height="15" fill="rgb(228,126,14)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (33 samples, 0.02%)</title><rect x="27.7797%" y="581" width="0.0219%" height="15" fill="rgb(215,173,21)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (33 samples, 0.02%)</title><rect x="27.7797%" y="565" width="0.0219%" height="15" fill="rgb(210,6,40)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (33 samples, 0.02%)</title><rect x="27.7797%" y="549" width="0.0219%" height="15" fill="rgb(212,48,18)" fg:x="41804" fg:w="33"/><text x="28.0297%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (104 samples, 0.07%)</title><rect x="27.8023%" y="693" width="0.0691%" height="15" fill="rgb(230,214,11)" fg:x="41838" fg:w="104"/><text x="28.0523%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (148 samples, 0.10%)</title><rect x="27.8714%" y="693" width="0.0983%" height="15" fill="rgb(254,105,39)" fg:x="41942" fg:w="148"/><text x="28.1214%" y="703.50"></text></g><g><title>__round (35 samples, 0.02%)</title><rect x="27.9698%" y="693" width="0.0233%" height="15" fill="rgb(245,158,5)" fg:x="42090" fg:w="35"/><text x="28.2198%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (99 samples, 0.07%)</title><rect x="27.9930%" y="693" width="0.0658%" height="15" fill="rgb(249,208,11)" fg:x="42125" fg:w="99"/><text x="28.2430%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (98 samples, 0.07%)</title><rect x="28.0588%" y="693" width="0.0651%" height="15" fill="rgb(210,39,28)" fg:x="42224" fg:w="98"/><text x="28.3088%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (29 samples, 0.02%)</title><rect x="28.1046%" y="677" width="0.0193%" height="15" fill="rgb(211,56,53)" fg:x="42293" fg:w="29"/><text x="28.3546%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (29 samples, 0.02%)</title><rect x="28.1046%" y="661" width="0.0193%" height="15" fill="rgb(226,201,30)" fg:x="42293" fg:w="29"/><text x="28.3546%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (84 samples, 0.06%)</title><rect x="28.1239%" y="693" width="0.0558%" height="15" fill="rgb(239,101,34)" fg:x="42322" fg:w="84"/><text x="28.3739%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="28.1797%" y="645" width="0.0332%" height="15" fill="rgb(226,209,5)" fg:x="42406" fg:w="50"/><text x="28.4297%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="28.1797%" y="629" width="0.0332%" height="15" fill="rgb(250,105,47)" fg:x="42406" fg:w="50"/><text x="28.4297%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="28.1797%" y="613" width="0.0332%" height="15" fill="rgb(230,72,3)" fg:x="42406" fg:w="50"/><text x="28.4297%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (50 samples, 0.03%)</title><rect x="28.1797%" y="597" width="0.0332%" height="15" fill="rgb(232,218,39)" fg:x="42406" fg:w="50"/><text x="28.4297%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (57 samples, 0.04%)</title><rect x="28.2130%" y="613" width="0.0379%" height="15" fill="rgb(248,166,6)" fg:x="42456" fg:w="57"/><text x="28.4630%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (52 samples, 0.03%)</title><rect x="28.2508%" y="613" width="0.0346%" height="15" fill="rgb(247,89,20)" fg:x="42513" fg:w="52"/><text x="28.5008%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (52 samples, 0.03%)</title><rect x="28.2854%" y="613" width="0.0346%" height="15" fill="rgb(248,130,54)" fg:x="42565" fg:w="52"/><text x="28.5354%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (52 samples, 0.03%)</title><rect x="28.2854%" y="597" width="0.0346%" height="15" fill="rgb(234,196,4)" fg:x="42565" fg:w="52"/><text x="28.5354%" y="607.50"></text></g><g><title>[unknown] (810 samples, 0.54%)</title><rect x="27.8016%" y="709" width="0.5383%" height="15" fill="rgb(250,143,31)" fg:x="41837" fg:w="810"/><text x="28.0516%" y="719.50"></text></g><g><title>one_brc::process_lines (241 samples, 0.16%)</title><rect x="28.1797%" y="693" width="0.1601%" height="15" fill="rgb(211,110,34)" fg:x="42406" fg:w="241"/><text x="28.4297%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (241 samples, 0.16%)</title><rect x="28.1797%" y="677" width="0.1601%" height="15" fill="rgb(215,124,48)" fg:x="42406" fg:w="241"/><text x="28.4297%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (241 samples, 0.16%)</title><rect x="28.1797%" y="661" width="0.1601%" height="15" fill="rgb(216,46,13)" fg:x="42406" fg:w="241"/><text x="28.4297%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (191 samples, 0.13%)</title><rect x="28.2130%" y="645" width="0.1269%" height="15" fill="rgb(205,184,25)" fg:x="42456" fg:w="191"/><text x="28.4630%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (191 samples, 0.13%)</title><rect x="28.2130%" y="629" width="0.1269%" height="15" fill="rgb(228,1,10)" fg:x="42456" fg:w="191"/><text x="28.4630%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (30 samples, 0.02%)</title><rect x="28.3200%" y="613" width="0.0199%" height="15" fill="rgb(213,116,27)" fg:x="42617" fg:w="30"/><text x="28.5700%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (31 samples, 0.02%)</title><rect x="28.5020%" y="389" width="0.0206%" height="15" fill="rgb(241,95,50)" fg:x="42891" fg:w="31"/><text x="28.7520%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (31 samples, 0.02%)</title><rect x="28.5020%" y="373" width="0.0206%" height="15" fill="rgb(238,48,32)" fg:x="42891" fg:w="31"/><text x="28.7520%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.02%)</title><rect x="28.5020%" y="357" width="0.0206%" height="15" fill="rgb(235,113,49)" fg:x="42891" fg:w="31"/><text x="28.7520%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (161 samples, 0.11%)</title><rect x="28.5226%" y="389" width="0.1070%" height="15" fill="rgb(205,127,43)" fg:x="42922" fg:w="161"/><text x="28.7726%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (161 samples, 0.11%)</title><rect x="28.5226%" y="373" width="0.1070%" height="15" fill="rgb(250,162,2)" fg:x="42922" fg:w="161"/><text x="28.7726%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (161 samples, 0.11%)</title><rect x="28.5226%" y="357" width="0.1070%" height="15" fill="rgb(220,13,41)" fg:x="42922" fg:w="161"/><text x="28.7726%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (156 samples, 0.10%)</title><rect x="28.5260%" y="341" width="0.1037%" height="15" fill="rgb(249,221,25)" fg:x="42927" fg:w="156"/><text x="28.7760%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (97 samples, 0.06%)</title><rect x="28.6296%" y="389" width="0.0645%" height="15" fill="rgb(215,208,19)" fg:x="43083" fg:w="97"/><text x="28.8796%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (97 samples, 0.06%)</title><rect x="28.6296%" y="373" width="0.0645%" height="15" fill="rgb(236,175,2)" fg:x="43083" fg:w="97"/><text x="28.8796%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (26 samples, 0.02%)</title><rect x="28.7951%" y="357" width="0.0173%" height="15" fill="rgb(241,52,2)" fg:x="43332" fg:w="26"/><text x="29.0451%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (38 samples, 0.03%)</title><rect x="28.8124%" y="357" width="0.0253%" height="15" fill="rgb(248,140,14)" fg:x="43358" fg:w="38"/><text x="29.0624%" y="367.50"></text></g><g><title>core::ptr::align_offset (38 samples, 0.03%)</title><rect x="28.8124%" y="341" width="0.0253%" height="15" fill="rgb(253,22,42)" fg:x="43358" fg:w="38"/><text x="29.0624%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (51 samples, 0.03%)</title><rect x="28.8376%" y="357" width="0.0339%" height="15" fill="rgb(234,61,47)" fg:x="43396" fg:w="51"/><text x="29.0876%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,294 samples, 0.86%)</title><rect x="28.3957%" y="405" width="0.8599%" height="15" fill="rgb(208,226,15)" fg:x="42731" fg:w="1294"/><text x="28.6457%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (845 samples, 0.56%)</title><rect x="28.6941%" y="389" width="0.5615%" height="15" fill="rgb(217,221,4)" fg:x="43180" fg:w="845"/><text x="28.9441%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (812 samples, 0.54%)</title><rect x="28.7160%" y="373" width="0.5396%" height="15" fill="rgb(212,174,34)" fg:x="43213" fg:w="812"/><text x="28.9660%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (577 samples, 0.38%)</title><rect x="28.8722%" y="357" width="0.3834%" height="15" fill="rgb(253,83,4)" fg:x="43448" fg:w="577"/><text x="29.1222%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,400 samples, 0.93%)</title><rect x="28.3432%" y="437" width="0.9303%" height="15" fill="rgb(250,195,49)" fg:x="42652" fg:w="1400"/><text x="28.5932%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,400 samples, 0.93%)</title><rect x="28.3432%" y="421" width="0.9303%" height="15" fill="rgb(241,192,25)" fg:x="42652" fg:w="1400"/><text x="28.5932%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (27 samples, 0.02%)</title><rect x="29.2556%" y="405" width="0.0179%" height="15" fill="rgb(208,124,10)" fg:x="44025" fg:w="27"/><text x="29.5056%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (27 samples, 0.02%)</title><rect x="29.2556%" y="389" width="0.0179%" height="15" fill="rgb(222,33,0)" fg:x="44025" fg:w="27"/><text x="29.5056%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,518 samples, 1.01%)</title><rect x="28.3432%" y="469" width="1.0087%" height="15" fill="rgb(234,209,28)" fg:x="42652" fg:w="1518"/><text x="28.5932%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,518 samples, 1.01%)</title><rect x="28.3432%" y="453" width="1.0087%" height="15" fill="rgb(224,11,23)" fg:x="42652" fg:w="1518"/><text x="28.5932%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (118 samples, 0.08%)</title><rect x="29.2735%" y="437" width="0.0784%" height="15" fill="rgb(232,99,1)" fg:x="44052" fg:w="118"/><text x="29.5235%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (118 samples, 0.08%)</title><rect x="29.2735%" y="421" width="0.0784%" height="15" fill="rgb(237,95,45)" fg:x="44052" fg:w="118"/><text x="29.5235%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (118 samples, 0.08%)</title><rect x="29.2735%" y="405" width="0.0784%" height="15" fill="rgb(208,109,11)" fg:x="44052" fg:w="118"/><text x="29.5235%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (118 samples, 0.08%)</title><rect x="29.2735%" y="389" width="0.0784%" height="15" fill="rgb(216,190,48)" fg:x="44052" fg:w="118"/><text x="29.5235%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (62 samples, 0.04%)</title><rect x="29.3108%" y="373" width="0.0412%" height="15" fill="rgb(251,171,36)" fg:x="44108" fg:w="62"/><text x="29.5608%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (62 samples, 0.04%)</title><rect x="29.3108%" y="357" width="0.0412%" height="15" fill="rgb(230,62,22)" fg:x="44108" fg:w="62"/><text x="29.5608%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (62 samples, 0.04%)</title><rect x="29.3108%" y="341" width="0.0412%" height="15" fill="rgb(225,114,35)" fg:x="44108" fg:w="62"/><text x="29.5608%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (62 samples, 0.04%)</title><rect x="29.3108%" y="325" width="0.0412%" height="15" fill="rgb(215,118,42)" fg:x="44108" fg:w="62"/><text x="29.5608%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (62 samples, 0.04%)</title><rect x="29.3108%" y="309" width="0.0412%" height="15" fill="rgb(243,119,21)" fg:x="44108" fg:w="62"/><text x="29.5608%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (25 samples, 0.02%)</title><rect x="29.3652%" y="437" width="0.0166%" height="15" fill="rgb(252,177,53)" fg:x="44190" fg:w="25"/><text x="29.6152%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (39 samples, 0.03%)</title><rect x="29.3819%" y="405" width="0.0259%" height="15" fill="rgb(237,209,29)" fg:x="44215" fg:w="39"/><text x="29.6319%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (76 samples, 0.05%)</title><rect x="29.4915%" y="373" width="0.0505%" height="15" fill="rgb(212,65,23)" fg:x="44380" fg:w="76"/><text x="29.7415%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (110 samples, 0.07%)</title><rect x="29.5420%" y="373" width="0.0731%" height="15" fill="rgb(230,222,46)" fg:x="44456" fg:w="110"/><text x="29.7920%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (27 samples, 0.02%)</title><rect x="29.6151%" y="373" width="0.0179%" height="15" fill="rgb(215,135,32)" fg:x="44566" fg:w="27"/><text x="29.8651%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (252 samples, 0.17%)</title><rect x="29.4663%" y="389" width="0.1675%" height="15" fill="rgb(246,101,22)" fg:x="44342" fg:w="252"/><text x="29.7163%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (105 samples, 0.07%)</title><rect x="29.6596%" y="373" width="0.0698%" height="15" fill="rgb(206,107,13)" fg:x="44633" fg:w="105"/><text x="29.9096%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (28 samples, 0.02%)</title><rect x="29.9706%" y="325" width="0.0186%" height="15" fill="rgb(250,100,44)" fg:x="45101" fg:w="28"/><text x="30.2206%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (21 samples, 0.01%)</title><rect x="29.9906%" y="309" width="0.0140%" height="15" fill="rgb(231,147,38)" fg:x="45131" fg:w="21"/><text x="30.2406%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (293 samples, 0.19%)</title><rect x="29.8271%" y="341" width="0.1947%" height="15" fill="rgb(229,8,40)" fg:x="44885" fg:w="293"/><text x="30.0771%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (49 samples, 0.03%)</title><rect x="29.9892%" y="325" width="0.0326%" height="15" fill="rgb(221,135,30)" fg:x="45129" fg:w="49"/><text x="30.2392%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (26 samples, 0.02%)</title><rect x="30.0045%" y="309" width="0.0173%" height="15" fill="rgb(249,193,18)" fg:x="45152" fg:w="26"/><text x="30.2545%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (965 samples, 0.64%)</title><rect x="29.3819%" y="437" width="0.6413%" height="15" fill="rgb(209,133,39)" fg:x="44215" fg:w="965"/><text x="29.6319%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (965 samples, 0.64%)</title><rect x="29.3819%" y="421" width="0.6413%" height="15" fill="rgb(232,100,14)" fg:x="44215" fg:w="965"/><text x="29.6319%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (926 samples, 0.62%)</title><rect x="29.4078%" y="405" width="0.6153%" height="15" fill="rgb(224,185,1)" fg:x="44254" fg:w="926"/><text x="29.6578%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (586 samples, 0.39%)</title><rect x="29.6337%" y="389" width="0.3894%" height="15" fill="rgb(223,139,8)" fg:x="44594" fg:w="586"/><text x="29.8837%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (442 samples, 0.29%)</title><rect x="29.7294%" y="373" width="0.2937%" height="15" fill="rgb(232,213,38)" fg:x="44738" fg:w="442"/><text x="29.9794%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (360 samples, 0.24%)</title><rect x="29.7839%" y="357" width="0.2392%" height="15" fill="rgb(207,94,22)" fg:x="44820" fg:w="360"/><text x="30.0339%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (47 samples, 0.03%)</title><rect x="30.0404%" y="421" width="0.0312%" height="15" fill="rgb(219,183,54)" fg:x="45206" fg:w="47"/><text x="30.2904%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (37 samples, 0.02%)</title><rect x="30.2205%" y="405" width="0.0246%" height="15" fill="rgb(216,185,54)" fg:x="45477" fg:w="37"/><text x="30.4705%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (37 samples, 0.02%)</title><rect x="30.2205%" y="389" width="0.0246%" height="15" fill="rgb(254,217,39)" fg:x="45477" fg:w="37"/><text x="30.4705%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (37 samples, 0.02%)</title><rect x="30.2205%" y="373" width="0.0246%" height="15" fill="rgb(240,178,23)" fg:x="45477" fg:w="37"/><text x="30.4705%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (322 samples, 0.21%)</title><rect x="30.2451%" y="405" width="0.2140%" height="15" fill="rgb(218,11,47)" fg:x="45514" fg:w="322"/><text x="30.4951%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (322 samples, 0.21%)</title><rect x="30.2451%" y="389" width="0.2140%" height="15" fill="rgb(218,51,51)" fg:x="45514" fg:w="322"/><text x="30.4951%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (322 samples, 0.21%)</title><rect x="30.2451%" y="373" width="0.2140%" height="15" fill="rgb(238,126,27)" fg:x="45514" fg:w="322"/><text x="30.4951%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (302 samples, 0.20%)</title><rect x="30.2584%" y="357" width="0.2007%" height="15" fill="rgb(249,202,22)" fg:x="45534" fg:w="302"/><text x="30.5084%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (79 samples, 0.05%)</title><rect x="30.4591%" y="405" width="0.0525%" height="15" fill="rgb(254,195,49)" fg:x="45836" fg:w="79"/><text x="30.7091%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (79 samples, 0.05%)</title><rect x="30.4591%" y="389" width="0.0525%" height="15" fill="rgb(208,123,14)" fg:x="45836" fg:w="79"/><text x="30.7091%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (147 samples, 0.10%)</title><rect x="30.5175%" y="389" width="0.0977%" height="15" fill="rgb(224,200,8)" fg:x="45924" fg:w="147"/><text x="30.7675%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (111 samples, 0.07%)</title><rect x="30.5415%" y="373" width="0.0738%" height="15" fill="rgb(217,61,36)" fg:x="45960" fg:w="111"/><text x="30.7915%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,200 samples, 0.80%)</title><rect x="30.0231%" y="437" width="0.7974%" height="15" fill="rgb(206,35,45)" fg:x="45180" fg:w="1200"/><text x="30.2731%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,125 samples, 0.75%)</title><rect x="30.0730%" y="421" width="0.7476%" height="15" fill="rgb(217,65,33)" fg:x="45255" fg:w="1125"/><text x="30.3230%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (465 samples, 0.31%)</title><rect x="30.5115%" y="405" width="0.3090%" height="15" fill="rgb(222,158,48)" fg:x="45915" fg:w="465"/><text x="30.7615%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (309 samples, 0.21%)</title><rect x="30.6152%" y="389" width="0.2053%" height="15" fill="rgb(254,2,54)" fg:x="46071" fg:w="309"/><text x="30.8652%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (181 samples, 0.12%)</title><rect x="30.8206%" y="437" width="0.1203%" height="15" fill="rgb(250,143,38)" fg:x="46380" fg:w="181"/><text x="31.0706%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (124 samples, 0.08%)</title><rect x="30.8584%" y="421" width="0.0824%" height="15" fill="rgb(248,25,0)" fg:x="46437" fg:w="124"/><text x="31.1084%" y="431.50"></text></g><g><title>__round (124 samples, 0.08%)</title><rect x="30.8584%" y="405" width="0.0824%" height="15" fill="rgb(206,152,27)" fg:x="46437" fg:w="124"/><text x="31.1084%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (48 samples, 0.03%)</title><rect x="31.0066%" y="389" width="0.0319%" height="15" fill="rgb(240,77,30)" fg:x="46660" fg:w="48"/><text x="31.2566%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (193 samples, 0.13%)</title><rect x="30.9408%" y="437" width="0.1283%" height="15" fill="rgb(231,5,3)" fg:x="46561" fg:w="193"/><text x="31.1908%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (193 samples, 0.13%)</title><rect x="30.9408%" y="421" width="0.1283%" height="15" fill="rgb(207,226,32)" fg:x="46561" fg:w="193"/><text x="31.1908%" y="431.50"></text></g><g><title>one_brc::Measurement::record (193 samples, 0.13%)</title><rect x="30.9408%" y="405" width="0.1283%" height="15" fill="rgb(222,207,47)" fg:x="46561" fg:w="193"/><text x="31.1908%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (46 samples, 0.03%)</title><rect x="31.0385%" y="389" width="0.0306%" height="15" fill="rgb(229,115,45)" fg:x="46708" fg:w="46"/><text x="31.2885%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (66 samples, 0.04%)</title><rect x="31.2518%" y="309" width="0.0439%" height="15" fill="rgb(224,191,6)" fg:x="47029" fg:w="66"/><text x="31.5018%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (136 samples, 0.09%)</title><rect x="31.2279%" y="325" width="0.0904%" height="15" fill="rgb(230,227,24)" fg:x="46993" fg:w="136"/><text x="31.4779%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.02%)</title><rect x="31.2957%" y="309" width="0.0226%" height="15" fill="rgb(228,80,19)" fg:x="47095" fg:w="34"/><text x="31.5457%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (145 samples, 0.10%)</title><rect x="31.3635%" y="309" width="0.0964%" height="15" fill="rgb(247,229,0)" fg:x="47197" fg:w="145"/><text x="31.6135%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (517 samples, 0.34%)</title><rect x="31.1794%" y="373" width="0.3436%" height="15" fill="rgb(237,194,15)" fg:x="46920" fg:w="517"/><text x="31.4294%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (517 samples, 0.34%)</title><rect x="31.1794%" y="357" width="0.3436%" height="15" fill="rgb(219,203,20)" fg:x="46920" fg:w="517"/><text x="31.4294%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (517 samples, 0.34%)</title><rect x="31.1794%" y="341" width="0.3436%" height="15" fill="rgb(234,128,8)" fg:x="46920" fg:w="517"/><text x="31.4294%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (308 samples, 0.20%)</title><rect x="31.3183%" y="325" width="0.2047%" height="15" fill="rgb(248,202,8)" fg:x="47129" fg:w="308"/><text x="31.5683%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (95 samples, 0.06%)</title><rect x="31.4598%" y="309" width="0.0631%" height="15" fill="rgb(206,104,37)" fg:x="47342" fg:w="95"/><text x="31.7098%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (67 samples, 0.04%)</title><rect x="31.5230%" y="373" width="0.0445%" height="15" fill="rgb(223,8,27)" fg:x="47437" fg:w="67"/><text x="31.7730%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (26 samples, 0.02%)</title><rect x="31.5502%" y="357" width="0.0173%" height="15" fill="rgb(216,217,28)" fg:x="47478" fg:w="26"/><text x="31.8002%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (26 samples, 0.02%)</title><rect x="31.5502%" y="341" width="0.0173%" height="15" fill="rgb(249,199,1)" fg:x="47478" fg:w="26"/><text x="31.8002%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (26 samples, 0.02%)</title><rect x="31.5502%" y="325" width="0.0173%" height="15" fill="rgb(240,85,17)" fg:x="47478" fg:w="26"/><text x="31.8002%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.01%)</title><rect x="31.6858%" y="245" width="0.0126%" height="15" fill="rgb(206,108,45)" fg:x="47682" fg:w="19"/><text x="31.9358%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (72 samples, 0.05%)</title><rect x="31.6579%" y="261" width="0.0478%" height="15" fill="rgb(245,210,41)" fg:x="47640" fg:w="72"/><text x="31.9079%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (23 samples, 0.02%)</title><rect x="31.7057%" y="261" width="0.0153%" height="15" fill="rgb(206,13,37)" fg:x="47712" fg:w="23"/><text x="31.9557%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (318 samples, 0.21%)</title><rect x="31.5848%" y="277" width="0.2113%" height="15" fill="rgb(250,61,18)" fg:x="47530" fg:w="318"/><text x="31.8348%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (113 samples, 0.08%)</title><rect x="31.7210%" y="261" width="0.0751%" height="15" fill="rgb(235,172,48)" fg:x="47735" fg:w="113"/><text x="31.9710%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (43 samples, 0.03%)</title><rect x="31.7961%" y="277" width="0.0286%" height="15" fill="rgb(249,201,17)" fg:x="47848" fg:w="43"/><text x="32.0461%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20 samples, 0.01%)</title><rect x="31.9170%" y="245" width="0.0133%" height="15" fill="rgb(219,208,6)" fg:x="48030" fg:w="20"/><text x="32.1670%" y="255.50"></text></g><g><title>core::cmp::min (23 samples, 0.02%)</title><rect x="31.9323%" y="245" width="0.0153%" height="15" fill="rgb(248,31,23)" fg:x="48053" fg:w="23"/><text x="32.1823%" y="255.50"></text></g><g><title>core::cmp::Ord::min (23 samples, 0.02%)</title><rect x="31.9323%" y="229" width="0.0153%" height="15" fill="rgb(245,15,42)" fg:x="48053" fg:w="23"/><text x="32.1823%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (23 samples, 0.02%)</title><rect x="31.9323%" y="213" width="0.0153%" height="15" fill="rgb(222,217,39)" fg:x="48053" fg:w="23"/><text x="32.1823%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (283 samples, 0.19%)</title><rect x="31.8446%" y="261" width="0.1881%" height="15" fill="rgb(210,219,27)" fg:x="47921" fg:w="283"/><text x="32.0946%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (128 samples, 0.09%)</title><rect x="31.9476%" y="245" width="0.0851%" height="15" fill="rgb(252,166,36)" fg:x="48076" fg:w="128"/><text x="32.1976%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,329 samples, 0.88%)</title><rect x="31.1575%" y="405" width="0.8832%" height="15" fill="rgb(245,132,34)" fg:x="46887" fg:w="1329"/><text x="31.4075%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,329 samples, 0.88%)</title><rect x="31.1575%" y="389" width="0.8832%" height="15" fill="rgb(236,54,3)" fg:x="46887" fg:w="1329"/><text x="31.4075%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (712 samples, 0.47%)</title><rect x="31.5675%" y="373" width="0.4731%" height="15" fill="rgb(241,173,43)" fg:x="47504" fg:w="712"/><text x="31.8175%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (686 samples, 0.46%)</title><rect x="31.5848%" y="357" width="0.4559%" height="15" fill="rgb(215,190,9)" fg:x="47530" fg:w="686"/><text x="31.8348%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (686 samples, 0.46%)</title><rect x="31.5848%" y="341" width="0.4559%" height="15" fill="rgb(242,101,16)" fg:x="47530" fg:w="686"/><text x="31.8348%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (686 samples, 0.46%)</title><rect x="31.5848%" y="325" width="0.4559%" height="15" fill="rgb(223,190,21)" fg:x="47530" fg:w="686"/><text x="31.8348%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (686 samples, 0.46%)</title><rect x="31.5848%" y="309" width="0.4559%" height="15" fill="rgb(215,228,25)" fg:x="47530" fg:w="686"/><text x="31.8348%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (686 samples, 0.46%)</title><rect x="31.5848%" y="293" width="0.4559%" height="15" fill="rgb(225,36,22)" fg:x="47530" fg:w="686"/><text x="31.8348%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (325 samples, 0.22%)</title><rect x="31.8246%" y="277" width="0.2160%" height="15" fill="rgb(251,106,46)" fg:x="47891" fg:w="325"/><text x="32.0746%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="32.0672%" y="373" width="0.0106%" height="15" fill="rgb(208,90,1)" fg:x="48256" fg:w="16"/><text x="32.3172%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (43 samples, 0.03%)</title><rect x="32.0918%" y="357" width="0.0286%" height="15" fill="rgb(243,10,4)" fg:x="48293" fg:w="43"/><text x="32.3418%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (43 samples, 0.03%)</title><rect x="32.0918%" y="341" width="0.0286%" height="15" fill="rgb(212,137,27)" fg:x="48293" fg:w="43"/><text x="32.3418%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (43 samples, 0.03%)</title><rect x="32.0918%" y="325" width="0.0286%" height="15" fill="rgb(231,220,49)" fg:x="48293" fg:w="43"/><text x="32.3418%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (719 samples, 0.48%)</title><rect x="32.0778%" y="373" width="0.4778%" height="15" fill="rgb(237,96,20)" fg:x="48272" fg:w="719"/><text x="32.3278%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (655 samples, 0.44%)</title><rect x="32.1204%" y="357" width="0.4353%" height="15" fill="rgb(239,229,30)" fg:x="48336" fg:w="655"/><text x="32.3704%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (655 samples, 0.44%)</title><rect x="32.1204%" y="341" width="0.4353%" height="15" fill="rgb(219,65,33)" fg:x="48336" fg:w="655"/><text x="32.3704%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (655 samples, 0.44%)</title><rect x="32.1204%" y="325" width="0.4353%" height="15" fill="rgb(243,134,7)" fg:x="48336" fg:w="655"/><text x="32.3704%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (655 samples, 0.44%)</title><rect x="32.1204%" y="309" width="0.4353%" height="15" fill="rgb(216,177,54)" fg:x="48336" fg:w="655"/><text x="32.3704%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (655 samples, 0.44%)</title><rect x="32.1204%" y="293" width="0.4353%" height="15" fill="rgb(211,160,20)" fg:x="48336" fg:w="655"/><text x="32.3704%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (655 samples, 0.44%)</title><rect x="32.1204%" y="277" width="0.4353%" height="15" fill="rgb(239,85,39)" fg:x="48336" fg:w="655"/><text x="32.3704%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (395 samples, 0.26%)</title><rect x="32.2931%" y="261" width="0.2625%" height="15" fill="rgb(232,125,22)" fg:x="48596" fg:w="395"/><text x="32.5431%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (79 samples, 0.05%)</title><rect x="32.5556%" y="373" width="0.0525%" height="15" fill="rgb(244,57,34)" fg:x="48991" fg:w="79"/><text x="32.8056%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.03%)</title><rect x="32.6081%" y="341" width="0.0253%" height="15" fill="rgb(214,203,32)" fg:x="49070" fg:w="38"/><text x="32.8581%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (41 samples, 0.03%)</title><rect x="32.6081%" y="373" width="0.0272%" height="15" fill="rgb(207,58,43)" fg:x="49070" fg:w="41"/><text x="32.8581%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (41 samples, 0.03%)</title><rect x="32.6081%" y="357" width="0.0272%" height="15" fill="rgb(215,193,15)" fg:x="49070" fg:w="41"/><text x="32.8581%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (18 samples, 0.01%)</title><rect x="32.6354%" y="373" width="0.0120%" height="15" fill="rgb(232,15,44)" fg:x="49111" fg:w="18"/><text x="32.8854%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.01%)</title><rect x="32.6354%" y="357" width="0.0120%" height="15" fill="rgb(212,3,48)" fg:x="49111" fg:w="18"/><text x="32.8854%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,355 samples, 1.56%)</title><rect x="31.0850%" y="421" width="1.5650%" height="15" fill="rgb(218,128,7)" fg:x="46778" fg:w="2355"/><text x="31.3350%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (917 samples, 0.61%)</title><rect x="32.0406%" y="405" width="0.6094%" height="15" fill="rgb(226,216,39)" fg:x="48216" fg:w="917"/><text x="32.2906%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (886 samples, 0.59%)</title><rect x="32.0612%" y="389" width="0.5888%" height="15" fill="rgb(243,47,51)" fg:x="48247" fg:w="886"/><text x="32.3112%" y="399.50"></text></g><g><title>std::panic::catch_unwind (6,512 samples, 4.33%)</title><rect x="28.3399%" y="629" width="4.3274%" height="15" fill="rgb(241,183,40)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,512 samples, 4.33%)</title><rect x="28.3399%" y="613" width="4.3274%" height="15" fill="rgb(231,217,32)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,512 samples, 4.33%)</title><rect x="28.3399%" y="597" width="4.3274%" height="15" fill="rgb(229,61,38)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,512 samples, 4.33%)</title><rect x="28.3399%" y="581" width="4.3274%" height="15" fill="rgb(225,210,5)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,512 samples, 4.33%)</title><rect x="28.3399%" y="565" width="4.3274%" height="15" fill="rgb(231,79,45)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,512 samples, 4.33%)</title><rect x="28.3399%" y="549" width="4.3274%" height="15" fill="rgb(224,100,7)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,512 samples, 4.33%)</title><rect x="28.3399%" y="533" width="4.3274%" height="15" fill="rgb(241,198,18)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,512 samples, 4.33%)</title><rect x="28.3399%" y="517" width="4.3274%" height="15" fill="rgb(252,97,53)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="527.50">one_b..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,512 samples, 4.33%)</title><rect x="28.3399%" y="501" width="4.3274%" height="15" fill="rgb(220,88,7)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,512 samples, 4.33%)</title><rect x="28.3399%" y="485" width="4.3274%" height="15" fill="rgb(213,176,14)" fg:x="42647" fg:w="6512"/><text x="28.5899%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,989 samples, 3.32%)</title><rect x="29.3520%" y="469" width="3.3153%" height="15" fill="rgb(246,73,7)" fg:x="44170" fg:w="4989"/><text x="29.6020%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (4,989 samples, 3.32%)</title><rect x="29.3520%" y="453" width="3.3153%" height="15" fill="rgb(245,64,36)" fg:x="44170" fg:w="4989"/><text x="29.6020%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,405 samples, 1.60%)</title><rect x="31.0691%" y="437" width="1.5982%" height="15" fill="rgb(245,80,10)" fg:x="46754" fg:w="2405"/><text x="31.3191%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (26 samples, 0.02%)</title><rect x="32.6500%" y="421" width="0.0173%" height="15" fill="rgb(232,107,50)" fg:x="49133" fg:w="26"/><text x="32.9000%" y="431.50"></text></g><g><title>worker-12 (8,186 samples, 5.44%)</title><rect x="27.2281%" y="725" width="5.4398%" height="15" fill="rgb(253,3,0)" fg:x="40974" fg:w="8186"/><text x="27.4781%" y="735.50">worker-..</text></g><g><title>__clone3 (6,513 samples, 4.33%)</title><rect x="28.3399%" y="709" width="4.3280%" height="15" fill="rgb(212,99,53)" fg:x="42647" fg:w="6513"/><text x="28.5899%" y="719.50">__clo..</text></g><g><title>start_thread (6,513 samples, 4.33%)</title><rect x="28.3399%" y="693" width="4.3280%" height="15" fill="rgb(249,111,54)" fg:x="42647" fg:w="6513"/><text x="28.5899%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,513 samples, 4.33%)</title><rect x="28.3399%" y="677" width="4.3280%" height="15" fill="rgb(249,55,30)" fg:x="42647" fg:w="6513"/><text x="28.5899%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,513 samples, 4.33%)</title><rect x="28.3399%" y="661" width="4.3280%" height="15" fill="rgb(237,47,42)" fg:x="42647" fg:w="6513"/><text x="28.5899%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,513 samples, 4.33%)</title><rect x="28.3399%" y="645" width="4.3280%" height="15" fill="rgb(211,20,18)" fg:x="42647" fg:w="6513"/><text x="28.5899%" y="655.50">std::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (93 samples, 0.06%)</title><rect x="32.7623%" y="677" width="0.0618%" height="15" fill="rgb(231,203,46)" fg:x="49302" fg:w="93"/><text x="33.0123%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (93 samples, 0.06%)</title><rect x="32.7623%" y="661" width="0.0618%" height="15" fill="rgb(237,142,3)" fg:x="49302" fg:w="93"/><text x="33.0123%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (93 samples, 0.06%)</title><rect x="32.7623%" y="645" width="0.0618%" height="15" fill="rgb(241,107,1)" fg:x="49302" fg:w="93"/><text x="33.0123%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (311 samples, 0.21%)</title><rect x="32.6679%" y="693" width="0.2067%" height="15" fill="rgb(229,83,13)" fg:x="49160" fg:w="311"/><text x="32.9179%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (76 samples, 0.05%)</title><rect x="32.8241%" y="677" width="0.0505%" height="15" fill="rgb(241,91,40)" fg:x="49395" fg:w="76"/><text x="33.0741%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (87 samples, 0.06%)</title><rect x="32.8746%" y="693" width="0.0578%" height="15" fill="rgb(225,3,45)" fg:x="49471" fg:w="87"/><text x="33.1246%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (141 samples, 0.09%)</title><rect x="32.9324%" y="693" width="0.0937%" height="15" fill="rgb(244,223,14)" fg:x="49558" fg:w="141"/><text x="33.1824%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (82 samples, 0.05%)</title><rect x="32.9716%" y="677" width="0.0545%" height="15" fill="rgb(224,124,37)" fg:x="49617" fg:w="82"/><text x="33.2216%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (82 samples, 0.05%)</title><rect x="32.9716%" y="661" width="0.0545%" height="15" fill="rgb(251,171,30)" fg:x="49617" fg:w="82"/><text x="33.2216%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (82 samples, 0.05%)</title><rect x="32.9716%" y="645" width="0.0545%" height="15" fill="rgb(236,46,54)" fg:x="49617" fg:w="82"/><text x="33.2216%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (82 samples, 0.05%)</title><rect x="32.9716%" y="629" width="0.0545%" height="15" fill="rgb(245,213,5)" fg:x="49617" fg:w="82"/><text x="33.2216%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (82 samples, 0.05%)</title><rect x="32.9716%" y="613" width="0.0545%" height="15" fill="rgb(230,144,27)" fg:x="49617" fg:w="82"/><text x="33.2216%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (82 samples, 0.05%)</title><rect x="32.9716%" y="597" width="0.0545%" height="15" fill="rgb(220,86,6)" fg:x="49617" fg:w="82"/><text x="33.2216%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (26 samples, 0.02%)</title><rect x="33.0088%" y="581" width="0.0173%" height="15" fill="rgb(240,20,13)" fg:x="49673" fg:w="26"/><text x="33.2588%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (86 samples, 0.06%)</title><rect x="33.0261%" y="693" width="0.0571%" height="15" fill="rgb(217,89,34)" fg:x="49699" fg:w="86"/><text x="33.2761%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (63 samples, 0.04%)</title><rect x="33.0414%" y="677" width="0.0419%" height="15" fill="rgb(229,13,5)" fg:x="49722" fg:w="63"/><text x="33.2914%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (25 samples, 0.02%)</title><rect x="33.0833%" y="693" width="0.0166%" height="15" fill="rgb(244,67,35)" fg:x="49785" fg:w="25"/><text x="33.3333%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (25 samples, 0.02%)</title><rect x="33.0833%" y="677" width="0.0166%" height="15" fill="rgb(221,40,2)" fg:x="49785" fg:w="25"/><text x="33.3333%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (25 samples, 0.02%)</title><rect x="33.0833%" y="661" width="0.0166%" height="15" fill="rgb(237,157,21)" fg:x="49785" fg:w="25"/><text x="33.3333%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (91 samples, 0.06%)</title><rect x="33.0999%" y="693" width="0.0605%" height="15" fill="rgb(222,94,11)" fg:x="49810" fg:w="91"/><text x="33.3499%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.02%)</title><rect x="33.2015%" y="677" width="0.0246%" height="15" fill="rgb(249,113,6)" fg:x="49963" fg:w="37"/><text x="33.4515%" y="687.50"></text></g><g><title>[anon] (893 samples, 0.59%)</title><rect x="32.6679%" y="709" width="0.5934%" height="15" fill="rgb(238,137,36)" fg:x="49160" fg:w="893"/><text x="32.9179%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (152 samples, 0.10%)</title><rect x="33.1603%" y="693" width="0.1010%" height="15" fill="rgb(210,102,26)" fg:x="49901" fg:w="152"/><text x="33.4103%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (53 samples, 0.04%)</title><rect x="33.2261%" y="677" width="0.0352%" height="15" fill="rgb(218,30,30)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (53 samples, 0.04%)</title><rect x="33.2261%" y="661" width="0.0352%" height="15" fill="rgb(214,67,26)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (53 samples, 0.04%)</title><rect x="33.2261%" y="645" width="0.0352%" height="15" fill="rgb(251,9,53)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (53 samples, 0.04%)</title><rect x="33.2261%" y="629" width="0.0352%" height="15" fill="rgb(228,204,25)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (53 samples, 0.04%)</title><rect x="33.2261%" y="613" width="0.0352%" height="15" fill="rgb(207,153,8)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (53 samples, 0.04%)</title><rect x="33.2261%" y="597" width="0.0352%" height="15" fill="rgb(242,9,16)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (53 samples, 0.04%)</title><rect x="33.2261%" y="581" width="0.0352%" height="15" fill="rgb(217,211,10)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (53 samples, 0.04%)</title><rect x="33.2261%" y="565" width="0.0352%" height="15" fill="rgb(219,228,52)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (53 samples, 0.04%)</title><rect x="33.2261%" y="549" width="0.0352%" height="15" fill="rgb(231,92,29)" fg:x="50000" fg:w="53"/><text x="33.4761%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (117 samples, 0.08%)</title><rect x="33.2620%" y="693" width="0.0777%" height="15" fill="rgb(232,8,23)" fg:x="50054" fg:w="117"/><text x="33.5120%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (213 samples, 0.14%)</title><rect x="33.3398%" y="693" width="0.1415%" height="15" fill="rgb(216,211,34)" fg:x="50171" fg:w="213"/><text x="33.5898%" y="703.50"></text></g><g><title>__round (31 samples, 0.02%)</title><rect x="33.4813%" y="693" width="0.0206%" height="15" fill="rgb(236,151,0)" fg:x="50384" fg:w="31"/><text x="33.7313%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (140 samples, 0.09%)</title><rect x="33.5019%" y="693" width="0.0930%" height="15" fill="rgb(209,168,3)" fg:x="50415" fg:w="140"/><text x="33.7519%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (113 samples, 0.08%)</title><rect x="33.5949%" y="693" width="0.0751%" height="15" fill="rgb(208,129,28)" fg:x="50555" fg:w="113"/><text x="33.8449%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (21 samples, 0.01%)</title><rect x="33.6561%" y="677" width="0.0140%" height="15" fill="rgb(229,78,22)" fg:x="50647" fg:w="21"/><text x="33.9061%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (21 samples, 0.01%)</title><rect x="33.6561%" y="661" width="0.0140%" height="15" fill="rgb(228,187,13)" fg:x="50647" fg:w="21"/><text x="33.9061%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (99 samples, 0.07%)</title><rect x="33.6700%" y="693" width="0.0658%" height="15" fill="rgb(240,119,24)" fg:x="50668" fg:w="99"/><text x="33.9200%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.06%)</title><rect x="33.7358%" y="645" width="0.0585%" height="15" fill="rgb(209,194,42)" fg:x="50767" fg:w="88"/><text x="33.9858%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.06%)</title><rect x="33.7358%" y="629" width="0.0585%" height="15" fill="rgb(247,200,46)" fg:x="50767" fg:w="88"/><text x="33.9858%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.06%)</title><rect x="33.7358%" y="613" width="0.0585%" height="15" fill="rgb(218,76,16)" fg:x="50767" fg:w="88"/><text x="33.9858%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (88 samples, 0.06%)</title><rect x="33.7358%" y="597" width="0.0585%" height="15" fill="rgb(225,21,48)" fg:x="50767" fg:w="88"/><text x="33.9858%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (69 samples, 0.05%)</title><rect x="33.7943%" y="613" width="0.0459%" height="15" fill="rgb(239,223,50)" fg:x="50855" fg:w="69"/><text x="34.0443%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (64 samples, 0.04%)</title><rect x="33.8401%" y="613" width="0.0425%" height="15" fill="rgb(244,45,21)" fg:x="50924" fg:w="64"/><text x="34.0901%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (80 samples, 0.05%)</title><rect x="33.8827%" y="613" width="0.0532%" height="15" fill="rgb(232,33,43)" fg:x="50988" fg:w="80"/><text x="34.1327%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (80 samples, 0.05%)</title><rect x="33.8827%" y="597" width="0.0532%" height="15" fill="rgb(209,8,3)" fg:x="50988" fg:w="80"/><text x="34.1327%" y="607.50"></text></g><g><title>[unknown] (1,047 samples, 0.70%)</title><rect x="33.2613%" y="709" width="0.6958%" height="15" fill="rgb(214,25,53)" fg:x="50053" fg:w="1047"/><text x="33.5113%" y="719.50"></text></g><g><title>one_brc::process_lines (333 samples, 0.22%)</title><rect x="33.7358%" y="693" width="0.2213%" height="15" fill="rgb(254,186,54)" fg:x="50767" fg:w="333"/><text x="33.9858%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (333 samples, 0.22%)</title><rect x="33.7358%" y="677" width="0.2213%" height="15" fill="rgb(208,174,49)" fg:x="50767" fg:w="333"/><text x="33.9858%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (333 samples, 0.22%)</title><rect x="33.7358%" y="661" width="0.2213%" height="15" fill="rgb(233,191,51)" fg:x="50767" fg:w="333"/><text x="33.9858%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (245 samples, 0.16%)</title><rect x="33.7943%" y="645" width="0.1628%" height="15" fill="rgb(222,134,10)" fg:x="50855" fg:w="245"/><text x="34.0443%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (245 samples, 0.16%)</title><rect x="33.7943%" y="629" width="0.1628%" height="15" fill="rgb(230,226,20)" fg:x="50855" fg:w="245"/><text x="34.0443%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (32 samples, 0.02%)</title><rect x="33.9358%" y="613" width="0.0213%" height="15" fill="rgb(251,111,25)" fg:x="51068" fg:w="32"/><text x="34.1858%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (37 samples, 0.02%)</title><rect x="34.1711%" y="389" width="0.0246%" height="15" fill="rgb(224,40,46)" fg:x="51422" fg:w="37"/><text x="34.4211%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (37 samples, 0.02%)</title><rect x="34.1711%" y="373" width="0.0246%" height="15" fill="rgb(236,108,47)" fg:x="51422" fg:w="37"/><text x="34.4211%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (37 samples, 0.02%)</title><rect x="34.1711%" y="357" width="0.0246%" height="15" fill="rgb(234,93,0)" fg:x="51422" fg:w="37"/><text x="34.4211%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (171 samples, 0.11%)</title><rect x="34.1957%" y="389" width="0.1136%" height="15" fill="rgb(224,213,32)" fg:x="51459" fg:w="171"/><text x="34.4457%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (171 samples, 0.11%)</title><rect x="34.1957%" y="373" width="0.1136%" height="15" fill="rgb(251,11,48)" fg:x="51459" fg:w="171"/><text x="34.4457%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (171 samples, 0.11%)</title><rect x="34.1957%" y="357" width="0.1136%" height="15" fill="rgb(236,173,5)" fg:x="51459" fg:w="171"/><text x="34.4457%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (167 samples, 0.11%)</title><rect x="34.1983%" y="341" width="0.1110%" height="15" fill="rgb(230,95,12)" fg:x="51463" fg:w="167"/><text x="34.4483%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (108 samples, 0.07%)</title><rect x="34.3093%" y="389" width="0.0718%" height="15" fill="rgb(232,209,1)" fg:x="51630" fg:w="108"/><text x="34.5593%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (108 samples, 0.07%)</title><rect x="34.3093%" y="373" width="0.0718%" height="15" fill="rgb(232,6,1)" fg:x="51630" fg:w="108"/><text x="34.5593%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (41 samples, 0.03%)</title><rect x="34.5040%" y="357" width="0.0272%" height="15" fill="rgb(210,224,50)" fg:x="51923" fg:w="41"/><text x="34.7540%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (29 samples, 0.02%)</title><rect x="34.5312%" y="357" width="0.0193%" height="15" fill="rgb(228,127,35)" fg:x="51964" fg:w="29"/><text x="34.7812%" y="367.50"></text></g><g><title>core::ptr::align_offset (29 samples, 0.02%)</title><rect x="34.5312%" y="341" width="0.0193%" height="15" fill="rgb(245,102,45)" fg:x="51964" fg:w="29"/><text x="34.7812%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (72 samples, 0.05%)</title><rect x="34.5505%" y="357" width="0.0478%" height="15" fill="rgb(214,1,49)" fg:x="51993" fg:w="72"/><text x="34.8005%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,573 samples, 1.05%)</title><rect x="34.0056%" y="405" width="1.0453%" height="15" fill="rgb(226,163,40)" fg:x="51173" fg:w="1573"/><text x="34.2556%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (1,008 samples, 0.67%)</title><rect x="34.3811%" y="389" width="0.6698%" height="15" fill="rgb(239,212,28)" fg:x="51738" fg:w="1008"/><text x="34.6311%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (962 samples, 0.64%)</title><rect x="34.4116%" y="373" width="0.6393%" height="15" fill="rgb(220,20,13)" fg:x="51784" fg:w="962"/><text x="34.6616%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (681 samples, 0.45%)</title><rect x="34.5984%" y="357" width="0.4525%" height="15" fill="rgb(210,164,35)" fg:x="52065" fg:w="681"/><text x="34.8484%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,677 samples, 1.11%)</title><rect x="33.9584%" y="437" width="1.1144%" height="15" fill="rgb(248,109,41)" fg:x="51102" fg:w="1677"/><text x="34.2084%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,677 samples, 1.11%)</title><rect x="33.9584%" y="421" width="1.1144%" height="15" fill="rgb(238,23,50)" fg:x="51102" fg:w="1677"/><text x="34.2084%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (32 samples, 0.02%)</title><rect x="35.0516%" y="405" width="0.0213%" height="15" fill="rgb(211,48,49)" fg:x="52747" fg:w="32"/><text x="35.3016%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (32 samples, 0.02%)</title><rect x="35.0516%" y="389" width="0.0213%" height="15" fill="rgb(223,36,21)" fg:x="52747" fg:w="32"/><text x="35.3016%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,789 samples, 1.19%)</title><rect x="33.9584%" y="469" width="1.1888%" height="15" fill="rgb(207,123,46)" fg:x="51102" fg:w="1789"/><text x="34.2084%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,789 samples, 1.19%)</title><rect x="33.9584%" y="453" width="1.1888%" height="15" fill="rgb(240,218,32)" fg:x="51102" fg:w="1789"/><text x="34.2084%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (112 samples, 0.07%)</title><rect x="35.0728%" y="437" width="0.0744%" height="15" fill="rgb(252,5,43)" fg:x="52779" fg:w="112"/><text x="35.3228%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (112 samples, 0.07%)</title><rect x="35.0728%" y="421" width="0.0744%" height="15" fill="rgb(252,84,19)" fg:x="52779" fg:w="112"/><text x="35.3228%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (112 samples, 0.07%)</title><rect x="35.0728%" y="405" width="0.0744%" height="15" fill="rgb(243,152,39)" fg:x="52779" fg:w="112"/><text x="35.3228%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (112 samples, 0.07%)</title><rect x="35.0728%" y="389" width="0.0744%" height="15" fill="rgb(234,160,15)" fg:x="52779" fg:w="112"/><text x="35.3228%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (55 samples, 0.04%)</title><rect x="35.1107%" y="373" width="0.0365%" height="15" fill="rgb(237,34,20)" fg:x="52836" fg:w="55"/><text x="35.3607%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (55 samples, 0.04%)</title><rect x="35.1107%" y="357" width="0.0365%" height="15" fill="rgb(229,97,13)" fg:x="52836" fg:w="55"/><text x="35.3607%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (55 samples, 0.04%)</title><rect x="35.1107%" y="341" width="0.0365%" height="15" fill="rgb(234,71,50)" fg:x="52836" fg:w="55"/><text x="35.3607%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (55 samples, 0.04%)</title><rect x="35.1107%" y="325" width="0.0365%" height="15" fill="rgb(253,155,4)" fg:x="52836" fg:w="55"/><text x="35.3607%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (55 samples, 0.04%)</title><rect x="35.1107%" y="309" width="0.0365%" height="15" fill="rgb(222,185,37)" fg:x="52836" fg:w="55"/><text x="35.3607%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (34 samples, 0.02%)</title><rect x="35.1792%" y="437" width="0.0226%" height="15" fill="rgb(251,177,13)" fg:x="52939" fg:w="34"/><text x="35.4292%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (42 samples, 0.03%)</title><rect x="35.2017%" y="405" width="0.0279%" height="15" fill="rgb(250,179,40)" fg:x="52973" fg:w="42"/><text x="35.4517%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (89 samples, 0.06%)</title><rect x="35.3433%" y="373" width="0.0591%" height="15" fill="rgb(242,44,2)" fg:x="53186" fg:w="89"/><text x="35.5933%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (120 samples, 0.08%)</title><rect x="35.4024%" y="373" width="0.0797%" height="15" fill="rgb(216,177,13)" fg:x="53275" fg:w="120"/><text x="35.6524%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (278 samples, 0.18%)</title><rect x="35.3114%" y="389" width="0.1847%" height="15" fill="rgb(216,106,43)" fg:x="53138" fg:w="278"/><text x="35.5614%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (21 samples, 0.01%)</title><rect x="35.4822%" y="373" width="0.0140%" height="15" fill="rgb(216,183,2)" fg:x="53395" fg:w="21"/><text x="35.7322%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (132 samples, 0.09%)</title><rect x="35.5307%" y="373" width="0.0877%" height="15" fill="rgb(249,75,3)" fg:x="53468" fg:w="132"/><text x="35.7807%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (35 samples, 0.02%)</title><rect x="35.9028%" y="325" width="0.0233%" height="15" fill="rgb(219,67,39)" fg:x="54028" fg:w="35"/><text x="36.1528%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (33 samples, 0.02%)</title><rect x="35.9267%" y="309" width="0.0219%" height="15" fill="rgb(253,228,2)" fg:x="54064" fg:w="33"/><text x="36.1767%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (336 samples, 0.22%)</title><rect x="35.7460%" y="341" width="0.2233%" height="15" fill="rgb(235,138,27)" fg:x="53792" fg:w="336"/><text x="35.9960%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (65 samples, 0.04%)</title><rect x="35.9261%" y="325" width="0.0432%" height="15" fill="rgb(236,97,51)" fg:x="54063" fg:w="65"/><text x="36.1761%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (31 samples, 0.02%)</title><rect x="35.9487%" y="309" width="0.0206%" height="15" fill="rgb(240,80,30)" fg:x="54097" fg:w="31"/><text x="36.1987%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,159 samples, 0.77%)</title><rect x="35.2017%" y="437" width="0.7702%" height="15" fill="rgb(230,178,19)" fg:x="52973" fg:w="1159"/><text x="35.4517%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,159 samples, 0.77%)</title><rect x="35.2017%" y="421" width="0.7702%" height="15" fill="rgb(210,190,27)" fg:x="52973" fg:w="1159"/><text x="35.4517%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,117 samples, 0.74%)</title><rect x="35.2297%" y="405" width="0.7423%" height="15" fill="rgb(222,107,31)" fg:x="53015" fg:w="1117"/><text x="35.4797%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (716 samples, 0.48%)</title><rect x="35.4961%" y="389" width="0.4758%" height="15" fill="rgb(216,127,34)" fg:x="53416" fg:w="716"/><text x="35.7461%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (532 samples, 0.35%)</title><rect x="35.6184%" y="373" width="0.3535%" height="15" fill="rgb(234,116,52)" fg:x="53600" fg:w="532"/><text x="35.8684%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (431 samples, 0.29%)</title><rect x="35.6855%" y="357" width="0.2864%" height="15" fill="rgb(222,124,15)" fg:x="53701" fg:w="431"/><text x="35.9355%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (62 samples, 0.04%)</title><rect x="35.9985%" y="421" width="0.0412%" height="15" fill="rgb(231,179,28)" fg:x="54172" fg:w="62"/><text x="36.2485%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (27 samples, 0.02%)</title><rect x="36.2105%" y="405" width="0.0179%" height="15" fill="rgb(226,93,45)" fg:x="54491" fg:w="27"/><text x="36.4605%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.02%)</title><rect x="36.2105%" y="389" width="0.0179%" height="15" fill="rgb(215,8,51)" fg:x="54491" fg:w="27"/><text x="36.4605%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.02%)</title><rect x="36.2105%" y="373" width="0.0179%" height="15" fill="rgb(223,106,5)" fg:x="54491" fg:w="27"/><text x="36.4605%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (288 samples, 0.19%)</title><rect x="36.2284%" y="405" width="0.1914%" height="15" fill="rgb(250,191,5)" fg:x="54518" fg:w="288"/><text x="36.4784%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (288 samples, 0.19%)</title><rect x="36.2284%" y="389" width="0.1914%" height="15" fill="rgb(242,132,44)" fg:x="54518" fg:w="288"/><text x="36.4784%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (288 samples, 0.19%)</title><rect x="36.2284%" y="373" width="0.1914%" height="15" fill="rgb(251,152,29)" fg:x="54518" fg:w="288"/><text x="36.4784%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (257 samples, 0.17%)</title><rect x="36.2490%" y="357" width="0.1708%" height="15" fill="rgb(218,179,5)" fg:x="54549" fg:w="257"/><text x="36.4990%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (61 samples, 0.04%)</title><rect x="36.4198%" y="405" width="0.0405%" height="15" fill="rgb(227,67,19)" fg:x="54806" fg:w="61"/><text x="36.6698%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (61 samples, 0.04%)</title><rect x="36.4198%" y="389" width="0.0405%" height="15" fill="rgb(233,119,31)" fg:x="54806" fg:w="61"/><text x="36.6698%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (164 samples, 0.11%)</title><rect x="36.4610%" y="389" width="0.1090%" height="15" fill="rgb(241,120,22)" fg:x="54868" fg:w="164"/><text x="36.7110%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (129 samples, 0.09%)</title><rect x="36.4843%" y="373" width="0.0857%" height="15" fill="rgb(224,102,30)" fg:x="54903" fg:w="129"/><text x="36.7343%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,255 samples, 0.83%)</title><rect x="35.9719%" y="437" width="0.8340%" height="15" fill="rgb(210,164,37)" fg:x="54132" fg:w="1255"/><text x="36.2219%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,147 samples, 0.76%)</title><rect x="36.0437%" y="421" width="0.7622%" height="15" fill="rgb(226,191,16)" fg:x="54240" fg:w="1147"/><text x="36.2937%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (520 samples, 0.35%)</title><rect x="36.4604%" y="405" width="0.3456%" height="15" fill="rgb(214,40,45)" fg:x="54867" fg:w="520"/><text x="36.7104%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (355 samples, 0.24%)</title><rect x="36.5700%" y="389" width="0.2359%" height="15" fill="rgb(244,29,26)" fg:x="55032" fg:w="355"/><text x="36.8200%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (243 samples, 0.16%)</title><rect x="36.8059%" y="437" width="0.1615%" height="15" fill="rgb(216,16,5)" fg:x="55387" fg:w="243"/><text x="37.0559%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (161 samples, 0.11%)</title><rect x="36.8604%" y="421" width="0.1070%" height="15" fill="rgb(249,76,35)" fg:x="55469" fg:w="161"/><text x="37.1104%" y="431.50"></text></g><g><title>__round (161 samples, 0.11%)</title><rect x="36.8604%" y="405" width="0.1070%" height="15" fill="rgb(207,11,44)" fg:x="55469" fg:w="161"/><text x="37.1104%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (55 samples, 0.04%)</title><rect x="37.0544%" y="389" width="0.0365%" height="15" fill="rgb(228,190,49)" fg:x="55761" fg:w="55"/><text x="37.3044%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (231 samples, 0.15%)</title><rect x="36.9674%" y="437" width="0.1535%" height="15" fill="rgb(214,173,12)" fg:x="55630" fg:w="231"/><text x="37.2174%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (231 samples, 0.15%)</title><rect x="36.9674%" y="421" width="0.1535%" height="15" fill="rgb(218,26,35)" fg:x="55630" fg:w="231"/><text x="37.2174%" y="431.50"></text></g><g><title>one_brc::Measurement::record (231 samples, 0.15%)</title><rect x="36.9674%" y="405" width="0.1535%" height="15" fill="rgb(220,200,19)" fg:x="55630" fg:w="231"/><text x="37.2174%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (45 samples, 0.03%)</title><rect x="37.0910%" y="389" width="0.0299%" height="15" fill="rgb(239,95,49)" fg:x="55816" fg:w="45"/><text x="37.3410%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (66 samples, 0.04%)</title><rect x="37.3402%" y="309" width="0.0439%" height="15" fill="rgb(235,85,53)" fg:x="56191" fg:w="66"/><text x="37.5902%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (158 samples, 0.10%)</title><rect x="37.3023%" y="325" width="0.1050%" height="15" fill="rgb(233,133,31)" fg:x="56134" fg:w="158"/><text x="37.5523%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.02%)</title><rect x="37.3840%" y="309" width="0.0233%" height="15" fill="rgb(218,25,20)" fg:x="56257" fg:w="35"/><text x="37.6340%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (163 samples, 0.11%)</title><rect x="37.4525%" y="309" width="0.1083%" height="15" fill="rgb(252,210,38)" fg:x="56360" fg:w="163"/><text x="37.7025%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (596 samples, 0.40%)</title><rect x="37.2425%" y="373" width="0.3961%" height="15" fill="rgb(242,134,21)" fg:x="56044" fg:w="596"/><text x="37.4925%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (596 samples, 0.40%)</title><rect x="37.2425%" y="357" width="0.3961%" height="15" fill="rgb(213,28,48)" fg:x="56044" fg:w="596"/><text x="37.4925%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (596 samples, 0.40%)</title><rect x="37.2425%" y="341" width="0.3961%" height="15" fill="rgb(250,196,2)" fg:x="56044" fg:w="596"/><text x="37.4925%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (348 samples, 0.23%)</title><rect x="37.4073%" y="325" width="0.2313%" height="15" fill="rgb(227,5,17)" fg:x="56292" fg:w="348"/><text x="37.6573%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (117 samples, 0.08%)</title><rect x="37.5608%" y="309" width="0.0777%" height="15" fill="rgb(221,226,24)" fg:x="56523" fg:w="117"/><text x="37.8108%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (67 samples, 0.04%)</title><rect x="37.6386%" y="373" width="0.0445%" height="15" fill="rgb(211,5,48)" fg:x="56640" fg:w="67"/><text x="37.8886%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (23 samples, 0.02%)</title><rect x="37.6678%" y="357" width="0.0153%" height="15" fill="rgb(219,150,6)" fg:x="56684" fg:w="23"/><text x="37.9178%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (23 samples, 0.02%)</title><rect x="37.6678%" y="341" width="0.0153%" height="15" fill="rgb(251,46,16)" fg:x="56684" fg:w="23"/><text x="37.9178%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (23 samples, 0.02%)</title><rect x="37.6678%" y="325" width="0.0153%" height="15" fill="rgb(220,204,40)" fg:x="56684" fg:w="23"/><text x="37.9178%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.01%)</title><rect x="37.8200%" y="245" width="0.0126%" height="15" fill="rgb(211,85,2)" fg:x="56913" fg:w="19"/><text x="38.0700%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (66 samples, 0.04%)</title><rect x="37.7980%" y="261" width="0.0439%" height="15" fill="rgb(229,17,7)" fg:x="56880" fg:w="66"/><text x="38.0480%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (20 samples, 0.01%)</title><rect x="37.8419%" y="261" width="0.0133%" height="15" fill="rgb(239,72,28)" fg:x="56946" fg:w="20"/><text x="38.0919%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (381 samples, 0.25%)</title><rect x="37.7077%" y="277" width="0.2532%" height="15" fill="rgb(230,47,54)" fg:x="56744" fg:w="381"/><text x="37.9577%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (159 samples, 0.11%)</title><rect x="37.8552%" y="261" width="0.1057%" height="15" fill="rgb(214,50,8)" fg:x="56966" fg:w="159"/><text x="38.1052%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (46 samples, 0.03%)</title><rect x="37.9608%" y="277" width="0.0306%" height="15" fill="rgb(216,198,43)" fg:x="57125" fg:w="46"/><text x="38.2108%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 0.02%)</title><rect x="38.0864%" y="245" width="0.0186%" height="15" fill="rgb(234,20,35)" fg:x="57314" fg:w="28"/><text x="38.3364%" y="255.50"></text></g><g><title>core::cmp::min (20 samples, 0.01%)</title><rect x="38.1084%" y="245" width="0.0133%" height="15" fill="rgb(254,45,19)" fg:x="57347" fg:w="20"/><text x="38.3584%" y="255.50"></text></g><g><title>core::cmp::Ord::min (20 samples, 0.01%)</title><rect x="38.1084%" y="229" width="0.0133%" height="15" fill="rgb(219,14,44)" fg:x="57347" fg:w="20"/><text x="38.3584%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (20 samples, 0.01%)</title><rect x="38.1084%" y="213" width="0.0133%" height="15" fill="rgb(217,220,26)" fg:x="57347" fg:w="20"/><text x="38.3584%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (338 samples, 0.22%)</title><rect x="38.0080%" y="261" width="0.2246%" height="15" fill="rgb(213,158,28)" fg:x="57196" fg:w="338"/><text x="38.2580%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (167 samples, 0.11%)</title><rect x="38.1217%" y="245" width="0.1110%" height="15" fill="rgb(252,51,52)" fg:x="57367" fg:w="167"/><text x="38.3717%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,528 samples, 1.02%)</title><rect x="37.2265%" y="405" width="1.0154%" height="15" fill="rgb(246,89,16)" fg:x="56020" fg:w="1528"/><text x="37.4765%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,528 samples, 1.02%)</title><rect x="37.2265%" y="389" width="1.0154%" height="15" fill="rgb(216,158,49)" fg:x="56020" fg:w="1528"/><text x="37.4765%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (841 samples, 0.56%)</title><rect x="37.6831%" y="373" width="0.5589%" height="15" fill="rgb(236,107,19)" fg:x="56707" fg:w="841"/><text x="37.9331%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (804 samples, 0.53%)</title><rect x="37.7077%" y="357" width="0.5343%" height="15" fill="rgb(228,185,30)" fg:x="56744" fg:w="804"/><text x="37.9577%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (804 samples, 0.53%)</title><rect x="37.7077%" y="341" width="0.5343%" height="15" fill="rgb(246,134,8)" fg:x="56744" fg:w="804"/><text x="37.9577%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (804 samples, 0.53%)</title><rect x="37.7077%" y="325" width="0.5343%" height="15" fill="rgb(214,143,50)" fg:x="56744" fg:w="804"/><text x="37.9577%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (804 samples, 0.53%)</title><rect x="37.7077%" y="309" width="0.5343%" height="15" fill="rgb(228,75,8)" fg:x="56744" fg:w="804"/><text x="37.9577%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (804 samples, 0.53%)</title><rect x="37.7077%" y="293" width="0.5343%" height="15" fill="rgb(207,175,4)" fg:x="56744" fg:w="804"/><text x="37.9577%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (377 samples, 0.25%)</title><rect x="37.9914%" y="277" width="0.2505%" height="15" fill="rgb(205,108,24)" fg:x="57171" fg:w="377"/><text x="38.2414%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.02%)</title><rect x="38.2692%" y="373" width="0.0206%" height="15" fill="rgb(244,120,49)" fg:x="57589" fg:w="31"/><text x="38.5192%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (50 samples, 0.03%)</title><rect x="38.3024%" y="357" width="0.0332%" height="15" fill="rgb(223,47,38)" fg:x="57639" fg:w="50"/><text x="38.5524%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (50 samples, 0.03%)</title><rect x="38.3024%" y="341" width="0.0332%" height="15" fill="rgb(229,179,11)" fg:x="57639" fg:w="50"/><text x="38.5524%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (50 samples, 0.03%)</title><rect x="38.3024%" y="325" width="0.0332%" height="15" fill="rgb(231,122,1)" fg:x="57639" fg:w="50"/><text x="38.5524%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (818 samples, 0.54%)</title><rect x="38.2898%" y="373" width="0.5436%" height="15" fill="rgb(245,119,9)" fg:x="57620" fg:w="818"/><text x="38.5398%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (749 samples, 0.50%)</title><rect x="38.3356%" y="357" width="0.4977%" height="15" fill="rgb(241,163,25)" fg:x="57689" fg:w="749"/><text x="38.5856%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (749 samples, 0.50%)</title><rect x="38.3356%" y="341" width="0.4977%" height="15" fill="rgb(217,214,3)" fg:x="57689" fg:w="749"/><text x="38.5856%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (749 samples, 0.50%)</title><rect x="38.3356%" y="325" width="0.4977%" height="15" fill="rgb(240,86,28)" fg:x="57689" fg:w="749"/><text x="38.5856%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (749 samples, 0.50%)</title><rect x="38.3356%" y="309" width="0.4977%" height="15" fill="rgb(215,47,9)" fg:x="57689" fg:w="749"/><text x="38.5856%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (749 samples, 0.50%)</title><rect x="38.3356%" y="293" width="0.4977%" height="15" fill="rgb(252,25,45)" fg:x="57689" fg:w="749"/><text x="38.5856%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (749 samples, 0.50%)</title><rect x="38.3356%" y="277" width="0.4977%" height="15" fill="rgb(251,164,9)" fg:x="57689" fg:w="749"/><text x="38.5856%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (488 samples, 0.32%)</title><rect x="38.5091%" y="261" width="0.3243%" height="15" fill="rgb(233,194,0)" fg:x="57950" fg:w="488"/><text x="38.7591%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (89 samples, 0.06%)</title><rect x="38.8334%" y="373" width="0.0591%" height="15" fill="rgb(249,111,24)" fg:x="58438" fg:w="89"/><text x="39.0834%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.03%)</title><rect x="38.8925%" y="341" width="0.0312%" height="15" fill="rgb(250,223,3)" fg:x="58527" fg:w="47"/><text x="39.1425%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (52 samples, 0.03%)</title><rect x="38.8925%" y="373" width="0.0346%" height="15" fill="rgb(236,178,37)" fg:x="58527" fg:w="52"/><text x="39.1425%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (52 samples, 0.03%)</title><rect x="38.8925%" y="357" width="0.0346%" height="15" fill="rgb(241,158,50)" fg:x="58527" fg:w="52"/><text x="39.1425%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="38.9271%" y="373" width="0.0106%" height="15" fill="rgb(213,121,41)" fg:x="58579" fg:w="16"/><text x="39.1771%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="38.9271%" y="357" width="0.0106%" height="15" fill="rgb(240,92,3)" fg:x="58579" fg:w="16"/><text x="39.1771%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,706 samples, 1.80%)</title><rect x="37.1415%" y="421" width="1.7982%" height="15" fill="rgb(205,123,3)" fg:x="55892" fg:w="2706"/><text x="37.3915%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,050 samples, 0.70%)</title><rect x="38.2419%" y="405" width="0.6977%" height="15" fill="rgb(205,97,47)" fg:x="57548" fg:w="1050"/><text x="38.4919%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,020 samples, 0.68%)</title><rect x="38.2619%" y="389" width="0.6778%" height="15" fill="rgb(247,152,14)" fg:x="57578" fg:w="1020"/><text x="38.5119%" y="399.50"></text></g><g><title>worker-13 (9,469 samples, 6.29%)</title><rect x="32.6679%" y="725" width="6.2924%" height="15" fill="rgb(248,195,53)" fg:x="49160" fg:w="9469"/><text x="32.9179%" y="735.50">worker-13</text></g><g><title>__clone3 (7,529 samples, 5.00%)</title><rect x="33.9571%" y="709" width="5.0032%" height="15" fill="rgb(226,201,16)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="719.50">__clon..</text></g><g><title>start_thread (7,529 samples, 5.00%)</title><rect x="33.9571%" y="693" width="5.0032%" height="15" fill="rgb(205,98,0)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="703.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (7,529 samples, 5.00%)</title><rect x="33.9571%" y="677" width="5.0032%" height="15" fill="rgb(214,191,48)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="687.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7,529 samples, 5.00%)</title><rect x="33.9571%" y="661" width="5.0032%" height="15" fill="rgb(237,112,39)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="671.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (7,529 samples, 5.00%)</title><rect x="33.9571%" y="645" width="5.0032%" height="15" fill="rgb(247,203,27)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="655.50">std::t..</text></g><g><title>std::panic::catch_unwind (7,529 samples, 5.00%)</title><rect x="33.9571%" y="629" width="5.0032%" height="15" fill="rgb(235,124,28)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="639.50">std::p..</text></g><g><title>std::panicking::try (7,529 samples, 5.00%)</title><rect x="33.9571%" y="613" width="5.0032%" height="15" fill="rgb(208,207,46)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="623.50">std::p..</text></g><g><title>std::panicking::try::do_call (7,529 samples, 5.00%)</title><rect x="33.9571%" y="597" width="5.0032%" height="15" fill="rgb(234,176,4)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="607.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,529 samples, 5.00%)</title><rect x="33.9571%" y="581" width="5.0032%" height="15" fill="rgb(230,133,28)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="591.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (7,529 samples, 5.00%)</title><rect x="33.9571%" y="565" width="5.0032%" height="15" fill="rgb(211,137,40)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="575.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7,529 samples, 5.00%)</title><rect x="33.9571%" y="549" width="5.0032%" height="15" fill="rgb(254,35,13)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="559.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (7,529 samples, 5.00%)</title><rect x="33.9571%" y="533" width="5.0032%" height="15" fill="rgb(225,49,51)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="543.50">one_br..</text></g><g><title>one_brc::process_lines (7,529 samples, 5.00%)</title><rect x="33.9571%" y="517" width="5.0032%" height="15" fill="rgb(251,10,15)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="527.50">one_br..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7,529 samples, 5.00%)</title><rect x="33.9571%" y="501" width="5.0032%" height="15" fill="rgb(228,207,15)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="511.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7,529 samples, 5.00%)</title><rect x="33.9571%" y="485" width="5.0032%" height="15" fill="rgb(241,99,19)" fg:x="51100" fg:w="7529"/><text x="34.2071%" y="495.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,738 samples, 3.81%)</title><rect x="35.1473%" y="469" width="3.8130%" height="15" fill="rgb(207,104,49)" fg:x="52891" fg:w="5738"/><text x="35.3973%" y="479.50">core..</text></g><g><title>one_brc::process_lines::_{{closure}} (5,738 samples, 3.81%)</title><rect x="35.1473%" y="453" width="3.8130%" height="15" fill="rgb(234,99,18)" fg:x="52891" fg:w="5738"/><text x="35.3973%" y="463.50">one_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,767 samples, 1.84%)</title><rect x="37.1216%" y="437" width="1.8387%" height="15" fill="rgb(213,191,49)" fg:x="55862" fg:w="2767"/><text x="37.3716%" y="447.50">s..</text></g><g><title>std::collections::hash::map::map_entry (31 samples, 0.02%)</title><rect x="38.9397%" y="421" width="0.0206%" height="15" fill="rgb(210,226,19)" fg:x="58598" fg:w="31"/><text x="39.1897%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (97 samples, 0.06%)</title><rect x="39.0414%" y="677" width="0.0645%" height="15" fill="rgb(229,97,18)" fg:x="58751" fg:w="97"/><text x="39.2914%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (97 samples, 0.06%)</title><rect x="39.0414%" y="661" width="0.0645%" height="15" fill="rgb(211,167,15)" fg:x="58751" fg:w="97"/><text x="39.2914%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (97 samples, 0.06%)</title><rect x="39.0414%" y="645" width="0.0645%" height="15" fill="rgb(210,169,34)" fg:x="58751" fg:w="97"/><text x="39.2914%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (299 samples, 0.20%)</title><rect x="38.9603%" y="693" width="0.1987%" height="15" fill="rgb(241,121,31)" fg:x="58629" fg:w="299"/><text x="39.2103%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (80 samples, 0.05%)</title><rect x="39.1058%" y="677" width="0.0532%" height="15" fill="rgb(232,40,11)" fg:x="58848" fg:w="80"/><text x="39.3558%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (89 samples, 0.06%)</title><rect x="39.1590%" y="693" width="0.0591%" height="15" fill="rgb(205,86,26)" fg:x="58928" fg:w="89"/><text x="39.4090%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (165 samples, 0.11%)</title><rect x="39.2181%" y="693" width="0.1096%" height="15" fill="rgb(231,126,28)" fg:x="59017" fg:w="165"/><text x="39.4681%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (88 samples, 0.06%)</title><rect x="39.2693%" y="677" width="0.0585%" height="15" fill="rgb(219,221,18)" fg:x="59094" fg:w="88"/><text x="39.5193%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (88 samples, 0.06%)</title><rect x="39.2693%" y="661" width="0.0585%" height="15" fill="rgb(211,40,0)" fg:x="59094" fg:w="88"/><text x="39.5193%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (88 samples, 0.06%)</title><rect x="39.2693%" y="645" width="0.0585%" height="15" fill="rgb(239,85,43)" fg:x="59094" fg:w="88"/><text x="39.5193%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (88 samples, 0.06%)</title><rect x="39.2693%" y="629" width="0.0585%" height="15" fill="rgb(231,55,21)" fg:x="59094" fg:w="88"/><text x="39.5193%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (88 samples, 0.06%)</title><rect x="39.2693%" y="613" width="0.0585%" height="15" fill="rgb(225,184,43)" fg:x="59094" fg:w="88"/><text x="39.5193%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (88 samples, 0.06%)</title><rect x="39.2693%" y="597" width="0.0585%" height="15" fill="rgb(251,158,41)" fg:x="59094" fg:w="88"/><text x="39.5193%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (28 samples, 0.02%)</title><rect x="39.3092%" y="581" width="0.0186%" height="15" fill="rgb(234,159,37)" fg:x="59154" fg:w="28"/><text x="39.5592%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (75 samples, 0.05%)</title><rect x="39.3278%" y="693" width="0.0498%" height="15" fill="rgb(216,204,22)" fg:x="59182" fg:w="75"/><text x="39.5778%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (45 samples, 0.03%)</title><rect x="39.3477%" y="677" width="0.0299%" height="15" fill="rgb(214,17,3)" fg:x="59212" fg:w="45"/><text x="39.5977%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (19 samples, 0.01%)</title><rect x="39.3776%" y="693" width="0.0126%" height="15" fill="rgb(212,111,17)" fg:x="59257" fg:w="19"/><text x="39.6276%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (19 samples, 0.01%)</title><rect x="39.3776%" y="677" width="0.0126%" height="15" fill="rgb(221,157,24)" fg:x="59257" fg:w="19"/><text x="39.6276%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (19 samples, 0.01%)</title><rect x="39.3776%" y="661" width="0.0126%" height="15" fill="rgb(252,16,13)" fg:x="59257" fg:w="19"/><text x="39.6276%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (103 samples, 0.07%)</title><rect x="39.3902%" y="693" width="0.0684%" height="15" fill="rgb(221,62,2)" fg:x="59276" fg:w="103"/><text x="39.6402%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (26 samples, 0.02%)</title><rect x="39.4952%" y="677" width="0.0173%" height="15" fill="rgb(247,87,22)" fg:x="59434" fg:w="26"/><text x="39.7452%" y="687.50"></text></g><g><title>[anon] (874 samples, 0.58%)</title><rect x="38.9603%" y="709" width="0.5808%" height="15" fill="rgb(215,73,9)" fg:x="58629" fg:w="874"/><text x="39.2103%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (124 samples, 0.08%)</title><rect x="39.4587%" y="693" width="0.0824%" height="15" fill="rgb(207,175,33)" fg:x="59379" fg:w="124"/><text x="39.7087%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (43 samples, 0.03%)</title><rect x="39.5125%" y="677" width="0.0286%" height="15" fill="rgb(243,129,54)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (43 samples, 0.03%)</title><rect x="39.5125%" y="661" width="0.0286%" height="15" fill="rgb(227,119,45)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (43 samples, 0.03%)</title><rect x="39.5125%" y="645" width="0.0286%" height="15" fill="rgb(205,109,36)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (43 samples, 0.03%)</title><rect x="39.5125%" y="629" width="0.0286%" height="15" fill="rgb(205,6,39)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (43 samples, 0.03%)</title><rect x="39.5125%" y="613" width="0.0286%" height="15" fill="rgb(221,32,16)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (43 samples, 0.03%)</title><rect x="39.5125%" y="597" width="0.0286%" height="15" fill="rgb(228,144,50)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (43 samples, 0.03%)</title><rect x="39.5125%" y="581" width="0.0286%" height="15" fill="rgb(229,201,53)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (43 samples, 0.03%)</title><rect x="39.5125%" y="565" width="0.0286%" height="15" fill="rgb(249,153,27)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (43 samples, 0.03%)</title><rect x="39.5125%" y="549" width="0.0286%" height="15" fill="rgb(227,106,25)" fg:x="59460" fg:w="43"/><text x="39.7625%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (99 samples, 0.07%)</title><rect x="39.5417%" y="693" width="0.0658%" height="15" fill="rgb(230,65,29)" fg:x="59504" fg:w="99"/><text x="39.7917%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (188 samples, 0.12%)</title><rect x="39.6075%" y="693" width="0.1249%" height="15" fill="rgb(221,57,46)" fg:x="59603" fg:w="188"/><text x="39.8575%" y="703.50"></text></g><g><title>__round (30 samples, 0.02%)</title><rect x="39.7325%" y="693" width="0.0199%" height="15" fill="rgb(229,161,17)" fg:x="59791" fg:w="30"/><text x="39.9825%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (119 samples, 0.08%)</title><rect x="39.7524%" y="693" width="0.0791%" height="15" fill="rgb(222,213,11)" fg:x="59821" fg:w="119"/><text x="40.0024%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (104 samples, 0.07%)</title><rect x="39.8315%" y="693" width="0.0691%" height="15" fill="rgb(235,35,13)" fg:x="59940" fg:w="104"/><text x="40.0815%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (24 samples, 0.02%)</title><rect x="39.8846%" y="677" width="0.0159%" height="15" fill="rgb(233,158,34)" fg:x="60020" fg:w="24"/><text x="40.1346%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (24 samples, 0.02%)</title><rect x="39.8846%" y="661" width="0.0159%" height="15" fill="rgb(215,151,48)" fg:x="60020" fg:w="24"/><text x="40.1346%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (87 samples, 0.06%)</title><rect x="39.9006%" y="693" width="0.0578%" height="15" fill="rgb(229,84,14)" fg:x="60044" fg:w="87"/><text x="40.1506%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.03%)</title><rect x="39.9584%" y="645" width="0.0346%" height="15" fill="rgb(229,68,14)" fg:x="60131" fg:w="52"/><text x="40.2084%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.03%)</title><rect x="39.9584%" y="629" width="0.0346%" height="15" fill="rgb(243,106,26)" fg:x="60131" fg:w="52"/><text x="40.2084%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.03%)</title><rect x="39.9584%" y="613" width="0.0346%" height="15" fill="rgb(206,45,38)" fg:x="60131" fg:w="52"/><text x="40.2084%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (52 samples, 0.03%)</title><rect x="39.9584%" y="597" width="0.0346%" height="15" fill="rgb(226,6,15)" fg:x="60131" fg:w="52"/><text x="40.2084%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (61 samples, 0.04%)</title><rect x="39.9930%" y="613" width="0.0405%" height="15" fill="rgb(232,22,54)" fg:x="60183" fg:w="61"/><text x="40.2430%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (74 samples, 0.05%)</title><rect x="40.0335%" y="613" width="0.0492%" height="15" fill="rgb(229,222,32)" fg:x="60244" fg:w="74"/><text x="40.2835%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (57 samples, 0.04%)</title><rect x="40.0827%" y="613" width="0.0379%" height="15" fill="rgb(228,62,29)" fg:x="60318" fg:w="57"/><text x="40.3327%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (57 samples, 0.04%)</title><rect x="40.0827%" y="597" width="0.0379%" height="15" fill="rgb(251,103,34)" fg:x="60318" fg:w="57"/><text x="40.3327%" y="607.50"></text></g><g><title>[unknown] (889 samples, 0.59%)</title><rect x="39.5411%" y="709" width="0.5908%" height="15" fill="rgb(233,12,30)" fg:x="59503" fg:w="889"/><text x="39.7911%" y="719.50"></text></g><g><title>one_brc::process_lines (261 samples, 0.17%)</title><rect x="39.9584%" y="693" width="0.1734%" height="15" fill="rgb(238,52,0)" fg:x="60131" fg:w="261"/><text x="40.2084%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (261 samples, 0.17%)</title><rect x="39.9584%" y="677" width="0.1734%" height="15" fill="rgb(223,98,5)" fg:x="60131" fg:w="261"/><text x="40.2084%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (261 samples, 0.17%)</title><rect x="39.9584%" y="661" width="0.1734%" height="15" fill="rgb(228,75,37)" fg:x="60131" fg:w="261"/><text x="40.2084%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (209 samples, 0.14%)</title><rect x="39.9930%" y="645" width="0.1389%" height="15" fill="rgb(205,115,49)" fg:x="60183" fg:w="209"/><text x="40.2430%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (209 samples, 0.14%)</title><rect x="39.9930%" y="629" width="0.1389%" height="15" fill="rgb(250,154,43)" fg:x="60183" fg:w="209"/><text x="40.2430%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (17 samples, 0.01%)</title><rect x="40.1205%" y="613" width="0.0113%" height="15" fill="rgb(226,43,29)" fg:x="60375" fg:w="17"/><text x="40.3705%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (35 samples, 0.02%)</title><rect x="40.2946%" y="389" width="0.0233%" height="15" fill="rgb(249,228,39)" fg:x="60637" fg:w="35"/><text x="40.5446%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (35 samples, 0.02%)</title><rect x="40.2946%" y="373" width="0.0233%" height="15" fill="rgb(216,79,43)" fg:x="60637" fg:w="35"/><text x="40.5446%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (35 samples, 0.02%)</title><rect x="40.2946%" y="357" width="0.0233%" height="15" fill="rgb(228,95,12)" fg:x="60637" fg:w="35"/><text x="40.5446%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (151 samples, 0.10%)</title><rect x="40.3179%" y="389" width="0.1003%" height="15" fill="rgb(249,221,15)" fg:x="60672" fg:w="151"/><text x="40.5679%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (151 samples, 0.10%)</title><rect x="40.3179%" y="373" width="0.1003%" height="15" fill="rgb(233,34,13)" fg:x="60672" fg:w="151"/><text x="40.5679%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (151 samples, 0.10%)</title><rect x="40.3179%" y="357" width="0.1003%" height="15" fill="rgb(214,103,39)" fg:x="60672" fg:w="151"/><text x="40.5679%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (150 samples, 0.10%)</title><rect x="40.3186%" y="341" width="0.0997%" height="15" fill="rgb(251,126,39)" fg:x="60673" fg:w="150"/><text x="40.5686%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (93 samples, 0.06%)</title><rect x="40.4183%" y="389" width="0.0618%" height="15" fill="rgb(214,216,36)" fg:x="60823" fg:w="93"/><text x="40.6683%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (93 samples, 0.06%)</title><rect x="40.4183%" y="373" width="0.0618%" height="15" fill="rgb(220,221,8)" fg:x="60823" fg:w="93"/><text x="40.6683%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (36 samples, 0.02%)</title><rect x="40.5930%" y="357" width="0.0239%" height="15" fill="rgb(240,216,3)" fg:x="61086" fg:w="36"/><text x="40.8430%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (34 samples, 0.02%)</title><rect x="40.6169%" y="357" width="0.0226%" height="15" fill="rgb(232,218,17)" fg:x="61122" fg:w="34"/><text x="40.8669%" y="367.50"></text></g><g><title>core::ptr::align_offset (34 samples, 0.02%)</title><rect x="40.6169%" y="341" width="0.0226%" height="15" fill="rgb(229,163,45)" fg:x="61122" fg:w="34"/><text x="40.8669%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (68 samples, 0.05%)</title><rect x="40.6395%" y="357" width="0.0452%" height="15" fill="rgb(231,110,42)" fg:x="61156" fg:w="68"/><text x="40.8895%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,347 samples, 0.90%)</title><rect x="40.1810%" y="405" width="0.8951%" height="15" fill="rgb(208,170,48)" fg:x="60466" fg:w="1347"/><text x="40.4310%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (897 samples, 0.60%)</title><rect x="40.4801%" y="389" width="0.5961%" height="15" fill="rgb(239,116,25)" fg:x="60916" fg:w="897"/><text x="40.7301%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (858 samples, 0.57%)</title><rect x="40.5060%" y="373" width="0.5702%" height="15" fill="rgb(219,200,50)" fg:x="60955" fg:w="858"/><text x="40.7560%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (589 samples, 0.39%)</title><rect x="40.6847%" y="357" width="0.3914%" height="15" fill="rgb(245,200,0)" fg:x="61224" fg:w="589"/><text x="40.9347%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,452 samples, 0.96%)</title><rect x="40.1338%" y="437" width="0.9649%" height="15" fill="rgb(245,119,33)" fg:x="60395" fg:w="1452"/><text x="40.3838%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,452 samples, 0.96%)</title><rect x="40.1338%" y="421" width="0.9649%" height="15" fill="rgb(231,125,12)" fg:x="60395" fg:w="1452"/><text x="40.3838%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (33 samples, 0.02%)</title><rect x="41.0768%" y="405" width="0.0219%" height="15" fill="rgb(216,96,41)" fg:x="61814" fg:w="33"/><text x="41.3268%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (33 samples, 0.02%)</title><rect x="41.0768%" y="389" width="0.0219%" height="15" fill="rgb(248,43,45)" fg:x="61814" fg:w="33"/><text x="41.3268%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,577 samples, 1.05%)</title><rect x="40.1338%" y="469" width="1.0480%" height="15" fill="rgb(217,222,7)" fg:x="60395" fg:w="1577"/><text x="40.3838%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,577 samples, 1.05%)</title><rect x="40.1338%" y="453" width="1.0480%" height="15" fill="rgb(233,28,6)" fg:x="60395" fg:w="1577"/><text x="40.3838%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (125 samples, 0.08%)</title><rect x="41.0987%" y="437" width="0.0831%" height="15" fill="rgb(231,218,15)" fg:x="61847" fg:w="125"/><text x="41.3487%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (125 samples, 0.08%)</title><rect x="41.0987%" y="421" width="0.0831%" height="15" fill="rgb(226,171,48)" fg:x="61847" fg:w="125"/><text x="41.3487%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (125 samples, 0.08%)</title><rect x="41.0987%" y="405" width="0.0831%" height="15" fill="rgb(235,201,9)" fg:x="61847" fg:w="125"/><text x="41.3487%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (125 samples, 0.08%)</title><rect x="41.0987%" y="389" width="0.0831%" height="15" fill="rgb(217,80,15)" fg:x="61847" fg:w="125"/><text x="41.3487%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (64 samples, 0.04%)</title><rect x="41.1393%" y="373" width="0.0425%" height="15" fill="rgb(219,152,8)" fg:x="61908" fg:w="64"/><text x="41.3893%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (64 samples, 0.04%)</title><rect x="41.1393%" y="357" width="0.0425%" height="15" fill="rgb(243,107,38)" fg:x="61908" fg:w="64"/><text x="41.3893%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (64 samples, 0.04%)</title><rect x="41.1393%" y="341" width="0.0425%" height="15" fill="rgb(231,17,5)" fg:x="61908" fg:w="64"/><text x="41.3893%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (64 samples, 0.04%)</title><rect x="41.1393%" y="325" width="0.0425%" height="15" fill="rgb(209,25,54)" fg:x="61908" fg:w="64"/><text x="41.3893%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (64 samples, 0.04%)</title><rect x="41.1393%" y="309" width="0.0425%" height="15" fill="rgb(219,0,2)" fg:x="61908" fg:w="64"/><text x="41.3893%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (41 samples, 0.03%)</title><rect x="41.1997%" y="437" width="0.0272%" height="15" fill="rgb(246,9,5)" fg:x="61999" fg:w="41"/><text x="41.4497%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (26 samples, 0.02%)</title><rect x="41.2270%" y="405" width="0.0173%" height="15" fill="rgb(226,159,4)" fg:x="62040" fg:w="26"/><text x="41.4770%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (75 samples, 0.05%)</title><rect x="41.3247%" y="373" width="0.0498%" height="15" fill="rgb(219,175,34)" fg:x="62187" fg:w="75"/><text x="41.5747%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (99 samples, 0.07%)</title><rect x="41.3745%" y="373" width="0.0658%" height="15" fill="rgb(236,10,46)" fg:x="62262" fg:w="99"/><text x="41.6245%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (17 samples, 0.01%)</title><rect x="41.4403%" y="373" width="0.0113%" height="15" fill="rgb(240,211,16)" fg:x="62361" fg:w="17"/><text x="41.6903%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (243 samples, 0.16%)</title><rect x="41.2908%" y="389" width="0.1615%" height="15" fill="rgb(205,3,43)" fg:x="62136" fg:w="243"/><text x="41.5408%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (124 samples, 0.08%)</title><rect x="41.4915%" y="373" width="0.0824%" height="15" fill="rgb(245,7,22)" fg:x="62438" fg:w="124"/><text x="41.7415%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (29 samples, 0.02%)</title><rect x="41.8098%" y="325" width="0.0193%" height="15" fill="rgb(239,132,32)" fg:x="62917" fg:w="29"/><text x="42.0598%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25 samples, 0.02%)</title><rect x="41.8297%" y="309" width="0.0166%" height="15" fill="rgb(228,202,34)" fg:x="62947" fg:w="25"/><text x="42.0797%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (271 samples, 0.18%)</title><rect x="41.6802%" y="341" width="0.1801%" height="15" fill="rgb(254,200,22)" fg:x="62722" fg:w="271"/><text x="41.9302%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (47 samples, 0.03%)</title><rect x="41.8290%" y="325" width="0.0312%" height="15" fill="rgb(219,10,39)" fg:x="62946" fg:w="47"/><text x="42.0790%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (21 samples, 0.01%)</title><rect x="41.8463%" y="309" width="0.0140%" height="15" fill="rgb(226,210,39)" fg:x="62972" fg:w="21"/><text x="42.0963%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (961 samples, 0.64%)</title><rect x="41.2270%" y="437" width="0.6386%" height="15" fill="rgb(208,219,16)" fg:x="62040" fg:w="961"/><text x="41.4770%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (961 samples, 0.64%)</title><rect x="41.2270%" y="421" width="0.6386%" height="15" fill="rgb(216,158,51)" fg:x="62040" fg:w="961"/><text x="41.4770%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (935 samples, 0.62%)</title><rect x="41.2443%" y="405" width="0.6213%" height="15" fill="rgb(233,14,44)" fg:x="62066" fg:w="935"/><text x="41.4943%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (622 samples, 0.41%)</title><rect x="41.4522%" y="389" width="0.4133%" height="15" fill="rgb(237,97,39)" fg:x="62379" fg:w="622"/><text x="41.7022%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (439 samples, 0.29%)</title><rect x="41.5739%" y="373" width="0.2917%" height="15" fill="rgb(218,198,43)" fg:x="62562" fg:w="439"/><text x="41.8239%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (355 samples, 0.24%)</title><rect x="41.6297%" y="357" width="0.2359%" height="15" fill="rgb(231,104,20)" fg:x="62646" fg:w="355"/><text x="41.8797%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (43 samples, 0.03%)</title><rect x="41.8849%" y="421" width="0.0286%" height="15" fill="rgb(254,36,13)" fg:x="63030" fg:w="43"/><text x="42.1349%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (42 samples, 0.03%)</title><rect x="42.0629%" y="405" width="0.0279%" height="15" fill="rgb(248,14,50)" fg:x="63298" fg:w="42"/><text x="42.3129%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (42 samples, 0.03%)</title><rect x="42.0629%" y="389" width="0.0279%" height="15" fill="rgb(217,107,29)" fg:x="63298" fg:w="42"/><text x="42.3129%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (42 samples, 0.03%)</title><rect x="42.0629%" y="373" width="0.0279%" height="15" fill="rgb(251,169,33)" fg:x="63298" fg:w="42"/><text x="42.3129%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (278 samples, 0.18%)</title><rect x="42.0909%" y="405" width="0.1847%" height="15" fill="rgb(217,108,32)" fg:x="63340" fg:w="278"/><text x="42.3409%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (278 samples, 0.18%)</title><rect x="42.0909%" y="389" width="0.1847%" height="15" fill="rgb(219,66,42)" fg:x="63340" fg:w="278"/><text x="42.3409%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (278 samples, 0.18%)</title><rect x="42.0909%" y="373" width="0.1847%" height="15" fill="rgb(206,180,7)" fg:x="63340" fg:w="278"/><text x="42.3409%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (260 samples, 0.17%)</title><rect x="42.1028%" y="357" width="0.1728%" height="15" fill="rgb(208,226,31)" fg:x="63358" fg:w="260"/><text x="42.3528%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (61 samples, 0.04%)</title><rect x="42.2756%" y="405" width="0.0405%" height="15" fill="rgb(218,26,49)" fg:x="63618" fg:w="61"/><text x="42.5256%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (61 samples, 0.04%)</title><rect x="42.2756%" y="389" width="0.0405%" height="15" fill="rgb(233,197,48)" fg:x="63618" fg:w="61"/><text x="42.5256%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (145 samples, 0.10%)</title><rect x="42.3188%" y="389" width="0.0964%" height="15" fill="rgb(252,181,51)" fg:x="63683" fg:w="145"/><text x="42.5688%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (115 samples, 0.08%)</title><rect x="42.3387%" y="373" width="0.0764%" height="15" fill="rgb(253,90,19)" fg:x="63713" fg:w="115"/><text x="42.5887%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,129 samples, 0.75%)</title><rect x="41.8656%" y="437" width="0.7502%" height="15" fill="rgb(215,171,30)" fg:x="63001" fg:w="1129"/><text x="42.1156%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,057 samples, 0.70%)</title><rect x="41.9134%" y="421" width="0.7024%" height="15" fill="rgb(214,222,9)" fg:x="63073" fg:w="1057"/><text x="42.1634%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (451 samples, 0.30%)</title><rect x="42.3161%" y="405" width="0.2997%" height="15" fill="rgb(223,3,22)" fg:x="63679" fg:w="451"/><text x="42.5661%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (302 samples, 0.20%)</title><rect x="42.4151%" y="389" width="0.2007%" height="15" fill="rgb(225,196,46)" fg:x="63828" fg:w="302"/><text x="42.6651%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (173 samples, 0.11%)</title><rect x="42.6158%" y="437" width="0.1150%" height="15" fill="rgb(209,110,37)" fg:x="64130" fg:w="173"/><text x="42.8658%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (126 samples, 0.08%)</title><rect x="42.6471%" y="421" width="0.0837%" height="15" fill="rgb(249,89,12)" fg:x="64177" fg:w="126"/><text x="42.8971%" y="431.50"></text></g><g><title>__round (126 samples, 0.08%)</title><rect x="42.6471%" y="405" width="0.0837%" height="15" fill="rgb(226,27,33)" fg:x="64177" fg:w="126"/><text x="42.8971%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (38 samples, 0.03%)</title><rect x="42.7952%" y="389" width="0.0253%" height="15" fill="rgb(213,82,22)" fg:x="64400" fg:w="38"/><text x="43.0452%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (178 samples, 0.12%)</title><rect x="42.7308%" y="437" width="0.1183%" height="15" fill="rgb(248,140,0)" fg:x="64303" fg:w="178"/><text x="42.9808%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (178 samples, 0.12%)</title><rect x="42.7308%" y="421" width="0.1183%" height="15" fill="rgb(228,106,3)" fg:x="64303" fg:w="178"/><text x="42.9808%" y="431.50"></text></g><g><title>one_brc::Measurement::record (178 samples, 0.12%)</title><rect x="42.7308%" y="405" width="0.1183%" height="15" fill="rgb(209,23,37)" fg:x="64303" fg:w="178"/><text x="42.9808%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (43 samples, 0.03%)</title><rect x="42.8205%" y="389" width="0.0286%" height="15" fill="rgb(241,93,50)" fg:x="64438" fg:w="43"/><text x="43.0705%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (48 samples, 0.03%)</title><rect x="43.0292%" y="309" width="0.0319%" height="15" fill="rgb(253,46,43)" fg:x="64752" fg:w="48"/><text x="43.2792%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (105 samples, 0.07%)</title><rect x="43.0112%" y="325" width="0.0698%" height="15" fill="rgb(226,206,43)" fg:x="64725" fg:w="105"/><text x="43.2612%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30 samples, 0.02%)</title><rect x="43.0611%" y="309" width="0.0199%" height="15" fill="rgb(217,54,7)" fg:x="64800" fg:w="30"/><text x="43.3111%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (152 samples, 0.10%)</title><rect x="43.1335%" y="309" width="0.1010%" height="15" fill="rgb(223,5,52)" fg:x="64909" fg:w="152"/><text x="43.3835%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (512 samples, 0.34%)</title><rect x="42.9627%" y="341" width="0.3402%" height="15" fill="rgb(206,52,46)" fg:x="64652" fg:w="512"/><text x="43.2127%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (334 samples, 0.22%)</title><rect x="43.0810%" y="325" width="0.2220%" height="15" fill="rgb(253,136,11)" fg:x="64830" fg:w="334"/><text x="43.3310%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (103 samples, 0.07%)</title><rect x="43.2345%" y="309" width="0.0684%" height="15" fill="rgb(208,106,33)" fg:x="65061" fg:w="103"/><text x="43.4845%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (515 samples, 0.34%)</title><rect x="42.9627%" y="373" width="0.3422%" height="15" fill="rgb(206,54,4)" fg:x="64652" fg:w="515"/><text x="43.2127%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (515 samples, 0.34%)</title><rect x="42.9627%" y="357" width="0.3422%" height="15" fill="rgb(213,3,15)" fg:x="64652" fg:w="515"/><text x="43.2127%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (62 samples, 0.04%)</title><rect x="43.3049%" y="373" width="0.0412%" height="15" fill="rgb(252,211,39)" fg:x="65167" fg:w="62"/><text x="43.5549%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (31 samples, 0.02%)</title><rect x="43.3255%" y="357" width="0.0206%" height="15" fill="rgb(223,6,36)" fg:x="65198" fg:w="31"/><text x="43.5755%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (31 samples, 0.02%)</title><rect x="43.3255%" y="341" width="0.0206%" height="15" fill="rgb(252,169,45)" fg:x="65198" fg:w="31"/><text x="43.5755%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (31 samples, 0.02%)</title><rect x="43.3255%" y="325" width="0.0206%" height="15" fill="rgb(212,48,26)" fg:x="65198" fg:w="31"/><text x="43.5755%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.01%)</title><rect x="43.4731%" y="245" width="0.0126%" height="15" fill="rgb(251,102,48)" fg:x="65420" fg:w="19"/><text x="43.7231%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (65 samples, 0.04%)</title><rect x="43.4518%" y="261" width="0.0432%" height="15" fill="rgb(243,208,16)" fg:x="65388" fg:w="65"/><text x="43.7018%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (25 samples, 0.02%)</title><rect x="43.4950%" y="261" width="0.0166%" height="15" fill="rgb(219,96,24)" fg:x="65453" fg:w="25"/><text x="43.7450%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (334 samples, 0.22%)</title><rect x="43.3760%" y="277" width="0.2220%" height="15" fill="rgb(219,33,29)" fg:x="65274" fg:w="334"/><text x="43.6260%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (130 samples, 0.09%)</title><rect x="43.5116%" y="261" width="0.0864%" height="15" fill="rgb(223,176,5)" fg:x="65478" fg:w="130"/><text x="43.7616%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (50 samples, 0.03%)</title><rect x="43.5980%" y="277" width="0.0332%" height="15" fill="rgb(228,140,14)" fg:x="65608" fg:w="50"/><text x="43.8480%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.02%)</title><rect x="43.7249%" y="245" width="0.0159%" height="15" fill="rgb(217,179,31)" fg:x="65799" fg:w="24"/><text x="43.9749%" y="255.50"></text></g><g><title>core::cmp::min (18 samples, 0.01%)</title><rect x="43.7422%" y="245" width="0.0120%" height="15" fill="rgb(230,9,30)" fg:x="65825" fg:w="18"/><text x="43.9922%" y="255.50"></text></g><g><title>core::cmp::Ord::min (18 samples, 0.01%)</title><rect x="43.7422%" y="229" width="0.0120%" height="15" fill="rgb(230,136,20)" fg:x="65825" fg:w="18"/><text x="43.9922%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (18 samples, 0.01%)</title><rect x="43.7422%" y="213" width="0.0120%" height="15" fill="rgb(215,210,22)" fg:x="65825" fg:w="18"/><text x="43.9922%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (305 samples, 0.20%)</title><rect x="43.6525%" y="261" width="0.2027%" height="15" fill="rgb(218,43,5)" fg:x="65690" fg:w="305"/><text x="43.9025%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (152 samples, 0.10%)</title><rect x="43.7542%" y="245" width="0.1010%" height="15" fill="rgb(216,11,5)" fg:x="65843" fg:w="152"/><text x="44.0042%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,372 samples, 0.91%)</title><rect x="42.9474%" y="405" width="0.9117%" height="15" fill="rgb(209,82,29)" fg:x="64629" fg:w="1372"/><text x="43.1974%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,372 samples, 0.91%)</title><rect x="42.9474%" y="389" width="0.9117%" height="15" fill="rgb(244,115,12)" fg:x="64629" fg:w="1372"/><text x="43.1974%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (772 samples, 0.51%)</title><rect x="43.3461%" y="373" width="0.5130%" height="15" fill="rgb(222,82,18)" fg:x="65229" fg:w="772"/><text x="43.5961%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (727 samples, 0.48%)</title><rect x="43.3760%" y="357" width="0.4831%" height="15" fill="rgb(249,227,8)" fg:x="65274" fg:w="727"/><text x="43.6260%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (727 samples, 0.48%)</title><rect x="43.3760%" y="341" width="0.4831%" height="15" fill="rgb(253,141,45)" fg:x="65274" fg:w="727"/><text x="43.6260%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (727 samples, 0.48%)</title><rect x="43.3760%" y="325" width="0.4831%" height="15" fill="rgb(234,184,4)" fg:x="65274" fg:w="727"/><text x="43.6260%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (727 samples, 0.48%)</title><rect x="43.3760%" y="309" width="0.4831%" height="15" fill="rgb(218,194,23)" fg:x="65274" fg:w="727"/><text x="43.6260%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (727 samples, 0.48%)</title><rect x="43.3760%" y="293" width="0.4831%" height="15" fill="rgb(235,66,41)" fg:x="65274" fg:w="727"/><text x="43.6260%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (343 samples, 0.23%)</title><rect x="43.6312%" y="277" width="0.2279%" height="15" fill="rgb(245,217,1)" fg:x="65658" fg:w="343"/><text x="43.8812%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.03%)</title><rect x="43.8831%" y="373" width="0.0253%" height="15" fill="rgb(229,91,1)" fg:x="66037" fg:w="38"/><text x="44.1331%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (47 samples, 0.03%)</title><rect x="43.9283%" y="357" width="0.0312%" height="15" fill="rgb(207,101,30)" fg:x="66105" fg:w="47"/><text x="44.1783%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (47 samples, 0.03%)</title><rect x="43.9283%" y="341" width="0.0312%" height="15" fill="rgb(223,82,49)" fg:x="66105" fg:w="47"/><text x="44.1783%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (47 samples, 0.03%)</title><rect x="43.9283%" y="325" width="0.0312%" height="15" fill="rgb(218,167,17)" fg:x="66105" fg:w="47"/><text x="44.1783%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (697 samples, 0.46%)</title><rect x="43.9083%" y="373" width="0.4632%" height="15" fill="rgb(208,103,14)" fg:x="66075" fg:w="697"/><text x="44.1583%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (620 samples, 0.41%)</title><rect x="43.9595%" y="357" width="0.4120%" height="15" fill="rgb(238,20,8)" fg:x="66152" fg:w="620"/><text x="44.2095%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (620 samples, 0.41%)</title><rect x="43.9595%" y="341" width="0.4120%" height="15" fill="rgb(218,80,54)" fg:x="66152" fg:w="620"/><text x="44.2095%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (620 samples, 0.41%)</title><rect x="43.9595%" y="325" width="0.4120%" height="15" fill="rgb(240,144,17)" fg:x="66152" fg:w="620"/><text x="44.2095%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (620 samples, 0.41%)</title><rect x="43.9595%" y="309" width="0.4120%" height="15" fill="rgb(245,27,50)" fg:x="66152" fg:w="620"/><text x="44.2095%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (620 samples, 0.41%)</title><rect x="43.9595%" y="293" width="0.4120%" height="15" fill="rgb(251,51,7)" fg:x="66152" fg:w="620"/><text x="44.2095%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (620 samples, 0.41%)</title><rect x="43.9595%" y="277" width="0.4120%" height="15" fill="rgb(245,217,29)" fg:x="66152" fg:w="620"/><text x="44.2095%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (395 samples, 0.26%)</title><rect x="44.1090%" y="261" width="0.2625%" height="15" fill="rgb(221,176,29)" fg:x="66377" fg:w="395"/><text x="44.3590%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (59 samples, 0.04%)</title><rect x="44.3715%" y="373" width="0.0392%" height="15" fill="rgb(212,180,24)" fg:x="66772" fg:w="59"/><text x="44.6215%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.03%)</title><rect x="44.4107%" y="341" width="0.0299%" height="15" fill="rgb(254,24,2)" fg:x="66831" fg:w="45"/><text x="44.6607%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (49 samples, 0.03%)</title><rect x="44.4107%" y="373" width="0.0326%" height="15" fill="rgb(230,100,2)" fg:x="66831" fg:w="49"/><text x="44.6607%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (49 samples, 0.03%)</title><rect x="44.4107%" y="357" width="0.0326%" height="15" fill="rgb(219,142,25)" fg:x="66831" fg:w="49"/><text x="44.6607%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,384 samples, 1.58%)</title><rect x="42.8703%" y="421" width="1.5842%" height="15" fill="rgb(240,73,43)" fg:x="64513" fg:w="2384"/><text x="43.1203%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (896 samples, 0.60%)</title><rect x="43.8591%" y="405" width="0.5954%" height="15" fill="rgb(214,114,15)" fg:x="66001" fg:w="896"/><text x="44.1091%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (866 samples, 0.58%)</title><rect x="43.8791%" y="389" width="0.5755%" height="15" fill="rgb(207,130,4)" fg:x="66031" fg:w="866"/><text x="44.1291%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,530 samples, 4.34%)</title><rect x="40.1318%" y="501" width="4.3393%" height="15" fill="rgb(221,25,40)" fg:x="60392" fg:w="6530"/><text x="40.3818%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,530 samples, 4.34%)</title><rect x="40.1318%" y="485" width="4.3393%" height="15" fill="rgb(241,184,7)" fg:x="60392" fg:w="6530"/><text x="40.3818%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,950 samples, 3.29%)</title><rect x="41.1818%" y="469" width="3.2894%" height="15" fill="rgb(235,159,4)" fg:x="61972" fg:w="4950"/><text x="41.4318%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (4,950 samples, 3.29%)</title><rect x="41.1818%" y="453" width="3.2894%" height="15" fill="rgb(214,87,48)" fg:x="61972" fg:w="4950"/><text x="41.4318%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,441 samples, 1.62%)</title><rect x="42.8491%" y="437" width="1.6221%" height="15" fill="rgb(246,198,24)" fg:x="64481" fg:w="2441"/><text x="43.0991%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (25 samples, 0.02%)</title><rect x="44.4546%" y="421" width="0.0166%" height="15" fill="rgb(209,66,40)" fg:x="66897" fg:w="25"/><text x="44.7046%" y="431.50"></text></g><g><title>worker-14 (8,294 samples, 5.51%)</title><rect x="38.9603%" y="725" width="5.5115%" height="15" fill="rgb(233,147,39)" fg:x="58629" fg:w="8294"/><text x="39.2103%" y="735.50">worker-..</text></g><g><title>__clone3 (6,531 samples, 4.34%)</title><rect x="40.1318%" y="709" width="4.3400%" height="15" fill="rgb(231,145,52)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="719.50">__clo..</text></g><g><title>start_thread (6,531 samples, 4.34%)</title><rect x="40.1318%" y="693" width="4.3400%" height="15" fill="rgb(206,20,26)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,531 samples, 4.34%)</title><rect x="40.1318%" y="677" width="4.3400%" height="15" fill="rgb(238,220,4)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,531 samples, 4.34%)</title><rect x="40.1318%" y="661" width="4.3400%" height="15" fill="rgb(252,195,42)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,531 samples, 4.34%)</title><rect x="40.1318%" y="645" width="4.3400%" height="15" fill="rgb(209,10,6)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="655.50">std::..</text></g><g><title>std::panic::catch_unwind (6,531 samples, 4.34%)</title><rect x="40.1318%" y="629" width="4.3400%" height="15" fill="rgb(229,3,52)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,531 samples, 4.34%)</title><rect x="40.1318%" y="613" width="4.3400%" height="15" fill="rgb(253,49,37)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,531 samples, 4.34%)</title><rect x="40.1318%" y="597" width="4.3400%" height="15" fill="rgb(240,103,49)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,531 samples, 4.34%)</title><rect x="40.1318%" y="581" width="4.3400%" height="15" fill="rgb(250,182,30)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,531 samples, 4.34%)</title><rect x="40.1318%" y="565" width="4.3400%" height="15" fill="rgb(248,8,30)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,531 samples, 4.34%)</title><rect x="40.1318%" y="549" width="4.3400%" height="15" fill="rgb(237,120,30)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,531 samples, 4.34%)</title><rect x="40.1318%" y="533" width="4.3400%" height="15" fill="rgb(221,146,34)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,531 samples, 4.34%)</title><rect x="40.1318%" y="517" width="4.3400%" height="15" fill="rgb(242,55,13)" fg:x="60392" fg:w="6531"/><text x="40.3818%" y="527.50">one_b..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (122 samples, 0.08%)</title><rect x="44.5509%" y="677" width="0.0811%" height="15" fill="rgb(242,112,31)" fg:x="67042" fg:w="122"/><text x="44.8009%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (122 samples, 0.08%)</title><rect x="44.5509%" y="661" width="0.0811%" height="15" fill="rgb(249,192,27)" fg:x="67042" fg:w="122"/><text x="44.8009%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (122 samples, 0.08%)</title><rect x="44.5509%" y="645" width="0.0811%" height="15" fill="rgb(208,204,44)" fg:x="67042" fg:w="122"/><text x="44.8009%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (317 samples, 0.21%)</title><rect x="44.4718%" y="693" width="0.2107%" height="15" fill="rgb(208,93,54)" fg:x="66923" fg:w="317"/><text x="44.7218%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (76 samples, 0.05%)</title><rect x="44.6320%" y="677" width="0.0505%" height="15" fill="rgb(242,1,31)" fg:x="67164" fg:w="76"/><text x="44.8820%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (67 samples, 0.04%)</title><rect x="44.6825%" y="693" width="0.0445%" height="15" fill="rgb(241,83,25)" fg:x="67240" fg:w="67"/><text x="44.9325%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (87 samples, 0.06%)</title><rect x="44.7270%" y="693" width="0.0578%" height="15" fill="rgb(205,169,50)" fg:x="67307" fg:w="87"/><text x="44.9770%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (87 samples, 0.06%)</title><rect x="44.7270%" y="677" width="0.0578%" height="15" fill="rgb(239,186,37)" fg:x="67307" fg:w="87"/><text x="44.9770%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (87 samples, 0.06%)</title><rect x="44.7270%" y="661" width="0.0578%" height="15" fill="rgb(205,221,10)" fg:x="67307" fg:w="87"/><text x="44.9770%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (87 samples, 0.06%)</title><rect x="44.7270%" y="645" width="0.0578%" height="15" fill="rgb(218,196,15)" fg:x="67307" fg:w="87"/><text x="44.9770%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (87 samples, 0.06%)</title><rect x="44.7270%" y="629" width="0.0578%" height="15" fill="rgb(218,196,35)" fg:x="67307" fg:w="87"/><text x="44.9770%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (87 samples, 0.06%)</title><rect x="44.7270%" y="613" width="0.0578%" height="15" fill="rgb(233,63,24)" fg:x="67307" fg:w="87"/><text x="44.9770%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (87 samples, 0.06%)</title><rect x="44.7270%" y="597" width="0.0578%" height="15" fill="rgb(225,8,4)" fg:x="67307" fg:w="87"/><text x="44.9770%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (28 samples, 0.02%)</title><rect x="44.7662%" y="581" width="0.0186%" height="15" fill="rgb(234,105,35)" fg:x="67366" fg:w="28"/><text x="45.0162%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (82 samples, 0.05%)</title><rect x="44.7848%" y="693" width="0.0545%" height="15" fill="rgb(236,21,32)" fg:x="67394" fg:w="82"/><text x="45.0348%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (56 samples, 0.04%)</title><rect x="44.8021%" y="677" width="0.0372%" height="15" fill="rgb(228,109,6)" fg:x="67420" fg:w="56"/><text x="45.0521%" y="687.50"></text></g><g><title>core::slice::memchr::memchr_aligned (96 samples, 0.06%)</title><rect x="44.8493%" y="693" width="0.0638%" height="15" fill="rgb(229,215,31)" fg:x="67491" fg:w="96"/><text x="45.0993%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (27 samples, 0.02%)</title><rect x="44.9317%" y="677" width="0.0179%" height="15" fill="rgb(221,52,54)" fg:x="67615" fg:w="27"/><text x="45.1817%" y="687.50"></text></g><g><title>[anon] (757 samples, 0.50%)</title><rect x="44.4718%" y="709" width="0.5030%" height="15" fill="rgb(252,129,43)" fg:x="66923" fg:w="757"/><text x="44.7218%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (93 samples, 0.06%)</title><rect x="44.9131%" y="693" width="0.0618%" height="15" fill="rgb(248,183,27)" fg:x="67587" fg:w="93"/><text x="45.1631%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (38 samples, 0.03%)</title><rect x="44.9496%" y="677" width="0.0253%" height="15" fill="rgb(250,0,22)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (38 samples, 0.03%)</title><rect x="44.9496%" y="661" width="0.0253%" height="15" fill="rgb(213,166,10)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (38 samples, 0.03%)</title><rect x="44.9496%" y="645" width="0.0253%" height="15" fill="rgb(207,163,36)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (38 samples, 0.03%)</title><rect x="44.9496%" y="629" width="0.0253%" height="15" fill="rgb(208,122,22)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (38 samples, 0.03%)</title><rect x="44.9496%" y="613" width="0.0253%" height="15" fill="rgb(207,104,49)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (38 samples, 0.03%)</title><rect x="44.9496%" y="597" width="0.0253%" height="15" fill="rgb(248,211,50)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (38 samples, 0.03%)</title><rect x="44.9496%" y="581" width="0.0253%" height="15" fill="rgb(217,13,45)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (38 samples, 0.03%)</title><rect x="44.9496%" y="565" width="0.0253%" height="15" fill="rgb(211,216,49)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (38 samples, 0.03%)</title><rect x="44.9496%" y="549" width="0.0253%" height="15" fill="rgb(221,58,53)" fg:x="67642" fg:w="38"/><text x="45.1996%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (102 samples, 0.07%)</title><rect x="44.9755%" y="693" width="0.0678%" height="15" fill="rgb(220,112,41)" fg:x="67681" fg:w="102"/><text x="45.2255%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (178 samples, 0.12%)</title><rect x="45.0433%" y="693" width="0.1183%" height="15" fill="rgb(236,38,28)" fg:x="67783" fg:w="178"/><text x="45.2933%" y="703.50"></text></g><g><title>__memcmp_evex_movbe (21 samples, 0.01%)</title><rect x="45.1616%" y="693" width="0.0140%" height="15" fill="rgb(227,195,22)" fg:x="67961" fg:w="21"/><text x="45.4116%" y="703.50"></text></g><g><title>__round (35 samples, 0.02%)</title><rect x="45.1756%" y="693" width="0.0233%" height="15" fill="rgb(214,55,33)" fg:x="67982" fg:w="35"/><text x="45.4256%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (72 samples, 0.05%)</title><rect x="45.1988%" y="693" width="0.0478%" height="15" fill="rgb(248,80,13)" fg:x="68017" fg:w="72"/><text x="45.4488%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (115 samples, 0.08%)</title><rect x="45.2467%" y="693" width="0.0764%" height="15" fill="rgb(238,52,6)" fg:x="68089" fg:w="115"/><text x="45.4967%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (102 samples, 0.07%)</title><rect x="45.3231%" y="693" width="0.0678%" height="15" fill="rgb(224,198,47)" fg:x="68204" fg:w="102"/><text x="45.5731%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (29 samples, 0.02%)</title><rect x="45.3716%" y="677" width="0.0193%" height="15" fill="rgb(233,171,20)" fg:x="68277" fg:w="29"/><text x="45.6216%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (29 samples, 0.02%)</title><rect x="45.3716%" y="661" width="0.0193%" height="15" fill="rgb(241,30,25)" fg:x="68277" fg:w="29"/><text x="45.6216%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (113 samples, 0.08%)</title><rect x="45.3909%" y="693" width="0.0751%" height="15" fill="rgb(207,171,38)" fg:x="68306" fg:w="113"/><text x="45.6409%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="45.4660%" y="645" width="0.0332%" height="15" fill="rgb(234,70,1)" fg:x="68419" fg:w="50"/><text x="45.7160%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="45.4660%" y="629" width="0.0332%" height="15" fill="rgb(232,178,18)" fg:x="68419" fg:w="50"/><text x="45.7160%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="45.4660%" y="613" width="0.0332%" height="15" fill="rgb(241,78,40)" fg:x="68419" fg:w="50"/><text x="45.7160%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (50 samples, 0.03%)</title><rect x="45.4660%" y="597" width="0.0332%" height="15" fill="rgb(222,35,25)" fg:x="68419" fg:w="50"/><text x="45.7160%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (70 samples, 0.05%)</title><rect x="45.4992%" y="613" width="0.0465%" height="15" fill="rgb(207,92,16)" fg:x="68469" fg:w="70"/><text x="45.7492%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (55 samples, 0.04%)</title><rect x="45.5457%" y="613" width="0.0365%" height="15" fill="rgb(216,59,51)" fg:x="68539" fg:w="55"/><text x="45.7957%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (48 samples, 0.03%)</title><rect x="45.5823%" y="613" width="0.0319%" height="15" fill="rgb(213,80,28)" fg:x="68594" fg:w="48"/><text x="45.8323%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (48 samples, 0.03%)</title><rect x="45.5823%" y="597" width="0.0319%" height="15" fill="rgb(220,93,7)" fg:x="68594" fg:w="48"/><text x="45.8323%" y="607.50"></text></g><g><title>[unknown] (988 samples, 0.66%)</title><rect x="44.9749%" y="709" width="0.6565%" height="15" fill="rgb(225,24,44)" fg:x="67680" fg:w="988"/><text x="45.2249%" y="719.50"></text></g><g><title>one_brc::process_lines (249 samples, 0.17%)</title><rect x="45.4660%" y="693" width="0.1655%" height="15" fill="rgb(243,74,40)" fg:x="68419" fg:w="249"/><text x="45.7160%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (249 samples, 0.17%)</title><rect x="45.4660%" y="677" width="0.1655%" height="15" fill="rgb(228,39,7)" fg:x="68419" fg:w="249"/><text x="45.7160%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (249 samples, 0.17%)</title><rect x="45.4660%" y="661" width="0.1655%" height="15" fill="rgb(227,79,8)" fg:x="68419" fg:w="249"/><text x="45.7160%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (199 samples, 0.13%)</title><rect x="45.4992%" y="645" width="0.1322%" height="15" fill="rgb(236,58,11)" fg:x="68469" fg:w="199"/><text x="45.7492%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (199 samples, 0.13%)</title><rect x="45.4992%" y="629" width="0.1322%" height="15" fill="rgb(249,63,35)" fg:x="68469" fg:w="199"/><text x="45.7492%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (26 samples, 0.02%)</title><rect x="45.6142%" y="613" width="0.0173%" height="15" fill="rgb(252,114,16)" fg:x="68642" fg:w="26"/><text x="45.8642%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (27 samples, 0.02%)</title><rect x="45.8148%" y="389" width="0.0179%" height="15" fill="rgb(254,151,24)" fg:x="68944" fg:w="27"/><text x="46.0648%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.02%)</title><rect x="45.8148%" y="373" width="0.0179%" height="15" fill="rgb(253,54,39)" fg:x="68944" fg:w="27"/><text x="46.0648%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.02%)</title><rect x="45.8148%" y="357" width="0.0179%" height="15" fill="rgb(243,25,45)" fg:x="68944" fg:w="27"/><text x="46.0648%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (158 samples, 0.10%)</title><rect x="45.8328%" y="389" width="0.1050%" height="15" fill="rgb(234,134,9)" fg:x="68971" fg:w="158"/><text x="46.0828%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (158 samples, 0.10%)</title><rect x="45.8328%" y="373" width="0.1050%" height="15" fill="rgb(227,166,31)" fg:x="68971" fg:w="158"/><text x="46.0828%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (158 samples, 0.10%)</title><rect x="45.8328%" y="357" width="0.1050%" height="15" fill="rgb(245,143,41)" fg:x="68971" fg:w="158"/><text x="46.0828%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (158 samples, 0.10%)</title><rect x="45.8328%" y="341" width="0.1050%" height="15" fill="rgb(238,181,32)" fg:x="68971" fg:w="158"/><text x="46.0828%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (113 samples, 0.08%)</title><rect x="45.9378%" y="389" width="0.0751%" height="15" fill="rgb(224,113,18)" fg:x="69129" fg:w="113"/><text x="46.1878%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (113 samples, 0.08%)</title><rect x="45.9378%" y="373" width="0.0751%" height="15" fill="rgb(240,229,28)" fg:x="69129" fg:w="113"/><text x="46.1878%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (27 samples, 0.02%)</title><rect x="46.1132%" y="357" width="0.0179%" height="15" fill="rgb(250,185,3)" fg:x="69393" fg:w="27"/><text x="46.3632%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (29 samples, 0.02%)</title><rect x="46.1312%" y="357" width="0.0193%" height="15" fill="rgb(212,59,25)" fg:x="69420" fg:w="29"/><text x="46.3812%" y="367.50"></text></g><g><title>core::ptr::align_offset (29 samples, 0.02%)</title><rect x="46.1312%" y="341" width="0.0193%" height="15" fill="rgb(221,87,20)" fg:x="69420" fg:w="29"/><text x="46.3812%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (66 samples, 0.04%)</title><rect x="46.1504%" y="357" width="0.0439%" height="15" fill="rgb(213,74,28)" fg:x="69449" fg:w="66"/><text x="46.4004%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,363 samples, 0.91%)</title><rect x="45.6833%" y="405" width="0.9057%" height="15" fill="rgb(224,132,34)" fg:x="68746" fg:w="1363"/><text x="45.9333%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (867 samples, 0.58%)</title><rect x="46.0129%" y="389" width="0.5761%" height="15" fill="rgb(222,101,24)" fg:x="69242" fg:w="867"/><text x="46.2629%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (844 samples, 0.56%)</title><rect x="46.0281%" y="373" width="0.5609%" height="15" fill="rgb(254,142,4)" fg:x="69265" fg:w="844"/><text x="46.2781%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (594 samples, 0.39%)</title><rect x="46.1943%" y="357" width="0.3947%" height="15" fill="rgb(230,229,49)" fg:x="69515" fg:w="594"/><text x="46.4443%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,460 samples, 0.97%)</title><rect x="45.6321%" y="437" width="0.9702%" height="15" fill="rgb(238,70,47)" fg:x="68669" fg:w="1460"/><text x="45.8821%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,460 samples, 0.97%)</title><rect x="45.6321%" y="421" width="0.9702%" height="15" fill="rgb(231,160,17)" fg:x="68669" fg:w="1460"/><text x="45.8821%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (20 samples, 0.01%)</title><rect x="46.5890%" y="405" width="0.0133%" height="15" fill="rgb(218,68,53)" fg:x="70109" fg:w="20"/><text x="46.8390%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (20 samples, 0.01%)</title><rect x="46.5890%" y="389" width="0.0133%" height="15" fill="rgb(236,111,10)" fg:x="70109" fg:w="20"/><text x="46.8390%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,579 samples, 1.05%)</title><rect x="45.6321%" y="469" width="1.0493%" height="15" fill="rgb(224,34,41)" fg:x="68669" fg:w="1579"/><text x="45.8821%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,579 samples, 1.05%)</title><rect x="45.6321%" y="453" width="1.0493%" height="15" fill="rgb(241,118,19)" fg:x="68669" fg:w="1579"/><text x="45.8821%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (119 samples, 0.08%)</title><rect x="46.6023%" y="437" width="0.0791%" height="15" fill="rgb(238,129,25)" fg:x="70129" fg:w="119"/><text x="46.8523%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (119 samples, 0.08%)</title><rect x="46.6023%" y="421" width="0.0791%" height="15" fill="rgb(238,22,31)" fg:x="70129" fg:w="119"/><text x="46.8523%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (119 samples, 0.08%)</title><rect x="46.6023%" y="405" width="0.0791%" height="15" fill="rgb(222,174,48)" fg:x="70129" fg:w="119"/><text x="46.8523%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (119 samples, 0.08%)</title><rect x="46.6023%" y="389" width="0.0791%" height="15" fill="rgb(206,152,40)" fg:x="70129" fg:w="119"/><text x="46.8523%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (52 samples, 0.03%)</title><rect x="46.6468%" y="373" width="0.0346%" height="15" fill="rgb(218,99,54)" fg:x="70196" fg:w="52"/><text x="46.8968%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (52 samples, 0.03%)</title><rect x="46.6468%" y="357" width="0.0346%" height="15" fill="rgb(220,174,26)" fg:x="70196" fg:w="52"/><text x="46.8968%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (52 samples, 0.03%)</title><rect x="46.6468%" y="341" width="0.0346%" height="15" fill="rgb(245,116,9)" fg:x="70196" fg:w="52"/><text x="46.8968%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (52 samples, 0.03%)</title><rect x="46.6468%" y="325" width="0.0346%" height="15" fill="rgb(209,72,35)" fg:x="70196" fg:w="52"/><text x="46.8968%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (52 samples, 0.03%)</title><rect x="46.6468%" y="309" width="0.0346%" height="15" fill="rgb(226,126,21)" fg:x="70196" fg:w="52"/><text x="46.8968%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (32 samples, 0.02%)</title><rect x="46.6993%" y="437" width="0.0213%" height="15" fill="rgb(227,192,1)" fg:x="70275" fg:w="32"/><text x="46.9493%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (32 samples, 0.02%)</title><rect x="46.7206%" y="405" width="0.0213%" height="15" fill="rgb(237,180,29)" fg:x="70307" fg:w="32"/><text x="46.9706%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (57 samples, 0.04%)</title><rect x="46.8322%" y="373" width="0.0379%" height="15" fill="rgb(230,197,35)" fg:x="70475" fg:w="57"/><text x="47.0822%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (94 samples, 0.06%)</title><rect x="46.8701%" y="373" width="0.0625%" height="15" fill="rgb(246,193,31)" fg:x="70532" fg:w="94"/><text x="47.1201%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (225 samples, 0.15%)</title><rect x="46.8023%" y="389" width="0.1495%" height="15" fill="rgb(241,36,4)" fg:x="70430" fg:w="225"/><text x="47.0523%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (28 samples, 0.02%)</title><rect x="46.9332%" y="373" width="0.0186%" height="15" fill="rgb(241,130,17)" fg:x="70627" fg:w="28"/><text x="47.1832%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (106 samples, 0.07%)</title><rect x="46.9851%" y="373" width="0.0704%" height="15" fill="rgb(206,137,32)" fg:x="70705" fg:w="106"/><text x="47.2351%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (24 samples, 0.02%)</title><rect x="47.3054%" y="325" width="0.0159%" height="15" fill="rgb(237,228,51)" fg:x="71187" fg:w="24"/><text x="47.5554%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25 samples, 0.02%)</title><rect x="47.3213%" y="309" width="0.0166%" height="15" fill="rgb(243,6,42)" fg:x="71211" fg:w="25"/><text x="47.5713%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (293 samples, 0.19%)</title><rect x="47.1612%" y="341" width="0.1947%" height="15" fill="rgb(251,74,28)" fg:x="70970" fg:w="293"/><text x="47.4112%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (52 samples, 0.03%)</title><rect x="47.3213%" y="325" width="0.0346%" height="15" fill="rgb(218,20,49)" fg:x="71211" fg:w="52"/><text x="47.5713%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (27 samples, 0.02%)</title><rect x="47.3379%" y="309" width="0.0179%" height="15" fill="rgb(238,28,14)" fg:x="71236" fg:w="27"/><text x="47.5879%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (963 samples, 0.64%)</title><rect x="46.7206%" y="437" width="0.6399%" height="15" fill="rgb(229,40,46)" fg:x="70307" fg:w="963"/><text x="46.9706%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (963 samples, 0.64%)</title><rect x="46.7206%" y="421" width="0.6399%" height="15" fill="rgb(244,195,20)" fg:x="70307" fg:w="963"/><text x="46.9706%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (931 samples, 0.62%)</title><rect x="46.7418%" y="405" width="0.6187%" height="15" fill="rgb(253,56,35)" fg:x="70339" fg:w="931"/><text x="46.9918%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (615 samples, 0.41%)</title><rect x="46.9518%" y="389" width="0.4087%" height="15" fill="rgb(210,149,44)" fg:x="70655" fg:w="615"/><text x="47.2018%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (459 samples, 0.31%)</title><rect x="47.0555%" y="373" width="0.3050%" height="15" fill="rgb(240,135,12)" fg:x="70811" fg:w="459"/><text x="47.3055%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (382 samples, 0.25%)</title><rect x="47.1067%" y="357" width="0.2538%" height="15" fill="rgb(251,24,50)" fg:x="70888" fg:w="382"/><text x="47.3567%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (63 samples, 0.04%)</title><rect x="47.3785%" y="421" width="0.0419%" height="15" fill="rgb(243,200,47)" fg:x="71297" fg:w="63"/><text x="47.6285%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (41 samples, 0.03%)</title><rect x="47.5539%" y="405" width="0.0272%" height="15" fill="rgb(224,166,26)" fg:x="71561" fg:w="41"/><text x="47.8039%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.03%)</title><rect x="47.5539%" y="389" width="0.0272%" height="15" fill="rgb(233,0,47)" fg:x="71561" fg:w="41"/><text x="47.8039%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.03%)</title><rect x="47.5539%" y="373" width="0.0272%" height="15" fill="rgb(253,80,5)" fg:x="71561" fg:w="41"/><text x="47.8039%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (292 samples, 0.19%)</title><rect x="47.5811%" y="405" width="0.1940%" height="15" fill="rgb(214,133,25)" fg:x="71602" fg:w="292"/><text x="47.8311%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (292 samples, 0.19%)</title><rect x="47.5811%" y="389" width="0.1940%" height="15" fill="rgb(209,27,14)" fg:x="71602" fg:w="292"/><text x="47.8311%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (292 samples, 0.19%)</title><rect x="47.5811%" y="373" width="0.1940%" height="15" fill="rgb(219,102,51)" fg:x="71602" fg:w="292"/><text x="47.8311%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (264 samples, 0.18%)</title><rect x="47.5997%" y="357" width="0.1754%" height="15" fill="rgb(237,18,16)" fg:x="71630" fg:w="264"/><text x="47.8497%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (76 samples, 0.05%)</title><rect x="47.7752%" y="405" width="0.0505%" height="15" fill="rgb(241,85,17)" fg:x="71894" fg:w="76"/><text x="48.0252%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (76 samples, 0.05%)</title><rect x="47.7752%" y="389" width="0.0505%" height="15" fill="rgb(236,90,42)" fg:x="71894" fg:w="76"/><text x="48.0252%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (137 samples, 0.09%)</title><rect x="47.8283%" y="389" width="0.0910%" height="15" fill="rgb(249,57,21)" fg:x="71974" fg:w="137"/><text x="48.0783%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (103 samples, 0.07%)</title><rect x="47.8509%" y="373" width="0.0684%" height="15" fill="rgb(243,12,36)" fg:x="72008" fg:w="103"/><text x="48.1009%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,142 samples, 0.76%)</title><rect x="47.3605%" y="437" width="0.7589%" height="15" fill="rgb(253,128,47)" fg:x="71270" fg:w="1142"/><text x="47.6105%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,052 samples, 0.70%)</title><rect x="47.4203%" y="421" width="0.6991%" height="15" fill="rgb(207,33,20)" fg:x="71360" fg:w="1052"/><text x="47.6703%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (442 samples, 0.29%)</title><rect x="47.8257%" y="405" width="0.2937%" height="15" fill="rgb(233,215,35)" fg:x="71970" fg:w="442"/><text x="48.0757%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (301 samples, 0.20%)</title><rect x="47.9194%" y="389" width="0.2000%" height="15" fill="rgb(249,188,52)" fg:x="72111" fg:w="301"/><text x="48.1694%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (194 samples, 0.13%)</title><rect x="48.1194%" y="437" width="0.1289%" height="15" fill="rgb(225,12,32)" fg:x="72412" fg:w="194"/><text x="48.3694%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (125 samples, 0.08%)</title><rect x="48.1653%" y="421" width="0.0831%" height="15" fill="rgb(247,98,14)" fg:x="72481" fg:w="125"/><text x="48.4153%" y="431.50"></text></g><g><title>__round (125 samples, 0.08%)</title><rect x="48.1653%" y="405" width="0.0831%" height="15" fill="rgb(247,219,48)" fg:x="72481" fg:w="125"/><text x="48.4153%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (43 samples, 0.03%)</title><rect x="48.3108%" y="389" width="0.0286%" height="15" fill="rgb(253,60,48)" fg:x="72700" fg:w="43"/><text x="48.5608%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (182 samples, 0.12%)</title><rect x="48.2483%" y="437" width="0.1209%" height="15" fill="rgb(245,15,52)" fg:x="72606" fg:w="182"/><text x="48.4983%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (182 samples, 0.12%)</title><rect x="48.2483%" y="421" width="0.1209%" height="15" fill="rgb(220,133,28)" fg:x="72606" fg:w="182"/><text x="48.4983%" y="431.50"></text></g><g><title>one_brc::Measurement::record (182 samples, 0.12%)</title><rect x="48.2483%" y="405" width="0.1209%" height="15" fill="rgb(217,180,4)" fg:x="72606" fg:w="182"/><text x="48.4983%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (45 samples, 0.03%)</title><rect x="48.3394%" y="389" width="0.0299%" height="15" fill="rgb(251,24,1)" fg:x="72743" fg:w="45"/><text x="48.5894%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (66 samples, 0.04%)</title><rect x="48.5533%" y="309" width="0.0439%" height="15" fill="rgb(212,185,49)" fg:x="73065" fg:w="66"/><text x="48.8033%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (119 samples, 0.08%)</title><rect x="48.5354%" y="325" width="0.0791%" height="15" fill="rgb(215,175,22)" fg:x="73038" fg:w="119"/><text x="48.7854%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.02%)</title><rect x="48.5972%" y="309" width="0.0173%" height="15" fill="rgb(250,205,14)" fg:x="73131" fg:w="26"/><text x="48.8472%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (155 samples, 0.10%)</title><rect x="48.6663%" y="309" width="0.1030%" height="15" fill="rgb(225,211,22)" fg:x="73235" fg:w="155"/><text x="48.9163%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (519 samples, 0.34%)</title><rect x="48.4829%" y="373" width="0.3449%" height="15" fill="rgb(251,179,42)" fg:x="72959" fg:w="519"/><text x="48.7329%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (519 samples, 0.34%)</title><rect x="48.4829%" y="357" width="0.3449%" height="15" fill="rgb(208,216,51)" fg:x="72959" fg:w="519"/><text x="48.7329%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (519 samples, 0.34%)</title><rect x="48.4829%" y="341" width="0.3449%" height="15" fill="rgb(235,36,11)" fg:x="72959" fg:w="519"/><text x="48.7329%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (321 samples, 0.21%)</title><rect x="48.6145%" y="325" width="0.2133%" height="15" fill="rgb(213,189,28)" fg:x="73157" fg:w="321"/><text x="48.8645%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (88 samples, 0.06%)</title><rect x="48.7693%" y="309" width="0.0585%" height="15" fill="rgb(227,203,42)" fg:x="73390" fg:w="88"/><text x="49.0193%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (48 samples, 0.03%)</title><rect x="48.8278%" y="373" width="0.0319%" height="15" fill="rgb(244,72,36)" fg:x="73478" fg:w="48"/><text x="49.0778%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (24 samples, 0.02%)</title><rect x="48.8437%" y="357" width="0.0159%" height="15" fill="rgb(213,53,17)" fg:x="73502" fg:w="24"/><text x="49.0937%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (24 samples, 0.02%)</title><rect x="48.8437%" y="341" width="0.0159%" height="15" fill="rgb(207,167,3)" fg:x="73502" fg:w="24"/><text x="49.0937%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (24 samples, 0.02%)</title><rect x="48.8437%" y="325" width="0.0159%" height="15" fill="rgb(216,98,30)" fg:x="73502" fg:w="24"/><text x="49.0937%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (51 samples, 0.03%)</title><rect x="48.9474%" y="261" width="0.0339%" height="15" fill="rgb(236,123,15)" fg:x="73658" fg:w="51"/><text x="49.1974%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (25 samples, 0.02%)</title><rect x="48.9813%" y="261" width="0.0166%" height="15" fill="rgb(248,81,50)" fg:x="73709" fg:w="25"/><text x="49.2313%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (316 samples, 0.21%)</title><rect x="48.8790%" y="277" width="0.2100%" height="15" fill="rgb(214,120,4)" fg:x="73555" fg:w="316"/><text x="49.1290%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (137 samples, 0.09%)</title><rect x="48.9979%" y="261" width="0.0910%" height="15" fill="rgb(208,179,34)" fg:x="73734" fg:w="137"/><text x="49.2479%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (32 samples, 0.02%)</title><rect x="49.0889%" y="277" width="0.0213%" height="15" fill="rgb(227,140,7)" fg:x="73871" fg:w="32"/><text x="49.3389%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 0.01%)</title><rect x="49.1939%" y="245" width="0.0140%" height="15" fill="rgb(214,22,6)" fg:x="74029" fg:w="21"/><text x="49.4439%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (289 samples, 0.19%)</title><rect x="49.1301%" y="261" width="0.1920%" height="15" fill="rgb(207,137,27)" fg:x="73933" fg:w="289"/><text x="49.3801%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (156 samples, 0.10%)</title><rect x="49.2185%" y="245" width="0.1037%" height="15" fill="rgb(210,8,46)" fg:x="74066" fg:w="156"/><text x="49.4685%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,302 samples, 0.87%)</title><rect x="48.4643%" y="405" width="0.8652%" height="15" fill="rgb(240,16,54)" fg:x="72931" fg:w="1302"/><text x="48.7143%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,302 samples, 0.87%)</title><rect x="48.4643%" y="389" width="0.8652%" height="15" fill="rgb(211,209,29)" fg:x="72931" fg:w="1302"/><text x="48.7143%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (705 samples, 0.47%)</title><rect x="48.8610%" y="373" width="0.4685%" height="15" fill="rgb(226,228,24)" fg:x="73528" fg:w="705"/><text x="49.1110%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (678 samples, 0.45%)</title><rect x="48.8790%" y="357" width="0.4505%" height="15" fill="rgb(222,84,9)" fg:x="73555" fg:w="678"/><text x="49.1290%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (678 samples, 0.45%)</title><rect x="48.8790%" y="341" width="0.4505%" height="15" fill="rgb(234,203,30)" fg:x="73555" fg:w="678"/><text x="49.1290%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (678 samples, 0.45%)</title><rect x="48.8790%" y="325" width="0.4505%" height="15" fill="rgb(238,109,14)" fg:x="73555" fg:w="678"/><text x="49.1290%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (678 samples, 0.45%)</title><rect x="48.8790%" y="309" width="0.4505%" height="15" fill="rgb(233,206,34)" fg:x="73555" fg:w="678"/><text x="49.1290%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (678 samples, 0.45%)</title><rect x="48.8790%" y="293" width="0.4505%" height="15" fill="rgb(220,167,47)" fg:x="73555" fg:w="678"/><text x="49.1290%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (330 samples, 0.22%)</title><rect x="49.1102%" y="277" width="0.2193%" height="15" fill="rgb(238,105,10)" fg:x="73903" fg:w="330"/><text x="49.3602%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.02%)</title><rect x="49.3528%" y="373" width="0.0219%" height="15" fill="rgb(213,227,17)" fg:x="74268" fg:w="33"/><text x="49.6028%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (51 samples, 0.03%)</title><rect x="49.3926%" y="357" width="0.0339%" height="15" fill="rgb(217,132,38)" fg:x="74328" fg:w="51"/><text x="49.6426%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (51 samples, 0.03%)</title><rect x="49.3926%" y="341" width="0.0339%" height="15" fill="rgb(242,146,4)" fg:x="74328" fg:w="51"/><text x="49.6426%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (51 samples, 0.03%)</title><rect x="49.3926%" y="325" width="0.0339%" height="15" fill="rgb(212,61,9)" fg:x="74328" fg:w="51"/><text x="49.6426%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (700 samples, 0.47%)</title><rect x="49.3747%" y="373" width="0.4652%" height="15" fill="rgb(247,126,22)" fg:x="74301" fg:w="700"/><text x="49.6247%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (622 samples, 0.41%)</title><rect x="49.4265%" y="357" width="0.4133%" height="15" fill="rgb(220,196,2)" fg:x="74379" fg:w="622"/><text x="49.6765%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (622 samples, 0.41%)</title><rect x="49.4265%" y="341" width="0.4133%" height="15" fill="rgb(208,46,4)" fg:x="74379" fg:w="622"/><text x="49.6765%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (622 samples, 0.41%)</title><rect x="49.4265%" y="325" width="0.4133%" height="15" fill="rgb(252,104,46)" fg:x="74379" fg:w="622"/><text x="49.6765%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (622 samples, 0.41%)</title><rect x="49.4265%" y="309" width="0.4133%" height="15" fill="rgb(237,152,48)" fg:x="74379" fg:w="622"/><text x="49.6765%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (622 samples, 0.41%)</title><rect x="49.4265%" y="293" width="0.4133%" height="15" fill="rgb(221,59,37)" fg:x="74379" fg:w="622"/><text x="49.6765%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (622 samples, 0.41%)</title><rect x="49.4265%" y="277" width="0.4133%" height="15" fill="rgb(209,202,51)" fg:x="74379" fg:w="622"/><text x="49.6765%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (397 samples, 0.26%)</title><rect x="49.5760%" y="261" width="0.2638%" height="15" fill="rgb(228,81,30)" fg:x="74604" fg:w="397"/><text x="49.8260%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (65 samples, 0.04%)</title><rect x="49.8399%" y="373" width="0.0432%" height="15" fill="rgb(227,42,39)" fg:x="75001" fg:w="65"/><text x="50.0899%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.03%)</title><rect x="49.8830%" y="341" width="0.0272%" height="15" fill="rgb(221,26,2)" fg:x="75066" fg:w="41"/><text x="50.1330%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (45 samples, 0.03%)</title><rect x="49.8830%" y="373" width="0.0299%" height="15" fill="rgb(254,61,31)" fg:x="75066" fg:w="45"/><text x="50.1330%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (45 samples, 0.03%)</title><rect x="49.8830%" y="357" width="0.0299%" height="15" fill="rgb(222,173,38)" fg:x="75066" fg:w="45"/><text x="50.1330%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,321 samples, 1.54%)</title><rect x="48.3865%" y="421" width="1.5424%" height="15" fill="rgb(218,50,12)" fg:x="72814" fg:w="2321"/><text x="48.6365%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (902 samples, 0.60%)</title><rect x="49.3295%" y="405" width="0.5994%" height="15" fill="rgb(223,88,40)" fg:x="74233" fg:w="902"/><text x="49.5795%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (878 samples, 0.58%)</title><rect x="49.3454%" y="389" width="0.5835%" height="15" fill="rgb(237,54,19)" fg:x="74257" fg:w="878"/><text x="49.5954%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (24 samples, 0.02%)</title><rect x="49.9129%" y="373" width="0.0159%" height="15" fill="rgb(251,129,25)" fg:x="75111" fg:w="24"/><text x="50.1629%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="49.9129%" y="357" width="0.0159%" height="15" fill="rgb(238,97,19)" fg:x="75111" fg:w="24"/><text x="50.1629%" y="367.50"></text></g><g><title>worker-1 (8,241 samples, 5.48%)</title><rect x="44.4718%" y="725" width="5.4763%" height="15" fill="rgb(240,169,18)" fg:x="66923" fg:w="8241"/><text x="44.7218%" y="735.50">worker-1</text></g><g><title>__clone3 (6,496 samples, 4.32%)</title><rect x="45.6314%" y="709" width="4.3167%" height="15" fill="rgb(230,187,49)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="719.50">__clo..</text></g><g><title>start_thread (6,496 samples, 4.32%)</title><rect x="45.6314%" y="693" width="4.3167%" height="15" fill="rgb(209,44,26)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,496 samples, 4.32%)</title><rect x="45.6314%" y="677" width="4.3167%" height="15" fill="rgb(244,0,6)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,496 samples, 4.32%)</title><rect x="45.6314%" y="661" width="4.3167%" height="15" fill="rgb(248,18,21)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,496 samples, 4.32%)</title><rect x="45.6314%" y="645" width="4.3167%" height="15" fill="rgb(245,180,19)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="655.50">std::..</text></g><g><title>std::panic::catch_unwind (6,496 samples, 4.32%)</title><rect x="45.6314%" y="629" width="4.3167%" height="15" fill="rgb(252,118,36)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,496 samples, 4.32%)</title><rect x="45.6314%" y="613" width="4.3167%" height="15" fill="rgb(210,224,19)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,496 samples, 4.32%)</title><rect x="45.6314%" y="597" width="4.3167%" height="15" fill="rgb(218,30,24)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,496 samples, 4.32%)</title><rect x="45.6314%" y="581" width="4.3167%" height="15" fill="rgb(219,75,50)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,496 samples, 4.32%)</title><rect x="45.6314%" y="565" width="4.3167%" height="15" fill="rgb(234,72,50)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,496 samples, 4.32%)</title><rect x="45.6314%" y="549" width="4.3167%" height="15" fill="rgb(219,100,48)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,496 samples, 4.32%)</title><rect x="45.6314%" y="533" width="4.3167%" height="15" fill="rgb(253,5,41)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,496 samples, 4.32%)</title><rect x="45.6314%" y="517" width="4.3167%" height="15" fill="rgb(247,181,11)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="527.50">one_b..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,496 samples, 4.32%)</title><rect x="45.6314%" y="501" width="4.3167%" height="15" fill="rgb(222,223,25)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,496 samples, 4.32%)</title><rect x="45.6314%" y="485" width="4.3167%" height="15" fill="rgb(214,198,28)" fg:x="68668" fg:w="6496"/><text x="45.8814%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,916 samples, 3.27%)</title><rect x="46.6814%" y="469" width="3.2668%" height="15" fill="rgb(230,46,43)" fg:x="70248" fg:w="4916"/><text x="46.9314%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (4,916 samples, 3.27%)</title><rect x="46.6814%" y="453" width="3.2668%" height="15" fill="rgb(233,65,53)" fg:x="70248" fg:w="4916"/><text x="46.9314%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,376 samples, 1.58%)</title><rect x="48.3693%" y="437" width="1.5789%" height="15" fill="rgb(221,121,27)" fg:x="72788" fg:w="2376"/><text x="48.6193%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (29 samples, 0.02%)</title><rect x="49.9289%" y="421" width="0.0193%" height="15" fill="rgb(247,70,47)" fg:x="75135" fg:w="29"/><text x="50.1789%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (103 samples, 0.07%)</title><rect x="50.0372%" y="677" width="0.0684%" height="15" fill="rgb(228,85,35)" fg:x="75298" fg:w="103"/><text x="50.2872%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (103 samples, 0.07%)</title><rect x="50.0372%" y="661" width="0.0684%" height="15" fill="rgb(209,50,18)" fg:x="75298" fg:w="103"/><text x="50.2872%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (103 samples, 0.07%)</title><rect x="50.0372%" y="645" width="0.0684%" height="15" fill="rgb(250,19,35)" fg:x="75298" fg:w="103"/><text x="50.2872%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (302 samples, 0.20%)</title><rect x="49.9482%" y="693" width="0.2007%" height="15" fill="rgb(253,107,29)" fg:x="75164" fg:w="302"/><text x="50.1982%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (65 samples, 0.04%)</title><rect x="50.1057%" y="677" width="0.0432%" height="15" fill="rgb(252,179,29)" fg:x="75401" fg:w="65"/><text x="50.3557%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (83 samples, 0.06%)</title><rect x="50.1489%" y="693" width="0.0552%" height="15" fill="rgb(238,194,6)" fg:x="75466" fg:w="83"/><text x="50.3989%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (144 samples, 0.10%)</title><rect x="50.2040%" y="693" width="0.0957%" height="15" fill="rgb(238,164,29)" fg:x="75549" fg:w="144"/><text x="50.4540%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (77 samples, 0.05%)</title><rect x="50.2485%" y="677" width="0.0512%" height="15" fill="rgb(224,25,9)" fg:x="75616" fg:w="77"/><text x="50.4985%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (77 samples, 0.05%)</title><rect x="50.2485%" y="661" width="0.0512%" height="15" fill="rgb(244,153,23)" fg:x="75616" fg:w="77"/><text x="50.4985%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (77 samples, 0.05%)</title><rect x="50.2485%" y="645" width="0.0512%" height="15" fill="rgb(212,203,14)" fg:x="75616" fg:w="77"/><text x="50.4985%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (77 samples, 0.05%)</title><rect x="50.2485%" y="629" width="0.0512%" height="15" fill="rgb(220,164,20)" fg:x="75616" fg:w="77"/><text x="50.4985%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (77 samples, 0.05%)</title><rect x="50.2485%" y="613" width="0.0512%" height="15" fill="rgb(222,203,48)" fg:x="75616" fg:w="77"/><text x="50.4985%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (77 samples, 0.05%)</title><rect x="50.2485%" y="597" width="0.0512%" height="15" fill="rgb(215,159,22)" fg:x="75616" fg:w="77"/><text x="50.4985%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (30 samples, 0.02%)</title><rect x="50.2798%" y="581" width="0.0199%" height="15" fill="rgb(216,183,47)" fg:x="75663" fg:w="30"/><text x="50.5298%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (69 samples, 0.05%)</title><rect x="50.2997%" y="693" width="0.0459%" height="15" fill="rgb(229,195,25)" fg:x="75693" fg:w="69"/><text x="50.5497%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (44 samples, 0.03%)</title><rect x="50.3163%" y="677" width="0.0292%" height="15" fill="rgb(224,132,51)" fg:x="75718" fg:w="44"/><text x="50.5663%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (26 samples, 0.02%)</title><rect x="50.3456%" y="693" width="0.0173%" height="15" fill="rgb(240,63,7)" fg:x="75762" fg:w="26"/><text x="50.5956%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (26 samples, 0.02%)</title><rect x="50.3456%" y="677" width="0.0173%" height="15" fill="rgb(249,182,41)" fg:x="75762" fg:w="26"/><text x="50.5956%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (26 samples, 0.02%)</title><rect x="50.3456%" y="661" width="0.0173%" height="15" fill="rgb(243,47,26)" fg:x="75762" fg:w="26"/><text x="50.5956%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (82 samples, 0.05%)</title><rect x="50.3628%" y="693" width="0.0545%" height="15" fill="rgb(233,48,2)" fg:x="75788" fg:w="82"/><text x="50.6128%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 0.02%)</title><rect x="50.4512%" y="677" width="0.0193%" height="15" fill="rgb(244,165,34)" fg:x="75921" fg:w="29"/><text x="50.7012%" y="687.50"></text></g><g><title>[anon] (831 samples, 0.55%)</title><rect x="49.9482%" y="709" width="0.5522%" height="15" fill="rgb(207,89,7)" fg:x="75164" fg:w="831"/><text x="50.1982%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (125 samples, 0.08%)</title><rect x="50.4173%" y="693" width="0.0831%" height="15" fill="rgb(244,117,36)" fg:x="75870" fg:w="125"/><text x="50.6673%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (45 samples, 0.03%)</title><rect x="50.4705%" y="677" width="0.0299%" height="15" fill="rgb(226,144,34)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (45 samples, 0.03%)</title><rect x="50.4705%" y="661" width="0.0299%" height="15" fill="rgb(213,23,19)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (45 samples, 0.03%)</title><rect x="50.4705%" y="645" width="0.0299%" height="15" fill="rgb(217,75,12)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (45 samples, 0.03%)</title><rect x="50.4705%" y="629" width="0.0299%" height="15" fill="rgb(224,159,17)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (45 samples, 0.03%)</title><rect x="50.4705%" y="613" width="0.0299%" height="15" fill="rgb(217,118,1)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (45 samples, 0.03%)</title><rect x="50.4705%" y="597" width="0.0299%" height="15" fill="rgb(232,180,48)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (45 samples, 0.03%)</title><rect x="50.4705%" y="581" width="0.0299%" height="15" fill="rgb(230,27,33)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (45 samples, 0.03%)</title><rect x="50.4705%" y="565" width="0.0299%" height="15" fill="rgb(205,31,21)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (45 samples, 0.03%)</title><rect x="50.4705%" y="549" width="0.0299%" height="15" fill="rgb(253,59,4)" fg:x="75950" fg:w="45"/><text x="50.7205%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (110 samples, 0.07%)</title><rect x="50.5017%" y="693" width="0.0731%" height="15" fill="rgb(224,201,9)" fg:x="75997" fg:w="110"/><text x="50.7517%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (171 samples, 0.11%)</title><rect x="50.5748%" y="693" width="0.1136%" height="15" fill="rgb(229,206,30)" fg:x="76107" fg:w="171"/><text x="50.8248%" y="703.50"></text></g><g><title>__round (39 samples, 0.03%)</title><rect x="50.6884%" y="693" width="0.0259%" height="15" fill="rgb(212,67,47)" fg:x="76278" fg:w="39"/><text x="50.9384%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (104 samples, 0.07%)</title><rect x="50.7144%" y="693" width="0.0691%" height="15" fill="rgb(211,96,50)" fg:x="76317" fg:w="104"/><text x="50.9644%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (126 samples, 0.08%)</title><rect x="50.7835%" y="693" width="0.0837%" height="15" fill="rgb(252,114,18)" fg:x="76421" fg:w="126"/><text x="51.0335%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (26 samples, 0.02%)</title><rect x="50.8499%" y="677" width="0.0173%" height="15" fill="rgb(223,58,37)" fg:x="76521" fg:w="26"/><text x="51.0999%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (26 samples, 0.02%)</title><rect x="50.8499%" y="661" width="0.0173%" height="15" fill="rgb(237,70,4)" fg:x="76521" fg:w="26"/><text x="51.0999%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (103 samples, 0.07%)</title><rect x="50.8672%" y="693" width="0.0684%" height="15" fill="rgb(244,85,46)" fg:x="76547" fg:w="103"/><text x="51.1172%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.04%)</title><rect x="50.9356%" y="645" width="0.0399%" height="15" fill="rgb(223,39,52)" fg:x="76650" fg:w="60"/><text x="51.1856%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.04%)</title><rect x="50.9356%" y="629" width="0.0399%" height="15" fill="rgb(218,200,14)" fg:x="76650" fg:w="60"/><text x="51.1856%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.04%)</title><rect x="50.9356%" y="613" width="0.0399%" height="15" fill="rgb(208,171,16)" fg:x="76650" fg:w="60"/><text x="51.1856%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (60 samples, 0.04%)</title><rect x="50.9356%" y="597" width="0.0399%" height="15" fill="rgb(234,200,18)" fg:x="76650" fg:w="60"/><text x="51.1856%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (66 samples, 0.04%)</title><rect x="50.9755%" y="613" width="0.0439%" height="15" fill="rgb(228,45,11)" fg:x="76710" fg:w="66"/><text x="51.2255%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (53 samples, 0.04%)</title><rect x="51.0194%" y="613" width="0.0352%" height="15" fill="rgb(237,182,11)" fg:x="76776" fg:w="53"/><text x="51.2694%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (67 samples, 0.04%)</title><rect x="51.0546%" y="613" width="0.0445%" height="15" fill="rgb(241,175,49)" fg:x="76829" fg:w="67"/><text x="51.3046%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (67 samples, 0.04%)</title><rect x="51.0546%" y="597" width="0.0445%" height="15" fill="rgb(247,38,35)" fg:x="76829" fg:w="67"/><text x="51.3046%" y="607.50"></text></g><g><title>[unknown] (927 samples, 0.62%)</title><rect x="50.5004%" y="709" width="0.6160%" height="15" fill="rgb(228,39,49)" fg:x="75995" fg:w="927"/><text x="50.7504%" y="719.50"></text></g><g><title>one_brc::process_lines (272 samples, 0.18%)</title><rect x="50.9356%" y="693" width="0.1808%" height="15" fill="rgb(226,101,26)" fg:x="76650" fg:w="272"/><text x="51.1856%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (272 samples, 0.18%)</title><rect x="50.9356%" y="677" width="0.1808%" height="15" fill="rgb(206,141,19)" fg:x="76650" fg:w="272"/><text x="51.1856%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (272 samples, 0.18%)</title><rect x="50.9356%" y="661" width="0.1808%" height="15" fill="rgb(211,200,13)" fg:x="76650" fg:w="272"/><text x="51.1856%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (212 samples, 0.14%)</title><rect x="50.9755%" y="645" width="0.1409%" height="15" fill="rgb(241,121,6)" fg:x="76710" fg:w="212"/><text x="51.2255%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (212 samples, 0.14%)</title><rect x="50.9755%" y="629" width="0.1409%" height="15" fill="rgb(234,221,29)" fg:x="76710" fg:w="212"/><text x="51.2255%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (26 samples, 0.02%)</title><rect x="51.0991%" y="613" width="0.0173%" height="15" fill="rgb(229,136,5)" fg:x="76896" fg:w="26"/><text x="51.3491%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (29 samples, 0.02%)</title><rect x="51.3138%" y="389" width="0.0193%" height="15" fill="rgb(238,36,11)" fg:x="77219" fg:w="29"/><text x="51.5638%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (29 samples, 0.02%)</title><rect x="51.3138%" y="373" width="0.0193%" height="15" fill="rgb(251,55,41)" fg:x="77219" fg:w="29"/><text x="51.5638%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.02%)</title><rect x="51.3138%" y="357" width="0.0193%" height="15" fill="rgb(242,34,40)" fg:x="77219" fg:w="29"/><text x="51.5638%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (148 samples, 0.10%)</title><rect x="51.3330%" y="389" width="0.0983%" height="15" fill="rgb(215,42,17)" fg:x="77248" fg:w="148"/><text x="51.5830%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (148 samples, 0.10%)</title><rect x="51.3330%" y="373" width="0.0983%" height="15" fill="rgb(207,44,46)" fg:x="77248" fg:w="148"/><text x="51.5830%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (148 samples, 0.10%)</title><rect x="51.3330%" y="357" width="0.0983%" height="15" fill="rgb(211,206,28)" fg:x="77248" fg:w="148"/><text x="51.5830%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (145 samples, 0.10%)</title><rect x="51.3350%" y="341" width="0.0964%" height="15" fill="rgb(237,167,16)" fg:x="77251" fg:w="145"/><text x="51.5850%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (77 samples, 0.05%)</title><rect x="51.4314%" y="389" width="0.0512%" height="15" fill="rgb(233,66,6)" fg:x="77396" fg:w="77"/><text x="51.6814%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (77 samples, 0.05%)</title><rect x="51.4314%" y="373" width="0.0512%" height="15" fill="rgb(246,123,29)" fg:x="77396" fg:w="77"/><text x="51.6814%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (41 samples, 0.03%)</title><rect x="51.6035%" y="357" width="0.0272%" height="15" fill="rgb(209,62,40)" fg:x="77655" fg:w="41"/><text x="51.8535%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (35 samples, 0.02%)</title><rect x="51.6307%" y="357" width="0.0233%" height="15" fill="rgb(218,4,25)" fg:x="77696" fg:w="35"/><text x="51.8807%" y="367.50"></text></g><g><title>core::ptr::align_offset (35 samples, 0.02%)</title><rect x="51.6307%" y="341" width="0.0233%" height="15" fill="rgb(253,91,49)" fg:x="77696" fg:w="35"/><text x="51.8807%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (67 samples, 0.04%)</title><rect x="51.6540%" y="357" width="0.0445%" height="15" fill="rgb(228,155,29)" fg:x="77731" fg:w="67"/><text x="51.9040%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,354 samples, 0.90%)</title><rect x="51.1722%" y="405" width="0.8998%" height="15" fill="rgb(243,57,37)" fg:x="77006" fg:w="1354"/><text x="51.4222%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (887 samples, 0.59%)</title><rect x="51.4825%" y="389" width="0.5894%" height="15" fill="rgb(244,167,17)" fg:x="77473" fg:w="887"/><text x="51.7325%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (849 samples, 0.56%)</title><rect x="51.5078%" y="373" width="0.5642%" height="15" fill="rgb(207,181,38)" fg:x="77511" fg:w="849"/><text x="51.7578%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (562 samples, 0.37%)</title><rect x="51.6985%" y="357" width="0.3735%" height="15" fill="rgb(211,8,23)" fg:x="77798" fg:w="562"/><text x="51.9485%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,463 samples, 0.97%)</title><rect x="51.1191%" y="437" width="0.9722%" height="15" fill="rgb(235,11,44)" fg:x="76926" fg:w="1463"/><text x="51.3691%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,463 samples, 0.97%)</title><rect x="51.1191%" y="421" width="0.9722%" height="15" fill="rgb(248,18,52)" fg:x="76926" fg:w="1463"/><text x="51.3691%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (29 samples, 0.02%)</title><rect x="52.0720%" y="405" width="0.0193%" height="15" fill="rgb(208,4,7)" fg:x="78360" fg:w="29"/><text x="52.3220%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (29 samples, 0.02%)</title><rect x="52.0720%" y="389" width="0.0193%" height="15" fill="rgb(240,17,39)" fg:x="78360" fg:w="29"/><text x="52.3220%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,567 samples, 1.04%)</title><rect x="51.1191%" y="469" width="1.0413%" height="15" fill="rgb(207,170,3)" fg:x="76926" fg:w="1567"/><text x="51.3691%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,567 samples, 1.04%)</title><rect x="51.1191%" y="453" width="1.0413%" height="15" fill="rgb(236,100,52)" fg:x="76926" fg:w="1567"/><text x="51.3691%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (104 samples, 0.07%)</title><rect x="52.0913%" y="437" width="0.0691%" height="15" fill="rgb(246,78,51)" fg:x="78389" fg:w="104"/><text x="52.3413%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (104 samples, 0.07%)</title><rect x="52.0913%" y="421" width="0.0691%" height="15" fill="rgb(211,17,15)" fg:x="78389" fg:w="104"/><text x="52.3413%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (104 samples, 0.07%)</title><rect x="52.0913%" y="405" width="0.0691%" height="15" fill="rgb(209,59,46)" fg:x="78389" fg:w="104"/><text x="52.3413%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (104 samples, 0.07%)</title><rect x="52.0913%" y="389" width="0.0691%" height="15" fill="rgb(210,92,25)" fg:x="78389" fg:w="104"/><text x="52.3413%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (46 samples, 0.03%)</title><rect x="52.1298%" y="373" width="0.0306%" height="15" fill="rgb(238,174,52)" fg:x="78447" fg:w="46"/><text x="52.3798%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (46 samples, 0.03%)</title><rect x="52.1298%" y="357" width="0.0306%" height="15" fill="rgb(230,73,7)" fg:x="78447" fg:w="46"/><text x="52.3798%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (46 samples, 0.03%)</title><rect x="52.1298%" y="341" width="0.0306%" height="15" fill="rgb(243,124,40)" fg:x="78447" fg:w="46"/><text x="52.3798%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (46 samples, 0.03%)</title><rect x="52.1298%" y="325" width="0.0306%" height="15" fill="rgb(244,170,11)" fg:x="78447" fg:w="46"/><text x="52.3798%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (46 samples, 0.03%)</title><rect x="52.1298%" y="309" width="0.0306%" height="15" fill="rgb(207,114,54)" fg:x="78447" fg:w="46"/><text x="52.3798%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (30 samples, 0.02%)</title><rect x="52.1830%" y="437" width="0.0199%" height="15" fill="rgb(205,42,20)" fg:x="78527" fg:w="30"/><text x="52.4330%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (30 samples, 0.02%)</title><rect x="52.2029%" y="405" width="0.0199%" height="15" fill="rgb(230,30,28)" fg:x="78557" fg:w="30"/><text x="52.4529%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (75 samples, 0.05%)</title><rect x="52.2999%" y="373" width="0.0498%" height="15" fill="rgb(205,73,54)" fg:x="78703" fg:w="75"/><text x="52.5499%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (88 samples, 0.06%)</title><rect x="52.3498%" y="373" width="0.0585%" height="15" fill="rgb(254,227,23)" fg:x="78778" fg:w="88"/><text x="52.5998%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (227 samples, 0.15%)</title><rect x="52.2733%" y="389" width="0.1508%" height="15" fill="rgb(228,202,34)" fg:x="78663" fg:w="227"/><text x="52.5233%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (24 samples, 0.02%)</title><rect x="52.4082%" y="373" width="0.0159%" height="15" fill="rgb(222,225,37)" fg:x="78866" fg:w="24"/><text x="52.6582%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (100 samples, 0.07%)</title><rect x="52.4627%" y="373" width="0.0665%" height="15" fill="rgb(221,14,54)" fg:x="78948" fg:w="100"/><text x="52.7127%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (22 samples, 0.01%)</title><rect x="52.7943%" y="325" width="0.0146%" height="15" fill="rgb(254,102,2)" fg:x="79447" fg:w="22"/><text x="53.0443%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (22 samples, 0.01%)</title><rect x="52.8089%" y="309" width="0.0146%" height="15" fill="rgb(232,104,17)" fg:x="79469" fg:w="22"/><text x="53.0589%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (288 samples, 0.19%)</title><rect x="52.6455%" y="341" width="0.1914%" height="15" fill="rgb(250,220,14)" fg:x="79223" fg:w="288"/><text x="52.8955%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (42 samples, 0.03%)</title><rect x="52.8089%" y="325" width="0.0279%" height="15" fill="rgb(241,158,9)" fg:x="79469" fg:w="42"/><text x="53.0589%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (20 samples, 0.01%)</title><rect x="52.8236%" y="309" width="0.0133%" height="15" fill="rgb(246,9,43)" fg:x="79491" fg:w="20"/><text x="53.0736%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (960 samples, 0.64%)</title><rect x="52.2029%" y="437" width="0.6379%" height="15" fill="rgb(206,73,33)" fg:x="78557" fg:w="960"/><text x="52.4529%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (960 samples, 0.64%)</title><rect x="52.2029%" y="421" width="0.6379%" height="15" fill="rgb(222,79,8)" fg:x="78557" fg:w="960"/><text x="52.4529%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (930 samples, 0.62%)</title><rect x="52.2228%" y="405" width="0.6180%" height="15" fill="rgb(234,8,54)" fg:x="78587" fg:w="930"/><text x="52.4728%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (627 samples, 0.42%)</title><rect x="52.4242%" y="389" width="0.4167%" height="15" fill="rgb(209,134,38)" fg:x="78890" fg:w="627"/><text x="52.6742%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (469 samples, 0.31%)</title><rect x="52.5292%" y="373" width="0.3117%" height="15" fill="rgb(230,127,29)" fg:x="79048" fg:w="469"/><text x="52.7792%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (384 samples, 0.26%)</title><rect x="52.5857%" y="357" width="0.2552%" height="15" fill="rgb(242,44,41)" fg:x="79133" fg:w="384"/><text x="52.8357%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (59 samples, 0.04%)</title><rect x="52.8614%" y="421" width="0.0392%" height="15" fill="rgb(222,56,43)" fg:x="79548" fg:w="59"/><text x="53.1114%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (37 samples, 0.02%)</title><rect x="53.0581%" y="405" width="0.0246%" height="15" fill="rgb(238,39,47)" fg:x="79844" fg:w="37"/><text x="53.3081%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (37 samples, 0.02%)</title><rect x="53.0581%" y="389" width="0.0246%" height="15" fill="rgb(226,79,43)" fg:x="79844" fg:w="37"/><text x="53.3081%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (37 samples, 0.02%)</title><rect x="53.0581%" y="373" width="0.0246%" height="15" fill="rgb(242,105,53)" fg:x="79844" fg:w="37"/><text x="53.3081%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (336 samples, 0.22%)</title><rect x="53.0827%" y="405" width="0.2233%" height="15" fill="rgb(251,132,46)" fg:x="79881" fg:w="336"/><text x="53.3327%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (336 samples, 0.22%)</title><rect x="53.0827%" y="389" width="0.2233%" height="15" fill="rgb(231,77,14)" fg:x="79881" fg:w="336"/><text x="53.3327%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (336 samples, 0.22%)</title><rect x="53.0827%" y="373" width="0.2233%" height="15" fill="rgb(240,135,9)" fg:x="79881" fg:w="336"/><text x="53.3327%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (310 samples, 0.21%)</title><rect x="53.1000%" y="357" width="0.2060%" height="15" fill="rgb(248,109,14)" fg:x="79907" fg:w="310"/><text x="53.3500%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (72 samples, 0.05%)</title><rect x="53.3060%" y="405" width="0.0478%" height="15" fill="rgb(227,146,52)" fg:x="80217" fg:w="72"/><text x="53.5560%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (72 samples, 0.05%)</title><rect x="53.3060%" y="389" width="0.0478%" height="15" fill="rgb(232,54,3)" fg:x="80217" fg:w="72"/><text x="53.5560%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (151 samples, 0.10%)</title><rect x="53.3631%" y="389" width="0.1003%" height="15" fill="rgb(229,201,43)" fg:x="80303" fg:w="151"/><text x="53.6131%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (117 samples, 0.08%)</title><rect x="53.3857%" y="373" width="0.0777%" height="15" fill="rgb(252,161,33)" fg:x="80337" fg:w="117"/><text x="53.6357%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,242 samples, 0.83%)</title><rect x="52.8408%" y="437" width="0.8253%" height="15" fill="rgb(226,146,40)" fg:x="79517" fg:w="1242"/><text x="53.0908%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,148 samples, 0.76%)</title><rect x="52.9033%" y="421" width="0.7629%" height="15" fill="rgb(219,47,25)" fg:x="79611" fg:w="1148"/><text x="53.1533%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (470 samples, 0.31%)</title><rect x="53.3538%" y="405" width="0.3123%" height="15" fill="rgb(250,135,13)" fg:x="80289" fg:w="470"/><text x="53.6038%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (305 samples, 0.20%)</title><rect x="53.4635%" y="389" width="0.2027%" height="15" fill="rgb(219,229,18)" fg:x="80454" fg:w="305"/><text x="53.7135%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (165 samples, 0.11%)</title><rect x="53.6662%" y="437" width="0.1096%" height="15" fill="rgb(217,152,27)" fg:x="80759" fg:w="165"/><text x="53.9162%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (115 samples, 0.08%)</title><rect x="53.6994%" y="421" width="0.0764%" height="15" fill="rgb(225,71,47)" fg:x="80809" fg:w="115"/><text x="53.9494%" y="431.50"></text></g><g><title>__round (115 samples, 0.08%)</title><rect x="53.6994%" y="405" width="0.0764%" height="15" fill="rgb(220,139,14)" fg:x="80809" fg:w="115"/><text x="53.9494%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (43 samples, 0.03%)</title><rect x="53.8370%" y="389" width="0.0286%" height="15" fill="rgb(247,54,32)" fg:x="81016" fg:w="43"/><text x="54.0870%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (185 samples, 0.12%)</title><rect x="53.7758%" y="437" width="0.1229%" height="15" fill="rgb(252,131,39)" fg:x="80924" fg:w="185"/><text x="54.0258%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (185 samples, 0.12%)</title><rect x="53.7758%" y="421" width="0.1229%" height="15" fill="rgb(210,108,39)" fg:x="80924" fg:w="185"/><text x="54.0258%" y="431.50"></text></g><g><title>one_brc::Measurement::record (185 samples, 0.12%)</title><rect x="53.7758%" y="405" width="0.1229%" height="15" fill="rgb(205,23,29)" fg:x="80924" fg:w="185"/><text x="54.0258%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (50 samples, 0.03%)</title><rect x="53.8655%" y="389" width="0.0332%" height="15" fill="rgb(246,139,46)" fg:x="81059" fg:w="50"/><text x="54.1155%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (59 samples, 0.04%)</title><rect x="54.0695%" y="309" width="0.0392%" height="15" fill="rgb(250,81,26)" fg:x="81366" fg:w="59"/><text x="54.3195%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (118 samples, 0.08%)</title><rect x="54.0496%" y="325" width="0.0784%" height="15" fill="rgb(214,104,7)" fg:x="81336" fg:w="118"/><text x="54.2996%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (29 samples, 0.02%)</title><rect x="54.1087%" y="309" width="0.0193%" height="15" fill="rgb(233,189,8)" fg:x="81425" fg:w="29"/><text x="54.3587%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (147 samples, 0.10%)</title><rect x="54.1805%" y="309" width="0.0977%" height="15" fill="rgb(228,141,17)" fg:x="81533" fg:w="147"/><text x="54.4305%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (504 samples, 0.33%)</title><rect x="54.0057%" y="373" width="0.3349%" height="15" fill="rgb(247,157,1)" fg:x="81270" fg:w="504"/><text x="54.2557%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (504 samples, 0.33%)</title><rect x="54.0057%" y="357" width="0.3349%" height="15" fill="rgb(249,225,5)" fg:x="81270" fg:w="504"/><text x="54.2557%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (504 samples, 0.33%)</title><rect x="54.0057%" y="341" width="0.3349%" height="15" fill="rgb(242,55,13)" fg:x="81270" fg:w="504"/><text x="54.2557%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (320 samples, 0.21%)</title><rect x="54.1280%" y="325" width="0.2126%" height="15" fill="rgb(230,49,50)" fg:x="81454" fg:w="320"/><text x="54.3780%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (94 samples, 0.06%)</title><rect x="54.2782%" y="309" width="0.0625%" height="15" fill="rgb(241,111,38)" fg:x="81680" fg:w="94"/><text x="54.5282%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (58 samples, 0.04%)</title><rect x="54.3407%" y="373" width="0.0385%" height="15" fill="rgb(252,155,4)" fg:x="81774" fg:w="58"/><text x="54.5907%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (31 samples, 0.02%)</title><rect x="54.3586%" y="357" width="0.0206%" height="15" fill="rgb(212,69,32)" fg:x="81801" fg:w="31"/><text x="54.6086%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (31 samples, 0.02%)</title><rect x="54.3586%" y="341" width="0.0206%" height="15" fill="rgb(243,107,47)" fg:x="81801" fg:w="31"/><text x="54.6086%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (31 samples, 0.02%)</title><rect x="54.3586%" y="325" width="0.0206%" height="15" fill="rgb(247,130,12)" fg:x="81801" fg:w="31"/><text x="54.6086%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (60 samples, 0.04%)</title><rect x="54.4849%" y="261" width="0.0399%" height="15" fill="rgb(233,74,16)" fg:x="81991" fg:w="60"/><text x="54.7349%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (20 samples, 0.01%)</title><rect x="54.5247%" y="261" width="0.0133%" height="15" fill="rgb(208,58,18)" fg:x="82051" fg:w="20"/><text x="54.7747%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (120 samples, 0.08%)</title><rect x="54.5380%" y="261" width="0.0797%" height="15" fill="rgb(242,225,1)" fg:x="82071" fg:w="120"/><text x="54.7880%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (326 samples, 0.22%)</title><rect x="54.4018%" y="277" width="0.2166%" height="15" fill="rgb(249,39,40)" fg:x="81866" fg:w="326"/><text x="54.6518%" y="287.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (51 samples, 0.03%)</title><rect x="54.6184%" y="277" width="0.0339%" height="15" fill="rgb(207,72,44)" fg:x="82192" fg:w="51"/><text x="54.8684%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 0.01%)</title><rect x="54.7354%" y="245" width="0.0140%" height="15" fill="rgb(215,193,12)" fg:x="82368" fg:w="21"/><text x="54.9854%" y="255.50"></text></g><g><title>core::cmp::min (24 samples, 0.02%)</title><rect x="54.7533%" y="245" width="0.0159%" height="15" fill="rgb(248,41,39)" fg:x="82395" fg:w="24"/><text x="55.0033%" y="255.50"></text></g><g><title>core::cmp::Ord::min (24 samples, 0.02%)</title><rect x="54.7533%" y="229" width="0.0159%" height="15" fill="rgb(253,85,4)" fg:x="82395" fg:w="24"/><text x="55.0033%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (24 samples, 0.02%)</title><rect x="54.7533%" y="213" width="0.0159%" height="15" fill="rgb(243,70,31)" fg:x="82395" fg:w="24"/><text x="55.0033%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (297 samples, 0.20%)</title><rect x="54.6656%" y="261" width="0.1974%" height="15" fill="rgb(253,195,26)" fg:x="82263" fg:w="297"/><text x="54.9156%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (141 samples, 0.09%)</title><rect x="54.7693%" y="245" width="0.0937%" height="15" fill="rgb(243,42,11)" fg:x="82419" fg:w="141"/><text x="55.0193%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,343 samples, 0.89%)</title><rect x="53.9772%" y="405" width="0.8925%" height="15" fill="rgb(239,66,17)" fg:x="81227" fg:w="1343"/><text x="54.2272%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,343 samples, 0.89%)</title><rect x="53.9772%" y="389" width="0.8925%" height="15" fill="rgb(217,132,21)" fg:x="81227" fg:w="1343"/><text x="54.2272%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (738 samples, 0.49%)</title><rect x="54.3792%" y="373" width="0.4904%" height="15" fill="rgb(252,202,21)" fg:x="81832" fg:w="738"/><text x="54.6292%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (704 samples, 0.47%)</title><rect x="54.4018%" y="357" width="0.4678%" height="15" fill="rgb(233,98,36)" fg:x="81866" fg:w="704"/><text x="54.6518%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (704 samples, 0.47%)</title><rect x="54.4018%" y="341" width="0.4678%" height="15" fill="rgb(216,153,54)" fg:x="81866" fg:w="704"/><text x="54.6518%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (704 samples, 0.47%)</title><rect x="54.4018%" y="325" width="0.4678%" height="15" fill="rgb(250,99,7)" fg:x="81866" fg:w="704"/><text x="54.6518%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (704 samples, 0.47%)</title><rect x="54.4018%" y="309" width="0.4678%" height="15" fill="rgb(207,56,50)" fg:x="81866" fg:w="704"/><text x="54.6518%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (704 samples, 0.47%)</title><rect x="54.4018%" y="293" width="0.4678%" height="15" fill="rgb(244,61,34)" fg:x="81866" fg:w="704"/><text x="54.6518%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (327 samples, 0.22%)</title><rect x="54.6523%" y="277" width="0.2173%" height="15" fill="rgb(241,50,38)" fg:x="82243" fg:w="327"/><text x="54.9023%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.02%)</title><rect x="54.8989%" y="373" width="0.0219%" height="15" fill="rgb(212,166,30)" fg:x="82614" fg:w="33"/><text x="55.1489%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (33 samples, 0.02%)</title><rect x="54.9440%" y="357" width="0.0219%" height="15" fill="rgb(249,127,32)" fg:x="82682" fg:w="33"/><text x="55.1940%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (33 samples, 0.02%)</title><rect x="54.9440%" y="341" width="0.0219%" height="15" fill="rgb(209,103,0)" fg:x="82682" fg:w="33"/><text x="55.1940%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (33 samples, 0.02%)</title><rect x="54.9440%" y="325" width="0.0219%" height="15" fill="rgb(238,209,51)" fg:x="82682" fg:w="33"/><text x="55.1940%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (793 samples, 0.53%)</title><rect x="54.9208%" y="373" width="0.5270%" height="15" fill="rgb(237,56,23)" fg:x="82647" fg:w="793"/><text x="55.1708%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (725 samples, 0.48%)</title><rect x="54.9660%" y="357" width="0.4818%" height="15" fill="rgb(215,153,46)" fg:x="82715" fg:w="725"/><text x="55.2160%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (725 samples, 0.48%)</title><rect x="54.9660%" y="341" width="0.4818%" height="15" fill="rgb(224,49,31)" fg:x="82715" fg:w="725"/><text x="55.2160%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (725 samples, 0.48%)</title><rect x="54.9660%" y="325" width="0.4818%" height="15" fill="rgb(250,18,42)" fg:x="82715" fg:w="725"/><text x="55.2160%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (725 samples, 0.48%)</title><rect x="54.9660%" y="309" width="0.4818%" height="15" fill="rgb(215,176,39)" fg:x="82715" fg:w="725"/><text x="55.2160%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (725 samples, 0.48%)</title><rect x="54.9660%" y="293" width="0.4818%" height="15" fill="rgb(223,77,29)" fg:x="82715" fg:w="725"/><text x="55.2160%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (725 samples, 0.48%)</title><rect x="54.9660%" y="277" width="0.4818%" height="15" fill="rgb(234,94,52)" fg:x="82715" fg:w="725"/><text x="55.2160%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (470 samples, 0.31%)</title><rect x="55.1354%" y="261" width="0.3123%" height="15" fill="rgb(220,154,50)" fg:x="82970" fg:w="470"/><text x="55.3854%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (83 samples, 0.06%)</title><rect x="55.4478%" y="373" width="0.0552%" height="15" fill="rgb(212,11,10)" fg:x="83440" fg:w="83"/><text x="55.6978%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.03%)</title><rect x="55.5029%" y="341" width="0.0312%" height="15" fill="rgb(205,166,19)" fg:x="83523" fg:w="47"/><text x="55.7529%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (54 samples, 0.04%)</title><rect x="55.5029%" y="373" width="0.0359%" height="15" fill="rgb(244,198,16)" fg:x="83523" fg:w="54"/><text x="55.7529%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (54 samples, 0.04%)</title><rect x="55.5029%" y="357" width="0.0359%" height="15" fill="rgb(219,69,12)" fg:x="83523" fg:w="54"/><text x="55.7529%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,460 samples, 1.63%)</title><rect x="53.9154%" y="421" width="1.6347%" height="15" fill="rgb(245,30,7)" fg:x="81134" fg:w="2460"/><text x="54.1654%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,024 samples, 0.68%)</title><rect x="54.8696%" y="405" width="0.6805%" height="15" fill="rgb(218,221,48)" fg:x="82570" fg:w="1024"/><text x="55.1196%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (993 samples, 0.66%)</title><rect x="54.8902%" y="389" width="0.6599%" height="15" fill="rgb(216,66,15)" fg:x="82601" fg:w="993"/><text x="55.1402%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (17 samples, 0.01%)</title><rect x="55.5388%" y="373" width="0.0113%" height="15" fill="rgb(226,122,50)" fg:x="83577" fg:w="17"/><text x="55.7888%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.01%)</title><rect x="55.5388%" y="357" width="0.0113%" height="15" fill="rgb(239,156,16)" fg:x="83577" fg:w="17"/><text x="55.7888%" y="367.50"></text></g><g><title>worker-2 (8,461 samples, 5.62%)</title><rect x="49.9482%" y="725" width="5.6225%" height="15" fill="rgb(224,27,38)" fg:x="75164" fg:w="8461"/><text x="50.1982%" y="735.50">worker-2</text></g><g><title>__clone3 (6,703 samples, 4.45%)</title><rect x="51.1164%" y="709" width="4.4543%" height="15" fill="rgb(224,39,27)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="719.50">__clo..</text></g><g><title>start_thread (6,703 samples, 4.45%)</title><rect x="51.1164%" y="693" width="4.4543%" height="15" fill="rgb(215,92,29)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,703 samples, 4.45%)</title><rect x="51.1164%" y="677" width="4.4543%" height="15" fill="rgb(207,159,16)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,703 samples, 4.45%)</title><rect x="51.1164%" y="661" width="4.4543%" height="15" fill="rgb(238,163,47)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,703 samples, 4.45%)</title><rect x="51.1164%" y="645" width="4.4543%" height="15" fill="rgb(219,91,49)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="655.50">std::..</text></g><g><title>std::panic::catch_unwind (6,703 samples, 4.45%)</title><rect x="51.1164%" y="629" width="4.4543%" height="15" fill="rgb(227,167,31)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,703 samples, 4.45%)</title><rect x="51.1164%" y="613" width="4.4543%" height="15" fill="rgb(234,80,54)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,703 samples, 4.45%)</title><rect x="51.1164%" y="597" width="4.4543%" height="15" fill="rgb(212,114,2)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,703 samples, 4.45%)</title><rect x="51.1164%" y="581" width="4.4543%" height="15" fill="rgb(234,50,24)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,703 samples, 4.45%)</title><rect x="51.1164%" y="565" width="4.4543%" height="15" fill="rgb(221,68,8)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,703 samples, 4.45%)</title><rect x="51.1164%" y="549" width="4.4543%" height="15" fill="rgb(254,180,31)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,703 samples, 4.45%)</title><rect x="51.1164%" y="533" width="4.4543%" height="15" fill="rgb(247,130,50)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,703 samples, 4.45%)</title><rect x="51.1164%" y="517" width="4.4543%" height="15" fill="rgb(211,109,4)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="527.50">one_b..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,703 samples, 4.45%)</title><rect x="51.1164%" y="501" width="4.4543%" height="15" fill="rgb(238,50,21)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,703 samples, 4.45%)</title><rect x="51.1164%" y="485" width="4.4543%" height="15" fill="rgb(225,57,45)" fg:x="76922" fg:w="6703"/><text x="51.3664%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,132 samples, 3.41%)</title><rect x="52.1604%" y="469" width="3.4103%" height="15" fill="rgb(209,196,50)" fg:x="78493" fg:w="5132"/><text x="52.4104%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (5,132 samples, 3.41%)</title><rect x="52.1604%" y="453" width="3.4103%" height="15" fill="rgb(242,140,13)" fg:x="78493" fg:w="5132"/><text x="52.4104%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,516 samples, 1.67%)</title><rect x="53.8988%" y="437" width="1.6719%" height="15" fill="rgb(217,111,7)" fg:x="81109" fg:w="2516"/><text x="54.1488%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (31 samples, 0.02%)</title><rect x="55.5501%" y="421" width="0.0206%" height="15" fill="rgb(253,193,51)" fg:x="83594" fg:w="31"/><text x="55.8001%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (104 samples, 0.07%)</title><rect x="55.6484%" y="677" width="0.0691%" height="15" fill="rgb(252,70,29)" fg:x="83742" fg:w="104"/><text x="55.8984%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (104 samples, 0.07%)</title><rect x="55.6484%" y="661" width="0.0691%" height="15" fill="rgb(232,127,12)" fg:x="83742" fg:w="104"/><text x="55.8984%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (104 samples, 0.07%)</title><rect x="55.6484%" y="645" width="0.0691%" height="15" fill="rgb(211,180,21)" fg:x="83742" fg:w="104"/><text x="55.8984%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (298 samples, 0.20%)</title><rect x="55.5707%" y="693" width="0.1980%" height="15" fill="rgb(229,72,13)" fg:x="83625" fg:w="298"/><text x="55.8207%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (77 samples, 0.05%)</title><rect x="55.7176%" y="677" width="0.0512%" height="15" fill="rgb(240,211,49)" fg:x="83846" fg:w="77"/><text x="55.9676%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (98 samples, 0.07%)</title><rect x="55.7687%" y="693" width="0.0651%" height="15" fill="rgb(219,149,40)" fg:x="83923" fg:w="98"/><text x="56.0187%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (163 samples, 0.11%)</title><rect x="55.8338%" y="693" width="0.1083%" height="15" fill="rgb(210,127,46)" fg:x="84021" fg:w="163"/><text x="56.0838%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (96 samples, 0.06%)</title><rect x="55.8784%" y="677" width="0.0638%" height="15" fill="rgb(220,106,7)" fg:x="84088" fg:w="96"/><text x="56.1284%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (96 samples, 0.06%)</title><rect x="55.8784%" y="661" width="0.0638%" height="15" fill="rgb(249,31,22)" fg:x="84088" fg:w="96"/><text x="56.1284%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (96 samples, 0.06%)</title><rect x="55.8784%" y="645" width="0.0638%" height="15" fill="rgb(253,1,49)" fg:x="84088" fg:w="96"/><text x="56.1284%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (96 samples, 0.06%)</title><rect x="55.8784%" y="629" width="0.0638%" height="15" fill="rgb(227,144,33)" fg:x="84088" fg:w="96"/><text x="56.1284%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (96 samples, 0.06%)</title><rect x="55.8784%" y="613" width="0.0638%" height="15" fill="rgb(249,163,44)" fg:x="84088" fg:w="96"/><text x="56.1284%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (96 samples, 0.06%)</title><rect x="55.8784%" y="597" width="0.0638%" height="15" fill="rgb(234,15,39)" fg:x="84088" fg:w="96"/><text x="56.1284%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (26 samples, 0.02%)</title><rect x="55.9249%" y="581" width="0.0173%" height="15" fill="rgb(207,66,16)" fg:x="84158" fg:w="26"/><text x="56.1749%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (87 samples, 0.06%)</title><rect x="55.9422%" y="693" width="0.0578%" height="15" fill="rgb(233,112,24)" fg:x="84184" fg:w="87"/><text x="56.1922%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (54 samples, 0.04%)</title><rect x="55.9641%" y="677" width="0.0359%" height="15" fill="rgb(230,90,22)" fg:x="84217" fg:w="54"/><text x="56.2141%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (18 samples, 0.01%)</title><rect x="56.0000%" y="693" width="0.0120%" height="15" fill="rgb(229,61,13)" fg:x="84271" fg:w="18"/><text x="56.2500%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (18 samples, 0.01%)</title><rect x="56.0000%" y="677" width="0.0120%" height="15" fill="rgb(225,57,24)" fg:x="84271" fg:w="18"/><text x="56.2500%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (18 samples, 0.01%)</title><rect x="56.0000%" y="661" width="0.0120%" height="15" fill="rgb(208,169,48)" fg:x="84271" fg:w="18"/><text x="56.2500%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (87 samples, 0.06%)</title><rect x="56.0119%" y="693" width="0.0578%" height="15" fill="rgb(244,218,51)" fg:x="84289" fg:w="87"/><text x="56.2619%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 0.02%)</title><rect x="56.0970%" y="677" width="0.0193%" height="15" fill="rgb(214,148,10)" fg:x="84417" fg:w="29"/><text x="56.3470%" y="687.50"></text></g><g><title>[anon] (861 samples, 0.57%)</title><rect x="55.5707%" y="709" width="0.5722%" height="15" fill="rgb(225,174,27)" fg:x="83625" fg:w="861"/><text x="55.8207%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (110 samples, 0.07%)</title><rect x="56.0697%" y="693" width="0.0731%" height="15" fill="rgb(230,96,26)" fg:x="84376" fg:w="110"/><text x="56.3197%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (40 samples, 0.03%)</title><rect x="56.1163%" y="677" width="0.0266%" height="15" fill="rgb(232,10,30)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (40 samples, 0.03%)</title><rect x="56.1163%" y="661" width="0.0266%" height="15" fill="rgb(222,8,50)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (40 samples, 0.03%)</title><rect x="56.1163%" y="645" width="0.0266%" height="15" fill="rgb(213,81,27)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (40 samples, 0.03%)</title><rect x="56.1163%" y="629" width="0.0266%" height="15" fill="rgb(245,50,10)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (40 samples, 0.03%)</title><rect x="56.1163%" y="613" width="0.0266%" height="15" fill="rgb(216,100,18)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (40 samples, 0.03%)</title><rect x="56.1163%" y="597" width="0.0266%" height="15" fill="rgb(236,147,54)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (40 samples, 0.03%)</title><rect x="56.1163%" y="581" width="0.0266%" height="15" fill="rgb(205,143,26)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (40 samples, 0.03%)</title><rect x="56.1163%" y="565" width="0.0266%" height="15" fill="rgb(236,26,9)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (40 samples, 0.03%)</title><rect x="56.1163%" y="549" width="0.0266%" height="15" fill="rgb(221,165,53)" fg:x="84446" fg:w="40"/><text x="56.3663%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (119 samples, 0.08%)</title><rect x="56.1442%" y="693" width="0.0791%" height="15" fill="rgb(214,110,17)" fg:x="84488" fg:w="119"/><text x="56.3942%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (196 samples, 0.13%)</title><rect x="56.2233%" y="693" width="0.1302%" height="15" fill="rgb(237,197,12)" fg:x="84607" fg:w="196"/><text x="56.4733%" y="703.50"></text></g><g><title>__round (30 samples, 0.02%)</title><rect x="56.3535%" y="693" width="0.0199%" height="15" fill="rgb(205,84,17)" fg:x="84803" fg:w="30"/><text x="56.6035%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (113 samples, 0.08%)</title><rect x="56.3734%" y="693" width="0.0751%" height="15" fill="rgb(237,18,45)" fg:x="84833" fg:w="113"/><text x="56.6234%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (119 samples, 0.08%)</title><rect x="56.4485%" y="693" width="0.0791%" height="15" fill="rgb(221,87,14)" fg:x="84946" fg:w="119"/><text x="56.6985%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (32 samples, 0.02%)</title><rect x="56.5063%" y="677" width="0.0213%" height="15" fill="rgb(238,186,15)" fg:x="85033" fg:w="32"/><text x="56.7563%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (32 samples, 0.02%)</title><rect x="56.5063%" y="661" width="0.0213%" height="15" fill="rgb(208,115,11)" fg:x="85033" fg:w="32"/><text x="56.7563%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (90 samples, 0.06%)</title><rect x="56.5276%" y="693" width="0.0598%" height="15" fill="rgb(254,175,0)" fg:x="85065" fg:w="90"/><text x="56.7776%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.03%)</title><rect x="56.5874%" y="645" width="0.0292%" height="15" fill="rgb(227,24,42)" fg:x="85155" fg:w="44"/><text x="56.8374%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.03%)</title><rect x="56.5874%" y="629" width="0.0292%" height="15" fill="rgb(223,211,37)" fg:x="85155" fg:w="44"/><text x="56.8374%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.03%)</title><rect x="56.5874%" y="613" width="0.0292%" height="15" fill="rgb(235,49,27)" fg:x="85155" fg:w="44"/><text x="56.8374%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (44 samples, 0.03%)</title><rect x="56.5874%" y="597" width="0.0292%" height="15" fill="rgb(254,97,51)" fg:x="85155" fg:w="44"/><text x="56.8374%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (53 samples, 0.04%)</title><rect x="56.6167%" y="613" width="0.0352%" height="15" fill="rgb(249,51,40)" fg:x="85199" fg:w="53"/><text x="56.8667%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (64 samples, 0.04%)</title><rect x="56.6519%" y="613" width="0.0425%" height="15" fill="rgb(210,128,45)" fg:x="85252" fg:w="64"/><text x="56.9019%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (53 samples, 0.04%)</title><rect x="56.6944%" y="613" width="0.0352%" height="15" fill="rgb(224,137,50)" fg:x="85316" fg:w="53"/><text x="56.9444%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (53 samples, 0.04%)</title><rect x="56.6944%" y="597" width="0.0352%" height="15" fill="rgb(242,15,9)" fg:x="85316" fg:w="53"/><text x="56.9444%" y="607.50"></text></g><g><title>[unknown] (916 samples, 0.61%)</title><rect x="56.1428%" y="709" width="0.6087%" height="15" fill="rgb(233,187,41)" fg:x="84486" fg:w="916"/><text x="56.3928%" y="719.50"></text></g><g><title>one_brc::process_lines (247 samples, 0.16%)</title><rect x="56.5874%" y="693" width="0.1641%" height="15" fill="rgb(227,2,29)" fg:x="85155" fg:w="247"/><text x="56.8374%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (247 samples, 0.16%)</title><rect x="56.5874%" y="677" width="0.1641%" height="15" fill="rgb(222,70,3)" fg:x="85155" fg:w="247"/><text x="56.8374%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (247 samples, 0.16%)</title><rect x="56.5874%" y="661" width="0.1641%" height="15" fill="rgb(213,11,42)" fg:x="85155" fg:w="247"/><text x="56.8374%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (203 samples, 0.13%)</title><rect x="56.6167%" y="645" width="0.1349%" height="15" fill="rgb(225,150,9)" fg:x="85199" fg:w="203"/><text x="56.8667%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (203 samples, 0.13%)</title><rect x="56.6167%" y="629" width="0.1349%" height="15" fill="rgb(230,162,45)" fg:x="85199" fg:w="203"/><text x="56.8667%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (33 samples, 0.02%)</title><rect x="56.7296%" y="613" width="0.0219%" height="15" fill="rgb(222,14,52)" fg:x="85369" fg:w="33"/><text x="56.9796%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (33 samples, 0.02%)</title><rect x="56.9190%" y="389" width="0.0219%" height="15" fill="rgb(254,198,14)" fg:x="85654" fg:w="33"/><text x="57.1690%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 0.02%)</title><rect x="56.9190%" y="373" width="0.0219%" height="15" fill="rgb(220,217,30)" fg:x="85654" fg:w="33"/><text x="57.1690%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 0.02%)</title><rect x="56.9190%" y="357" width="0.0219%" height="15" fill="rgb(215,146,41)" fg:x="85654" fg:w="33"/><text x="57.1690%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (162 samples, 0.11%)</title><rect x="56.9409%" y="389" width="0.1077%" height="15" fill="rgb(217,27,36)" fg:x="85687" fg:w="162"/><text x="57.1909%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (162 samples, 0.11%)</title><rect x="56.9409%" y="373" width="0.1077%" height="15" fill="rgb(219,218,39)" fg:x="85687" fg:w="162"/><text x="57.1909%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (162 samples, 0.11%)</title><rect x="56.9409%" y="357" width="0.1077%" height="15" fill="rgb(219,4,42)" fg:x="85687" fg:w="162"/><text x="57.1909%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (161 samples, 0.11%)</title><rect x="56.9416%" y="341" width="0.1070%" height="15" fill="rgb(249,119,36)" fg:x="85688" fg:w="161"/><text x="57.1916%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (105 samples, 0.07%)</title><rect x="57.0486%" y="389" width="0.0698%" height="15" fill="rgb(209,23,33)" fg:x="85849" fg:w="105"/><text x="57.2986%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (105 samples, 0.07%)</title><rect x="57.0486%" y="373" width="0.0698%" height="15" fill="rgb(211,10,0)" fg:x="85849" fg:w="105"/><text x="57.2986%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (36 samples, 0.02%)</title><rect x="57.2127%" y="357" width="0.0239%" height="15" fill="rgb(208,99,37)" fg:x="86096" fg:w="36"/><text x="57.4627%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (37 samples, 0.02%)</title><rect x="57.2366%" y="357" width="0.0246%" height="15" fill="rgb(213,132,31)" fg:x="86132" fg:w="37"/><text x="57.4866%" y="367.50"></text></g><g><title>core::ptr::align_offset (37 samples, 0.02%)</title><rect x="57.2366%" y="341" width="0.0246%" height="15" fill="rgb(243,129,40)" fg:x="86132" fg:w="37"/><text x="57.4866%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (60 samples, 0.04%)</title><rect x="57.2612%" y="357" width="0.0399%" height="15" fill="rgb(210,66,33)" fg:x="86169" fg:w="60"/><text x="57.5112%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,289 samples, 0.86%)</title><rect x="56.8027%" y="405" width="0.8566%" height="15" fill="rgb(209,189,4)" fg:x="85479" fg:w="1289"/><text x="57.0527%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (814 samples, 0.54%)</title><rect x="57.1184%" y="389" width="0.5409%" height="15" fill="rgb(214,107,37)" fg:x="85954" fg:w="814"/><text x="57.3684%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (784 samples, 0.52%)</title><rect x="57.1383%" y="373" width="0.5210%" height="15" fill="rgb(245,88,54)" fg:x="85984" fg:w="784"/><text x="57.3883%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (539 samples, 0.36%)</title><rect x="57.3011%" y="357" width="0.3582%" height="15" fill="rgb(205,146,20)" fg:x="86229" fg:w="539"/><text x="57.5511%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,385 samples, 0.92%)</title><rect x="56.7522%" y="437" width="0.9204%" height="15" fill="rgb(220,161,25)" fg:x="85403" fg:w="1385"/><text x="57.0022%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,385 samples, 0.92%)</title><rect x="56.7522%" y="421" width="0.9204%" height="15" fill="rgb(215,152,15)" fg:x="85403" fg:w="1385"/><text x="57.0022%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (20 samples, 0.01%)</title><rect x="57.6593%" y="405" width="0.0133%" height="15" fill="rgb(233,192,44)" fg:x="86768" fg:w="20"/><text x="57.9093%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (20 samples, 0.01%)</title><rect x="57.6593%" y="389" width="0.0133%" height="15" fill="rgb(240,170,46)" fg:x="86768" fg:w="20"/><text x="57.9093%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,500 samples, 1.00%)</title><rect x="56.7522%" y="469" width="0.9968%" height="15" fill="rgb(207,104,33)" fg:x="85403" fg:w="1500"/><text x="57.0022%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,500 samples, 1.00%)</title><rect x="56.7522%" y="453" width="0.9968%" height="15" fill="rgb(219,21,39)" fg:x="85403" fg:w="1500"/><text x="57.0022%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (115 samples, 0.08%)</title><rect x="57.6726%" y="437" width="0.0764%" height="15" fill="rgb(214,133,29)" fg:x="86788" fg:w="115"/><text x="57.9226%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (115 samples, 0.08%)</title><rect x="57.6726%" y="421" width="0.0764%" height="15" fill="rgb(226,93,6)" fg:x="86788" fg:w="115"/><text x="57.9226%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (115 samples, 0.08%)</title><rect x="57.6726%" y="405" width="0.0764%" height="15" fill="rgb(252,222,34)" fg:x="86788" fg:w="115"/><text x="57.9226%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (115 samples, 0.08%)</title><rect x="57.6726%" y="389" width="0.0764%" height="15" fill="rgb(252,92,48)" fg:x="86788" fg:w="115"/><text x="57.9226%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (55 samples, 0.04%)</title><rect x="57.7124%" y="373" width="0.0365%" height="15" fill="rgb(245,223,24)" fg:x="86848" fg:w="55"/><text x="57.9624%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (55 samples, 0.04%)</title><rect x="57.7124%" y="357" width="0.0365%" height="15" fill="rgb(205,176,3)" fg:x="86848" fg:w="55"/><text x="57.9624%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (55 samples, 0.04%)</title><rect x="57.7124%" y="341" width="0.0365%" height="15" fill="rgb(235,151,15)" fg:x="86848" fg:w="55"/><text x="57.9624%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (55 samples, 0.04%)</title><rect x="57.7124%" y="325" width="0.0365%" height="15" fill="rgb(237,209,11)" fg:x="86848" fg:w="55"/><text x="57.9624%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (55 samples, 0.04%)</title><rect x="57.7124%" y="309" width="0.0365%" height="15" fill="rgb(243,227,24)" fg:x="86848" fg:w="55"/><text x="57.9624%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (48 samples, 0.03%)</title><rect x="57.7636%" y="437" width="0.0319%" height="15" fill="rgb(239,193,16)" fg:x="86925" fg:w="48"/><text x="58.0136%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (33 samples, 0.02%)</title><rect x="57.7955%" y="405" width="0.0219%" height="15" fill="rgb(231,27,9)" fg:x="86973" fg:w="33"/><text x="58.0455%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (68 samples, 0.05%)</title><rect x="57.9118%" y="373" width="0.0452%" height="15" fill="rgb(219,169,10)" fg:x="87148" fg:w="68"/><text x="58.1618%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (90 samples, 0.06%)</title><rect x="57.9570%" y="373" width="0.0598%" height="15" fill="rgb(244,229,43)" fg:x="87216" fg:w="90"/><text x="58.2070%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (31 samples, 0.02%)</title><rect x="58.0168%" y="373" width="0.0206%" height="15" fill="rgb(254,38,20)" fg:x="87306" fg:w="31"/><text x="58.2668%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (247 samples, 0.16%)</title><rect x="57.8739%" y="389" width="0.1641%" height="15" fill="rgb(250,47,30)" fg:x="87091" fg:w="247"/><text x="58.1239%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (106 samples, 0.07%)</title><rect x="58.0746%" y="373" width="0.0704%" height="15" fill="rgb(224,124,36)" fg:x="87393" fg:w="106"/><text x="58.3246%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (22 samples, 0.01%)</title><rect x="58.3657%" y="325" width="0.0146%" height="15" fill="rgb(246,68,51)" fg:x="87831" fg:w="22"/><text x="58.6157%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (19 samples, 0.01%)</title><rect x="58.3810%" y="309" width="0.0126%" height="15" fill="rgb(253,43,49)" fg:x="87854" fg:w="19"/><text x="58.6310%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (261 samples, 0.17%)</title><rect x="58.2434%" y="341" width="0.1734%" height="15" fill="rgb(219,54,36)" fg:x="87647" fg:w="261"/><text x="58.4934%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (55 samples, 0.04%)</title><rect x="58.3803%" y="325" width="0.0365%" height="15" fill="rgb(227,133,34)" fg:x="87853" fg:w="55"/><text x="58.6303%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (35 samples, 0.02%)</title><rect x="58.3936%" y="309" width="0.0233%" height="15" fill="rgb(247,227,15)" fg:x="87873" fg:w="35"/><text x="58.6436%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (331 samples, 0.22%)</title><rect x="58.1975%" y="357" width="0.2200%" height="15" fill="rgb(229,96,14)" fg:x="87578" fg:w="331"/><text x="58.4475%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (937 samples, 0.62%)</title><rect x="57.7955%" y="437" width="0.6227%" height="15" fill="rgb(220,79,17)" fg:x="86973" fg:w="937"/><text x="58.0455%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (937 samples, 0.62%)</title><rect x="57.7955%" y="421" width="0.6227%" height="15" fill="rgb(205,131,53)" fg:x="86973" fg:w="937"/><text x="58.0455%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (904 samples, 0.60%)</title><rect x="57.8174%" y="405" width="0.6007%" height="15" fill="rgb(209,50,29)" fg:x="87006" fg:w="904"/><text x="58.0674%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (572 samples, 0.38%)</title><rect x="58.0381%" y="389" width="0.3801%" height="15" fill="rgb(245,86,46)" fg:x="87338" fg:w="572"/><text x="58.2881%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (411 samples, 0.27%)</title><rect x="58.1451%" y="373" width="0.2731%" height="15" fill="rgb(235,66,46)" fg:x="87499" fg:w="411"/><text x="58.3951%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (57 samples, 0.04%)</title><rect x="58.4335%" y="421" width="0.0379%" height="15" fill="rgb(232,148,31)" fg:x="87933" fg:w="57"/><text x="58.6835%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (32 samples, 0.02%)</title><rect x="58.6142%" y="405" width="0.0213%" height="15" fill="rgb(217,149,8)" fg:x="88205" fg:w="32"/><text x="58.8642%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (32 samples, 0.02%)</title><rect x="58.6142%" y="389" width="0.0213%" height="15" fill="rgb(209,183,11)" fg:x="88205" fg:w="32"/><text x="58.8642%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (32 samples, 0.02%)</title><rect x="58.6142%" y="373" width="0.0213%" height="15" fill="rgb(208,55,20)" fg:x="88205" fg:w="32"/><text x="58.8642%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (300 samples, 0.20%)</title><rect x="58.6355%" y="405" width="0.1994%" height="15" fill="rgb(218,39,14)" fg:x="88237" fg:w="300"/><text x="58.8855%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (300 samples, 0.20%)</title><rect x="58.6355%" y="389" width="0.1994%" height="15" fill="rgb(216,169,33)" fg:x="88237" fg:w="300"/><text x="58.8855%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (300 samples, 0.20%)</title><rect x="58.6355%" y="373" width="0.1994%" height="15" fill="rgb(233,80,24)" fg:x="88237" fg:w="300"/><text x="58.8855%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (287 samples, 0.19%)</title><rect x="58.6441%" y="357" width="0.1907%" height="15" fill="rgb(213,179,31)" fg:x="88250" fg:w="287"/><text x="58.8941%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (64 samples, 0.04%)</title><rect x="58.8348%" y="405" width="0.0425%" height="15" fill="rgb(209,19,5)" fg:x="88537" fg:w="64"/><text x="59.0848%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (64 samples, 0.04%)</title><rect x="58.8348%" y="389" width="0.0425%" height="15" fill="rgb(219,18,35)" fg:x="88537" fg:w="64"/><text x="59.0848%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (177 samples, 0.12%)</title><rect x="58.8827%" y="389" width="0.1176%" height="15" fill="rgb(209,169,16)" fg:x="88609" fg:w="177"/><text x="59.1327%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (137 samples, 0.09%)</title><rect x="58.9093%" y="373" width="0.0910%" height="15" fill="rgb(245,90,51)" fg:x="88649" fg:w="137"/><text x="59.1593%" y="383.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,122 samples, 0.75%)</title><rect x="58.4727%" y="421" width="0.7456%" height="15" fill="rgb(220,99,45)" fg:x="87992" fg:w="1122"/><text x="58.7227%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (513 samples, 0.34%)</title><rect x="58.8774%" y="405" width="0.3409%" height="15" fill="rgb(249,89,25)" fg:x="88601" fg:w="513"/><text x="59.1274%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (328 samples, 0.22%)</title><rect x="59.0003%" y="389" width="0.2180%" height="15" fill="rgb(239,193,0)" fg:x="88786" fg:w="328"/><text x="59.2503%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,205 samples, 0.80%)</title><rect x="58.4182%" y="437" width="0.8007%" height="15" fill="rgb(231,126,1)" fg:x="87910" fg:w="1205"/><text x="58.6682%" y="447.50"></text></g><g><title>one_brc::round_towards_positive (197 samples, 0.13%)</title><rect x="59.2189%" y="437" width="0.1309%" height="15" fill="rgb(243,166,3)" fg:x="89115" fg:w="197"/><text x="59.4689%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (140 samples, 0.09%)</title><rect x="59.2568%" y="421" width="0.0930%" height="15" fill="rgb(223,22,34)" fg:x="89172" fg:w="140"/><text x="59.5068%" y="431.50"></text></g><g><title>__round (140 samples, 0.09%)</title><rect x="59.2568%" y="405" width="0.0930%" height="15" fill="rgb(251,52,51)" fg:x="89172" fg:w="140"/><text x="59.5068%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (48 samples, 0.03%)</title><rect x="59.4216%" y="389" width="0.0319%" height="15" fill="rgb(221,165,28)" fg:x="89420" fg:w="48"/><text x="59.6716%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (190 samples, 0.13%)</title><rect x="59.3498%" y="437" width="0.1263%" height="15" fill="rgb(218,121,47)" fg:x="89312" fg:w="190"/><text x="59.5998%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (190 samples, 0.13%)</title><rect x="59.3498%" y="421" width="0.1263%" height="15" fill="rgb(209,120,9)" fg:x="89312" fg:w="190"/><text x="59.5998%" y="431.50"></text></g><g><title>one_brc::Measurement::record (190 samples, 0.13%)</title><rect x="59.3498%" y="405" width="0.1263%" height="15" fill="rgb(236,68,12)" fg:x="89312" fg:w="190"/><text x="59.5998%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (34 samples, 0.02%)</title><rect x="59.4535%" y="389" width="0.0226%" height="15" fill="rgb(225,194,26)" fg:x="89468" fg:w="34"/><text x="59.7035%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (68 samples, 0.05%)</title><rect x="59.6429%" y="309" width="0.0452%" height="15" fill="rgb(231,84,39)" fg:x="89753" fg:w="68"/><text x="59.8929%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (133 samples, 0.09%)</title><rect x="59.6176%" y="325" width="0.0884%" height="15" fill="rgb(210,11,45)" fg:x="89715" fg:w="133"/><text x="59.8676%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (27 samples, 0.02%)</title><rect x="59.6881%" y="309" width="0.0179%" height="15" fill="rgb(224,54,52)" fg:x="89821" fg:w="27"/><text x="59.9381%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (142 samples, 0.09%)</title><rect x="59.7459%" y="309" width="0.0944%" height="15" fill="rgb(238,102,14)" fg:x="89908" fg:w="142"/><text x="59.9959%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (513 samples, 0.34%)</title><rect x="59.5791%" y="373" width="0.3409%" height="15" fill="rgb(243,160,52)" fg:x="89657" fg:w="513"/><text x="59.8291%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (513 samples, 0.34%)</title><rect x="59.5791%" y="357" width="0.3409%" height="15" fill="rgb(216,114,19)" fg:x="89657" fg:w="513"/><text x="59.8291%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (513 samples, 0.34%)</title><rect x="59.5791%" y="341" width="0.3409%" height="15" fill="rgb(244,166,37)" fg:x="89657" fg:w="513"/><text x="59.8291%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (322 samples, 0.21%)</title><rect x="59.7060%" y="325" width="0.2140%" height="15" fill="rgb(246,29,44)" fg:x="89848" fg:w="322"/><text x="59.9560%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (120 samples, 0.08%)</title><rect x="59.8402%" y="309" width="0.0797%" height="15" fill="rgb(215,56,53)" fg:x="90050" fg:w="120"/><text x="60.0902%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (58 samples, 0.04%)</title><rect x="59.9200%" y="373" width="0.0385%" height="15" fill="rgb(217,60,2)" fg:x="90170" fg:w="58"/><text x="60.1700%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (25 samples, 0.02%)</title><rect x="59.9419%" y="357" width="0.0166%" height="15" fill="rgb(207,26,24)" fg:x="90203" fg:w="25"/><text x="60.1919%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (25 samples, 0.02%)</title><rect x="59.9419%" y="341" width="0.0166%" height="15" fill="rgb(252,210,15)" fg:x="90203" fg:w="25"/><text x="60.1919%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (25 samples, 0.02%)</title><rect x="59.9419%" y="325" width="0.0166%" height="15" fill="rgb(253,209,26)" fg:x="90203" fg:w="25"/><text x="60.1919%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (22 samples, 0.01%)</title><rect x="60.0589%" y="245" width="0.0146%" height="15" fill="rgb(238,170,14)" fg:x="90379" fg:w="22"/><text x="60.3089%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (67 samples, 0.04%)</title><rect x="60.0416%" y="261" width="0.0445%" height="15" fill="rgb(216,178,15)" fg:x="90353" fg:w="67"/><text x="60.2916%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (19 samples, 0.01%)</title><rect x="60.0735%" y="245" width="0.0126%" height="15" fill="rgb(250,197,2)" fg:x="90401" fg:w="19"/><text x="60.3235%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (25 samples, 0.02%)</title><rect x="60.0861%" y="261" width="0.0166%" height="15" fill="rgb(212,70,42)" fg:x="90420" fg:w="25"/><text x="60.3361%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (307 samples, 0.20%)</title><rect x="59.9785%" y="277" width="0.2040%" height="15" fill="rgb(227,213,9)" fg:x="90258" fg:w="307"/><text x="60.2285%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (120 samples, 0.08%)</title><rect x="60.1027%" y="261" width="0.0797%" height="15" fill="rgb(245,99,25)" fg:x="90445" fg:w="120"/><text x="60.3527%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (35 samples, 0.02%)</title><rect x="60.1825%" y="277" width="0.0233%" height="15" fill="rgb(250,82,29)" fg:x="90565" fg:w="35"/><text x="60.4325%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19 samples, 0.01%)</title><rect x="60.2968%" y="245" width="0.0126%" height="15" fill="rgb(241,226,54)" fg:x="90737" fg:w="19"/><text x="60.5468%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (267 samples, 0.18%)</title><rect x="60.2283%" y="261" width="0.1774%" height="15" fill="rgb(221,99,41)" fg:x="90634" fg:w="267"/><text x="60.4783%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (126 samples, 0.08%)</title><rect x="60.3220%" y="245" width="0.0837%" height="15" fill="rgb(213,90,21)" fg:x="90775" fg:w="126"/><text x="60.5720%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,286 samples, 0.85%)</title><rect x="59.5611%" y="405" width="0.8546%" height="15" fill="rgb(205,208,24)" fg:x="89630" fg:w="1286"/><text x="59.8111%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,286 samples, 0.85%)</title><rect x="59.5611%" y="389" width="0.8546%" height="15" fill="rgb(246,31,12)" fg:x="89630" fg:w="1286"/><text x="59.8111%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (688 samples, 0.46%)</title><rect x="59.9585%" y="373" width="0.4572%" height="15" fill="rgb(213,154,6)" fg:x="90228" fg:w="688"/><text x="60.2085%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (658 samples, 0.44%)</title><rect x="59.9785%" y="357" width="0.4373%" height="15" fill="rgb(222,163,29)" fg:x="90258" fg:w="658"/><text x="60.2285%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (658 samples, 0.44%)</title><rect x="59.9785%" y="341" width="0.4373%" height="15" fill="rgb(227,201,8)" fg:x="90258" fg:w="658"/><text x="60.2285%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (658 samples, 0.44%)</title><rect x="59.9785%" y="325" width="0.4373%" height="15" fill="rgb(233,9,32)" fg:x="90258" fg:w="658"/><text x="60.2285%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (658 samples, 0.44%)</title><rect x="59.9785%" y="309" width="0.4373%" height="15" fill="rgb(217,54,24)" fg:x="90258" fg:w="658"/><text x="60.2285%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (658 samples, 0.44%)</title><rect x="59.9785%" y="293" width="0.4373%" height="15" fill="rgb(235,192,0)" fg:x="90258" fg:w="658"/><text x="60.2285%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (316 samples, 0.21%)</title><rect x="60.2057%" y="277" width="0.2100%" height="15" fill="rgb(235,45,9)" fg:x="90600" fg:w="316"/><text x="60.4557%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.02%)</title><rect x="60.4297%" y="373" width="0.0233%" height="15" fill="rgb(246,42,40)" fg:x="90937" fg:w="35"/><text x="60.6797%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (40 samples, 0.03%)</title><rect x="60.4662%" y="357" width="0.0266%" height="15" fill="rgb(248,111,24)" fg:x="90992" fg:w="40"/><text x="60.7162%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (40 samples, 0.03%)</title><rect x="60.4662%" y="341" width="0.0266%" height="15" fill="rgb(249,65,22)" fg:x="90992" fg:w="40"/><text x="60.7162%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (40 samples, 0.03%)</title><rect x="60.4662%" y="325" width="0.0266%" height="15" fill="rgb(238,111,51)" fg:x="90992" fg:w="40"/><text x="60.7162%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (716 samples, 0.48%)</title><rect x="60.4529%" y="373" width="0.4758%" height="15" fill="rgb(250,118,22)" fg:x="90972" fg:w="716"/><text x="60.7029%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (656 samples, 0.44%)</title><rect x="60.4928%" y="357" width="0.4359%" height="15" fill="rgb(234,84,26)" fg:x="91032" fg:w="656"/><text x="60.7428%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (656 samples, 0.44%)</title><rect x="60.4928%" y="341" width="0.4359%" height="15" fill="rgb(243,172,12)" fg:x="91032" fg:w="656"/><text x="60.7428%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (656 samples, 0.44%)</title><rect x="60.4928%" y="325" width="0.4359%" height="15" fill="rgb(236,150,49)" fg:x="91032" fg:w="656"/><text x="60.7428%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (656 samples, 0.44%)</title><rect x="60.4928%" y="309" width="0.4359%" height="15" fill="rgb(225,197,26)" fg:x="91032" fg:w="656"/><text x="60.7428%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (656 samples, 0.44%)</title><rect x="60.4928%" y="293" width="0.4359%" height="15" fill="rgb(214,17,42)" fg:x="91032" fg:w="656"/><text x="60.7428%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (656 samples, 0.44%)</title><rect x="60.4928%" y="277" width="0.4359%" height="15" fill="rgb(224,165,40)" fg:x="91032" fg:w="656"/><text x="60.7428%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (432 samples, 0.29%)</title><rect x="60.6417%" y="261" width="0.2871%" height="15" fill="rgb(246,100,4)" fg:x="91256" fg:w="432"/><text x="60.8917%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (69 samples, 0.05%)</title><rect x="60.9287%" y="373" width="0.0459%" height="15" fill="rgb(222,103,0)" fg:x="91688" fg:w="69"/><text x="61.1787%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.02%)</title><rect x="60.9746%" y="341" width="0.0206%" height="15" fill="rgb(227,189,26)" fg:x="91757" fg:w="31"/><text x="61.2246%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (32 samples, 0.02%)</title><rect x="60.9746%" y="373" width="0.0213%" height="15" fill="rgb(214,202,17)" fg:x="91757" fg:w="32"/><text x="61.2246%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (32 samples, 0.02%)</title><rect x="60.9746%" y="357" width="0.0213%" height="15" fill="rgb(229,111,3)" fg:x="91757" fg:w="32"/><text x="61.2246%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,284 samples, 1.52%)</title><rect x="59.4887%" y="421" width="1.5178%" height="15" fill="rgb(229,172,15)" fg:x="89521" fg:w="2284"/><text x="59.7387%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (889 samples, 0.59%)</title><rect x="60.4157%" y="405" width="0.5908%" height="15" fill="rgb(230,224,35)" fg:x="90916" fg:w="889"/><text x="60.6657%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (871 samples, 0.58%)</title><rect x="60.4277%" y="389" width="0.5788%" height="15" fill="rgb(251,141,6)" fg:x="90934" fg:w="871"/><text x="60.6777%" y="399.50"></text></g><g><title>worker-3 (8,210 samples, 5.46%)</title><rect x="55.5707%" y="725" width="5.4557%" height="15" fill="rgb(225,208,6)" fg:x="83625" fg:w="8210"/><text x="55.8207%" y="735.50">worker-3</text></g><g><title>__clone3 (6,433 samples, 4.27%)</title><rect x="56.7515%" y="709" width="4.2749%" height="15" fill="rgb(246,181,16)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="719.50">__clo..</text></g><g><title>start_thread (6,433 samples, 4.27%)</title><rect x="56.7515%" y="693" width="4.2749%" height="15" fill="rgb(227,129,36)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,433 samples, 4.27%)</title><rect x="56.7515%" y="677" width="4.2749%" height="15" fill="rgb(248,117,24)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,433 samples, 4.27%)</title><rect x="56.7515%" y="661" width="4.2749%" height="15" fill="rgb(214,185,35)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,433 samples, 4.27%)</title><rect x="56.7515%" y="645" width="4.2749%" height="15" fill="rgb(236,150,34)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="655.50">std::..</text></g><g><title>std::panic::catch_unwind (6,433 samples, 4.27%)</title><rect x="56.7515%" y="629" width="4.2749%" height="15" fill="rgb(243,228,27)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,433 samples, 4.27%)</title><rect x="56.7515%" y="613" width="4.2749%" height="15" fill="rgb(245,77,44)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,433 samples, 4.27%)</title><rect x="56.7515%" y="597" width="4.2749%" height="15" fill="rgb(235,214,42)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,433 samples, 4.27%)</title><rect x="56.7515%" y="581" width="4.2749%" height="15" fill="rgb(221,74,3)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,433 samples, 4.27%)</title><rect x="56.7515%" y="565" width="4.2749%" height="15" fill="rgb(206,121,29)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,433 samples, 4.27%)</title><rect x="56.7515%" y="549" width="4.2749%" height="15" fill="rgb(249,131,53)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,433 samples, 4.27%)</title><rect x="56.7515%" y="533" width="4.2749%" height="15" fill="rgb(236,170,29)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,433 samples, 4.27%)</title><rect x="56.7515%" y="517" width="4.2749%" height="15" fill="rgb(247,96,15)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="527.50">one_b..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,433 samples, 4.27%)</title><rect x="56.7515%" y="501" width="4.2749%" height="15" fill="rgb(211,210,7)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,433 samples, 4.27%)</title><rect x="56.7515%" y="485" width="4.2749%" height="15" fill="rgb(240,88,50)" fg:x="85402" fg:w="6433"/><text x="57.0015%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,932 samples, 3.28%)</title><rect x="57.7490%" y="469" width="3.2774%" height="15" fill="rgb(209,229,26)" fg:x="86903" fg:w="4932"/><text x="57.9990%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (4,932 samples, 3.28%)</title><rect x="57.7490%" y="453" width="3.2774%" height="15" fill="rgb(210,68,23)" fg:x="86903" fg:w="4932"/><text x="57.9990%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,333 samples, 1.55%)</title><rect x="59.4761%" y="437" width="1.5503%" height="15" fill="rgb(229,180,13)" fg:x="89502" fg:w="2333"/><text x="59.7261%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (30 samples, 0.02%)</title><rect x="61.0065%" y="421" width="0.0199%" height="15" fill="rgb(236,53,44)" fg:x="91805" fg:w="30"/><text x="61.2565%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85 samples, 0.06%)</title><rect x="61.1028%" y="677" width="0.0565%" height="15" fill="rgb(244,214,29)" fg:x="91950" fg:w="85"/><text x="61.3528%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (85 samples, 0.06%)</title><rect x="61.1028%" y="661" width="0.0565%" height="15" fill="rgb(220,75,29)" fg:x="91950" fg:w="85"/><text x="61.3528%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (85 samples, 0.06%)</title><rect x="61.1028%" y="645" width="0.0565%" height="15" fill="rgb(214,183,37)" fg:x="91950" fg:w="85"/><text x="61.3528%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (280 samples, 0.19%)</title><rect x="61.0271%" y="693" width="0.1861%" height="15" fill="rgb(239,117,29)" fg:x="91836" fg:w="280"/><text x="61.2771%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (81 samples, 0.05%)</title><rect x="61.1593%" y="677" width="0.0538%" height="15" fill="rgb(237,171,35)" fg:x="92035" fg:w="81"/><text x="61.4093%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (83 samples, 0.06%)</title><rect x="61.2132%" y="693" width="0.0552%" height="15" fill="rgb(229,178,53)" fg:x="92116" fg:w="83"/><text x="61.4632%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (157 samples, 0.10%)</title><rect x="61.2683%" y="693" width="0.1043%" height="15" fill="rgb(210,102,19)" fg:x="92199" fg:w="157"/><text x="61.5183%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (89 samples, 0.06%)</title><rect x="61.3135%" y="677" width="0.0591%" height="15" fill="rgb(235,127,22)" fg:x="92267" fg:w="89"/><text x="61.5635%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (89 samples, 0.06%)</title><rect x="61.3135%" y="661" width="0.0591%" height="15" fill="rgb(244,31,31)" fg:x="92267" fg:w="89"/><text x="61.5635%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (89 samples, 0.06%)</title><rect x="61.3135%" y="645" width="0.0591%" height="15" fill="rgb(231,43,21)" fg:x="92267" fg:w="89"/><text x="61.5635%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (89 samples, 0.06%)</title><rect x="61.3135%" y="629" width="0.0591%" height="15" fill="rgb(217,131,35)" fg:x="92267" fg:w="89"/><text x="61.5635%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (89 samples, 0.06%)</title><rect x="61.3135%" y="613" width="0.0591%" height="15" fill="rgb(221,149,4)" fg:x="92267" fg:w="89"/><text x="61.5635%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (89 samples, 0.06%)</title><rect x="61.3135%" y="597" width="0.0591%" height="15" fill="rgb(232,170,28)" fg:x="92267" fg:w="89"/><text x="61.5635%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (28 samples, 0.02%)</title><rect x="61.3540%" y="581" width="0.0186%" height="15" fill="rgb(238,56,10)" fg:x="92328" fg:w="28"/><text x="61.6040%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (72 samples, 0.05%)</title><rect x="61.3726%" y="693" width="0.0478%" height="15" fill="rgb(235,196,14)" fg:x="92356" fg:w="72"/><text x="61.6226%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (44 samples, 0.03%)</title><rect x="61.3912%" y="677" width="0.0292%" height="15" fill="rgb(216,45,48)" fg:x="92384" fg:w="44"/><text x="61.6412%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (30 samples, 0.02%)</title><rect x="61.4205%" y="693" width="0.0199%" height="15" fill="rgb(238,213,17)" fg:x="92428" fg:w="30"/><text x="61.6705%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (30 samples, 0.02%)</title><rect x="61.4205%" y="677" width="0.0199%" height="15" fill="rgb(212,13,2)" fg:x="92428" fg:w="30"/><text x="61.6705%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (30 samples, 0.02%)</title><rect x="61.4205%" y="661" width="0.0199%" height="15" fill="rgb(240,114,20)" fg:x="92428" fg:w="30"/><text x="61.6705%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (87 samples, 0.06%)</title><rect x="61.4404%" y="693" width="0.0578%" height="15" fill="rgb(228,41,40)" fg:x="92458" fg:w="87"/><text x="61.6904%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (34 samples, 0.02%)</title><rect x="61.5354%" y="677" width="0.0226%" height="15" fill="rgb(244,132,35)" fg:x="92601" fg:w="34"/><text x="61.7854%" y="687.50"></text></g><g><title>[anon] (841 samples, 0.56%)</title><rect x="61.0264%" y="709" width="0.5589%" height="15" fill="rgb(253,189,4)" fg:x="91835" fg:w="841"/><text x="61.2764%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (131 samples, 0.09%)</title><rect x="61.4982%" y="693" width="0.0871%" height="15" fill="rgb(224,37,19)" fg:x="92545" fg:w="131"/><text x="61.7482%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (41 samples, 0.03%)</title><rect x="61.5580%" y="677" width="0.0272%" height="15" fill="rgb(235,223,18)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (41 samples, 0.03%)</title><rect x="61.5580%" y="661" width="0.0272%" height="15" fill="rgb(235,163,25)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (41 samples, 0.03%)</title><rect x="61.5580%" y="645" width="0.0272%" height="15" fill="rgb(217,145,28)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (41 samples, 0.03%)</title><rect x="61.5580%" y="629" width="0.0272%" height="15" fill="rgb(223,223,32)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (41 samples, 0.03%)</title><rect x="61.5580%" y="613" width="0.0272%" height="15" fill="rgb(227,189,39)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (41 samples, 0.03%)</title><rect x="61.5580%" y="597" width="0.0272%" height="15" fill="rgb(248,10,22)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (41 samples, 0.03%)</title><rect x="61.5580%" y="581" width="0.0272%" height="15" fill="rgb(248,46,39)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (41 samples, 0.03%)</title><rect x="61.5580%" y="565" width="0.0272%" height="15" fill="rgb(248,113,48)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (41 samples, 0.03%)</title><rect x="61.5580%" y="549" width="0.0272%" height="15" fill="rgb(245,16,25)" fg:x="92635" fg:w="41"/><text x="61.8080%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (129 samples, 0.09%)</title><rect x="61.5853%" y="693" width="0.0857%" height="15" fill="rgb(249,152,16)" fg:x="92676" fg:w="129"/><text x="61.8353%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (181 samples, 0.12%)</title><rect x="61.6710%" y="693" width="0.1203%" height="15" fill="rgb(250,16,1)" fg:x="92805" fg:w="181"/><text x="61.9210%" y="703.50"></text></g><g><title>__round (39 samples, 0.03%)</title><rect x="61.7913%" y="693" width="0.0259%" height="15" fill="rgb(249,138,3)" fg:x="92986" fg:w="39"/><text x="62.0413%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (138 samples, 0.09%)</title><rect x="61.8172%" y="693" width="0.0917%" height="15" fill="rgb(227,71,41)" fg:x="93025" fg:w="138"/><text x="62.0672%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (99 samples, 0.07%)</title><rect x="61.9089%" y="693" width="0.0658%" height="15" fill="rgb(209,184,23)" fg:x="93163" fg:w="99"/><text x="62.1589%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (31 samples, 0.02%)</title><rect x="61.9541%" y="677" width="0.0206%" height="15" fill="rgb(223,215,31)" fg:x="93231" fg:w="31"/><text x="62.2041%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (31 samples, 0.02%)</title><rect x="61.9541%" y="661" width="0.0206%" height="15" fill="rgb(210,146,28)" fg:x="93231" fg:w="31"/><text x="62.2041%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (111 samples, 0.07%)</title><rect x="61.9747%" y="693" width="0.0738%" height="15" fill="rgb(209,183,41)" fg:x="93262" fg:w="111"/><text x="62.2247%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.04%)</title><rect x="62.0485%" y="645" width="0.0405%" height="15" fill="rgb(209,224,45)" fg:x="93373" fg:w="61"/><text x="62.2985%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.04%)</title><rect x="62.0485%" y="629" width="0.0405%" height="15" fill="rgb(224,209,51)" fg:x="93373" fg:w="61"/><text x="62.2985%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.04%)</title><rect x="62.0485%" y="613" width="0.0405%" height="15" fill="rgb(223,17,39)" fg:x="93373" fg:w="61"/><text x="62.2985%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (61 samples, 0.04%)</title><rect x="62.0485%" y="597" width="0.0405%" height="15" fill="rgb(234,204,37)" fg:x="93373" fg:w="61"/><text x="62.2985%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (62 samples, 0.04%)</title><rect x="62.0890%" y="613" width="0.0412%" height="15" fill="rgb(236,120,5)" fg:x="93434" fg:w="62"/><text x="62.3390%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (62 samples, 0.04%)</title><rect x="62.1302%" y="613" width="0.0412%" height="15" fill="rgb(248,97,27)" fg:x="93496" fg:w="62"/><text x="62.3802%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (58 samples, 0.04%)</title><rect x="62.1714%" y="613" width="0.0385%" height="15" fill="rgb(240,66,17)" fg:x="93558" fg:w="58"/><text x="62.4214%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (58 samples, 0.04%)</title><rect x="62.1714%" y="597" width="0.0385%" height="15" fill="rgb(210,79,3)" fg:x="93558" fg:w="58"/><text x="62.4214%" y="607.50"></text></g><g><title>[unknown] (971 samples, 0.65%)</title><rect x="61.5853%" y="709" width="0.6453%" height="15" fill="rgb(214,176,27)" fg:x="92676" fg:w="971"/><text x="61.8353%" y="719.50"></text></g><g><title>one_brc::process_lines (274 samples, 0.18%)</title><rect x="62.0485%" y="693" width="0.1821%" height="15" fill="rgb(235,185,3)" fg:x="93373" fg:w="274"/><text x="62.2985%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (274 samples, 0.18%)</title><rect x="62.0485%" y="677" width="0.1821%" height="15" fill="rgb(227,24,12)" fg:x="93373" fg:w="274"/><text x="62.2985%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (274 samples, 0.18%)</title><rect x="62.0485%" y="661" width="0.1821%" height="15" fill="rgb(252,169,48)" fg:x="93373" fg:w="274"/><text x="62.2985%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (213 samples, 0.14%)</title><rect x="62.0890%" y="645" width="0.1415%" height="15" fill="rgb(212,65,1)" fg:x="93434" fg:w="213"/><text x="62.3390%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (213 samples, 0.14%)</title><rect x="62.0890%" y="629" width="0.1415%" height="15" fill="rgb(242,39,24)" fg:x="93434" fg:w="213"/><text x="62.3390%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (31 samples, 0.02%)</title><rect x="62.2099%" y="613" width="0.0206%" height="15" fill="rgb(249,32,23)" fg:x="93616" fg:w="31"/><text x="62.4599%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (37 samples, 0.02%)</title><rect x="62.4020%" y="389" width="0.0246%" height="15" fill="rgb(251,195,23)" fg:x="93905" fg:w="37"/><text x="62.6520%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (37 samples, 0.02%)</title><rect x="62.4020%" y="373" width="0.0246%" height="15" fill="rgb(236,174,8)" fg:x="93905" fg:w="37"/><text x="62.6520%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (37 samples, 0.02%)</title><rect x="62.4020%" y="357" width="0.0246%" height="15" fill="rgb(220,197,8)" fg:x="93905" fg:w="37"/><text x="62.6520%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (168 samples, 0.11%)</title><rect x="62.4266%" y="389" width="0.1116%" height="15" fill="rgb(240,108,37)" fg:x="93942" fg:w="168"/><text x="62.6766%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (168 samples, 0.11%)</title><rect x="62.4266%" y="373" width="0.1116%" height="15" fill="rgb(232,176,24)" fg:x="93942" fg:w="168"/><text x="62.6766%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (168 samples, 0.11%)</title><rect x="62.4266%" y="357" width="0.1116%" height="15" fill="rgb(243,35,29)" fg:x="93942" fg:w="168"/><text x="62.6766%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (162 samples, 0.11%)</title><rect x="62.4306%" y="341" width="0.1077%" height="15" fill="rgb(210,37,18)" fg:x="93948" fg:w="162"/><text x="62.6806%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (95 samples, 0.06%)</title><rect x="62.5382%" y="389" width="0.0631%" height="15" fill="rgb(224,184,40)" fg:x="94110" fg:w="95"/><text x="62.7882%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (95 samples, 0.06%)</title><rect x="62.5382%" y="373" width="0.0631%" height="15" fill="rgb(236,39,29)" fg:x="94110" fg:w="95"/><text x="62.7882%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (35 samples, 0.02%)</title><rect x="62.7349%" y="357" width="0.0233%" height="15" fill="rgb(232,48,39)" fg:x="94406" fg:w="35"/><text x="62.9849%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (37 samples, 0.02%)</title><rect x="62.7582%" y="357" width="0.0246%" height="15" fill="rgb(236,34,42)" fg:x="94441" fg:w="37"/><text x="63.0082%" y="367.50"></text></g><g><title>core::ptr::align_offset (37 samples, 0.02%)</title><rect x="62.7582%" y="341" width="0.0246%" height="15" fill="rgb(243,106,37)" fg:x="94441" fg:w="37"/><text x="63.0082%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (75 samples, 0.05%)</title><rect x="62.7828%" y="357" width="0.0498%" height="15" fill="rgb(218,96,6)" fg:x="94478" fg:w="75"/><text x="63.0328%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,430 samples, 0.95%)</title><rect x="62.2784%" y="405" width="0.9503%" height="15" fill="rgb(235,130,12)" fg:x="93719" fg:w="1430"/><text x="62.5284%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (944 samples, 0.63%)</title><rect x="62.6013%" y="389" width="0.6273%" height="15" fill="rgb(231,95,0)" fg:x="94205" fg:w="944"/><text x="62.8513%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (903 samples, 0.60%)</title><rect x="62.6286%" y="373" width="0.6001%" height="15" fill="rgb(228,12,23)" fg:x="94246" fg:w="903"/><text x="62.8786%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (596 samples, 0.40%)</title><rect x="62.8326%" y="357" width="0.3961%" height="15" fill="rgb(216,12,1)" fg:x="94553" fg:w="596"/><text x="63.0826%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,533 samples, 1.02%)</title><rect x="62.2305%" y="437" width="1.0187%" height="15" fill="rgb(219,59,3)" fg:x="93647" fg:w="1533"/><text x="62.4805%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,533 samples, 1.02%)</title><rect x="62.2305%" y="421" width="1.0187%" height="15" fill="rgb(215,208,46)" fg:x="93647" fg:w="1533"/><text x="62.4805%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (31 samples, 0.02%)</title><rect x="63.2286%" y="405" width="0.0206%" height="15" fill="rgb(254,224,29)" fg:x="95149" fg:w="31"/><text x="63.4786%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (31 samples, 0.02%)</title><rect x="63.2286%" y="389" width="0.0206%" height="15" fill="rgb(232,14,29)" fg:x="95149" fg:w="31"/><text x="63.4786%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,681 samples, 1.12%)</title><rect x="62.2305%" y="469" width="1.1171%" height="15" fill="rgb(208,45,52)" fg:x="93647" fg:w="1681"/><text x="62.4805%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,681 samples, 1.12%)</title><rect x="62.2305%" y="453" width="1.1171%" height="15" fill="rgb(234,191,28)" fg:x="93647" fg:w="1681"/><text x="62.4805%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (148 samples, 0.10%)</title><rect x="63.2492%" y="437" width="0.0983%" height="15" fill="rgb(244,67,43)" fg:x="95180" fg:w="148"/><text x="63.4992%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (148 samples, 0.10%)</title><rect x="63.2492%" y="421" width="0.0983%" height="15" fill="rgb(236,189,24)" fg:x="95180" fg:w="148"/><text x="63.4992%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (148 samples, 0.10%)</title><rect x="63.2492%" y="405" width="0.0983%" height="15" fill="rgb(239,214,33)" fg:x="95180" fg:w="148"/><text x="63.4992%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (148 samples, 0.10%)</title><rect x="63.2492%" y="389" width="0.0983%" height="15" fill="rgb(226,176,41)" fg:x="95180" fg:w="148"/><text x="63.4992%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (73 samples, 0.05%)</title><rect x="63.2991%" y="373" width="0.0485%" height="15" fill="rgb(248,47,8)" fg:x="95255" fg:w="73"/><text x="63.5491%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (73 samples, 0.05%)</title><rect x="63.2991%" y="357" width="0.0485%" height="15" fill="rgb(218,81,44)" fg:x="95255" fg:w="73"/><text x="63.5491%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (73 samples, 0.05%)</title><rect x="63.2991%" y="341" width="0.0485%" height="15" fill="rgb(213,98,6)" fg:x="95255" fg:w="73"/><text x="63.5491%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (73 samples, 0.05%)</title><rect x="63.2991%" y="325" width="0.0485%" height="15" fill="rgb(222,85,22)" fg:x="95255" fg:w="73"/><text x="63.5491%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (73 samples, 0.05%)</title><rect x="63.2991%" y="309" width="0.0485%" height="15" fill="rgb(239,46,39)" fg:x="95255" fg:w="73"/><text x="63.5491%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (36 samples, 0.02%)</title><rect x="63.3755%" y="437" width="0.0239%" height="15" fill="rgb(237,12,29)" fg:x="95370" fg:w="36"/><text x="63.6255%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (38 samples, 0.03%)</title><rect x="63.3994%" y="405" width="0.0253%" height="15" fill="rgb(214,77,8)" fg:x="95406" fg:w="38"/><text x="63.6494%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (80 samples, 0.05%)</title><rect x="63.5077%" y="373" width="0.0532%" height="15" fill="rgb(217,168,37)" fg:x="95569" fg:w="80"/><text x="63.7577%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (112 samples, 0.07%)</title><rect x="63.5609%" y="373" width="0.0744%" height="15" fill="rgb(221,217,23)" fg:x="95649" fg:w="112"/><text x="63.8109%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (33 samples, 0.02%)</title><rect x="63.6353%" y="373" width="0.0219%" height="15" fill="rgb(243,229,36)" fg:x="95761" fg:w="33"/><text x="63.8853%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (267 samples, 0.18%)</title><rect x="63.4812%" y="389" width="0.1774%" height="15" fill="rgb(251,163,40)" fg:x="95529" fg:w="267"/><text x="63.7312%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (125 samples, 0.08%)</title><rect x="63.6965%" y="373" width="0.0831%" height="15" fill="rgb(237,222,12)" fg:x="95853" fg:w="125"/><text x="63.9465%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (30 samples, 0.02%)</title><rect x="64.0693%" y="325" width="0.0199%" height="15" fill="rgb(248,132,6)" fg:x="96414" fg:w="30"/><text x="64.3193%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30 samples, 0.02%)</title><rect x="64.0892%" y="309" width="0.0199%" height="15" fill="rgb(227,167,50)" fg:x="96444" fg:w="30"/><text x="64.3392%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (314 samples, 0.21%)</title><rect x="63.9151%" y="341" width="0.2087%" height="15" fill="rgb(242,84,37)" fg:x="96182" fg:w="314"/><text x="64.1651%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (52 samples, 0.03%)</title><rect x="64.0892%" y="325" width="0.0346%" height="15" fill="rgb(212,4,50)" fg:x="96444" fg:w="52"/><text x="64.3392%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (22 samples, 0.01%)</title><rect x="64.1091%" y="309" width="0.0146%" height="15" fill="rgb(230,228,32)" fg:x="96474" fg:w="22"/><text x="64.3591%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,097 samples, 0.73%)</title><rect x="63.3994%" y="437" width="0.7290%" height="15" fill="rgb(248,217,23)" fg:x="95406" fg:w="1097"/><text x="63.6494%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,097 samples, 0.73%)</title><rect x="63.3994%" y="421" width="0.7290%" height="15" fill="rgb(238,197,32)" fg:x="95406" fg:w="1097"/><text x="63.6494%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,059 samples, 0.70%)</title><rect x="63.4247%" y="405" width="0.7037%" height="15" fill="rgb(236,106,1)" fg:x="95444" fg:w="1059"/><text x="63.6747%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (707 samples, 0.47%)</title><rect x="63.6586%" y="389" width="0.4698%" height="15" fill="rgb(219,228,13)" fg:x="95796" fg:w="707"/><text x="63.9086%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (525 samples, 0.35%)</title><rect x="63.7795%" y="373" width="0.3489%" height="15" fill="rgb(238,30,35)" fg:x="95978" fg:w="525"/><text x="64.0295%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (412 samples, 0.27%)</title><rect x="63.8546%" y="357" width="0.2738%" height="15" fill="rgb(236,70,23)" fg:x="96091" fg:w="412"/><text x="64.1046%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (51 samples, 0.03%)</title><rect x="64.1517%" y="421" width="0.0339%" height="15" fill="rgb(249,104,48)" fg:x="96538" fg:w="51"/><text x="64.4017%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (40 samples, 0.03%)</title><rect x="64.3404%" y="405" width="0.0266%" height="15" fill="rgb(254,117,50)" fg:x="96822" fg:w="40"/><text x="64.5904%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (40 samples, 0.03%)</title><rect x="64.3404%" y="389" width="0.0266%" height="15" fill="rgb(223,152,4)" fg:x="96822" fg:w="40"/><text x="64.5904%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (40 samples, 0.03%)</title><rect x="64.3404%" y="373" width="0.0266%" height="15" fill="rgb(245,6,2)" fg:x="96822" fg:w="40"/><text x="64.5904%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (303 samples, 0.20%)</title><rect x="64.3670%" y="405" width="0.2014%" height="15" fill="rgb(249,150,24)" fg:x="96862" fg:w="303"/><text x="64.6170%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (303 samples, 0.20%)</title><rect x="64.3670%" y="389" width="0.2014%" height="15" fill="rgb(228,185,42)" fg:x="96862" fg:w="303"/><text x="64.6170%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (303 samples, 0.20%)</title><rect x="64.3670%" y="373" width="0.2014%" height="15" fill="rgb(226,39,33)" fg:x="96862" fg:w="303"/><text x="64.6170%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (280 samples, 0.19%)</title><rect x="64.3823%" y="357" width="0.1861%" height="15" fill="rgb(221,166,19)" fg:x="96885" fg:w="280"/><text x="64.6323%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (62 samples, 0.04%)</title><rect x="64.5683%" y="405" width="0.0412%" height="15" fill="rgb(209,109,2)" fg:x="97165" fg:w="62"/><text x="64.8183%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (62 samples, 0.04%)</title><rect x="64.5683%" y="389" width="0.0412%" height="15" fill="rgb(252,216,26)" fg:x="97165" fg:w="62"/><text x="64.8183%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (180 samples, 0.12%)</title><rect x="64.6122%" y="389" width="0.1196%" height="15" fill="rgb(227,173,36)" fg:x="97231" fg:w="180"/><text x="64.8622%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (136 samples, 0.09%)</title><rect x="64.6414%" y="373" width="0.0904%" height="15" fill="rgb(209,90,7)" fg:x="97275" fg:w="136"/><text x="64.8914%" y="383.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,166 samples, 0.77%)</title><rect x="64.1889%" y="421" width="0.7748%" height="15" fill="rgb(250,194,11)" fg:x="96594" fg:w="1166"/><text x="64.4389%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (533 samples, 0.35%)</title><rect x="64.6095%" y="405" width="0.3542%" height="15" fill="rgb(220,72,50)" fg:x="97227" fg:w="533"/><text x="64.8595%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (349 samples, 0.23%)</title><rect x="64.7318%" y="389" width="0.2319%" height="15" fill="rgb(222,106,48)" fg:x="97411" fg:w="349"/><text x="64.9818%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,259 samples, 0.84%)</title><rect x="64.1284%" y="437" width="0.8366%" height="15" fill="rgb(216,220,45)" fg:x="96503" fg:w="1259"/><text x="64.3784%" y="447.50"></text></g><g><title>one_brc::round_towards_positive (194 samples, 0.13%)</title><rect x="64.9650%" y="437" width="0.1289%" height="15" fill="rgb(234,112,18)" fg:x="97762" fg:w="194"/><text x="65.2150%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (137 samples, 0.09%)</title><rect x="65.0029%" y="421" width="0.0910%" height="15" fill="rgb(206,179,9)" fg:x="97819" fg:w="137"/><text x="65.2529%" y="431.50"></text></g><g><title>__round (137 samples, 0.09%)</title><rect x="65.0029%" y="405" width="0.0910%" height="15" fill="rgb(215,115,40)" fg:x="97819" fg:w="137"/><text x="65.2529%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (47 samples, 0.03%)</title><rect x="65.1717%" y="389" width="0.0312%" height="15" fill="rgb(222,69,34)" fg:x="98073" fg:w="47"/><text x="65.4217%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (208 samples, 0.14%)</title><rect x="65.0940%" y="437" width="0.1382%" height="15" fill="rgb(209,161,10)" fg:x="97956" fg:w="208"/><text x="65.3440%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (208 samples, 0.14%)</title><rect x="65.0940%" y="421" width="0.1382%" height="15" fill="rgb(217,6,38)" fg:x="97956" fg:w="208"/><text x="65.3440%" y="431.50"></text></g><g><title>one_brc::Measurement::record (208 samples, 0.14%)</title><rect x="65.0940%" y="405" width="0.1382%" height="15" fill="rgb(229,229,48)" fg:x="97956" fg:w="208"/><text x="65.3440%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (44 samples, 0.03%)</title><rect x="65.2029%" y="389" width="0.0292%" height="15" fill="rgb(225,21,28)" fg:x="98120" fg:w="44"/><text x="65.4529%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (57 samples, 0.04%)</title><rect x="65.4335%" y="309" width="0.0379%" height="15" fill="rgb(206,33,13)" fg:x="98467" fg:w="57"/><text x="65.6835%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 0.08%)</title><rect x="65.4109%" y="325" width="0.0811%" height="15" fill="rgb(242,178,17)" fg:x="98433" fg:w="122"/><text x="65.6609%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (31 samples, 0.02%)</title><rect x="65.4714%" y="309" width="0.0206%" height="15" fill="rgb(220,162,5)" fg:x="98524" fg:w="31"/><text x="65.7214%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (162 samples, 0.11%)</title><rect x="65.5492%" y="309" width="0.1077%" height="15" fill="rgb(210,33,43)" fg:x="98641" fg:w="162"/><text x="65.7992%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (562 samples, 0.37%)</title><rect x="65.3458%" y="373" width="0.3735%" height="15" fill="rgb(216,116,54)" fg:x="98335" fg:w="562"/><text x="65.5958%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (562 samples, 0.37%)</title><rect x="65.3458%" y="357" width="0.3735%" height="15" fill="rgb(249,92,24)" fg:x="98335" fg:w="562"/><text x="65.5958%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (562 samples, 0.37%)</title><rect x="65.3458%" y="341" width="0.3735%" height="15" fill="rgb(231,189,14)" fg:x="98335" fg:w="562"/><text x="65.5958%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (342 samples, 0.23%)</title><rect x="65.4920%" y="325" width="0.2273%" height="15" fill="rgb(230,8,41)" fg:x="98555" fg:w="342"/><text x="65.7420%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (94 samples, 0.06%)</title><rect x="65.6568%" y="309" width="0.0625%" height="15" fill="rgb(249,7,27)" fg:x="98803" fg:w="94"/><text x="65.9068%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (57 samples, 0.04%)</title><rect x="65.7193%" y="373" width="0.0379%" height="15" fill="rgb(232,86,5)" fg:x="98897" fg:w="57"/><text x="65.9693%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (30 samples, 0.02%)</title><rect x="65.7372%" y="357" width="0.0199%" height="15" fill="rgb(224,175,18)" fg:x="98924" fg:w="30"/><text x="65.9872%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (30 samples, 0.02%)</title><rect x="65.7372%" y="341" width="0.0199%" height="15" fill="rgb(220,129,12)" fg:x="98924" fg:w="30"/><text x="65.9872%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (30 samples, 0.02%)</title><rect x="65.7372%" y="325" width="0.0199%" height="15" fill="rgb(210,19,36)" fg:x="98924" fg:w="30"/><text x="65.9872%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.01%)</title><rect x="65.8608%" y="245" width="0.0126%" height="15" fill="rgb(219,96,14)" fg:x="99110" fg:w="19"/><text x="66.1108%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (62 samples, 0.04%)</title><rect x="65.8416%" y="261" width="0.0412%" height="15" fill="rgb(249,106,1)" fg:x="99081" fg:w="62"/><text x="66.0916%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (23 samples, 0.02%)</title><rect x="65.8828%" y="261" width="0.0153%" height="15" fill="rgb(249,155,20)" fg:x="99143" fg:w="23"/><text x="66.1328%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (330 samples, 0.22%)</title><rect x="65.7791%" y="277" width="0.2193%" height="15" fill="rgb(244,168,9)" fg:x="98987" fg:w="330"/><text x="66.0291%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (151 samples, 0.10%)</title><rect x="65.8980%" y="261" width="0.1003%" height="15" fill="rgb(216,23,50)" fg:x="99166" fg:w="151"/><text x="66.1480%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (43 samples, 0.03%)</title><rect x="65.9984%" y="277" width="0.0286%" height="15" fill="rgb(224,219,20)" fg:x="99317" fg:w="43"/><text x="66.2484%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (25 samples, 0.02%)</title><rect x="66.1107%" y="245" width="0.0166%" height="15" fill="rgb(222,156,15)" fg:x="99486" fg:w="25"/><text x="66.3607%" y="255.50"></text></g><g><title>core::cmp::min (23 samples, 0.02%)</title><rect x="66.1319%" y="245" width="0.0153%" height="15" fill="rgb(231,97,17)" fg:x="99518" fg:w="23"/><text x="66.3819%" y="255.50"></text></g><g><title>core::cmp::Ord::min (23 samples, 0.02%)</title><rect x="66.1319%" y="229" width="0.0153%" height="15" fill="rgb(218,70,48)" fg:x="99518" fg:w="23"/><text x="66.3819%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (23 samples, 0.02%)</title><rect x="66.1319%" y="213" width="0.0153%" height="15" fill="rgb(212,196,52)" fg:x="99518" fg:w="23"/><text x="66.3819%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (326 samples, 0.22%)</title><rect x="66.0416%" y="261" width="0.2166%" height="15" fill="rgb(243,203,18)" fg:x="99382" fg:w="326"/><text x="66.2916%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (167 samples, 0.11%)</title><rect x="66.1472%" y="245" width="0.1110%" height="15" fill="rgb(252,125,41)" fg:x="99541" fg:w="167"/><text x="66.3972%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,401 samples, 0.93%)</title><rect x="65.3292%" y="405" width="0.9310%" height="15" fill="rgb(223,180,33)" fg:x="98310" fg:w="1401"/><text x="65.5792%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,401 samples, 0.93%)</title><rect x="65.3292%" y="389" width="0.9310%" height="15" fill="rgb(254,159,46)" fg:x="98310" fg:w="1401"/><text x="65.5792%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (757 samples, 0.50%)</title><rect x="65.7572%" y="373" width="0.5030%" height="15" fill="rgb(254,38,10)" fg:x="98954" fg:w="757"/><text x="66.0072%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (724 samples, 0.48%)</title><rect x="65.7791%" y="357" width="0.4811%" height="15" fill="rgb(208,217,32)" fg:x="98987" fg:w="724"/><text x="66.0291%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (724 samples, 0.48%)</title><rect x="65.7791%" y="341" width="0.4811%" height="15" fill="rgb(221,120,13)" fg:x="98987" fg:w="724"/><text x="66.0291%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (724 samples, 0.48%)</title><rect x="65.7791%" y="325" width="0.4811%" height="15" fill="rgb(246,54,52)" fg:x="98987" fg:w="724"/><text x="66.0291%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (724 samples, 0.48%)</title><rect x="65.7791%" y="309" width="0.4811%" height="15" fill="rgb(242,34,25)" fg:x="98987" fg:w="724"/><text x="66.0291%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (724 samples, 0.48%)</title><rect x="65.7791%" y="293" width="0.4811%" height="15" fill="rgb(247,209,9)" fg:x="98987" fg:w="724"/><text x="66.0291%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (351 samples, 0.23%)</title><rect x="66.0270%" y="277" width="0.2332%" height="15" fill="rgb(228,71,26)" fg:x="99360" fg:w="351"/><text x="66.2770%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="66.2881%" y="373" width="0.0259%" height="15" fill="rgb(222,145,49)" fg:x="99753" fg:w="39"/><text x="66.5381%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (48 samples, 0.03%)</title><rect x="66.3306%" y="357" width="0.0319%" height="15" fill="rgb(218,121,17)" fg:x="99817" fg:w="48"/><text x="66.5806%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (48 samples, 0.03%)</title><rect x="66.3306%" y="341" width="0.0319%" height="15" fill="rgb(244,50,7)" fg:x="99817" fg:w="48"/><text x="66.5806%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (48 samples, 0.03%)</title><rect x="66.3306%" y="325" width="0.0319%" height="15" fill="rgb(246,229,37)" fg:x="99817" fg:w="48"/><text x="66.5806%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (668 samples, 0.44%)</title><rect x="66.3140%" y="373" width="0.4439%" height="15" fill="rgb(225,18,5)" fg:x="99792" fg:w="668"/><text x="66.5640%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (595 samples, 0.40%)</title><rect x="66.3625%" y="357" width="0.3954%" height="15" fill="rgb(213,204,8)" fg:x="99865" fg:w="595"/><text x="66.6125%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (595 samples, 0.40%)</title><rect x="66.3625%" y="341" width="0.3954%" height="15" fill="rgb(238,103,6)" fg:x="99865" fg:w="595"/><text x="66.6125%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (595 samples, 0.40%)</title><rect x="66.3625%" y="325" width="0.3954%" height="15" fill="rgb(222,25,35)" fg:x="99865" fg:w="595"/><text x="66.6125%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (595 samples, 0.40%)</title><rect x="66.3625%" y="309" width="0.3954%" height="15" fill="rgb(213,203,35)" fg:x="99865" fg:w="595"/><text x="66.6125%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (595 samples, 0.40%)</title><rect x="66.3625%" y="293" width="0.3954%" height="15" fill="rgb(221,79,53)" fg:x="99865" fg:w="595"/><text x="66.6125%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (595 samples, 0.40%)</title><rect x="66.3625%" y="277" width="0.3954%" height="15" fill="rgb(243,200,35)" fg:x="99865" fg:w="595"/><text x="66.6125%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (378 samples, 0.25%)</title><rect x="66.5067%" y="261" width="0.2512%" height="15" fill="rgb(248,60,25)" fg:x="100082" fg:w="378"/><text x="66.7567%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (67 samples, 0.04%)</title><rect x="66.7579%" y="373" width="0.0445%" height="15" fill="rgb(227,53,46)" fg:x="100460" fg:w="67"/><text x="67.0079%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.03%)</title><rect x="66.8025%" y="341" width="0.0279%" height="15" fill="rgb(216,120,32)" fg:x="100527" fg:w="42"/><text x="67.0525%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (44 samples, 0.03%)</title><rect x="66.8025%" y="373" width="0.0292%" height="15" fill="rgb(220,134,1)" fg:x="100527" fg:w="44"/><text x="67.0525%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (44 samples, 0.03%)</title><rect x="66.8025%" y="357" width="0.0292%" height="15" fill="rgb(237,168,5)" fg:x="100527" fg:w="44"/><text x="67.0525%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,395 samples, 1.59%)</title><rect x="65.2508%" y="421" width="1.5915%" height="15" fill="rgb(231,100,33)" fg:x="98192" fg:w="2395"/><text x="65.5008%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (876 samples, 0.58%)</title><rect x="66.2602%" y="405" width="0.5821%" height="15" fill="rgb(236,177,47)" fg:x="99711" fg:w="876"/><text x="66.5102%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (843 samples, 0.56%)</title><rect x="66.2821%" y="389" width="0.5602%" height="15" fill="rgb(235,7,49)" fg:x="99744" fg:w="843"/><text x="66.5321%" y="399.50"></text></g><g><title>worker-4 (8,777 samples, 5.83%)</title><rect x="61.0264%" y="725" width="5.8325%" height="15" fill="rgb(232,119,22)" fg:x="91835" fg:w="8777"/><text x="61.2764%" y="735.50">worker-4</text></g><g><title>__clone3 (6,965 samples, 4.63%)</title><rect x="62.2305%" y="709" width="4.6284%" height="15" fill="rgb(254,73,53)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="719.50">__clo..</text></g><g><title>start_thread (6,965 samples, 4.63%)</title><rect x="62.2305%" y="693" width="4.6284%" height="15" fill="rgb(251,35,20)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,965 samples, 4.63%)</title><rect x="62.2305%" y="677" width="4.6284%" height="15" fill="rgb(241,119,20)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,965 samples, 4.63%)</title><rect x="62.2305%" y="661" width="4.6284%" height="15" fill="rgb(207,102,14)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,965 samples, 4.63%)</title><rect x="62.2305%" y="645" width="4.6284%" height="15" fill="rgb(248,201,50)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="655.50">std::..</text></g><g><title>std::panic::catch_unwind (6,965 samples, 4.63%)</title><rect x="62.2305%" y="629" width="4.6284%" height="15" fill="rgb(222,185,44)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,965 samples, 4.63%)</title><rect x="62.2305%" y="613" width="4.6284%" height="15" fill="rgb(218,107,18)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,965 samples, 4.63%)</title><rect x="62.2305%" y="597" width="4.6284%" height="15" fill="rgb(237,177,39)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,965 samples, 4.63%)</title><rect x="62.2305%" y="581" width="4.6284%" height="15" fill="rgb(246,69,6)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,965 samples, 4.63%)</title><rect x="62.2305%" y="565" width="4.6284%" height="15" fill="rgb(234,208,37)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,965 samples, 4.63%)</title><rect x="62.2305%" y="549" width="4.6284%" height="15" fill="rgb(225,4,6)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,965 samples, 4.63%)</title><rect x="62.2305%" y="533" width="4.6284%" height="15" fill="rgb(233,45,0)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,965 samples, 4.63%)</title><rect x="62.2305%" y="517" width="4.6284%" height="15" fill="rgb(226,136,5)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="527.50">one_b..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,965 samples, 4.63%)</title><rect x="62.2305%" y="501" width="4.6284%" height="15" fill="rgb(211,91,47)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,965 samples, 4.63%)</title><rect x="62.2305%" y="485" width="4.6284%" height="15" fill="rgb(242,88,51)" fg:x="93647" fg:w="6965"/><text x="62.4805%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,283 samples, 3.51%)</title><rect x="63.3483%" y="469" width="3.5107%" height="15" fill="rgb(230,91,28)" fg:x="95329" fg:w="5283"/><text x="63.5983%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (5,283 samples, 3.51%)</title><rect x="63.3483%" y="453" width="3.5107%" height="15" fill="rgb(254,186,29)" fg:x="95329" fg:w="5283"/><text x="63.5983%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,447 samples, 1.63%)</title><rect x="65.2328%" y="437" width="1.6261%" height="15" fill="rgb(238,6,4)" fg:x="98165" fg:w="2447"/><text x="65.4828%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (25 samples, 0.02%)</title><rect x="66.8423%" y="421" width="0.0166%" height="15" fill="rgb(221,151,16)" fg:x="100587" fg:w="25"/><text x="67.0923%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (101 samples, 0.07%)</title><rect x="66.9686%" y="677" width="0.0671%" height="15" fill="rgb(251,143,52)" fg:x="100777" fg:w="101"/><text x="67.2186%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (101 samples, 0.07%)</title><rect x="66.9686%" y="661" width="0.0671%" height="15" fill="rgb(206,90,15)" fg:x="100777" fg:w="101"/><text x="67.2186%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (101 samples, 0.07%)</title><rect x="66.9686%" y="645" width="0.0671%" height="15" fill="rgb(218,35,8)" fg:x="100777" fg:w="101"/><text x="67.2186%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (367 samples, 0.24%)</title><rect x="66.8589%" y="693" width="0.2439%" height="15" fill="rgb(239,215,6)" fg:x="100612" fg:w="367"/><text x="67.1089%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (101 samples, 0.07%)</title><rect x="67.0357%" y="677" width="0.0671%" height="15" fill="rgb(245,116,39)" fg:x="100878" fg:w="101"/><text x="67.2857%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (109 samples, 0.07%)</title><rect x="67.1028%" y="693" width="0.0724%" height="15" fill="rgb(242,65,28)" fg:x="100979" fg:w="109"/><text x="67.3528%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (183 samples, 0.12%)</title><rect x="67.1752%" y="693" width="0.1216%" height="15" fill="rgb(252,132,53)" fg:x="101088" fg:w="183"/><text x="67.4252%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (107 samples, 0.07%)</title><rect x="67.2258%" y="677" width="0.0711%" height="15" fill="rgb(224,159,50)" fg:x="101164" fg:w="107"/><text x="67.4758%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (107 samples, 0.07%)</title><rect x="67.2258%" y="661" width="0.0711%" height="15" fill="rgb(224,93,4)" fg:x="101164" fg:w="107"/><text x="67.4758%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (107 samples, 0.07%)</title><rect x="67.2258%" y="645" width="0.0711%" height="15" fill="rgb(208,81,34)" fg:x="101164" fg:w="107"/><text x="67.4758%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (107 samples, 0.07%)</title><rect x="67.2258%" y="629" width="0.0711%" height="15" fill="rgb(233,92,54)" fg:x="101164" fg:w="107"/><text x="67.4758%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (107 samples, 0.07%)</title><rect x="67.2258%" y="613" width="0.0711%" height="15" fill="rgb(237,21,14)" fg:x="101164" fg:w="107"/><text x="67.4758%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (107 samples, 0.07%)</title><rect x="67.2258%" y="597" width="0.0711%" height="15" fill="rgb(249,128,51)" fg:x="101164" fg:w="107"/><text x="67.4758%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (41 samples, 0.03%)</title><rect x="67.2696%" y="581" width="0.0272%" height="15" fill="rgb(223,129,24)" fg:x="101230" fg:w="41"/><text x="67.5196%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (106 samples, 0.07%)</title><rect x="67.2969%" y="693" width="0.0704%" height="15" fill="rgb(231,168,25)" fg:x="101271" fg:w="106"/><text x="67.5469%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (72 samples, 0.05%)</title><rect x="67.3194%" y="677" width="0.0478%" height="15" fill="rgb(224,39,20)" fg:x="101305" fg:w="72"/><text x="67.5694%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (25 samples, 0.02%)</title><rect x="67.3673%" y="693" width="0.0166%" height="15" fill="rgb(225,152,53)" fg:x="101377" fg:w="25"/><text x="67.6173%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (25 samples, 0.02%)</title><rect x="67.3673%" y="677" width="0.0166%" height="15" fill="rgb(252,17,24)" fg:x="101377" fg:w="25"/><text x="67.6173%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (25 samples, 0.02%)</title><rect x="67.3673%" y="661" width="0.0166%" height="15" fill="rgb(250,114,30)" fg:x="101377" fg:w="25"/><text x="67.6173%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (120 samples, 0.08%)</title><rect x="67.3839%" y="693" width="0.0797%" height="15" fill="rgb(229,5,4)" fg:x="101402" fg:w="120"/><text x="67.6339%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (67 samples, 0.04%)</title><rect x="67.5294%" y="677" width="0.0445%" height="15" fill="rgb(225,176,49)" fg:x="101621" fg:w="67"/><text x="67.7794%" y="687.50"></text></g><g><title>[anon] (1,127 samples, 0.75%)</title><rect x="66.8589%" y="709" width="0.7489%" height="15" fill="rgb(224,221,49)" fg:x="100612" fg:w="1127"/><text x="67.1089%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (217 samples, 0.14%)</title><rect x="67.4637%" y="693" width="0.1442%" height="15" fill="rgb(253,169,27)" fg:x="101522" fg:w="217"/><text x="67.7137%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (51 samples, 0.03%)</title><rect x="67.5740%" y="677" width="0.0339%" height="15" fill="rgb(211,206,16)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (51 samples, 0.03%)</title><rect x="67.5740%" y="661" width="0.0339%" height="15" fill="rgb(244,87,35)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (51 samples, 0.03%)</title><rect x="67.5740%" y="645" width="0.0339%" height="15" fill="rgb(246,28,10)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (51 samples, 0.03%)</title><rect x="67.5740%" y="629" width="0.0339%" height="15" fill="rgb(229,12,44)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (51 samples, 0.03%)</title><rect x="67.5740%" y="613" width="0.0339%" height="15" fill="rgb(210,145,37)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (51 samples, 0.03%)</title><rect x="67.5740%" y="597" width="0.0339%" height="15" fill="rgb(227,112,52)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (51 samples, 0.03%)</title><rect x="67.5740%" y="581" width="0.0339%" height="15" fill="rgb(238,155,34)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (51 samples, 0.03%)</title><rect x="67.5740%" y="565" width="0.0339%" height="15" fill="rgb(239,226,36)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (51 samples, 0.03%)</title><rect x="67.5740%" y="549" width="0.0339%" height="15" fill="rgb(230,16,23)" fg:x="101688" fg:w="51"/><text x="67.8240%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (155 samples, 0.10%)</title><rect x="67.6079%" y="693" width="0.1030%" height="15" fill="rgb(236,171,36)" fg:x="101739" fg:w="155"/><text x="67.8579%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (212 samples, 0.14%)</title><rect x="67.7109%" y="693" width="0.1409%" height="15" fill="rgb(221,22,14)" fg:x="101894" fg:w="212"/><text x="67.9609%" y="703.50"></text></g><g><title>__round (25 samples, 0.02%)</title><rect x="67.8517%" y="693" width="0.0166%" height="15" fill="rgb(242,43,11)" fg:x="102106" fg:w="25"/><text x="68.1017%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (141 samples, 0.09%)</title><rect x="67.8683%" y="693" width="0.0937%" height="15" fill="rgb(232,69,23)" fg:x="102131" fg:w="141"/><text x="68.1183%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (163 samples, 0.11%)</title><rect x="67.9620%" y="693" width="0.1083%" height="15" fill="rgb(216,180,54)" fg:x="102272" fg:w="163"/><text x="68.2120%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (43 samples, 0.03%)</title><rect x="68.0418%" y="677" width="0.0286%" height="15" fill="rgb(216,5,24)" fg:x="102392" fg:w="43"/><text x="68.2918%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (43 samples, 0.03%)</title><rect x="68.0418%" y="661" width="0.0286%" height="15" fill="rgb(225,89,9)" fg:x="102392" fg:w="43"/><text x="68.2918%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (123 samples, 0.08%)</title><rect x="68.0704%" y="693" width="0.0817%" height="15" fill="rgb(243,75,33)" fg:x="102435" fg:w="123"/><text x="68.3204%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.06%)</title><rect x="68.1521%" y="645" width="0.0558%" height="15" fill="rgb(247,141,45)" fg:x="102558" fg:w="84"/><text x="68.4021%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.06%)</title><rect x="68.1521%" y="629" width="0.0558%" height="15" fill="rgb(232,177,36)" fg:x="102558" fg:w="84"/><text x="68.4021%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.06%)</title><rect x="68.1521%" y="613" width="0.0558%" height="15" fill="rgb(219,125,36)" fg:x="102558" fg:w="84"/><text x="68.4021%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (84 samples, 0.06%)</title><rect x="68.1521%" y="597" width="0.0558%" height="15" fill="rgb(227,94,9)" fg:x="102558" fg:w="84"/><text x="68.4021%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (56 samples, 0.04%)</title><rect x="68.2079%" y="613" width="0.0372%" height="15" fill="rgb(240,34,52)" fg:x="102642" fg:w="56"/><text x="68.4579%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (87 samples, 0.06%)</title><rect x="68.2451%" y="613" width="0.0578%" height="15" fill="rgb(216,45,12)" fg:x="102698" fg:w="87"/><text x="68.4951%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (97 samples, 0.06%)</title><rect x="68.3029%" y="613" width="0.0645%" height="15" fill="rgb(246,21,19)" fg:x="102785" fg:w="97"/><text x="68.5529%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (97 samples, 0.06%)</title><rect x="68.3029%" y="597" width="0.0645%" height="15" fill="rgb(213,98,42)" fg:x="102785" fg:w="97"/><text x="68.5529%" y="607.50"></text></g><g><title>[unknown] (1,180 samples, 0.78%)</title><rect x="67.6079%" y="709" width="0.7841%" height="15" fill="rgb(250,136,47)" fg:x="101739" fg:w="1180"/><text x="67.8579%" y="719.50"></text></g><g><title>one_brc::process_lines (361 samples, 0.24%)</title><rect x="68.1521%" y="693" width="0.2399%" height="15" fill="rgb(251,124,27)" fg:x="102558" fg:w="361"/><text x="68.4021%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (361 samples, 0.24%)</title><rect x="68.1521%" y="677" width="0.2399%" height="15" fill="rgb(229,180,14)" fg:x="102558" fg:w="361"/><text x="68.4021%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (361 samples, 0.24%)</title><rect x="68.1521%" y="661" width="0.2399%" height="15" fill="rgb(245,216,25)" fg:x="102558" fg:w="361"/><text x="68.4021%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (277 samples, 0.18%)</title><rect x="68.2079%" y="645" width="0.1841%" height="15" fill="rgb(251,43,5)" fg:x="102642" fg:w="277"/><text x="68.4579%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (277 samples, 0.18%)</title><rect x="68.2079%" y="629" width="0.1841%" height="15" fill="rgb(250,128,24)" fg:x="102642" fg:w="277"/><text x="68.4579%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (37 samples, 0.02%)</title><rect x="68.3674%" y="613" width="0.0246%" height="15" fill="rgb(217,117,27)" fg:x="102882" fg:w="37"/><text x="68.6174%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (41 samples, 0.03%)</title><rect x="68.5960%" y="389" width="0.0272%" height="15" fill="rgb(245,147,4)" fg:x="103226" fg:w="41"/><text x="68.8460%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.03%)</title><rect x="68.5960%" y="373" width="0.0272%" height="15" fill="rgb(242,201,35)" fg:x="103226" fg:w="41"/><text x="68.8460%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.03%)</title><rect x="68.5960%" y="357" width="0.0272%" height="15" fill="rgb(218,181,1)" fg:x="103226" fg:w="41"/><text x="68.8460%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (188 samples, 0.12%)</title><rect x="68.6232%" y="389" width="0.1249%" height="15" fill="rgb(222,6,29)" fg:x="103267" fg:w="188"/><text x="68.8732%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (188 samples, 0.12%)</title><rect x="68.6232%" y="373" width="0.1249%" height="15" fill="rgb(208,186,3)" fg:x="103267" fg:w="188"/><text x="68.8732%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (188 samples, 0.12%)</title><rect x="68.6232%" y="357" width="0.1249%" height="15" fill="rgb(216,36,26)" fg:x="103267" fg:w="188"/><text x="68.8732%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (183 samples, 0.12%)</title><rect x="68.6266%" y="341" width="0.1216%" height="15" fill="rgb(248,201,23)" fg:x="103272" fg:w="183"/><text x="68.8766%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (142 samples, 0.09%)</title><rect x="68.7482%" y="389" width="0.0944%" height="15" fill="rgb(251,170,31)" fg:x="103455" fg:w="142"/><text x="68.9982%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (142 samples, 0.09%)</title><rect x="68.7482%" y="373" width="0.0944%" height="15" fill="rgb(207,110,25)" fg:x="103455" fg:w="142"/><text x="68.9982%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (37 samples, 0.02%)</title><rect x="68.9881%" y="357" width="0.0246%" height="15" fill="rgb(250,54,15)" fg:x="103816" fg:w="37"/><text x="69.2381%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (53 samples, 0.04%)</title><rect x="69.0127%" y="357" width="0.0352%" height="15" fill="rgb(227,68,33)" fg:x="103853" fg:w="53"/><text x="69.2627%" y="367.50"></text></g><g><title>core::ptr::align_offset (53 samples, 0.04%)</title><rect x="69.0127%" y="341" width="0.0352%" height="15" fill="rgb(238,34,41)" fg:x="103853" fg:w="53"/><text x="69.2627%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (89 samples, 0.06%)</title><rect x="69.0479%" y="357" width="0.0591%" height="15" fill="rgb(220,11,15)" fg:x="103906" fg:w="89"/><text x="69.2979%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,787 samples, 1.19%)</title><rect x="68.4525%" y="405" width="1.1875%" height="15" fill="rgb(246,111,35)" fg:x="103010" fg:w="1787"/><text x="68.7025%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (1,200 samples, 0.80%)</title><rect x="68.8425%" y="389" width="0.7974%" height="15" fill="rgb(209,88,53)" fg:x="103597" fg:w="1200"/><text x="69.0925%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,161 samples, 0.77%)</title><rect x="68.8685%" y="373" width="0.7715%" height="15" fill="rgb(231,185,47)" fg:x="103636" fg:w="1161"/><text x="69.1185%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (802 samples, 0.53%)</title><rect x="69.1070%" y="357" width="0.5329%" height="15" fill="rgb(233,154,1)" fg:x="103995" fg:w="802"/><text x="69.3570%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,922 samples, 1.28%)</title><rect x="68.3927%" y="437" width="1.2772%" height="15" fill="rgb(225,15,46)" fg:x="102920" fg:w="1922"/><text x="68.6427%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,922 samples, 1.28%)</title><rect x="68.3927%" y="421" width="1.2772%" height="15" fill="rgb(211,135,41)" fg:x="102920" fg:w="1922"/><text x="68.6427%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (44 samples, 0.03%)</title><rect x="69.6406%" y="405" width="0.0292%" height="15" fill="rgb(208,54,0)" fg:x="104798" fg:w="44"/><text x="69.8906%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (44 samples, 0.03%)</title><rect x="69.6406%" y="389" width="0.0292%" height="15" fill="rgb(244,136,14)" fg:x="104798" fg:w="44"/><text x="69.8906%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (2,074 samples, 1.38%)</title><rect x="68.3927%" y="469" width="1.3782%" height="15" fill="rgb(241,56,14)" fg:x="102920" fg:w="2074"/><text x="68.6427%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,074 samples, 1.38%)</title><rect x="68.3927%" y="453" width="1.3782%" height="15" fill="rgb(205,80,24)" fg:x="102920" fg:w="2074"/><text x="68.6427%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (152 samples, 0.10%)</title><rect x="69.6699%" y="437" width="0.1010%" height="15" fill="rgb(220,57,4)" fg:x="104842" fg:w="152"/><text x="69.9199%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (152 samples, 0.10%)</title><rect x="69.6699%" y="421" width="0.1010%" height="15" fill="rgb(226,193,50)" fg:x="104842" fg:w="152"/><text x="69.9199%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (152 samples, 0.10%)</title><rect x="69.6699%" y="405" width="0.1010%" height="15" fill="rgb(231,168,22)" fg:x="104842" fg:w="152"/><text x="69.9199%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (152 samples, 0.10%)</title><rect x="69.6699%" y="389" width="0.1010%" height="15" fill="rgb(254,215,14)" fg:x="104842" fg:w="152"/><text x="69.9199%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (81 samples, 0.05%)</title><rect x="69.7170%" y="373" width="0.0538%" height="15" fill="rgb(211,115,16)" fg:x="104913" fg:w="81"/><text x="69.9670%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (81 samples, 0.05%)</title><rect x="69.7170%" y="357" width="0.0538%" height="15" fill="rgb(236,210,16)" fg:x="104913" fg:w="81"/><text x="69.9670%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (81 samples, 0.05%)</title><rect x="69.7170%" y="341" width="0.0538%" height="15" fill="rgb(221,94,12)" fg:x="104913" fg:w="81"/><text x="69.9670%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (81 samples, 0.05%)</title><rect x="69.7170%" y="325" width="0.0538%" height="15" fill="rgb(235,218,49)" fg:x="104913" fg:w="81"/><text x="69.9670%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (81 samples, 0.05%)</title><rect x="69.7170%" y="309" width="0.0538%" height="15" fill="rgb(217,114,14)" fg:x="104913" fg:w="81"/><text x="69.9670%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (38 samples, 0.03%)</title><rect x="69.8001%" y="437" width="0.0253%" height="15" fill="rgb(216,145,22)" fg:x="105038" fg:w="38"/><text x="70.0501%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (36 samples, 0.02%)</title><rect x="69.8267%" y="405" width="0.0239%" height="15" fill="rgb(217,112,39)" fg:x="105078" fg:w="36"/><text x="70.0767%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (110 samples, 0.07%)</title><rect x="69.9736%" y="373" width="0.0731%" height="15" fill="rgb(225,85,32)" fg:x="105299" fg:w="110"/><text x="70.2236%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (141 samples, 0.09%)</title><rect x="70.0466%" y="373" width="0.0937%" height="15" fill="rgb(245,209,47)" fg:x="105409" fg:w="141"/><text x="70.2966%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (359 samples, 0.24%)</title><rect x="69.9290%" y="389" width="0.2386%" height="15" fill="rgb(218,220,15)" fg:x="105232" fg:w="359"/><text x="70.1790%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (36 samples, 0.02%)</title><rect x="70.1437%" y="373" width="0.0239%" height="15" fill="rgb(222,202,31)" fg:x="105555" fg:w="36"/><text x="70.3937%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (126 samples, 0.08%)</title><rect x="70.2194%" y="373" width="0.0837%" height="15" fill="rgb(243,203,4)" fg:x="105669" fg:w="126"/><text x="70.4694%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (34 samples, 0.02%)</title><rect x="70.6540%" y="325" width="0.0226%" height="15" fill="rgb(237,92,17)" fg:x="106323" fg:w="34"/><text x="70.9040%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (29 samples, 0.02%)</title><rect x="70.6779%" y="309" width="0.0193%" height="15" fill="rgb(231,119,7)" fg:x="106359" fg:w="29"/><text x="70.9279%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (412 samples, 0.27%)</title><rect x="70.4474%" y="341" width="0.2738%" height="15" fill="rgb(237,82,41)" fg:x="106012" fg:w="412"/><text x="70.6974%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (67 samples, 0.04%)</title><rect x="70.6766%" y="325" width="0.0445%" height="15" fill="rgb(226,81,48)" fg:x="106357" fg:w="67"/><text x="70.9266%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (36 samples, 0.02%)</title><rect x="70.6972%" y="309" width="0.0239%" height="15" fill="rgb(234,70,51)" fg:x="106388" fg:w="36"/><text x="70.9472%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (517 samples, 0.34%)</title><rect x="70.3809%" y="357" width="0.3436%" height="15" fill="rgb(251,86,4)" fg:x="105912" fg:w="517"/><text x="70.6309%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,354 samples, 0.90%)</title><rect x="69.8254%" y="437" width="0.8998%" height="15" fill="rgb(244,144,28)" fg:x="105076" fg:w="1354"/><text x="70.0754%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,354 samples, 0.90%)</title><rect x="69.8254%" y="421" width="0.8998%" height="15" fill="rgb(232,161,39)" fg:x="105076" fg:w="1354"/><text x="70.0754%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,316 samples, 0.87%)</title><rect x="69.8506%" y="405" width="0.8745%" height="15" fill="rgb(247,34,51)" fg:x="105114" fg:w="1316"/><text x="70.1006%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (839 samples, 0.56%)</title><rect x="70.1676%" y="389" width="0.5575%" height="15" fill="rgb(225,132,2)" fg:x="105591" fg:w="839"/><text x="70.4176%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (635 samples, 0.42%)</title><rect x="70.3032%" y="373" width="0.4220%" height="15" fill="rgb(209,159,44)" fg:x="105795" fg:w="635"/><text x="70.5532%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (63 samples, 0.04%)</title><rect x="70.7504%" y="421" width="0.0419%" height="15" fill="rgb(251,214,1)" fg:x="106468" fg:w="63"/><text x="71.0004%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (38 samples, 0.03%)</title><rect x="70.9750%" y="405" width="0.0253%" height="15" fill="rgb(247,84,47)" fg:x="106806" fg:w="38"/><text x="71.2250%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 0.03%)</title><rect x="70.9750%" y="389" width="0.0253%" height="15" fill="rgb(240,111,43)" fg:x="106806" fg:w="38"/><text x="71.2250%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 0.03%)</title><rect x="70.9750%" y="373" width="0.0253%" height="15" fill="rgb(215,214,35)" fg:x="106806" fg:w="38"/><text x="71.2250%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (269 samples, 0.18%)</title><rect x="71.0002%" y="405" width="0.1788%" height="15" fill="rgb(248,207,23)" fg:x="106844" fg:w="269"/><text x="71.2502%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (269 samples, 0.18%)</title><rect x="71.0002%" y="389" width="0.1788%" height="15" fill="rgb(214,186,4)" fg:x="106844" fg:w="269"/><text x="71.2502%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (269 samples, 0.18%)</title><rect x="71.0002%" y="373" width="0.1788%" height="15" fill="rgb(220,133,22)" fg:x="106844" fg:w="269"/><text x="71.2502%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (237 samples, 0.16%)</title><rect x="71.0215%" y="357" width="0.1575%" height="15" fill="rgb(239,134,19)" fg:x="106876" fg:w="237"/><text x="71.2715%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (84 samples, 0.06%)</title><rect x="71.1790%" y="405" width="0.0558%" height="15" fill="rgb(250,140,9)" fg:x="107113" fg:w="84"/><text x="71.4290%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (84 samples, 0.06%)</title><rect x="71.1790%" y="389" width="0.0558%" height="15" fill="rgb(225,59,14)" fg:x="107113" fg:w="84"/><text x="71.4290%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (172 samples, 0.11%)</title><rect x="71.2401%" y="389" width="0.1143%" height="15" fill="rgb(214,152,51)" fg:x="107205" fg:w="172"/><text x="71.4901%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (131 samples, 0.09%)</title><rect x="71.2674%" y="373" width="0.0871%" height="15" fill="rgb(251,227,43)" fg:x="107246" fg:w="131"/><text x="71.5174%" y="383.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,230 samples, 0.82%)</title><rect x="70.7942%" y="421" width="0.8174%" height="15" fill="rgb(241,96,17)" fg:x="106534" fg:w="1230"/><text x="71.0442%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (567 samples, 0.38%)</title><rect x="71.2348%" y="405" width="0.3768%" height="15" fill="rgb(234,198,43)" fg:x="107197" fg:w="567"/><text x="71.4848%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (387 samples, 0.26%)</title><rect x="71.3544%" y="389" width="0.2572%" height="15" fill="rgb(220,108,29)" fg:x="107377" fg:w="387"/><text x="71.6044%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,335 samples, 0.89%)</title><rect x="70.7251%" y="437" width="0.8871%" height="15" fill="rgb(226,163,33)" fg:x="106430" fg:w="1335"/><text x="70.9751%" y="447.50"></text></g><g><title>one_brc::round_towards_positive (231 samples, 0.15%)</title><rect x="71.6123%" y="437" width="0.1535%" height="15" fill="rgb(205,194,45)" fg:x="107765" fg:w="231"/><text x="71.8623%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (145 samples, 0.10%)</title><rect x="71.6694%" y="421" width="0.0964%" height="15" fill="rgb(206,143,44)" fg:x="107851" fg:w="145"/><text x="71.9194%" y="431.50"></text></g><g><title>__round (145 samples, 0.10%)</title><rect x="71.6694%" y="405" width="0.0964%" height="15" fill="rgb(236,136,36)" fg:x="107851" fg:w="145"/><text x="71.9194%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (60 samples, 0.04%)</title><rect x="71.8621%" y="389" width="0.0399%" height="15" fill="rgb(249,172,42)" fg:x="108141" fg:w="60"/><text x="72.1121%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (261 samples, 0.17%)</title><rect x="71.7658%" y="437" width="0.1734%" height="15" fill="rgb(216,139,23)" fg:x="107996" fg:w="261"/><text x="72.0158%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (261 samples, 0.17%)</title><rect x="71.7658%" y="421" width="0.1734%" height="15" fill="rgb(207,166,20)" fg:x="107996" fg:w="261"/><text x="72.0158%" y="431.50"></text></g><g><title>one_brc::Measurement::record (261 samples, 0.17%)</title><rect x="71.7658%" y="405" width="0.1734%" height="15" fill="rgb(210,209,22)" fg:x="107996" fg:w="261"/><text x="72.0158%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (56 samples, 0.04%)</title><rect x="71.9020%" y="389" width="0.0372%" height="15" fill="rgb(232,118,20)" fg:x="108201" fg:w="56"/><text x="72.1520%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.01%)</title><rect x="72.2070%" y="309" width="0.0133%" height="15" fill="rgb(238,113,42)" fg:x="108660" fg:w="20"/><text x="72.4570%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (75 samples, 0.05%)</title><rect x="72.2203%" y="309" width="0.0498%" height="15" fill="rgb(231,42,5)" fg:x="108680" fg:w="75"/><text x="72.4703%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (177 samples, 0.12%)</title><rect x="72.1798%" y="325" width="0.1176%" height="15" fill="rgb(243,166,24)" fg:x="108619" fg:w="177"/><text x="72.4298%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (41 samples, 0.03%)</title><rect x="72.2701%" y="309" width="0.0272%" height="15" fill="rgb(237,226,12)" fg:x="108755" fg:w="41"/><text x="72.5201%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (202 samples, 0.13%)</title><rect x="72.3446%" y="309" width="0.1342%" height="15" fill="rgb(229,133,24)" fg:x="108867" fg:w="202"/><text x="72.5946%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (721 samples, 0.48%)</title><rect x="72.0954%" y="373" width="0.4791%" height="15" fill="rgb(238,33,43)" fg:x="108492" fg:w="721"/><text x="72.3454%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (721 samples, 0.48%)</title><rect x="72.0954%" y="357" width="0.4791%" height="15" fill="rgb(227,59,38)" fg:x="108492" fg:w="721"/><text x="72.3454%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (721 samples, 0.48%)</title><rect x="72.0954%" y="341" width="0.4791%" height="15" fill="rgb(230,97,0)" fg:x="108492" fg:w="721"/><text x="72.3454%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (417 samples, 0.28%)</title><rect x="72.2974%" y="325" width="0.2771%" height="15" fill="rgb(250,173,50)" fg:x="108796" fg:w="417"/><text x="72.5474%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (144 samples, 0.10%)</title><rect x="72.4788%" y="309" width="0.0957%" height="15" fill="rgb(240,15,50)" fg:x="109069" fg:w="144"/><text x="72.7288%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (63 samples, 0.04%)</title><rect x="72.5745%" y="373" width="0.0419%" height="15" fill="rgb(221,93,22)" fg:x="109213" fg:w="63"/><text x="72.8245%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (32 samples, 0.02%)</title><rect x="72.5951%" y="357" width="0.0213%" height="15" fill="rgb(245,180,53)" fg:x="109244" fg:w="32"/><text x="72.8451%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (32 samples, 0.02%)</title><rect x="72.5951%" y="341" width="0.0213%" height="15" fill="rgb(231,88,51)" fg:x="109244" fg:w="32"/><text x="72.8451%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (32 samples, 0.02%)</title><rect x="72.5951%" y="325" width="0.0213%" height="15" fill="rgb(240,58,21)" fg:x="109244" fg:w="32"/><text x="72.8451%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 0.01%)</title><rect x="72.7632%" y="245" width="0.0106%" height="15" fill="rgb(237,21,10)" fg:x="109497" fg:w="16"/><text x="73.0132%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (65 samples, 0.04%)</title><rect x="72.7439%" y="261" width="0.0432%" height="15" fill="rgb(218,43,11)" fg:x="109468" fg:w="65"/><text x="72.9939%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (20 samples, 0.01%)</title><rect x="72.7738%" y="245" width="0.0133%" height="15" fill="rgb(218,221,29)" fg:x="109513" fg:w="20"/><text x="73.0238%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (41 samples, 0.03%)</title><rect x="72.7871%" y="261" width="0.0272%" height="15" fill="rgb(214,118,42)" fg:x="109533" fg:w="41"/><text x="73.0371%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (165 samples, 0.11%)</title><rect x="72.8144%" y="261" width="0.1096%" height="15" fill="rgb(251,200,26)" fg:x="109574" fg:w="165"/><text x="73.0644%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (403 samples, 0.27%)</title><rect x="72.6569%" y="277" width="0.2678%" height="15" fill="rgb(237,101,39)" fg:x="109337" fg:w="403"/><text x="72.9069%" y="287.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (60 samples, 0.04%)</title><rect x="72.9247%" y="277" width="0.0399%" height="15" fill="rgb(251,117,11)" fg:x="109740" fg:w="60"/><text x="73.1747%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (31 samples, 0.02%)</title><rect x="73.0769%" y="245" width="0.0206%" height="15" fill="rgb(216,223,23)" fg:x="109969" fg:w="31"/><text x="73.3269%" y="255.50"></text></g><g><title>core::cmp::min (26 samples, 0.02%)</title><rect x="73.1021%" y="245" width="0.0173%" height="15" fill="rgb(251,54,12)" fg:x="110007" fg:w="26"/><text x="73.3521%" y="255.50"></text></g><g><title>core::cmp::Ord::min (26 samples, 0.02%)</title><rect x="73.1021%" y="229" width="0.0173%" height="15" fill="rgb(254,176,54)" fg:x="110007" fg:w="26"/><text x="73.3521%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (26 samples, 0.02%)</title><rect x="73.1021%" y="213" width="0.0173%" height="15" fill="rgb(210,32,8)" fg:x="110007" fg:w="26"/><text x="73.3521%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (369 samples, 0.25%)</title><rect x="72.9872%" y="261" width="0.2452%" height="15" fill="rgb(235,52,38)" fg:x="109834" fg:w="369"/><text x="73.2372%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (170 samples, 0.11%)</title><rect x="73.1194%" y="245" width="0.1130%" height="15" fill="rgb(231,4,44)" fg:x="110033" fg:w="170"/><text x="73.3694%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,779 samples, 1.18%)</title><rect x="72.0648%" y="405" width="1.1822%" height="15" fill="rgb(249,2,32)" fg:x="108446" fg:w="1779"/><text x="72.3148%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,779 samples, 1.18%)</title><rect x="72.0648%" y="389" width="1.1822%" height="15" fill="rgb(224,65,26)" fg:x="108446" fg:w="1779"/><text x="72.3148%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (949 samples, 0.63%)</title><rect x="72.6164%" y="373" width="0.6306%" height="15" fill="rgb(250,73,40)" fg:x="109276" fg:w="949"/><text x="72.8664%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (888 samples, 0.59%)</title><rect x="72.6569%" y="357" width="0.5901%" height="15" fill="rgb(253,177,16)" fg:x="109337" fg:w="888"/><text x="72.9069%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (888 samples, 0.59%)</title><rect x="72.6569%" y="341" width="0.5901%" height="15" fill="rgb(217,32,34)" fg:x="109337" fg:w="888"/><text x="72.9069%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (888 samples, 0.59%)</title><rect x="72.6569%" y="325" width="0.5901%" height="15" fill="rgb(212,7,10)" fg:x="109337" fg:w="888"/><text x="72.9069%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (888 samples, 0.59%)</title><rect x="72.6569%" y="309" width="0.5901%" height="15" fill="rgb(245,89,8)" fg:x="109337" fg:w="888"/><text x="72.9069%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (888 samples, 0.59%)</title><rect x="72.6569%" y="293" width="0.5901%" height="15" fill="rgb(237,16,53)" fg:x="109337" fg:w="888"/><text x="72.9069%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (425 samples, 0.28%)</title><rect x="72.9646%" y="277" width="0.2824%" height="15" fill="rgb(250,204,30)" fg:x="109800" fg:w="425"/><text x="73.2146%" y="287.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (22 samples, 0.01%)</title><rect x="73.2324%" y="261" width="0.0146%" height="15" fill="rgb(208,77,27)" fg:x="110203" fg:w="22"/><text x="73.4824%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.03%)</title><rect x="73.2802%" y="373" width="0.0272%" height="15" fill="rgb(250,204,28)" fg:x="110275" fg:w="41"/><text x="73.5302%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (46 samples, 0.03%)</title><rect x="73.3208%" y="357" width="0.0306%" height="15" fill="rgb(244,63,21)" fg:x="110336" fg:w="46"/><text x="73.5708%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (46 samples, 0.03%)</title><rect x="73.3208%" y="341" width="0.0306%" height="15" fill="rgb(236,85,44)" fg:x="110336" fg:w="46"/><text x="73.5708%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (46 samples, 0.03%)</title><rect x="73.3208%" y="325" width="0.0306%" height="15" fill="rgb(215,98,4)" fg:x="110336" fg:w="46"/><text x="73.5708%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16 samples, 0.01%)</title><rect x="73.3407%" y="309" width="0.0106%" height="15" fill="rgb(235,38,11)" fg:x="110366" fg:w="16"/><text x="73.5907%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (893 samples, 0.59%)</title><rect x="73.3075%" y="373" width="0.5934%" height="15" fill="rgb(254,186,25)" fg:x="110316" fg:w="893"/><text x="73.5575%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (827 samples, 0.55%)</title><rect x="73.3513%" y="357" width="0.5496%" height="15" fill="rgb(225,55,31)" fg:x="110382" fg:w="827"/><text x="73.6013%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (827 samples, 0.55%)</title><rect x="73.3513%" y="341" width="0.5496%" height="15" fill="rgb(211,15,21)" fg:x="110382" fg:w="827"/><text x="73.6013%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (827 samples, 0.55%)</title><rect x="73.3513%" y="325" width="0.5496%" height="15" fill="rgb(215,187,41)" fg:x="110382" fg:w="827"/><text x="73.6013%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (827 samples, 0.55%)</title><rect x="73.3513%" y="309" width="0.5496%" height="15" fill="rgb(248,69,32)" fg:x="110382" fg:w="827"/><text x="73.6013%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (827 samples, 0.55%)</title><rect x="73.3513%" y="293" width="0.5496%" height="15" fill="rgb(252,102,52)" fg:x="110382" fg:w="827"/><text x="73.6013%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (827 samples, 0.55%)</title><rect x="73.3513%" y="277" width="0.5496%" height="15" fill="rgb(253,140,32)" fg:x="110382" fg:w="827"/><text x="73.6013%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (521 samples, 0.35%)</title><rect x="73.5547%" y="261" width="0.3462%" height="15" fill="rgb(216,56,42)" fg:x="110688" fg:w="521"/><text x="73.8047%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (87 samples, 0.06%)</title><rect x="73.9009%" y="373" width="0.0578%" height="15" fill="rgb(216,184,14)" fg:x="111209" fg:w="87"/><text x="74.1509%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.03%)</title><rect x="73.9587%" y="341" width="0.0326%" height="15" fill="rgb(237,187,27)" fg:x="111296" fg:w="49"/><text x="74.2087%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (55 samples, 0.04%)</title><rect x="73.9587%" y="373" width="0.0365%" height="15" fill="rgb(219,65,3)" fg:x="111296" fg:w="55"/><text x="74.2087%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (55 samples, 0.04%)</title><rect x="73.9587%" y="357" width="0.0365%" height="15" fill="rgb(245,83,25)" fg:x="111296" fg:w="55"/><text x="74.2087%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (29 samples, 0.02%)</title><rect x="73.9952%" y="373" width="0.0193%" height="15" fill="rgb(214,205,45)" fg:x="111351" fg:w="29"/><text x="74.2452%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (29 samples, 0.02%)</title><rect x="73.9952%" y="357" width="0.0193%" height="15" fill="rgb(241,20,18)" fg:x="111351" fg:w="29"/><text x="74.2452%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,119 samples, 0.74%)</title><rect x="73.2722%" y="389" width="0.7436%" height="15" fill="rgb(232,163,23)" fg:x="110263" fg:w="1119"/><text x="73.5222%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3,091 samples, 2.05%)</title><rect x="71.9625%" y="421" width="2.0540%" height="15" fill="rgb(214,5,46)" fg:x="108292" fg:w="3091"/><text x="72.2125%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,158 samples, 0.77%)</title><rect x="73.2470%" y="405" width="0.7695%" height="15" fill="rgb(229,78,17)" fg:x="110225" fg:w="1158"/><text x="73.4970%" y="415.50"></text></g><g><title>worker-5 (10,813 samples, 7.19%)</title><rect x="66.8589%" y="725" width="7.1855%" height="15" fill="rgb(248,89,10)" fg:x="100612" fg:w="10813"/><text x="67.1089%" y="735.50">worker-5</text></g><g><title>__clone3 (8,506 samples, 5.65%)</title><rect x="68.3920%" y="709" width="5.6524%" height="15" fill="rgb(248,54,15)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="719.50">__clone3</text></g><g><title>start_thread (8,506 samples, 5.65%)</title><rect x="68.3920%" y="693" width="5.6524%" height="15" fill="rgb(223,116,6)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="703.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8,506 samples, 5.65%)</title><rect x="68.3920%" y="677" width="5.6524%" height="15" fill="rgb(205,125,38)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="687.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8,506 samples, 5.65%)</title><rect x="68.3920%" y="661" width="5.6524%" height="15" fill="rgb(251,78,38)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="671.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (8,506 samples, 5.65%)</title><rect x="68.3920%" y="645" width="5.6524%" height="15" fill="rgb(253,78,28)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="655.50">std::th..</text></g><g><title>std::panic::catch_unwind (8,506 samples, 5.65%)</title><rect x="68.3920%" y="629" width="5.6524%" height="15" fill="rgb(209,120,3)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="639.50">std::pa..</text></g><g><title>std::panicking::try (8,506 samples, 5.65%)</title><rect x="68.3920%" y="613" width="5.6524%" height="15" fill="rgb(238,229,9)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="623.50">std::pa..</text></g><g><title>std::panicking::try::do_call (8,506 samples, 5.65%)</title><rect x="68.3920%" y="597" width="5.6524%" height="15" fill="rgb(253,159,18)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="607.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,506 samples, 5.65%)</title><rect x="68.3920%" y="581" width="5.6524%" height="15" fill="rgb(244,42,34)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="591.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (8,506 samples, 5.65%)</title><rect x="68.3920%" y="565" width="5.6524%" height="15" fill="rgb(224,8,7)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="575.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,506 samples, 5.65%)</title><rect x="68.3920%" y="549" width="5.6524%" height="15" fill="rgb(210,201,45)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="559.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (8,506 samples, 5.65%)</title><rect x="68.3920%" y="533" width="5.6524%" height="15" fill="rgb(252,185,21)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="543.50">one_brc..</text></g><g><title>one_brc::process_lines (8,506 samples, 5.65%)</title><rect x="68.3920%" y="517" width="5.6524%" height="15" fill="rgb(223,131,1)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="527.50">one_brc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,506 samples, 5.65%)</title><rect x="68.3920%" y="501" width="5.6524%" height="15" fill="rgb(245,141,16)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="511.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,506 samples, 5.65%)</title><rect x="68.3920%" y="485" width="5.6524%" height="15" fill="rgb(229,55,45)" fg:x="102919" fg:w="8506"/><text x="68.6420%" y="495.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6,431 samples, 4.27%)</title><rect x="69.7709%" y="469" width="4.2735%" height="15" fill="rgb(208,92,15)" fg:x="104994" fg:w="6431"/><text x="70.0209%" y="479.50">core:..</text></g><g><title>one_brc::process_lines::_{{closure}} (6,431 samples, 4.27%)</title><rect x="69.7709%" y="453" width="4.2735%" height="15" fill="rgb(234,185,47)" fg:x="104994" fg:w="6431"/><text x="70.0209%" y="463.50">one_b..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3,168 samples, 2.11%)</title><rect x="71.9392%" y="437" width="2.1052%" height="15" fill="rgb(253,104,50)" fg:x="108257" fg:w="3168"/><text x="72.1892%" y="447.50">s..</text></g><g><title>std::collections::hash::map::map_entry (42 samples, 0.03%)</title><rect x="74.0165%" y="421" width="0.0279%" height="15" fill="rgb(205,70,7)" fg:x="111383" fg:w="42"/><text x="74.2665%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85 samples, 0.06%)</title><rect x="74.1248%" y="677" width="0.0565%" height="15" fill="rgb(240,178,43)" fg:x="111546" fg:w="85"/><text x="74.3748%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (85 samples, 0.06%)</title><rect x="74.1248%" y="661" width="0.0565%" height="15" fill="rgb(214,112,2)" fg:x="111546" fg:w="85"/><text x="74.3748%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (85 samples, 0.06%)</title><rect x="74.1248%" y="645" width="0.0565%" height="15" fill="rgb(206,46,17)" fg:x="111546" fg:w="85"/><text x="74.3748%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (291 samples, 0.19%)</title><rect x="74.0457%" y="693" width="0.1934%" height="15" fill="rgb(225,220,16)" fg:x="111427" fg:w="291"/><text x="74.2957%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (87 samples, 0.06%)</title><rect x="74.1813%" y="677" width="0.0578%" height="15" fill="rgb(238,65,40)" fg:x="111631" fg:w="87"/><text x="74.4313%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (99 samples, 0.07%)</title><rect x="74.2391%" y="693" width="0.0658%" height="15" fill="rgb(230,151,21)" fg:x="111718" fg:w="99"/><text x="74.4891%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (160 samples, 0.11%)</title><rect x="74.3049%" y="693" width="0.1063%" height="15" fill="rgb(218,58,49)" fg:x="111817" fg:w="160"/><text x="74.5549%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (83 samples, 0.06%)</title><rect x="74.3561%" y="677" width="0.0552%" height="15" fill="rgb(219,179,14)" fg:x="111894" fg:w="83"/><text x="74.6061%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (83 samples, 0.06%)</title><rect x="74.3561%" y="661" width="0.0552%" height="15" fill="rgb(223,72,1)" fg:x="111894" fg:w="83"/><text x="74.6061%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (83 samples, 0.06%)</title><rect x="74.3561%" y="645" width="0.0552%" height="15" fill="rgb(238,126,10)" fg:x="111894" fg:w="83"/><text x="74.6061%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (83 samples, 0.06%)</title><rect x="74.3561%" y="629" width="0.0552%" height="15" fill="rgb(224,206,38)" fg:x="111894" fg:w="83"/><text x="74.6061%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (83 samples, 0.06%)</title><rect x="74.3561%" y="613" width="0.0552%" height="15" fill="rgb(212,201,54)" fg:x="111894" fg:w="83"/><text x="74.6061%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (83 samples, 0.06%)</title><rect x="74.3561%" y="597" width="0.0552%" height="15" fill="rgb(218,154,48)" fg:x="111894" fg:w="83"/><text x="74.6061%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (21 samples, 0.01%)</title><rect x="74.3973%" y="581" width="0.0140%" height="15" fill="rgb(232,93,24)" fg:x="111956" fg:w="21"/><text x="74.6473%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (72 samples, 0.05%)</title><rect x="74.4112%" y="693" width="0.0478%" height="15" fill="rgb(245,30,21)" fg:x="111977" fg:w="72"/><text x="74.6612%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (47 samples, 0.03%)</title><rect x="74.4278%" y="677" width="0.0312%" height="15" fill="rgb(242,148,29)" fg:x="112002" fg:w="47"/><text x="74.6778%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (26 samples, 0.02%)</title><rect x="74.4591%" y="693" width="0.0173%" height="15" fill="rgb(244,153,54)" fg:x="112049" fg:w="26"/><text x="74.7091%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (26 samples, 0.02%)</title><rect x="74.4591%" y="677" width="0.0173%" height="15" fill="rgb(252,87,22)" fg:x="112049" fg:w="26"/><text x="74.7091%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (26 samples, 0.02%)</title><rect x="74.4591%" y="661" width="0.0173%" height="15" fill="rgb(210,51,29)" fg:x="112049" fg:w="26"/><text x="74.7091%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (87 samples, 0.06%)</title><rect x="74.4764%" y="693" width="0.0578%" height="15" fill="rgb(242,136,47)" fg:x="112075" fg:w="87"/><text x="74.7264%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.02%)</title><rect x="74.5707%" y="677" width="0.0246%" height="15" fill="rgb(238,68,4)" fg:x="112217" fg:w="37"/><text x="74.8207%" y="687.50"></text></g><g><title>[anon] (873 samples, 0.58%)</title><rect x="74.0444%" y="709" width="0.5801%" height="15" fill="rgb(242,161,30)" fg:x="111425" fg:w="873"/><text x="74.2944%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (136 samples, 0.09%)</title><rect x="74.5342%" y="693" width="0.0904%" height="15" fill="rgb(218,58,44)" fg:x="112162" fg:w="136"/><text x="74.7842%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (44 samples, 0.03%)</title><rect x="74.5953%" y="677" width="0.0292%" height="15" fill="rgb(252,125,32)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (44 samples, 0.03%)</title><rect x="74.5953%" y="661" width="0.0292%" height="15" fill="rgb(219,178,0)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (44 samples, 0.03%)</title><rect x="74.5953%" y="645" width="0.0292%" height="15" fill="rgb(213,152,7)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (44 samples, 0.03%)</title><rect x="74.5953%" y="629" width="0.0292%" height="15" fill="rgb(249,109,34)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (44 samples, 0.03%)</title><rect x="74.5953%" y="613" width="0.0292%" height="15" fill="rgb(232,96,21)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (44 samples, 0.03%)</title><rect x="74.5953%" y="597" width="0.0292%" height="15" fill="rgb(228,27,39)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (44 samples, 0.03%)</title><rect x="74.5953%" y="581" width="0.0292%" height="15" fill="rgb(211,182,52)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (44 samples, 0.03%)</title><rect x="74.5953%" y="565" width="0.0292%" height="15" fill="rgb(234,178,38)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (44 samples, 0.03%)</title><rect x="74.5953%" y="549" width="0.0292%" height="15" fill="rgb(221,111,3)" fg:x="112254" fg:w="44"/><text x="74.8453%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (107 samples, 0.07%)</title><rect x="74.6245%" y="693" width="0.0711%" height="15" fill="rgb(228,175,21)" fg:x="112298" fg:w="107"/><text x="74.8745%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (186 samples, 0.12%)</title><rect x="74.6956%" y="693" width="0.1236%" height="15" fill="rgb(228,174,43)" fg:x="112405" fg:w="186"/><text x="74.9456%" y="703.50"></text></g><g><title>__round (41 samples, 0.03%)</title><rect x="74.8192%" y="693" width="0.0272%" height="15" fill="rgb(211,191,0)" fg:x="112591" fg:w="41"/><text x="75.0692%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (128 samples, 0.09%)</title><rect x="74.8465%" y="693" width="0.0851%" height="15" fill="rgb(253,117,3)" fg:x="112632" fg:w="128"/><text x="75.0965%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (101 samples, 0.07%)</title><rect x="74.9316%" y="693" width="0.0671%" height="15" fill="rgb(241,127,19)" fg:x="112760" fg:w="101"/><text x="75.1816%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (24 samples, 0.02%)</title><rect x="74.9827%" y="677" width="0.0159%" height="15" fill="rgb(218,103,12)" fg:x="112837" fg:w="24"/><text x="75.2327%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (24 samples, 0.02%)</title><rect x="74.9827%" y="661" width="0.0159%" height="15" fill="rgb(236,214,43)" fg:x="112837" fg:w="24"/><text x="75.2327%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (95 samples, 0.06%)</title><rect x="74.9987%" y="693" width="0.0631%" height="15" fill="rgb(244,144,19)" fg:x="112861" fg:w="95"/><text x="75.2487%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="75.0618%" y="645" width="0.0259%" height="15" fill="rgb(246,188,10)" fg:x="112956" fg:w="39"/><text x="75.3118%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="75.0618%" y="629" width="0.0259%" height="15" fill="rgb(212,193,33)" fg:x="112956" fg:w="39"/><text x="75.3118%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="75.0618%" y="613" width="0.0259%" height="15" fill="rgb(241,51,29)" fg:x="112956" fg:w="39"/><text x="75.3118%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (39 samples, 0.03%)</title><rect x="75.0618%" y="597" width="0.0259%" height="15" fill="rgb(211,58,19)" fg:x="112956" fg:w="39"/><text x="75.3118%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (52 samples, 0.03%)</title><rect x="75.0877%" y="613" width="0.0346%" height="15" fill="rgb(229,111,26)" fg:x="112995" fg:w="52"/><text x="75.3377%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (63 samples, 0.04%)</title><rect x="75.1223%" y="613" width="0.0419%" height="15" fill="rgb(213,115,40)" fg:x="113047" fg:w="63"/><text x="75.3723%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (70 samples, 0.05%)</title><rect x="75.1641%" y="613" width="0.0465%" height="15" fill="rgb(209,56,44)" fg:x="113110" fg:w="70"/><text x="75.4141%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (70 samples, 0.05%)</title><rect x="75.1641%" y="597" width="0.0465%" height="15" fill="rgb(230,108,32)" fg:x="113110" fg:w="70"/><text x="75.4141%" y="607.50"></text></g><g><title>[unknown] (903 samples, 0.60%)</title><rect x="74.6245%" y="709" width="0.6001%" height="15" fill="rgb(216,165,31)" fg:x="112298" fg:w="903"/><text x="74.8745%" y="719.50"></text></g><g><title>one_brc::process_lines (245 samples, 0.16%)</title><rect x="75.0618%" y="693" width="0.1628%" height="15" fill="rgb(218,122,21)" fg:x="112956" fg:w="245"/><text x="75.3118%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (245 samples, 0.16%)</title><rect x="75.0618%" y="677" width="0.1628%" height="15" fill="rgb(223,224,47)" fg:x="112956" fg:w="245"/><text x="75.3118%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (245 samples, 0.16%)</title><rect x="75.0618%" y="661" width="0.1628%" height="15" fill="rgb(238,102,44)" fg:x="112956" fg:w="245"/><text x="75.3118%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (206 samples, 0.14%)</title><rect x="75.0877%" y="645" width="0.1369%" height="15" fill="rgb(236,46,40)" fg:x="112995" fg:w="206"/><text x="75.3377%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (206 samples, 0.14%)</title><rect x="75.0877%" y="629" width="0.1369%" height="15" fill="rgb(247,202,50)" fg:x="112995" fg:w="206"/><text x="75.3377%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (21 samples, 0.01%)</title><rect x="75.2107%" y="613" width="0.0140%" height="15" fill="rgb(209,99,20)" fg:x="113180" fg:w="21"/><text x="75.4607%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (33 samples, 0.02%)</title><rect x="75.4060%" y="389" width="0.0219%" height="15" fill="rgb(252,27,34)" fg:x="113474" fg:w="33"/><text x="75.6560%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 0.02%)</title><rect x="75.4060%" y="373" width="0.0219%" height="15" fill="rgb(215,206,23)" fg:x="113474" fg:w="33"/><text x="75.6560%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 0.02%)</title><rect x="75.4060%" y="357" width="0.0219%" height="15" fill="rgb(212,135,36)" fg:x="113474" fg:w="33"/><text x="75.6560%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (136 samples, 0.09%)</title><rect x="75.4280%" y="389" width="0.0904%" height="15" fill="rgb(240,189,1)" fg:x="113507" fg:w="136"/><text x="75.6780%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (136 samples, 0.09%)</title><rect x="75.4280%" y="373" width="0.0904%" height="15" fill="rgb(242,56,20)" fg:x="113507" fg:w="136"/><text x="75.6780%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (136 samples, 0.09%)</title><rect x="75.4280%" y="357" width="0.0904%" height="15" fill="rgb(247,132,33)" fg:x="113507" fg:w="136"/><text x="75.6780%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (134 samples, 0.09%)</title><rect x="75.4293%" y="341" width="0.0890%" height="15" fill="rgb(208,149,11)" fg:x="113509" fg:w="134"/><text x="75.6793%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (94 samples, 0.06%)</title><rect x="75.5183%" y="389" width="0.0625%" height="15" fill="rgb(211,33,11)" fg:x="113643" fg:w="94"/><text x="75.7683%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (94 samples, 0.06%)</title><rect x="75.5183%" y="373" width="0.0625%" height="15" fill="rgb(221,29,38)" fg:x="113643" fg:w="94"/><text x="75.7683%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (33 samples, 0.02%)</title><rect x="75.6944%" y="357" width="0.0219%" height="15" fill="rgb(206,182,49)" fg:x="113908" fg:w="33"/><text x="75.9444%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (39 samples, 0.03%)</title><rect x="75.7164%" y="357" width="0.0259%" height="15" fill="rgb(216,140,1)" fg:x="113941" fg:w="39"/><text x="75.9664%" y="367.50"></text></g><g><title>core::ptr::align_offset (39 samples, 0.03%)</title><rect x="75.7164%" y="341" width="0.0259%" height="15" fill="rgb(232,57,40)" fg:x="113941" fg:w="39"/><text x="75.9664%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (56 samples, 0.04%)</title><rect x="75.7423%" y="357" width="0.0372%" height="15" fill="rgb(224,186,18)" fg:x="113980" fg:w="56"/><text x="75.9923%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,313 samples, 0.87%)</title><rect x="75.2764%" y="405" width="0.8725%" height="15" fill="rgb(215,121,11)" fg:x="113279" fg:w="1313"/><text x="75.5264%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (855 samples, 0.57%)</title><rect x="75.5808%" y="389" width="0.5682%" height="15" fill="rgb(245,147,10)" fg:x="113737" fg:w="855"/><text x="75.8308%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (825 samples, 0.55%)</title><rect x="75.6007%" y="373" width="0.5482%" height="15" fill="rgb(238,153,13)" fg:x="113767" fg:w="825"/><text x="75.8507%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (556 samples, 0.37%)</title><rect x="75.7795%" y="357" width="0.3695%" height="15" fill="rgb(233,108,0)" fg:x="114036" fg:w="556"/><text x="76.0295%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,419 samples, 0.94%)</title><rect x="75.2246%" y="437" width="0.9430%" height="15" fill="rgb(212,157,17)" fg:x="113201" fg:w="1419"/><text x="75.4746%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,419 samples, 0.94%)</title><rect x="75.2246%" y="421" width="0.9430%" height="15" fill="rgb(225,213,38)" fg:x="113201" fg:w="1419"/><text x="75.4746%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (27 samples, 0.02%)</title><rect x="76.1496%" y="405" width="0.0179%" height="15" fill="rgb(248,16,11)" fg:x="114593" fg:w="27"/><text x="76.3996%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (27 samples, 0.02%)</title><rect x="76.1496%" y="389" width="0.0179%" height="15" fill="rgb(241,33,4)" fg:x="114593" fg:w="27"/><text x="76.3996%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,523 samples, 1.01%)</title><rect x="75.2246%" y="469" width="1.0121%" height="15" fill="rgb(222,26,43)" fg:x="113201" fg:w="1523"/><text x="75.4746%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,523 samples, 1.01%)</title><rect x="75.2246%" y="453" width="1.0121%" height="15" fill="rgb(243,29,36)" fg:x="113201" fg:w="1523"/><text x="75.4746%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (104 samples, 0.07%)</title><rect x="76.1676%" y="437" width="0.0691%" height="15" fill="rgb(241,9,27)" fg:x="114620" fg:w="104"/><text x="76.4176%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (104 samples, 0.07%)</title><rect x="76.1676%" y="421" width="0.0691%" height="15" fill="rgb(205,117,26)" fg:x="114620" fg:w="104"/><text x="76.4176%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (104 samples, 0.07%)</title><rect x="76.1676%" y="405" width="0.0691%" height="15" fill="rgb(209,80,39)" fg:x="114620" fg:w="104"/><text x="76.4176%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (104 samples, 0.07%)</title><rect x="76.1676%" y="389" width="0.0691%" height="15" fill="rgb(239,155,6)" fg:x="114620" fg:w="104"/><text x="76.4176%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (54 samples, 0.04%)</title><rect x="76.2008%" y="373" width="0.0359%" height="15" fill="rgb(212,104,12)" fg:x="114670" fg:w="54"/><text x="76.4508%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (54 samples, 0.04%)</title><rect x="76.2008%" y="357" width="0.0359%" height="15" fill="rgb(234,204,3)" fg:x="114670" fg:w="54"/><text x="76.4508%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (54 samples, 0.04%)</title><rect x="76.2008%" y="341" width="0.0359%" height="15" fill="rgb(251,218,7)" fg:x="114670" fg:w="54"/><text x="76.4508%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (54 samples, 0.04%)</title><rect x="76.2008%" y="325" width="0.0359%" height="15" fill="rgb(221,81,32)" fg:x="114670" fg:w="54"/><text x="76.4508%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (54 samples, 0.04%)</title><rect x="76.2008%" y="309" width="0.0359%" height="15" fill="rgb(214,152,26)" fg:x="114670" fg:w="54"/><text x="76.4508%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (39 samples, 0.03%)</title><rect x="76.2546%" y="437" width="0.0259%" height="15" fill="rgb(223,22,3)" fg:x="114751" fg:w="39"/><text x="76.5046%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (37 samples, 0.02%)</title><rect x="76.2805%" y="405" width="0.0246%" height="15" fill="rgb(207,174,7)" fg:x="114790" fg:w="37"/><text x="76.5305%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (72 samples, 0.05%)</title><rect x="76.4028%" y="373" width="0.0478%" height="15" fill="rgb(224,19,52)" fg:x="114974" fg:w="72"/><text x="76.6528%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (90 samples, 0.06%)</title><rect x="76.4507%" y="373" width="0.0598%" height="15" fill="rgb(228,24,14)" fg:x="115046" fg:w="90"/><text x="76.7007%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (252 samples, 0.17%)</title><rect x="76.3623%" y="389" width="0.1675%" height="15" fill="rgb(230,153,43)" fg:x="114913" fg:w="252"/><text x="76.6123%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (28 samples, 0.02%)</title><rect x="76.5111%" y="373" width="0.0186%" height="15" fill="rgb(231,106,12)" fg:x="115137" fg:w="28"/><text x="76.7611%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (92 samples, 0.06%)</title><rect x="76.5570%" y="373" width="0.0611%" height="15" fill="rgb(215,92,2)" fg:x="115206" fg:w="92"/><text x="76.8070%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (24 samples, 0.02%)</title><rect x="76.8540%" y="325" width="0.0159%" height="15" fill="rgb(249,143,25)" fg:x="115653" fg:w="24"/><text x="77.1040%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.02%)</title><rect x="76.8700%" y="309" width="0.0226%" height="15" fill="rgb(252,7,35)" fg:x="115677" fg:w="34"/><text x="77.1200%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (283 samples, 0.19%)</title><rect x="76.7191%" y="341" width="0.1881%" height="15" fill="rgb(216,69,40)" fg:x="115450" fg:w="283"/><text x="76.9691%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (56 samples, 0.04%)</title><rect x="76.8700%" y="325" width="0.0372%" height="15" fill="rgb(240,36,33)" fg:x="115677" fg:w="56"/><text x="77.1200%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (22 samples, 0.01%)</title><rect x="76.8926%" y="309" width="0.0146%" height="15" fill="rgb(231,128,14)" fg:x="115711" fg:w="22"/><text x="77.1426%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (944 samples, 0.63%)</title><rect x="76.2805%" y="437" width="0.6273%" height="15" fill="rgb(245,143,14)" fg:x="114790" fg:w="944"/><text x="76.5305%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (944 samples, 0.63%)</title><rect x="76.2805%" y="421" width="0.6273%" height="15" fill="rgb(222,130,28)" fg:x="114790" fg:w="944"/><text x="76.5305%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (907 samples, 0.60%)</title><rect x="76.3051%" y="405" width="0.6027%" height="15" fill="rgb(212,10,48)" fg:x="114827" fg:w="907"/><text x="76.5551%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (569 samples, 0.38%)</title><rect x="76.5297%" y="389" width="0.3781%" height="15" fill="rgb(254,118,45)" fg:x="115165" fg:w="569"/><text x="76.7797%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (436 samples, 0.29%)</title><rect x="76.6181%" y="373" width="0.2897%" height="15" fill="rgb(228,6,45)" fg:x="115298" fg:w="436"/><text x="76.8681%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (361 samples, 0.24%)</title><rect x="76.6680%" y="357" width="0.2399%" height="15" fill="rgb(241,18,35)" fg:x="115373" fg:w="361"/><text x="76.9180%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (52 samples, 0.03%)</title><rect x="76.9258%" y="421" width="0.0346%" height="15" fill="rgb(227,214,53)" fg:x="115761" fg:w="52"/><text x="77.1758%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (24 samples, 0.02%)</title><rect x="77.1059%" y="405" width="0.0159%" height="15" fill="rgb(224,107,51)" fg:x="116032" fg:w="24"/><text x="77.3559%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (24 samples, 0.02%)</title><rect x="77.1059%" y="389" width="0.0159%" height="15" fill="rgb(248,60,28)" fg:x="116032" fg:w="24"/><text x="77.3559%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (24 samples, 0.02%)</title><rect x="77.1059%" y="373" width="0.0159%" height="15" fill="rgb(249,101,23)" fg:x="116032" fg:w="24"/><text x="77.3559%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (321 samples, 0.21%)</title><rect x="77.1218%" y="405" width="0.2133%" height="15" fill="rgb(228,51,19)" fg:x="116056" fg:w="321"/><text x="77.3718%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (321 samples, 0.21%)</title><rect x="77.1218%" y="389" width="0.2133%" height="15" fill="rgb(213,20,6)" fg:x="116056" fg:w="321"/><text x="77.3718%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (321 samples, 0.21%)</title><rect x="77.1218%" y="373" width="0.2133%" height="15" fill="rgb(212,124,10)" fg:x="116056" fg:w="321"/><text x="77.3718%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (288 samples, 0.19%)</title><rect x="77.1437%" y="357" width="0.1914%" height="15" fill="rgb(248,3,40)" fg:x="116089" fg:w="288"/><text x="77.3937%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (75 samples, 0.05%)</title><rect x="77.3351%" y="405" width="0.0498%" height="15" fill="rgb(223,178,23)" fg:x="116377" fg:w="75"/><text x="77.5851%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (75 samples, 0.05%)</title><rect x="77.3351%" y="389" width="0.0498%" height="15" fill="rgb(240,132,45)" fg:x="116377" fg:w="75"/><text x="77.5851%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (146 samples, 0.10%)</title><rect x="77.3876%" y="389" width="0.0970%" height="15" fill="rgb(245,164,36)" fg:x="116456" fg:w="146"/><text x="77.6376%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (104 samples, 0.07%)</title><rect x="77.4155%" y="373" width="0.0691%" height="15" fill="rgb(231,188,53)" fg:x="116498" fg:w="104"/><text x="77.6655%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,149 samples, 0.76%)</title><rect x="76.9078%" y="437" width="0.7635%" height="15" fill="rgb(237,198,39)" fg:x="115734" fg:w="1149"/><text x="77.1578%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,069 samples, 0.71%)</title><rect x="76.9610%" y="421" width="0.7104%" height="15" fill="rgb(223,120,35)" fg:x="115814" fg:w="1069"/><text x="77.2110%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (431 samples, 0.29%)</title><rect x="77.3850%" y="405" width="0.2864%" height="15" fill="rgb(253,107,49)" fg:x="116452" fg:w="431"/><text x="77.6350%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (281 samples, 0.19%)</title><rect x="77.4846%" y="389" width="0.1867%" height="15" fill="rgb(216,44,31)" fg:x="116602" fg:w="281"/><text x="77.7346%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (174 samples, 0.12%)</title><rect x="77.6714%" y="437" width="0.1156%" height="15" fill="rgb(253,87,21)" fg:x="116883" fg:w="174"/><text x="77.9214%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (113 samples, 0.08%)</title><rect x="77.7119%" y="421" width="0.0751%" height="15" fill="rgb(226,18,2)" fg:x="116944" fg:w="113"/><text x="77.9619%" y="431.50"></text></g><g><title>__round (113 samples, 0.08%)</title><rect x="77.7119%" y="405" width="0.0751%" height="15" fill="rgb(216,8,46)" fg:x="116944" fg:w="113"/><text x="77.9619%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (50 samples, 0.03%)</title><rect x="77.8648%" y="389" width="0.0332%" height="15" fill="rgb(226,140,39)" fg:x="117174" fg:w="50"/><text x="78.1148%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (227 samples, 0.15%)</title><rect x="77.7870%" y="437" width="0.1508%" height="15" fill="rgb(221,194,54)" fg:x="117057" fg:w="227"/><text x="78.0370%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (227 samples, 0.15%)</title><rect x="77.7870%" y="421" width="0.1508%" height="15" fill="rgb(213,92,11)" fg:x="117057" fg:w="227"/><text x="78.0370%" y="431.50"></text></g><g><title>one_brc::Measurement::record (227 samples, 0.15%)</title><rect x="77.7870%" y="405" width="0.1508%" height="15" fill="rgb(229,162,46)" fg:x="117057" fg:w="227"/><text x="78.0370%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (60 samples, 0.04%)</title><rect x="77.8980%" y="389" width="0.0399%" height="15" fill="rgb(214,111,36)" fg:x="117224" fg:w="60"/><text x="78.1480%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (74 samples, 0.05%)</title><rect x="78.1359%" y="309" width="0.0492%" height="15" fill="rgb(207,6,21)" fg:x="117582" fg:w="74"/><text x="78.3859%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (127 samples, 0.08%)</title><rect x="78.1186%" y="325" width="0.0844%" height="15" fill="rgb(213,127,38)" fg:x="117556" fg:w="127"/><text x="78.3686%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (27 samples, 0.02%)</title><rect x="78.1851%" y="309" width="0.0179%" height="15" fill="rgb(238,118,32)" fg:x="117656" fg:w="27"/><text x="78.4351%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (140 samples, 0.09%)</title><rect x="78.2528%" y="309" width="0.0930%" height="15" fill="rgb(240,139,39)" fg:x="117758" fg:w="140"/><text x="78.5028%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (319 samples, 0.21%)</title><rect x="78.2030%" y="325" width="0.2120%" height="15" fill="rgb(235,10,37)" fg:x="117683" fg:w="319"/><text x="78.4530%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (104 samples, 0.07%)</title><rect x="78.3459%" y="309" width="0.0691%" height="15" fill="rgb(249,171,38)" fg:x="117898" fg:w="104"/><text x="78.5959%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (557 samples, 0.37%)</title><rect x="78.0455%" y="341" width="0.3701%" height="15" fill="rgb(242,144,32)" fg:x="117446" fg:w="557"/><text x="78.2955%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (558 samples, 0.37%)</title><rect x="78.0455%" y="373" width="0.3708%" height="15" fill="rgb(217,117,21)" fg:x="117446" fg:w="558"/><text x="78.2955%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (558 samples, 0.37%)</title><rect x="78.0455%" y="357" width="0.3708%" height="15" fill="rgb(249,87,1)" fg:x="117446" fg:w="558"/><text x="78.2955%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (64 samples, 0.04%)</title><rect x="78.4163%" y="373" width="0.0425%" height="15" fill="rgb(248,196,48)" fg:x="118004" fg:w="64"/><text x="78.6663%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (34 samples, 0.02%)</title><rect x="78.4362%" y="357" width="0.0226%" height="15" fill="rgb(251,206,33)" fg:x="118034" fg:w="34"/><text x="78.6862%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (34 samples, 0.02%)</title><rect x="78.4362%" y="341" width="0.0226%" height="15" fill="rgb(232,141,28)" fg:x="118034" fg:w="34"/><text x="78.6862%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (34 samples, 0.02%)</title><rect x="78.4362%" y="325" width="0.0226%" height="15" fill="rgb(209,167,14)" fg:x="118034" fg:w="34"/><text x="78.6862%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (46 samples, 0.03%)</title><rect x="78.5412%" y="261" width="0.0306%" height="15" fill="rgb(225,11,50)" fg:x="118192" fg:w="46"/><text x="78.7912%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (31 samples, 0.02%)</title><rect x="78.5718%" y="261" width="0.0206%" height="15" fill="rgb(209,50,20)" fg:x="118238" fg:w="31"/><text x="78.8218%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (304 samples, 0.20%)</title><rect x="78.4741%" y="277" width="0.2020%" height="15" fill="rgb(212,17,46)" fg:x="118091" fg:w="304"/><text x="78.7241%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (126 samples, 0.08%)</title><rect x="78.5924%" y="261" width="0.0837%" height="15" fill="rgb(216,101,39)" fg:x="118269" fg:w="126"/><text x="78.8424%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (34 samples, 0.02%)</title><rect x="78.6761%" y="277" width="0.0226%" height="15" fill="rgb(212,228,48)" fg:x="118395" fg:w="34"/><text x="78.9261%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.02%)</title><rect x="78.7884%" y="245" width="0.0159%" height="15" fill="rgb(250,6,50)" fg:x="118564" fg:w="24"/><text x="79.0384%" y="255.50"></text></g><g><title>core::cmp::min (18 samples, 0.01%)</title><rect x="78.8117%" y="245" width="0.0120%" height="15" fill="rgb(250,160,48)" fg:x="118599" fg:w="18"/><text x="79.0617%" y="255.50"></text></g><g><title>core::cmp::Ord::min (18 samples, 0.01%)</title><rect x="78.8117%" y="229" width="0.0120%" height="15" fill="rgb(244,216,33)" fg:x="118599" fg:w="18"/><text x="79.0617%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (18 samples, 0.01%)</title><rect x="78.8117%" y="213" width="0.0120%" height="15" fill="rgb(207,157,5)" fg:x="118599" fg:w="18"/><text x="79.0617%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (295 samples, 0.20%)</title><rect x="78.7160%" y="261" width="0.1960%" height="15" fill="rgb(228,199,8)" fg:x="118455" fg:w="295"/><text x="78.9660%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (133 samples, 0.09%)</title><rect x="78.8237%" y="245" width="0.0884%" height="15" fill="rgb(227,80,20)" fg:x="118617" fg:w="133"/><text x="79.0737%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,345 samples, 0.89%)</title><rect x="78.0242%" y="405" width="0.8938%" height="15" fill="rgb(222,9,33)" fg:x="117414" fg:w="1345"/><text x="78.2742%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,345 samples, 0.89%)</title><rect x="78.0242%" y="389" width="0.8938%" height="15" fill="rgb(239,44,28)" fg:x="117414" fg:w="1345"/><text x="78.2742%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (691 samples, 0.46%)</title><rect x="78.4588%" y="373" width="0.4592%" height="15" fill="rgb(249,187,43)" fg:x="118068" fg:w="691"/><text x="78.7088%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (668 samples, 0.44%)</title><rect x="78.4741%" y="357" width="0.4439%" height="15" fill="rgb(216,141,28)" fg:x="118091" fg:w="668"/><text x="78.7241%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (668 samples, 0.44%)</title><rect x="78.4741%" y="341" width="0.4439%" height="15" fill="rgb(230,154,53)" fg:x="118091" fg:w="668"/><text x="78.7241%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (668 samples, 0.44%)</title><rect x="78.4741%" y="325" width="0.4439%" height="15" fill="rgb(227,82,4)" fg:x="118091" fg:w="668"/><text x="78.7241%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (668 samples, 0.44%)</title><rect x="78.4741%" y="309" width="0.4439%" height="15" fill="rgb(220,107,16)" fg:x="118091" fg:w="668"/><text x="78.7241%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (668 samples, 0.44%)</title><rect x="78.4741%" y="293" width="0.4439%" height="15" fill="rgb(207,187,2)" fg:x="118091" fg:w="668"/><text x="78.7241%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (330 samples, 0.22%)</title><rect x="78.6987%" y="277" width="0.2193%" height="15" fill="rgb(210,162,52)" fg:x="118429" fg:w="330"/><text x="78.9487%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="78.9426%" y="373" width="0.0199%" height="15" fill="rgb(217,216,49)" fg:x="118796" fg:w="30"/><text x="79.1926%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (36 samples, 0.02%)</title><rect x="78.9838%" y="357" width="0.0239%" height="15" fill="rgb(218,146,49)" fg:x="118858" fg:w="36"/><text x="79.2338%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (36 samples, 0.02%)</title><rect x="78.9838%" y="341" width="0.0239%" height="15" fill="rgb(216,55,40)" fg:x="118858" fg:w="36"/><text x="79.2338%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (36 samples, 0.02%)</title><rect x="78.9838%" y="325" width="0.0239%" height="15" fill="rgb(208,196,21)" fg:x="118858" fg:w="36"/><text x="79.2338%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (733 samples, 0.49%)</title><rect x="78.9625%" y="373" width="0.4871%" height="15" fill="rgb(242,117,42)" fg:x="118826" fg:w="733"/><text x="79.2125%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (665 samples, 0.44%)</title><rect x="79.0077%" y="357" width="0.4419%" height="15" fill="rgb(210,11,23)" fg:x="118894" fg:w="665"/><text x="79.2577%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (665 samples, 0.44%)</title><rect x="79.0077%" y="341" width="0.4419%" height="15" fill="rgb(217,110,2)" fg:x="118894" fg:w="665"/><text x="79.2577%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (665 samples, 0.44%)</title><rect x="79.0077%" y="325" width="0.4419%" height="15" fill="rgb(229,77,54)" fg:x="118894" fg:w="665"/><text x="79.2577%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (665 samples, 0.44%)</title><rect x="79.0077%" y="309" width="0.4419%" height="15" fill="rgb(218,53,16)" fg:x="118894" fg:w="665"/><text x="79.2577%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (665 samples, 0.44%)</title><rect x="79.0077%" y="293" width="0.4419%" height="15" fill="rgb(215,38,13)" fg:x="118894" fg:w="665"/><text x="79.2577%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (665 samples, 0.44%)</title><rect x="79.0077%" y="277" width="0.4419%" height="15" fill="rgb(235,42,18)" fg:x="118894" fg:w="665"/><text x="79.2577%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (416 samples, 0.28%)</title><rect x="79.1732%" y="261" width="0.2764%" height="15" fill="rgb(219,66,54)" fg:x="119143" fg:w="416"/><text x="79.4232%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (61 samples, 0.04%)</title><rect x="79.4496%" y="373" width="0.0405%" height="15" fill="rgb(222,205,4)" fg:x="119559" fg:w="61"/><text x="79.6996%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.03%)</title><rect x="79.4902%" y="341" width="0.0259%" height="15" fill="rgb(227,213,46)" fg:x="119620" fg:w="39"/><text x="79.7402%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (42 samples, 0.03%)</title><rect x="79.4902%" y="373" width="0.0279%" height="15" fill="rgb(250,145,42)" fg:x="119620" fg:w="42"/><text x="79.7402%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (42 samples, 0.03%)</title><rect x="79.4902%" y="357" width="0.0279%" height="15" fill="rgb(219,15,2)" fg:x="119620" fg:w="42"/><text x="79.7402%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,367 samples, 1.57%)</title><rect x="77.9545%" y="421" width="1.5729%" height="15" fill="rgb(231,181,52)" fg:x="117309" fg:w="2367"/><text x="78.2045%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (917 samples, 0.61%)</title><rect x="78.9180%" y="405" width="0.6094%" height="15" fill="rgb(235,1,42)" fg:x="118759" fg:w="917"/><text x="79.1680%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (887 samples, 0.59%)</title><rect x="78.9380%" y="389" width="0.5894%" height="15" fill="rgb(249,88,27)" fg:x="118789" fg:w="887"/><text x="79.1880%" y="399.50"></text></g><g><title>worker-6 (8,277 samples, 5.50%)</title><rect x="74.0444%" y="725" width="5.5003%" height="15" fill="rgb(235,145,16)" fg:x="111425" fg:w="8277"/><text x="74.2944%" y="735.50">worker-6</text></g><g><title>__clone3 (6,501 samples, 4.32%)</title><rect x="75.2246%" y="709" width="4.3201%" height="15" fill="rgb(237,114,19)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="719.50">__clo..</text></g><g><title>start_thread (6,501 samples, 4.32%)</title><rect x="75.2246%" y="693" width="4.3201%" height="15" fill="rgb(238,51,50)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="703.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,501 samples, 4.32%)</title><rect x="75.2246%" y="677" width="4.3201%" height="15" fill="rgb(205,194,25)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="687.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,501 samples, 4.32%)</title><rect x="75.2246%" y="661" width="4.3201%" height="15" fill="rgb(215,203,17)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="671.50">core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,501 samples, 4.32%)</title><rect x="75.2246%" y="645" width="4.3201%" height="15" fill="rgb(233,112,49)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="655.50">std::..</text></g><g><title>std::panic::catch_unwind (6,501 samples, 4.32%)</title><rect x="75.2246%" y="629" width="4.3201%" height="15" fill="rgb(241,130,26)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="639.50">std::..</text></g><g><title>std::panicking::try (6,501 samples, 4.32%)</title><rect x="75.2246%" y="613" width="4.3201%" height="15" fill="rgb(252,223,19)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="623.50">std::..</text></g><g><title>std::panicking::try::do_call (6,501 samples, 4.32%)</title><rect x="75.2246%" y="597" width="4.3201%" height="15" fill="rgb(211,95,25)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="607.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,501 samples, 4.32%)</title><rect x="75.2246%" y="581" width="4.3201%" height="15" fill="rgb(251,182,27)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="591.50">&lt;core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,501 samples, 4.32%)</title><rect x="75.2246%" y="565" width="4.3201%" height="15" fill="rgb(238,24,4)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="575.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,501 samples, 4.32%)</title><rect x="75.2246%" y="549" width="4.3201%" height="15" fill="rgb(224,220,25)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="559.50">std::..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (6,501 samples, 4.32%)</title><rect x="75.2246%" y="533" width="4.3201%" height="15" fill="rgb(239,133,26)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="543.50">one_b..</text></g><g><title>one_brc::process_lines (6,501 samples, 4.32%)</title><rect x="75.2246%" y="517" width="4.3201%" height="15" fill="rgb(211,94,48)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="527.50">one_b..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,501 samples, 4.32%)</title><rect x="75.2246%" y="501" width="4.3201%" height="15" fill="rgb(239,87,6)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,501 samples, 4.32%)</title><rect x="75.2246%" y="485" width="4.3201%" height="15" fill="rgb(227,62,0)" fg:x="113201" fg:w="6501"/><text x="75.4746%" y="495.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,978 samples, 3.31%)</title><rect x="76.2367%" y="469" width="3.3080%" height="15" fill="rgb(211,226,4)" fg:x="114724" fg:w="4978"/><text x="76.4867%" y="479.50">cor..</text></g><g><title>one_brc::process_lines::_{{closure}} (4,978 samples, 3.31%)</title><rect x="76.2367%" y="453" width="3.3080%" height="15" fill="rgb(253,38,52)" fg:x="114724" fg:w="4978"/><text x="76.4867%" y="463.50">one..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,418 samples, 1.61%)</title><rect x="77.9379%" y="437" width="1.6068%" height="15" fill="rgb(229,126,40)" fg:x="117284" fg:w="2418"/><text x="78.1879%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (26 samples, 0.02%)</title><rect x="79.5274%" y="421" width="0.0173%" height="15" fill="rgb(229,165,44)" fg:x="119676" fg:w="26"/><text x="79.7774%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (111 samples, 0.07%)</title><rect x="79.6291%" y="677" width="0.0738%" height="15" fill="rgb(247,95,47)" fg:x="119829" fg:w="111"/><text x="79.8791%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (111 samples, 0.07%)</title><rect x="79.6291%" y="661" width="0.0738%" height="15" fill="rgb(216,140,30)" fg:x="119829" fg:w="111"/><text x="79.8791%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (111 samples, 0.07%)</title><rect x="79.6291%" y="645" width="0.0738%" height="15" fill="rgb(246,214,8)" fg:x="119829" fg:w="111"/><text x="79.8791%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (329 samples, 0.22%)</title><rect x="79.5453%" y="693" width="0.2186%" height="15" fill="rgb(227,224,15)" fg:x="119703" fg:w="329"/><text x="79.7953%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (92 samples, 0.06%)</title><rect x="79.7028%" y="677" width="0.0611%" height="15" fill="rgb(233,175,4)" fg:x="119940" fg:w="92"/><text x="79.9528%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (87 samples, 0.06%)</title><rect x="79.7640%" y="693" width="0.0578%" height="15" fill="rgb(221,66,45)" fg:x="120032" fg:w="87"/><text x="80.0140%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (160 samples, 0.11%)</title><rect x="79.8218%" y="693" width="0.1063%" height="15" fill="rgb(221,178,18)" fg:x="120119" fg:w="160"/><text x="80.0718%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (91 samples, 0.06%)</title><rect x="79.8676%" y="677" width="0.0605%" height="15" fill="rgb(213,81,29)" fg:x="120188" fg:w="91"/><text x="80.1176%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (91 samples, 0.06%)</title><rect x="79.8676%" y="661" width="0.0605%" height="15" fill="rgb(220,89,49)" fg:x="120188" fg:w="91"/><text x="80.1176%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (91 samples, 0.06%)</title><rect x="79.8676%" y="645" width="0.0605%" height="15" fill="rgb(227,60,33)" fg:x="120188" fg:w="91"/><text x="80.1176%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (91 samples, 0.06%)</title><rect x="79.8676%" y="629" width="0.0605%" height="15" fill="rgb(205,113,12)" fg:x="120188" fg:w="91"/><text x="80.1176%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (91 samples, 0.06%)</title><rect x="79.8676%" y="613" width="0.0605%" height="15" fill="rgb(211,32,1)" fg:x="120188" fg:w="91"/><text x="80.1176%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (91 samples, 0.06%)</title><rect x="79.8676%" y="597" width="0.0605%" height="15" fill="rgb(246,2,12)" fg:x="120188" fg:w="91"/><text x="80.1176%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (31 samples, 0.02%)</title><rect x="79.9075%" y="581" width="0.0206%" height="15" fill="rgb(243,37,27)" fg:x="120248" fg:w="31"/><text x="80.1575%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (107 samples, 0.07%)</title><rect x="79.9281%" y="693" width="0.0711%" height="15" fill="rgb(248,211,31)" fg:x="120279" fg:w="107"/><text x="80.1781%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (68 samples, 0.05%)</title><rect x="79.9540%" y="677" width="0.0452%" height="15" fill="rgb(242,146,47)" fg:x="120318" fg:w="68"/><text x="80.2040%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (32 samples, 0.02%)</title><rect x="79.9992%" y="693" width="0.0213%" height="15" fill="rgb(206,70,20)" fg:x="120386" fg:w="32"/><text x="80.2492%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (32 samples, 0.02%)</title><rect x="79.9992%" y="677" width="0.0213%" height="15" fill="rgb(215,10,51)" fg:x="120386" fg:w="32"/><text x="80.2492%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (32 samples, 0.02%)</title><rect x="79.9992%" y="661" width="0.0213%" height="15" fill="rgb(243,178,53)" fg:x="120386" fg:w="32"/><text x="80.2492%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (120 samples, 0.08%)</title><rect x="80.0205%" y="693" width="0.0797%" height="15" fill="rgb(233,221,20)" fg:x="120418" fg:w="120"/><text x="80.2705%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (45 samples, 0.03%)</title><rect x="80.1507%" y="677" width="0.0299%" height="15" fill="rgb(218,95,35)" fg:x="120614" fg:w="45"/><text x="80.4007%" y="687.50"></text></g><g><title>[anon] (1,017 samples, 0.68%)</title><rect x="79.5447%" y="709" width="0.6758%" height="15" fill="rgb(229,13,5)" fg:x="119702" fg:w="1017"/><text x="79.7947%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (181 samples, 0.12%)</title><rect x="80.1002%" y="693" width="0.1203%" height="15" fill="rgb(252,164,30)" fg:x="120538" fg:w="181"/><text x="80.3502%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (60 samples, 0.04%)</title><rect x="80.1806%" y="677" width="0.0399%" height="15" fill="rgb(232,68,36)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (60 samples, 0.04%)</title><rect x="80.1806%" y="661" width="0.0399%" height="15" fill="rgb(219,59,54)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (60 samples, 0.04%)</title><rect x="80.1806%" y="645" width="0.0399%" height="15" fill="rgb(250,92,33)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (60 samples, 0.04%)</title><rect x="80.1806%" y="629" width="0.0399%" height="15" fill="rgb(229,162,54)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (60 samples, 0.04%)</title><rect x="80.1806%" y="613" width="0.0399%" height="15" fill="rgb(244,114,52)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (60 samples, 0.04%)</title><rect x="80.1806%" y="597" width="0.0399%" height="15" fill="rgb(212,211,43)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (60 samples, 0.04%)</title><rect x="80.1806%" y="581" width="0.0399%" height="15" fill="rgb(226,147,8)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (60 samples, 0.04%)</title><rect x="80.1806%" y="565" width="0.0399%" height="15" fill="rgb(226,23,13)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (60 samples, 0.04%)</title><rect x="80.1806%" y="549" width="0.0399%" height="15" fill="rgb(240,63,4)" fg:x="120659" fg:w="60"/><text x="80.4306%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (151 samples, 0.10%)</title><rect x="80.2205%" y="693" width="0.1003%" height="15" fill="rgb(221,1,32)" fg:x="120719" fg:w="151"/><text x="80.4705%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (203 samples, 0.13%)</title><rect x="80.3208%" y="693" width="0.1349%" height="15" fill="rgb(242,117,10)" fg:x="120870" fg:w="203"/><text x="80.5708%" y="703.50"></text></g><g><title>__round (46 samples, 0.03%)</title><rect x="80.4557%" y="693" width="0.0306%" height="15" fill="rgb(249,172,44)" fg:x="121073" fg:w="46"/><text x="80.7057%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (130 samples, 0.09%)</title><rect x="80.4863%" y="693" width="0.0864%" height="15" fill="rgb(244,46,45)" fg:x="121119" fg:w="130"/><text x="80.7363%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (151 samples, 0.10%)</title><rect x="80.5727%" y="693" width="0.1003%" height="15" fill="rgb(206,43,17)" fg:x="121249" fg:w="151"/><text x="80.8227%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (46 samples, 0.03%)</title><rect x="80.6425%" y="677" width="0.0306%" height="15" fill="rgb(239,218,39)" fg:x="121354" fg:w="46"/><text x="80.8925%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (46 samples, 0.03%)</title><rect x="80.6425%" y="661" width="0.0306%" height="15" fill="rgb(208,169,54)" fg:x="121354" fg:w="46"/><text x="80.8925%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (127 samples, 0.08%)</title><rect x="80.6730%" y="693" width="0.0844%" height="15" fill="rgb(247,25,42)" fg:x="121400" fg:w="127"/><text x="80.9230%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.05%)</title><rect x="80.7574%" y="645" width="0.0518%" height="15" fill="rgb(226,23,31)" fg:x="121527" fg:w="78"/><text x="81.0074%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.05%)</title><rect x="80.7574%" y="629" width="0.0518%" height="15" fill="rgb(247,16,28)" fg:x="121527" fg:w="78"/><text x="81.0074%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.05%)</title><rect x="80.7574%" y="613" width="0.0518%" height="15" fill="rgb(231,147,38)" fg:x="121527" fg:w="78"/><text x="81.0074%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (78 samples, 0.05%)</title><rect x="80.7574%" y="597" width="0.0518%" height="15" fill="rgb(253,81,48)" fg:x="121527" fg:w="78"/><text x="81.0074%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (71 samples, 0.05%)</title><rect x="80.8093%" y="613" width="0.0472%" height="15" fill="rgb(249,222,43)" fg:x="121605" fg:w="71"/><text x="81.0593%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (66 samples, 0.04%)</title><rect x="80.8564%" y="613" width="0.0439%" height="15" fill="rgb(221,3,27)" fg:x="121676" fg:w="66"/><text x="81.1064%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (66 samples, 0.04%)</title><rect x="80.9003%" y="613" width="0.0439%" height="15" fill="rgb(228,180,5)" fg:x="121742" fg:w="66"/><text x="81.1503%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (66 samples, 0.04%)</title><rect x="80.9003%" y="597" width="0.0439%" height="15" fill="rgb(227,131,42)" fg:x="121742" fg:w="66"/><text x="81.1503%" y="607.50"></text></g><g><title>[unknown] (1,124 samples, 0.75%)</title><rect x="80.2205%" y="709" width="0.7469%" height="15" fill="rgb(212,3,39)" fg:x="120719" fg:w="1124"/><text x="80.4705%" y="719.50"></text></g><g><title>one_brc::process_lines (316 samples, 0.21%)</title><rect x="80.7574%" y="693" width="0.2100%" height="15" fill="rgb(226,45,5)" fg:x="121527" fg:w="316"/><text x="81.0074%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (316 samples, 0.21%)</title><rect x="80.7574%" y="677" width="0.2100%" height="15" fill="rgb(215,167,45)" fg:x="121527" fg:w="316"/><text x="81.0074%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (316 samples, 0.21%)</title><rect x="80.7574%" y="661" width="0.2100%" height="15" fill="rgb(250,218,53)" fg:x="121527" fg:w="316"/><text x="81.0074%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (238 samples, 0.16%)</title><rect x="80.8093%" y="645" width="0.1582%" height="15" fill="rgb(207,140,0)" fg:x="121605" fg:w="238"/><text x="81.0593%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (238 samples, 0.16%)</title><rect x="80.8093%" y="629" width="0.1582%" height="15" fill="rgb(238,133,51)" fg:x="121605" fg:w="238"/><text x="81.0593%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (35 samples, 0.02%)</title><rect x="80.9442%" y="613" width="0.0233%" height="15" fill="rgb(218,203,53)" fg:x="121808" fg:w="35"/><text x="81.1942%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (40 samples, 0.03%)</title><rect x="81.2000%" y="389" width="0.0266%" height="15" fill="rgb(226,184,25)" fg:x="122193" fg:w="40"/><text x="81.4500%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (40 samples, 0.03%)</title><rect x="81.2000%" y="373" width="0.0266%" height="15" fill="rgb(231,121,21)" fg:x="122193" fg:w="40"/><text x="81.4500%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (40 samples, 0.03%)</title><rect x="81.2000%" y="357" width="0.0266%" height="15" fill="rgb(251,14,34)" fg:x="122193" fg:w="40"/><text x="81.4500%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (221 samples, 0.15%)</title><rect x="81.2266%" y="389" width="0.1469%" height="15" fill="rgb(249,193,11)" fg:x="122233" fg:w="221"/><text x="81.4766%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (221 samples, 0.15%)</title><rect x="81.2266%" y="373" width="0.1469%" height="15" fill="rgb(220,172,37)" fg:x="122233" fg:w="221"/><text x="81.4766%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (221 samples, 0.15%)</title><rect x="81.2266%" y="357" width="0.1469%" height="15" fill="rgb(231,229,43)" fg:x="122233" fg:w="221"/><text x="81.4766%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (215 samples, 0.14%)</title><rect x="81.2306%" y="341" width="0.1429%" height="15" fill="rgb(250,161,5)" fg:x="122239" fg:w="215"/><text x="81.4806%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (112 samples, 0.07%)</title><rect x="81.3734%" y="389" width="0.0744%" height="15" fill="rgb(218,225,18)" fg:x="122454" fg:w="112"/><text x="81.6234%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (112 samples, 0.07%)</title><rect x="81.3734%" y="373" width="0.0744%" height="15" fill="rgb(245,45,42)" fg:x="122454" fg:w="112"/><text x="81.6234%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (44 samples, 0.03%)</title><rect x="81.5735%" y="357" width="0.0292%" height="15" fill="rgb(211,115,1)" fg:x="122755" fg:w="44"/><text x="81.8235%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (35 samples, 0.02%)</title><rect x="81.6027%" y="357" width="0.0233%" height="15" fill="rgb(248,133,52)" fg:x="122799" fg:w="35"/><text x="81.8527%" y="367.50"></text></g><g><title>core::ptr::align_offset (35 samples, 0.02%)</title><rect x="81.6027%" y="341" width="0.0233%" height="15" fill="rgb(238,100,21)" fg:x="122799" fg:w="35"/><text x="81.8527%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (74 samples, 0.05%)</title><rect x="81.6260%" y="357" width="0.0492%" height="15" fill="rgb(247,144,11)" fg:x="122834" fg:w="74"/><text x="81.8760%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,694 samples, 1.13%)</title><rect x="81.0332%" y="405" width="1.1257%" height="15" fill="rgb(206,164,16)" fg:x="121942" fg:w="1694"/><text x="81.2832%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (1,070 samples, 0.71%)</title><rect x="81.4479%" y="389" width="0.7110%" height="15" fill="rgb(222,34,3)" fg:x="122566" fg:w="1070"/><text x="81.6979%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,040 samples, 0.69%)</title><rect x="81.4678%" y="373" width="0.6911%" height="15" fill="rgb(248,82,4)" fg:x="122596" fg:w="1040"/><text x="81.7178%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (728 samples, 0.48%)</title><rect x="81.6751%" y="357" width="0.4838%" height="15" fill="rgb(228,81,46)" fg:x="122908" fg:w="728"/><text x="81.9251%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,835 samples, 1.22%)</title><rect x="80.9694%" y="437" width="1.2194%" height="15" fill="rgb(227,67,47)" fg:x="121846" fg:w="1835"/><text x="81.2194%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,835 samples, 1.22%)</title><rect x="80.9694%" y="421" width="1.2194%" height="15" fill="rgb(215,93,53)" fg:x="121846" fg:w="1835"/><text x="81.2194%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (44 samples, 0.03%)</title><rect x="82.1596%" y="405" width="0.0292%" height="15" fill="rgb(248,194,39)" fg:x="123637" fg:w="44"/><text x="82.4096%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (44 samples, 0.03%)</title><rect x="82.1596%" y="389" width="0.0292%" height="15" fill="rgb(215,5,19)" fg:x="123637" fg:w="44"/><text x="82.4096%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,999 samples, 1.33%)</title><rect x="80.9694%" y="469" width="1.3284%" height="15" fill="rgb(226,215,51)" fg:x="121846" fg:w="1999"/><text x="81.2194%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,999 samples, 1.33%)</title><rect x="80.9694%" y="453" width="1.3284%" height="15" fill="rgb(225,56,26)" fg:x="121846" fg:w="1999"/><text x="81.2194%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (164 samples, 0.11%)</title><rect x="82.1888%" y="437" width="0.1090%" height="15" fill="rgb(222,75,29)" fg:x="123681" fg:w="164"/><text x="82.4388%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (164 samples, 0.11%)</title><rect x="82.1888%" y="421" width="0.1090%" height="15" fill="rgb(236,139,6)" fg:x="123681" fg:w="164"/><text x="82.4388%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (164 samples, 0.11%)</title><rect x="82.1888%" y="405" width="0.1090%" height="15" fill="rgb(223,137,36)" fg:x="123681" fg:w="164"/><text x="82.4388%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (164 samples, 0.11%)</title><rect x="82.1888%" y="389" width="0.1090%" height="15" fill="rgb(226,99,2)" fg:x="123681" fg:w="164"/><text x="82.4388%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (72 samples, 0.05%)</title><rect x="82.2499%" y="373" width="0.0478%" height="15" fill="rgb(206,133,23)" fg:x="123773" fg:w="72"/><text x="82.4999%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (72 samples, 0.05%)</title><rect x="82.2499%" y="357" width="0.0478%" height="15" fill="rgb(243,173,15)" fg:x="123773" fg:w="72"/><text x="82.4999%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (72 samples, 0.05%)</title><rect x="82.2499%" y="341" width="0.0478%" height="15" fill="rgb(228,69,28)" fg:x="123773" fg:w="72"/><text x="82.4999%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (72 samples, 0.05%)</title><rect x="82.2499%" y="325" width="0.0478%" height="15" fill="rgb(212,51,22)" fg:x="123773" fg:w="72"/><text x="82.4999%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (72 samples, 0.05%)</title><rect x="82.2499%" y="309" width="0.0478%" height="15" fill="rgb(227,113,0)" fg:x="123773" fg:w="72"/><text x="82.4999%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (21 samples, 0.01%)</title><rect x="82.2838%" y="293" width="0.0140%" height="15" fill="rgb(252,84,27)" fg:x="123824" fg:w="21"/><text x="82.5338%" y="303.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (21 samples, 0.01%)</title><rect x="82.2838%" y="277" width="0.0140%" height="15" fill="rgb(223,145,39)" fg:x="123824" fg:w="21"/><text x="82.5338%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (21 samples, 0.01%)</title><rect x="82.2838%" y="261" width="0.0140%" height="15" fill="rgb(239,219,30)" fg:x="123824" fg:w="21"/><text x="82.5338%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (34 samples, 0.02%)</title><rect x="82.3117%" y="437" width="0.0226%" height="15" fill="rgb(224,196,39)" fg:x="123866" fg:w="34"/><text x="82.5617%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (40 samples, 0.03%)</title><rect x="82.3343%" y="405" width="0.0266%" height="15" fill="rgb(205,35,43)" fg:x="123900" fg:w="40"/><text x="82.5843%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (92 samples, 0.06%)</title><rect x="82.4779%" y="373" width="0.0611%" height="15" fill="rgb(228,201,21)" fg:x="124116" fg:w="92"/><text x="82.7279%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (154 samples, 0.10%)</title><rect x="82.5397%" y="373" width="0.1023%" height="15" fill="rgb(237,118,16)" fg:x="124209" fg:w="154"/><text x="82.7897%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (38 samples, 0.03%)</title><rect x="82.6420%" y="373" width="0.0253%" height="15" fill="rgb(241,17,19)" fg:x="124363" fg:w="38"/><text x="82.8920%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (360 samples, 0.24%)</title><rect x="82.4294%" y="389" width="0.2392%" height="15" fill="rgb(214,10,25)" fg:x="124043" fg:w="360"/><text x="82.6794%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (146 samples, 0.10%)</title><rect x="82.7171%" y="373" width="0.0970%" height="15" fill="rgb(238,37,29)" fg:x="124476" fg:w="146"/><text x="82.9671%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (35 samples, 0.02%)</title><rect x="83.1431%" y="325" width="0.0233%" height="15" fill="rgb(253,83,25)" fg:x="125117" fg:w="35"/><text x="83.3931%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30 samples, 0.02%)</title><rect x="83.1663%" y="309" width="0.0199%" height="15" fill="rgb(234,192,12)" fg:x="125152" fg:w="30"/><text x="83.4163%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (369 samples, 0.25%)</title><rect x="82.9590%" y="341" width="0.2452%" height="15" fill="rgb(241,216,45)" fg:x="124840" fg:w="369"/><text x="83.2090%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (57 samples, 0.04%)</title><rect x="83.1663%" y="325" width="0.0379%" height="15" fill="rgb(242,22,33)" fg:x="125152" fg:w="57"/><text x="83.4163%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (27 samples, 0.02%)</title><rect x="83.1863%" y="309" width="0.0179%" height="15" fill="rgb(231,105,49)" fg:x="125182" fg:w="27"/><text x="83.4363%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (810 samples, 0.54%)</title><rect x="82.6686%" y="389" width="0.5383%" height="15" fill="rgb(218,204,15)" fg:x="124403" fg:w="810"/><text x="82.9186%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (591 samples, 0.39%)</title><rect x="82.8141%" y="373" width="0.3927%" height="15" fill="rgb(235,138,41)" fg:x="124622" fg:w="591"/><text x="83.0641%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (469 samples, 0.31%)</title><rect x="82.8952%" y="357" width="0.3117%" height="15" fill="rgb(246,0,9)" fg:x="124744" fg:w="469"/><text x="83.1452%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,314 samples, 0.87%)</title><rect x="82.3343%" y="437" width="0.8732%" height="15" fill="rgb(210,74,4)" fg:x="123900" fg:w="1314"/><text x="82.5843%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,314 samples, 0.87%)</title><rect x="82.3343%" y="421" width="0.8732%" height="15" fill="rgb(250,60,41)" fg:x="123900" fg:w="1314"/><text x="82.5843%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,274 samples, 0.85%)</title><rect x="82.3609%" y="405" width="0.8466%" height="15" fill="rgb(220,115,12)" fg:x="123940" fg:w="1274"/><text x="82.6109%" y="415.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (67 samples, 0.04%)</title><rect x="83.2361%" y="421" width="0.0445%" height="15" fill="rgb(237,100,13)" fg:x="125257" fg:w="67"/><text x="83.4861%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (41 samples, 0.03%)</title><rect x="83.4713%" y="405" width="0.0272%" height="15" fill="rgb(213,55,26)" fg:x="125611" fg:w="41"/><text x="83.7213%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.03%)</title><rect x="83.4713%" y="389" width="0.0272%" height="15" fill="rgb(216,17,4)" fg:x="125611" fg:w="41"/><text x="83.7213%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.03%)</title><rect x="83.4713%" y="373" width="0.0272%" height="15" fill="rgb(220,153,47)" fg:x="125611" fg:w="41"/><text x="83.7213%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (290 samples, 0.19%)</title><rect x="83.4986%" y="405" width="0.1927%" height="15" fill="rgb(215,131,9)" fg:x="125652" fg:w="290"/><text x="83.7486%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (290 samples, 0.19%)</title><rect x="83.4986%" y="389" width="0.1927%" height="15" fill="rgb(233,46,42)" fg:x="125652" fg:w="290"/><text x="83.7486%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (290 samples, 0.19%)</title><rect x="83.4986%" y="373" width="0.1927%" height="15" fill="rgb(226,86,7)" fg:x="125652" fg:w="290"/><text x="83.7486%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (256 samples, 0.17%)</title><rect x="83.5212%" y="357" width="0.1701%" height="15" fill="rgb(239,226,21)" fg:x="125686" fg:w="256"/><text x="83.7712%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (80 samples, 0.05%)</title><rect x="83.6913%" y="405" width="0.0532%" height="15" fill="rgb(244,137,22)" fg:x="125942" fg:w="80"/><text x="83.9413%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (80 samples, 0.05%)</title><rect x="83.6913%" y="389" width="0.0532%" height="15" fill="rgb(211,139,35)" fg:x="125942" fg:w="80"/><text x="83.9413%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (194 samples, 0.13%)</title><rect x="83.7504%" y="389" width="0.1289%" height="15" fill="rgb(214,62,50)" fg:x="126031" fg:w="194"/><text x="84.0004%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (152 samples, 0.10%)</title><rect x="83.7783%" y="373" width="0.1010%" height="15" fill="rgb(212,113,44)" fg:x="126073" fg:w="152"/><text x="84.0283%" y="383.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,289 samples, 0.86%)</title><rect x="83.2866%" y="421" width="0.8566%" height="15" fill="rgb(226,150,43)" fg:x="125333" fg:w="1289"/><text x="83.5366%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (600 samples, 0.40%)</title><rect x="83.7445%" y="405" width="0.3987%" height="15" fill="rgb(250,71,37)" fg:x="126022" fg:w="600"/><text x="83.9945%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (397 samples, 0.26%)</title><rect x="83.8793%" y="389" width="0.2638%" height="15" fill="rgb(219,76,19)" fg:x="126225" fg:w="397"/><text x="84.1293%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,410 samples, 0.94%)</title><rect x="83.2075%" y="437" width="0.9370%" height="15" fill="rgb(250,39,11)" fg:x="125214" fg:w="1410"/><text x="83.4575%" y="447.50"></text></g><g><title>one_brc::round_towards_positive (248 samples, 0.16%)</title><rect x="84.1445%" y="437" width="0.1648%" height="15" fill="rgb(230,64,31)" fg:x="126624" fg:w="248"/><text x="84.3945%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (162 samples, 0.11%)</title><rect x="84.2016%" y="421" width="0.1077%" height="15" fill="rgb(208,222,23)" fg:x="126710" fg:w="162"/><text x="84.4516%" y="431.50"></text></g><g><title>__round (162 samples, 0.11%)</title><rect x="84.2016%" y="405" width="0.1077%" height="15" fill="rgb(227,125,18)" fg:x="126710" fg:w="162"/><text x="84.4516%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (47 samples, 0.03%)</title><rect x="84.4090%" y="389" width="0.0312%" height="15" fill="rgb(234,210,9)" fg:x="127022" fg:w="47"/><text x="84.6590%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (250 samples, 0.17%)</title><rect x="84.3093%" y="437" width="0.1661%" height="15" fill="rgb(217,127,24)" fg:x="126872" fg:w="250"/><text x="84.5593%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (250 samples, 0.17%)</title><rect x="84.3093%" y="421" width="0.1661%" height="15" fill="rgb(239,141,48)" fg:x="126872" fg:w="250"/><text x="84.5593%" y="431.50"></text></g><g><title>one_brc::Measurement::record (250 samples, 0.17%)</title><rect x="84.3093%" y="405" width="0.1661%" height="15" fill="rgb(227,109,8)" fg:x="126872" fg:w="250"/><text x="84.5593%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (53 samples, 0.04%)</title><rect x="84.4402%" y="389" width="0.0352%" height="15" fill="rgb(235,184,23)" fg:x="127069" fg:w="53"/><text x="84.6902%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (64 samples, 0.04%)</title><rect x="84.6954%" y="309" width="0.0425%" height="15" fill="rgb(227,226,48)" fg:x="127453" fg:w="64"/><text x="84.9454%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (145 samples, 0.10%)</title><rect x="84.6622%" y="325" width="0.0964%" height="15" fill="rgb(206,150,11)" fg:x="127403" fg:w="145"/><text x="84.9122%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (31 samples, 0.02%)</title><rect x="84.7379%" y="309" width="0.0206%" height="15" fill="rgb(254,2,33)" fg:x="127517" fg:w="31"/><text x="84.9879%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (162 samples, 0.11%)</title><rect x="84.8110%" y="309" width="0.1077%" height="15" fill="rgb(243,160,20)" fg:x="127627" fg:w="162"/><text x="85.0610%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (601 samples, 0.40%)</title><rect x="84.6004%" y="341" width="0.3994%" height="15" fill="rgb(218,208,30)" fg:x="127310" fg:w="601"/><text x="84.8504%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (363 samples, 0.24%)</title><rect x="84.7585%" y="325" width="0.2412%" height="15" fill="rgb(224,120,49)" fg:x="127548" fg:w="363"/><text x="85.0085%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (122 samples, 0.08%)</title><rect x="84.9187%" y="309" width="0.0811%" height="15" fill="rgb(246,12,2)" fg:x="127789" fg:w="122"/><text x="85.1687%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (603 samples, 0.40%)</title><rect x="84.6004%" y="373" width="0.4007%" height="15" fill="rgb(236,117,3)" fg:x="127310" fg:w="603"/><text x="84.8504%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (603 samples, 0.40%)</title><rect x="84.6004%" y="357" width="0.4007%" height="15" fill="rgb(216,128,52)" fg:x="127310" fg:w="603"/><text x="84.8504%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (68 samples, 0.05%)</title><rect x="85.0011%" y="373" width="0.0452%" height="15" fill="rgb(246,145,19)" fg:x="127913" fg:w="68"/><text x="85.2511%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (32 samples, 0.02%)</title><rect x="85.0250%" y="357" width="0.0213%" height="15" fill="rgb(222,11,46)" fg:x="127949" fg:w="32"/><text x="85.2750%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (32 samples, 0.02%)</title><rect x="85.0250%" y="341" width="0.0213%" height="15" fill="rgb(245,82,36)" fg:x="127949" fg:w="32"/><text x="85.2750%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (32 samples, 0.02%)</title><rect x="85.0250%" y="325" width="0.0213%" height="15" fill="rgb(250,73,51)" fg:x="127949" fg:w="32"/><text x="85.2750%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21 samples, 0.01%)</title><rect x="85.1712%" y="245" width="0.0140%" height="15" fill="rgb(221,189,23)" fg:x="128169" fg:w="21"/><text x="85.4212%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (64 samples, 0.04%)</title><rect x="85.1579%" y="261" width="0.0425%" height="15" fill="rgb(210,33,7)" fg:x="128149" fg:w="64"/><text x="85.4079%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (23 samples, 0.02%)</title><rect x="85.1851%" y="245" width="0.0153%" height="15" fill="rgb(210,107,22)" fg:x="128190" fg:w="23"/><text x="85.4351%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (37 samples, 0.02%)</title><rect x="85.2011%" y="261" width="0.0246%" height="15" fill="rgb(222,116,37)" fg:x="128214" fg:w="37"/><text x="85.4511%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (170 samples, 0.11%)</title><rect x="85.2257%" y="261" width="0.1130%" height="15" fill="rgb(254,17,48)" fg:x="128251" fg:w="170"/><text x="85.4757%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (404 samples, 0.27%)</title><rect x="85.0715%" y="277" width="0.2685%" height="15" fill="rgb(224,36,32)" fg:x="128019" fg:w="404"/><text x="85.3215%" y="287.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (47 samples, 0.03%)</title><rect x="85.3400%" y="277" width="0.0312%" height="15" fill="rgb(232,90,46)" fg:x="128423" fg:w="47"/><text x="85.5900%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (33 samples, 0.02%)</title><rect x="85.4762%" y="245" width="0.0219%" height="15" fill="rgb(241,66,40)" fg:x="128628" fg:w="33"/><text x="85.7262%" y="255.50"></text></g><g><title>core::cmp::min (31 samples, 0.02%)</title><rect x="85.5014%" y="245" width="0.0206%" height="15" fill="rgb(249,184,29)" fg:x="128666" fg:w="31"/><text x="85.7514%" y="255.50"></text></g><g><title>core::cmp::Ord::min (31 samples, 0.02%)</title><rect x="85.5014%" y="229" width="0.0206%" height="15" fill="rgb(231,181,1)" fg:x="128666" fg:w="31"/><text x="85.7514%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (31 samples, 0.02%)</title><rect x="85.5014%" y="213" width="0.0206%" height="15" fill="rgb(224,94,2)" fg:x="128666" fg:w="31"/><text x="85.7514%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (390 samples, 0.26%)</title><rect x="85.3891%" y="261" width="0.2592%" height="15" fill="rgb(229,170,15)" fg:x="128497" fg:w="390"/><text x="85.6391%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (190 samples, 0.13%)</title><rect x="85.5220%" y="245" width="0.1263%" height="15" fill="rgb(240,127,35)" fg:x="128697" fg:w="190"/><text x="85.7720%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,623 samples, 1.08%)</title><rect x="84.5784%" y="405" width="1.0785%" height="15" fill="rgb(248,196,34)" fg:x="127277" fg:w="1623"/><text x="84.8284%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,622 samples, 1.08%)</title><rect x="84.5791%" y="389" width="1.0779%" height="15" fill="rgb(236,137,7)" fg:x="127278" fg:w="1622"/><text x="84.8291%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (919 samples, 0.61%)</title><rect x="85.0463%" y="373" width="0.6107%" height="15" fill="rgb(235,127,16)" fg:x="127981" fg:w="919"/><text x="85.2963%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (882 samples, 0.59%)</title><rect x="85.0708%" y="357" width="0.5861%" height="15" fill="rgb(250,192,54)" fg:x="128018" fg:w="882"/><text x="85.3208%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (882 samples, 0.59%)</title><rect x="85.0708%" y="341" width="0.5861%" height="15" fill="rgb(218,98,20)" fg:x="128018" fg:w="882"/><text x="85.3208%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (882 samples, 0.59%)</title><rect x="85.0708%" y="325" width="0.5861%" height="15" fill="rgb(230,176,47)" fg:x="128018" fg:w="882"/><text x="85.3208%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (882 samples, 0.59%)</title><rect x="85.0708%" y="309" width="0.5861%" height="15" fill="rgb(244,2,33)" fg:x="128018" fg:w="882"/><text x="85.3208%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (882 samples, 0.59%)</title><rect x="85.0708%" y="293" width="0.5861%" height="15" fill="rgb(231,100,17)" fg:x="128018" fg:w="882"/><text x="85.3208%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (430 samples, 0.29%)</title><rect x="85.3712%" y="277" width="0.2857%" height="15" fill="rgb(245,23,12)" fg:x="128470" fg:w="430"/><text x="85.6212%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.02%)</title><rect x="85.6955%" y="373" width="0.0246%" height="15" fill="rgb(249,55,22)" fg:x="128958" fg:w="37"/><text x="85.9455%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (60 samples, 0.04%)</title><rect x="85.7526%" y="357" width="0.0399%" height="15" fill="rgb(207,134,9)" fg:x="129044" fg:w="60"/><text x="86.0026%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (60 samples, 0.04%)</title><rect x="85.7526%" y="341" width="0.0399%" height="15" fill="rgb(218,134,0)" fg:x="129044" fg:w="60"/><text x="86.0026%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (60 samples, 0.04%)</title><rect x="85.7526%" y="325" width="0.0399%" height="15" fill="rgb(213,212,33)" fg:x="129044" fg:w="60"/><text x="86.0026%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (29 samples, 0.02%)</title><rect x="85.7732%" y="309" width="0.0193%" height="15" fill="rgb(252,106,18)" fg:x="129075" fg:w="29"/><text x="86.0232%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,263 samples, 0.84%)</title><rect x="85.7201%" y="373" width="0.8393%" height="15" fill="rgb(208,126,42)" fg:x="128995" fg:w="1263"/><text x="85.9701%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1,154 samples, 0.77%)</title><rect x="85.7925%" y="357" width="0.7669%" height="15" fill="rgb(246,175,29)" fg:x="129104" fg:w="1154"/><text x="86.0425%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,154 samples, 0.77%)</title><rect x="85.7925%" y="341" width="0.7669%" height="15" fill="rgb(215,13,50)" fg:x="129104" fg:w="1154"/><text x="86.0425%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,154 samples, 0.77%)</title><rect x="85.7925%" y="325" width="0.7669%" height="15" fill="rgb(216,172,15)" fg:x="129104" fg:w="1154"/><text x="86.0425%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,154 samples, 0.77%)</title><rect x="85.7925%" y="309" width="0.7669%" height="15" fill="rgb(212,103,13)" fg:x="129104" fg:w="1154"/><text x="86.0425%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,154 samples, 0.77%)</title><rect x="85.7925%" y="293" width="0.7669%" height="15" fill="rgb(231,171,36)" fg:x="129104" fg:w="1154"/><text x="86.0425%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,154 samples, 0.77%)</title><rect x="85.7925%" y="277" width="0.7669%" height="15" fill="rgb(250,123,20)" fg:x="129104" fg:w="1154"/><text x="86.0425%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (662 samples, 0.44%)</title><rect x="86.1195%" y="261" width="0.4399%" height="15" fill="rgb(212,53,50)" fg:x="129596" fg:w="662"/><text x="86.3695%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (91 samples, 0.06%)</title><rect x="86.5594%" y="373" width="0.0605%" height="15" fill="rgb(243,54,12)" fg:x="130258" fg:w="91"/><text x="86.8094%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (261 samples, 0.17%)</title><rect x="86.6198%" y="341" width="0.1734%" height="15" fill="rgb(234,101,34)" fg:x="130349" fg:w="261"/><text x="86.8698%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (284 samples, 0.19%)</title><rect x="86.6198%" y="373" width="0.1887%" height="15" fill="rgb(254,67,22)" fg:x="130349" fg:w="284"/><text x="86.8698%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (284 samples, 0.19%)</title><rect x="86.6198%" y="357" width="0.1887%" height="15" fill="rgb(250,35,47)" fg:x="130349" fg:w="284"/><text x="86.8698%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (23 samples, 0.02%)</title><rect x="86.7933%" y="341" width="0.0153%" height="15" fill="rgb(226,126,38)" fg:x="130610" fg:w="23"/><text x="87.0433%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (27 samples, 0.02%)</title><rect x="86.8086%" y="373" width="0.0179%" height="15" fill="rgb(216,138,53)" fg:x="130633" fg:w="27"/><text x="87.0586%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (27 samples, 0.02%)</title><rect x="86.8086%" y="357" width="0.0179%" height="15" fill="rgb(246,199,43)" fg:x="130633" fg:w="27"/><text x="87.0586%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3,515 samples, 2.34%)</title><rect x="84.4940%" y="421" width="2.3358%" height="15" fill="rgb(232,125,11)" fg:x="127150" fg:w="3515"/><text x="84.7440%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,765 samples, 1.17%)</title><rect x="85.6569%" y="405" width="1.1729%" height="15" fill="rgb(218,219,45)" fg:x="128900" fg:w="1765"/><text x="85.9069%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,734 samples, 1.15%)</title><rect x="85.6775%" y="389" width="1.1523%" height="15" fill="rgb(216,102,54)" fg:x="128931" fg:w="1734"/><text x="85.9275%" y="399.50"></text></g><g><title>worker-7 (11,005 samples, 7.31%)</title><rect x="79.5447%" y="725" width="7.3131%" height="15" fill="rgb(250,228,7)" fg:x="119702" fg:w="11005"/><text x="79.7947%" y="735.50">worker-7</text></g><g><title>__clone3 (8,864 samples, 5.89%)</title><rect x="80.9674%" y="709" width="5.8903%" height="15" fill="rgb(226,125,25)" fg:x="121843" fg:w="8864"/><text x="81.2174%" y="719.50">__clone3</text></g><g><title>start_thread (8,864 samples, 5.89%)</title><rect x="80.9674%" y="693" width="5.8903%" height="15" fill="rgb(224,165,27)" fg:x="121843" fg:w="8864"/><text x="81.2174%" y="703.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8,863 samples, 5.89%)</title><rect x="80.9681%" y="677" width="5.8897%" height="15" fill="rgb(233,86,3)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="687.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8,863 samples, 5.89%)</title><rect x="80.9681%" y="661" width="5.8897%" height="15" fill="rgb(228,116,20)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="671.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (8,863 samples, 5.89%)</title><rect x="80.9681%" y="645" width="5.8897%" height="15" fill="rgb(209,192,17)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="655.50">std::th..</text></g><g><title>std::panic::catch_unwind (8,863 samples, 5.89%)</title><rect x="80.9681%" y="629" width="5.8897%" height="15" fill="rgb(224,88,34)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="639.50">std::pa..</text></g><g><title>std::panicking::try (8,863 samples, 5.89%)</title><rect x="80.9681%" y="613" width="5.8897%" height="15" fill="rgb(233,38,6)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="623.50">std::pa..</text></g><g><title>std::panicking::try::do_call (8,863 samples, 5.89%)</title><rect x="80.9681%" y="597" width="5.8897%" height="15" fill="rgb(212,59,30)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="607.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,863 samples, 5.89%)</title><rect x="80.9681%" y="581" width="5.8897%" height="15" fill="rgb(213,80,3)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="591.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (8,863 samples, 5.89%)</title><rect x="80.9681%" y="565" width="5.8897%" height="15" fill="rgb(251,178,7)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="575.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,863 samples, 5.89%)</title><rect x="80.9681%" y="549" width="5.8897%" height="15" fill="rgb(213,154,26)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="559.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (8,863 samples, 5.89%)</title><rect x="80.9681%" y="533" width="5.8897%" height="15" fill="rgb(238,165,49)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="543.50">one_brc..</text></g><g><title>one_brc::process_lines (8,863 samples, 5.89%)</title><rect x="80.9681%" y="517" width="5.8897%" height="15" fill="rgb(248,91,46)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="527.50">one_brc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,863 samples, 5.89%)</title><rect x="80.9681%" y="501" width="5.8897%" height="15" fill="rgb(244,21,52)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="511.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,863 samples, 5.89%)</title><rect x="80.9681%" y="485" width="5.8897%" height="15" fill="rgb(247,122,20)" fg:x="121844" fg:w="8863"/><text x="81.2181%" y="495.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6,862 samples, 4.56%)</title><rect x="82.2978%" y="469" width="4.5600%" height="15" fill="rgb(218,27,9)" fg:x="123845" fg:w="6862"/><text x="82.5478%" y="479.50">core:..</text></g><g><title>one_brc::process_lines::_{{closure}} (6,862 samples, 4.56%)</title><rect x="82.2978%" y="453" width="4.5600%" height="15" fill="rgb(246,7,6)" fg:x="123845" fg:w="6862"/><text x="82.5478%" y="463.50">one_b..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3,585 samples, 2.38%)</title><rect x="84.4754%" y="437" width="2.3823%" height="15" fill="rgb(227,135,54)" fg:x="127122" fg:w="3585"/><text x="84.7254%" y="447.50">st..</text></g><g><title>std::collections::hash::map::map_entry (42 samples, 0.03%)</title><rect x="86.8298%" y="421" width="0.0279%" height="15" fill="rgb(247,14,11)" fg:x="130665" fg:w="42"/><text x="87.0798%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (110 samples, 0.07%)</title><rect x="86.9488%" y="677" width="0.0731%" height="15" fill="rgb(206,149,34)" fg:x="130844" fg:w="110"/><text x="87.1988%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (110 samples, 0.07%)</title><rect x="86.9488%" y="661" width="0.0731%" height="15" fill="rgb(227,228,4)" fg:x="130844" fg:w="110"/><text x="87.1988%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (110 samples, 0.07%)</title><rect x="86.9488%" y="645" width="0.0731%" height="15" fill="rgb(238,218,28)" fg:x="130844" fg:w="110"/><text x="87.1988%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (343 samples, 0.23%)</title><rect x="86.8584%" y="693" width="0.2279%" height="15" fill="rgb(252,86,40)" fg:x="130708" fg:w="343"/><text x="87.1084%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (97 samples, 0.06%)</title><rect x="87.0219%" y="677" width="0.0645%" height="15" fill="rgb(251,225,11)" fg:x="130954" fg:w="97"/><text x="87.2719%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (92 samples, 0.06%)</title><rect x="87.0863%" y="693" width="0.0611%" height="15" fill="rgb(206,46,49)" fg:x="131051" fg:w="92"/><text x="87.3363%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (175 samples, 0.12%)</title><rect x="87.1475%" y="693" width="0.1163%" height="15" fill="rgb(245,128,24)" fg:x="131143" fg:w="175"/><text x="87.3975%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (93 samples, 0.06%)</title><rect x="87.2020%" y="677" width="0.0618%" height="15" fill="rgb(219,177,34)" fg:x="131225" fg:w="93"/><text x="87.4520%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (93 samples, 0.06%)</title><rect x="87.2020%" y="661" width="0.0618%" height="15" fill="rgb(218,60,48)" fg:x="131225" fg:w="93"/><text x="87.4520%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (93 samples, 0.06%)</title><rect x="87.2020%" y="645" width="0.0618%" height="15" fill="rgb(221,11,5)" fg:x="131225" fg:w="93"/><text x="87.4520%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (93 samples, 0.06%)</title><rect x="87.2020%" y="629" width="0.0618%" height="15" fill="rgb(220,148,13)" fg:x="131225" fg:w="93"/><text x="87.4520%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (93 samples, 0.06%)</title><rect x="87.2020%" y="613" width="0.0618%" height="15" fill="rgb(210,16,3)" fg:x="131225" fg:w="93"/><text x="87.4520%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (93 samples, 0.06%)</title><rect x="87.2020%" y="597" width="0.0618%" height="15" fill="rgb(236,80,2)" fg:x="131225" fg:w="93"/><text x="87.4520%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (34 samples, 0.02%)</title><rect x="87.2412%" y="581" width="0.0226%" height="15" fill="rgb(239,129,19)" fg:x="131284" fg:w="34"/><text x="87.4912%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (131 samples, 0.09%)</title><rect x="87.2638%" y="693" width="0.0871%" height="15" fill="rgb(220,106,35)" fg:x="131318" fg:w="131"/><text x="87.5138%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (87 samples, 0.06%)</title><rect x="87.2930%" y="677" width="0.0578%" height="15" fill="rgb(252,139,45)" fg:x="131362" fg:w="87"/><text x="87.5430%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (29 samples, 0.02%)</title><rect x="87.3508%" y="693" width="0.0193%" height="15" fill="rgb(229,8,36)" fg:x="131449" fg:w="29"/><text x="87.6008%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (29 samples, 0.02%)</title><rect x="87.3508%" y="677" width="0.0193%" height="15" fill="rgb(230,126,33)" fg:x="131449" fg:w="29"/><text x="87.6008%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (29 samples, 0.02%)</title><rect x="87.3508%" y="661" width="0.0193%" height="15" fill="rgb(239,140,21)" fg:x="131449" fg:w="29"/><text x="87.6008%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (107 samples, 0.07%)</title><rect x="87.3701%" y="693" width="0.0711%" height="15" fill="rgb(254,104,9)" fg:x="131478" fg:w="107"/><text x="87.6201%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (44 samples, 0.03%)</title><rect x="87.4890%" y="677" width="0.0292%" height="15" fill="rgb(239,52,14)" fg:x="131657" fg:w="44"/><text x="87.7390%" y="687.50"></text></g><g><title>[anon] (1,049 samples, 0.70%)</title><rect x="86.8577%" y="709" width="0.6971%" height="15" fill="rgb(208,227,44)" fg:x="130707" fg:w="1049"/><text x="87.1077%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (171 samples, 0.11%)</title><rect x="87.4412%" y="693" width="0.1136%" height="15" fill="rgb(246,18,19)" fg:x="131585" fg:w="171"/><text x="87.6912%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (55 samples, 0.04%)</title><rect x="87.5183%" y="677" width="0.0365%" height="15" fill="rgb(235,228,25)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (55 samples, 0.04%)</title><rect x="87.5183%" y="661" width="0.0365%" height="15" fill="rgb(240,156,20)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (55 samples, 0.04%)</title><rect x="87.5183%" y="645" width="0.0365%" height="15" fill="rgb(224,8,20)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (55 samples, 0.04%)</title><rect x="87.5183%" y="629" width="0.0365%" height="15" fill="rgb(214,12,52)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (55 samples, 0.04%)</title><rect x="87.5183%" y="613" width="0.0365%" height="15" fill="rgb(211,220,47)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (55 samples, 0.04%)</title><rect x="87.5183%" y="597" width="0.0365%" height="15" fill="rgb(250,173,5)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (55 samples, 0.04%)</title><rect x="87.5183%" y="581" width="0.0365%" height="15" fill="rgb(250,125,52)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (55 samples, 0.04%)</title><rect x="87.5183%" y="565" width="0.0365%" height="15" fill="rgb(209,133,18)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (55 samples, 0.04%)</title><rect x="87.5183%" y="549" width="0.0365%" height="15" fill="rgb(216,173,22)" fg:x="131701" fg:w="55"/><text x="87.7683%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (112 samples, 0.07%)</title><rect x="87.5548%" y="693" width="0.0744%" height="15" fill="rgb(205,3,22)" fg:x="131756" fg:w="112"/><text x="87.8048%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (226 samples, 0.15%)</title><rect x="87.6292%" y="693" width="0.1502%" height="15" fill="rgb(248,22,20)" fg:x="131868" fg:w="226"/><text x="87.8792%" y="703.50"></text></g><g><title>__round (36 samples, 0.02%)</title><rect x="87.7794%" y="693" width="0.0239%" height="15" fill="rgb(233,6,29)" fg:x="132094" fg:w="36"/><text x="88.0294%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (155 samples, 0.10%)</title><rect x="87.8034%" y="693" width="0.1030%" height="15" fill="rgb(240,22,54)" fg:x="132130" fg:w="155"/><text x="88.0534%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (158 samples, 0.10%)</title><rect x="87.9064%" y="693" width="0.1050%" height="15" fill="rgb(231,133,32)" fg:x="132285" fg:w="158"/><text x="88.1564%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (48 samples, 0.03%)</title><rect x="87.9795%" y="677" width="0.0319%" height="15" fill="rgb(248,193,4)" fg:x="132395" fg:w="48"/><text x="88.2295%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (48 samples, 0.03%)</title><rect x="87.9795%" y="661" width="0.0319%" height="15" fill="rgb(211,178,46)" fg:x="132395" fg:w="48"/><text x="88.2295%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (134 samples, 0.09%)</title><rect x="88.0114%" y="693" width="0.0890%" height="15" fill="rgb(224,5,42)" fg:x="132443" fg:w="134"/><text x="88.2614%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.04%)</title><rect x="88.1004%" y="645" width="0.0405%" height="15" fill="rgb(239,176,25)" fg:x="132577" fg:w="61"/><text x="88.3504%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.04%)</title><rect x="88.1004%" y="629" width="0.0405%" height="15" fill="rgb(245,187,50)" fg:x="132577" fg:w="61"/><text x="88.3504%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.04%)</title><rect x="88.1004%" y="613" width="0.0405%" height="15" fill="rgb(248,24,15)" fg:x="132577" fg:w="61"/><text x="88.3504%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (61 samples, 0.04%)</title><rect x="88.1004%" y="597" width="0.0405%" height="15" fill="rgb(205,166,13)" fg:x="132577" fg:w="61"/><text x="88.3504%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (69 samples, 0.05%)</title><rect x="88.1409%" y="613" width="0.0459%" height="15" fill="rgb(208,114,23)" fg:x="132638" fg:w="69"/><text x="88.3909%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (55 samples, 0.04%)</title><rect x="88.1868%" y="613" width="0.0365%" height="15" fill="rgb(239,127,18)" fg:x="132707" fg:w="55"/><text x="88.4368%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (92 samples, 0.06%)</title><rect x="88.2233%" y="613" width="0.0611%" height="15" fill="rgb(219,154,28)" fg:x="132762" fg:w="92"/><text x="88.4733%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (92 samples, 0.06%)</title><rect x="88.2233%" y="597" width="0.0611%" height="15" fill="rgb(225,157,23)" fg:x="132762" fg:w="92"/><text x="88.4733%" y="607.50"></text></g><g><title>[unknown] (1,135 samples, 0.75%)</title><rect x="87.5548%" y="709" width="0.7542%" height="15" fill="rgb(219,8,6)" fg:x="131756" fg:w="1135"/><text x="87.8048%" y="719.50"></text></g><g><title>one_brc::process_lines (314 samples, 0.21%)</title><rect x="88.1004%" y="693" width="0.2087%" height="15" fill="rgb(212,47,6)" fg:x="132577" fg:w="314"/><text x="88.3504%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (314 samples, 0.21%)</title><rect x="88.1004%" y="677" width="0.2087%" height="15" fill="rgb(224,190,4)" fg:x="132577" fg:w="314"/><text x="88.3504%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (314 samples, 0.21%)</title><rect x="88.1004%" y="661" width="0.2087%" height="15" fill="rgb(239,183,29)" fg:x="132577" fg:w="314"/><text x="88.3504%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (253 samples, 0.17%)</title><rect x="88.1409%" y="645" width="0.1681%" height="15" fill="rgb(213,57,7)" fg:x="132638" fg:w="253"/><text x="88.3909%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (253 samples, 0.17%)</title><rect x="88.1409%" y="629" width="0.1681%" height="15" fill="rgb(216,148,1)" fg:x="132638" fg:w="253"/><text x="88.3909%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (37 samples, 0.02%)</title><rect x="88.2845%" y="613" width="0.0246%" height="15" fill="rgb(236,182,29)" fg:x="132854" fg:w="37"/><text x="88.5345%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (40 samples, 0.03%)</title><rect x="88.5283%" y="389" width="0.0266%" height="15" fill="rgb(244,120,48)" fg:x="133221" fg:w="40"/><text x="88.7783%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (40 samples, 0.03%)</title><rect x="88.5283%" y="373" width="0.0266%" height="15" fill="rgb(206,71,34)" fg:x="133221" fg:w="40"/><text x="88.7783%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (40 samples, 0.03%)</title><rect x="88.5283%" y="357" width="0.0266%" height="15" fill="rgb(242,32,6)" fg:x="133221" fg:w="40"/><text x="88.7783%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (164 samples, 0.11%)</title><rect x="88.5549%" y="389" width="0.1090%" height="15" fill="rgb(241,35,3)" fg:x="133261" fg:w="164"/><text x="88.8049%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (164 samples, 0.11%)</title><rect x="88.5549%" y="373" width="0.1090%" height="15" fill="rgb(222,62,19)" fg:x="133261" fg:w="164"/><text x="88.8049%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (164 samples, 0.11%)</title><rect x="88.5549%" y="357" width="0.1090%" height="15" fill="rgb(223,110,41)" fg:x="133261" fg:w="164"/><text x="88.8049%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (163 samples, 0.11%)</title><rect x="88.5556%" y="341" width="0.1083%" height="15" fill="rgb(208,224,4)" fg:x="133262" fg:w="163"/><text x="88.8056%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (102 samples, 0.07%)</title><rect x="88.6639%" y="389" width="0.0678%" height="15" fill="rgb(241,137,19)" fg:x="133425" fg:w="102"/><text x="88.9139%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (102 samples, 0.07%)</title><rect x="88.6639%" y="373" width="0.0678%" height="15" fill="rgb(244,24,17)" fg:x="133425" fg:w="102"/><text x="88.9139%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (42 samples, 0.03%)</title><rect x="88.8706%" y="357" width="0.0279%" height="15" fill="rgb(245,178,49)" fg:x="133736" fg:w="42"/><text x="89.1206%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (27 samples, 0.02%)</title><rect x="88.8985%" y="357" width="0.0179%" height="15" fill="rgb(219,160,38)" fg:x="133778" fg:w="27"/><text x="89.1485%" y="367.50"></text></g><g><title>core::ptr::align_offset (27 samples, 0.02%)</title><rect x="88.8985%" y="341" width="0.0179%" height="15" fill="rgb(228,137,14)" fg:x="133778" fg:w="27"/><text x="89.1485%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (89 samples, 0.06%)</title><rect x="88.9164%" y="357" width="0.0591%" height="15" fill="rgb(237,134,11)" fg:x="133805" fg:w="89"/><text x="89.1664%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,680 samples, 1.12%)</title><rect x="88.3715%" y="405" width="1.1164%" height="15" fill="rgb(211,126,44)" fg:x="132985" fg:w="1680"/><text x="88.6215%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (1,138 samples, 0.76%)</title><rect x="88.7317%" y="389" width="0.7562%" height="15" fill="rgb(226,171,33)" fg:x="133527" fg:w="1138"/><text x="88.9817%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,105 samples, 0.73%)</title><rect x="88.7536%" y="373" width="0.7343%" height="15" fill="rgb(253,99,13)" fg:x="133560" fg:w="1105"/><text x="89.0036%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (771 samples, 0.51%)</title><rect x="88.9756%" y="357" width="0.5123%" height="15" fill="rgb(244,48,7)" fg:x="133894" fg:w="771"/><text x="89.2256%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,811 samples, 1.20%)</title><rect x="88.3104%" y="437" width="1.2035%" height="15" fill="rgb(244,217,54)" fg:x="132893" fg:w="1811"/><text x="88.5604%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,811 samples, 1.20%)</title><rect x="88.3104%" y="421" width="1.2035%" height="15" fill="rgb(224,15,18)" fg:x="132893" fg:w="1811"/><text x="88.5604%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (39 samples, 0.03%)</title><rect x="89.4879%" y="405" width="0.0259%" height="15" fill="rgb(244,99,12)" fg:x="134665" fg:w="39"/><text x="89.7379%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (39 samples, 0.03%)</title><rect x="89.4879%" y="389" width="0.0259%" height="15" fill="rgb(233,226,8)" fg:x="134665" fg:w="39"/><text x="89.7379%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,950 samples, 1.30%)</title><rect x="88.3104%" y="469" width="1.2958%" height="15" fill="rgb(229,211,3)" fg:x="132893" fg:w="1950"/><text x="88.5604%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,950 samples, 1.30%)</title><rect x="88.3104%" y="453" width="1.2958%" height="15" fill="rgb(216,140,21)" fg:x="132893" fg:w="1950"/><text x="88.5604%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (139 samples, 0.09%)</title><rect x="89.5138%" y="437" width="0.0924%" height="15" fill="rgb(234,122,30)" fg:x="134704" fg:w="139"/><text x="89.7638%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (139 samples, 0.09%)</title><rect x="89.5138%" y="421" width="0.0924%" height="15" fill="rgb(236,25,46)" fg:x="134704" fg:w="139"/><text x="89.7638%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (139 samples, 0.09%)</title><rect x="89.5138%" y="405" width="0.0924%" height="15" fill="rgb(217,52,54)" fg:x="134704" fg:w="139"/><text x="89.7638%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (139 samples, 0.09%)</title><rect x="89.5138%" y="389" width="0.0924%" height="15" fill="rgb(222,29,26)" fg:x="134704" fg:w="139"/><text x="89.7638%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (66 samples, 0.04%)</title><rect x="89.5623%" y="373" width="0.0439%" height="15" fill="rgb(216,177,29)" fg:x="134777" fg:w="66"/><text x="89.8123%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (66 samples, 0.04%)</title><rect x="89.5623%" y="357" width="0.0439%" height="15" fill="rgb(247,136,51)" fg:x="134777" fg:w="66"/><text x="89.8123%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (66 samples, 0.04%)</title><rect x="89.5623%" y="341" width="0.0439%" height="15" fill="rgb(231,47,47)" fg:x="134777" fg:w="66"/><text x="89.8123%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (66 samples, 0.04%)</title><rect x="89.5623%" y="325" width="0.0439%" height="15" fill="rgb(211,192,36)" fg:x="134777" fg:w="66"/><text x="89.8123%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (66 samples, 0.04%)</title><rect x="89.5623%" y="309" width="0.0439%" height="15" fill="rgb(229,156,32)" fg:x="134777" fg:w="66"/><text x="89.8123%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (49 samples, 0.03%)</title><rect x="89.6301%" y="437" width="0.0326%" height="15" fill="rgb(248,213,20)" fg:x="134879" fg:w="49"/><text x="89.8801%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (41 samples, 0.03%)</title><rect x="89.6634%" y="405" width="0.0272%" height="15" fill="rgb(217,64,7)" fg:x="134929" fg:w="41"/><text x="89.9134%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (90 samples, 0.06%)</title><rect x="89.8189%" y="373" width="0.0598%" height="15" fill="rgb(232,142,8)" fg:x="135163" fg:w="90"/><text x="90.0689%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (147 samples, 0.10%)</title><rect x="89.8787%" y="373" width="0.0977%" height="15" fill="rgb(224,92,44)" fg:x="135253" fg:w="147"/><text x="90.1287%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (40 samples, 0.03%)</title><rect x="89.9763%" y="373" width="0.0266%" height="15" fill="rgb(214,169,17)" fg:x="135400" fg:w="40"/><text x="90.2263%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (344 samples, 0.23%)</title><rect x="89.7750%" y="389" width="0.2286%" height="15" fill="rgb(210,59,37)" fg:x="135097" fg:w="344"/><text x="90.0250%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (150 samples, 0.10%)</title><rect x="90.0508%" y="373" width="0.0997%" height="15" fill="rgb(214,116,48)" fg:x="135512" fg:w="150"/><text x="90.3008%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (39 samples, 0.03%)</title><rect x="90.4754%" y="325" width="0.0259%" height="15" fill="rgb(244,191,6)" fg:x="136151" fg:w="39"/><text x="90.7254%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.02%)</title><rect x="90.5026%" y="309" width="0.0233%" height="15" fill="rgb(241,50,52)" fg:x="136192" fg:w="35"/><text x="90.7526%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (401 samples, 0.27%)</title><rect x="90.2814%" y="341" width="0.2665%" height="15" fill="rgb(236,75,39)" fg:x="135859" fg:w="401"/><text x="90.5314%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (70 samples, 0.05%)</title><rect x="90.5013%" y="325" width="0.0465%" height="15" fill="rgb(236,99,0)" fg:x="136190" fg:w="70"/><text x="90.7513%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (33 samples, 0.02%)</title><rect x="90.5259%" y="309" width="0.0219%" height="15" fill="rgb(207,202,15)" fg:x="136227" fg:w="33"/><text x="90.7759%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (825 samples, 0.55%)</title><rect x="90.0036%" y="389" width="0.5482%" height="15" fill="rgb(233,207,14)" fg:x="135441" fg:w="825"/><text x="90.2536%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (604 samples, 0.40%)</title><rect x="90.1504%" y="373" width="0.4014%" height="15" fill="rgb(226,27,51)" fg:x="135662" fg:w="604"/><text x="90.4004%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (491 samples, 0.33%)</title><rect x="90.2255%" y="357" width="0.3263%" height="15" fill="rgb(206,104,42)" fg:x="135775" fg:w="491"/><text x="90.4755%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,339 samples, 0.89%)</title><rect x="89.6627%" y="437" width="0.8898%" height="15" fill="rgb(212,225,4)" fg:x="134928" fg:w="1339"/><text x="89.9127%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,339 samples, 0.89%)</title><rect x="89.6627%" y="421" width="0.8898%" height="15" fill="rgb(233,96,42)" fg:x="134928" fg:w="1339"/><text x="89.9127%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,297 samples, 0.86%)</title><rect x="89.6906%" y="405" width="0.8619%" height="15" fill="rgb(229,21,32)" fg:x="134970" fg:w="1297"/><text x="89.9406%" y="415.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (62 samples, 0.04%)</title><rect x="90.5744%" y="421" width="0.0412%" height="15" fill="rgb(226,216,24)" fg:x="136300" fg:w="62"/><text x="90.8244%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (38 samples, 0.03%)</title><rect x="90.7944%" y="405" width="0.0253%" height="15" fill="rgb(221,163,17)" fg:x="136631" fg:w="38"/><text x="91.0444%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 0.03%)</title><rect x="90.7944%" y="389" width="0.0253%" height="15" fill="rgb(216,216,42)" fg:x="136631" fg:w="38"/><text x="91.0444%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 0.03%)</title><rect x="90.7944%" y="373" width="0.0253%" height="15" fill="rgb(240,118,7)" fg:x="136631" fg:w="38"/><text x="91.0444%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (269 samples, 0.18%)</title><rect x="90.8196%" y="405" width="0.1788%" height="15" fill="rgb(221,67,37)" fg:x="136669" fg:w="269"/><text x="91.0696%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (269 samples, 0.18%)</title><rect x="90.8196%" y="389" width="0.1788%" height="15" fill="rgb(241,32,44)" fg:x="136669" fg:w="269"/><text x="91.0696%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (269 samples, 0.18%)</title><rect x="90.8196%" y="373" width="0.1788%" height="15" fill="rgb(235,204,43)" fg:x="136669" fg:w="269"/><text x="91.0696%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (239 samples, 0.16%)</title><rect x="90.8396%" y="357" width="0.1588%" height="15" fill="rgb(213,116,10)" fg:x="136699" fg:w="239"/><text x="91.0896%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (82 samples, 0.05%)</title><rect x="90.9984%" y="405" width="0.0545%" height="15" fill="rgb(239,15,48)" fg:x="136938" fg:w="82"/><text x="91.2484%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (82 samples, 0.05%)</title><rect x="90.9984%" y="389" width="0.0545%" height="15" fill="rgb(207,123,36)" fg:x="136938" fg:w="82"/><text x="91.2484%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (176 samples, 0.12%)</title><rect x="91.0562%" y="389" width="0.1170%" height="15" fill="rgb(209,103,30)" fg:x="137025" fg:w="176"/><text x="91.3062%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (141 samples, 0.09%)</title><rect x="91.0795%" y="373" width="0.0937%" height="15" fill="rgb(238,100,19)" fg:x="137060" fg:w="141"/><text x="91.3295%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,335 samples, 0.89%)</title><rect x="90.5525%" y="437" width="0.8871%" height="15" fill="rgb(244,30,14)" fg:x="136267" fg:w="1335"/><text x="90.8025%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,229 samples, 0.82%)</title><rect x="90.6229%" y="421" width="0.8167%" height="15" fill="rgb(249,174,6)" fg:x="136373" fg:w="1229"/><text x="90.8729%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (582 samples, 0.39%)</title><rect x="91.0529%" y="405" width="0.3868%" height="15" fill="rgb(235,213,41)" fg:x="137020" fg:w="582"/><text x="91.3029%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (401 samples, 0.27%)</title><rect x="91.1731%" y="389" width="0.2665%" height="15" fill="rgb(213,118,6)" fg:x="137201" fg:w="401"/><text x="91.4231%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (231 samples, 0.15%)</title><rect x="91.4396%" y="437" width="0.1535%" height="15" fill="rgb(235,44,51)" fg:x="137602" fg:w="231"/><text x="91.6896%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (151 samples, 0.10%)</title><rect x="91.4928%" y="421" width="0.1003%" height="15" fill="rgb(217,9,53)" fg:x="137682" fg:w="151"/><text x="91.7428%" y="431.50"></text></g><g><title>__round (151 samples, 0.10%)</title><rect x="91.4928%" y="405" width="0.1003%" height="15" fill="rgb(237,172,34)" fg:x="137682" fg:w="151"/><text x="91.7428%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (47 samples, 0.03%)</title><rect x="91.6722%" y="389" width="0.0312%" height="15" fill="rgb(206,206,11)" fg:x="137952" fg:w="47"/><text x="91.9222%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (209 samples, 0.14%)</title><rect x="91.5931%" y="437" width="0.1389%" height="15" fill="rgb(214,149,29)" fg:x="137833" fg:w="209"/><text x="91.8431%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (209 samples, 0.14%)</title><rect x="91.5931%" y="421" width="0.1389%" height="15" fill="rgb(208,123,3)" fg:x="137833" fg:w="209"/><text x="91.8431%" y="431.50"></text></g><g><title>one_brc::Measurement::record (209 samples, 0.14%)</title><rect x="91.5931%" y="405" width="0.1389%" height="15" fill="rgb(229,126,4)" fg:x="137833" fg:w="209"/><text x="91.8431%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (43 samples, 0.03%)</title><rect x="91.7034%" y="389" width="0.0286%" height="15" fill="rgb(222,92,36)" fg:x="137999" fg:w="43"/><text x="91.9534%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.01%)</title><rect x="91.9540%" y="309" width="0.0106%" height="15" fill="rgb(216,39,41)" fg:x="138376" fg:w="16"/><text x="92.2040%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (69 samples, 0.05%)</title><rect x="91.9646%" y="309" width="0.0459%" height="15" fill="rgb(253,127,28)" fg:x="138392" fg:w="69"/><text x="92.2146%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (159 samples, 0.11%)</title><rect x="91.9280%" y="325" width="0.1057%" height="15" fill="rgb(249,152,51)" fg:x="138337" fg:w="159"/><text x="92.1780%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.02%)</title><rect x="92.0104%" y="309" width="0.0233%" height="15" fill="rgb(209,123,42)" fg:x="138461" fg:w="35"/><text x="92.2604%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (172 samples, 0.11%)</title><rect x="92.0816%" y="309" width="0.1143%" height="15" fill="rgb(241,118,22)" fg:x="138568" fg:w="172"/><text x="92.3316%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (373 samples, 0.25%)</title><rect x="92.0337%" y="325" width="0.2479%" height="15" fill="rgb(208,25,7)" fg:x="138496" fg:w="373"/><text x="92.2837%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (129 samples, 0.09%)</title><rect x="92.1958%" y="309" width="0.0857%" height="15" fill="rgb(243,144,39)" fg:x="138740" fg:w="129"/><text x="92.4458%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (630 samples, 0.42%)</title><rect x="91.8662%" y="373" width="0.4186%" height="15" fill="rgb(250,50,5)" fg:x="138244" fg:w="630"/><text x="92.1162%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (630 samples, 0.42%)</title><rect x="91.8662%" y="357" width="0.4186%" height="15" fill="rgb(207,67,11)" fg:x="138244" fg:w="630"/><text x="92.1162%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (630 samples, 0.42%)</title><rect x="91.8662%" y="341" width="0.4186%" height="15" fill="rgb(245,204,40)" fg:x="138244" fg:w="630"/><text x="92.1162%" y="351.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (60 samples, 0.04%)</title><rect x="92.2849%" y="373" width="0.0399%" height="15" fill="rgb(238,228,24)" fg:x="138874" fg:w="60"/><text x="92.5349%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (28 samples, 0.02%)</title><rect x="92.3062%" y="357" width="0.0186%" height="15" fill="rgb(217,116,22)" fg:x="138906" fg:w="28"/><text x="92.5562%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (28 samples, 0.02%)</title><rect x="92.3062%" y="341" width="0.0186%" height="15" fill="rgb(234,98,12)" fg:x="138906" fg:w="28"/><text x="92.5562%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (28 samples, 0.02%)</title><rect x="92.3062%" y="325" width="0.0186%" height="15" fill="rgb(242,170,50)" fg:x="138906" fg:w="28"/><text x="92.5562%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.01%)</title><rect x="92.4663%" y="245" width="0.0120%" height="15" fill="rgb(235,7,5)" fg:x="139147" fg:w="18"/><text x="92.7163%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (76 samples, 0.05%)</title><rect x="92.4411%" y="261" width="0.0505%" height="15" fill="rgb(241,114,28)" fg:x="139109" fg:w="76"/><text x="92.6911%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (20 samples, 0.01%)</title><rect x="92.4783%" y="245" width="0.0133%" height="15" fill="rgb(246,112,42)" fg:x="139165" fg:w="20"/><text x="92.7283%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (44 samples, 0.03%)</title><rect x="92.4916%" y="261" width="0.0292%" height="15" fill="rgb(248,228,14)" fg:x="139185" fg:w="44"/><text x="92.7416%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (418 samples, 0.28%)</title><rect x="92.3467%" y="277" width="0.2778%" height="15" fill="rgb(208,133,18)" fg:x="138967" fg:w="418"/><text x="92.5967%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (156 samples, 0.10%)</title><rect x="92.5208%" y="261" width="0.1037%" height="15" fill="rgb(207,35,49)" fg:x="139229" fg:w="156"/><text x="92.7708%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (50 samples, 0.03%)</title><rect x="92.6245%" y="277" width="0.0332%" height="15" fill="rgb(205,68,36)" fg:x="139385" fg:w="50"/><text x="92.8745%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (17 samples, 0.01%)</title><rect x="92.7660%" y="229" width="0.0113%" height="15" fill="rgb(245,62,40)" fg:x="139598" fg:w="17"/><text x="93.0160%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (40 samples, 0.03%)</title><rect x="92.7614%" y="245" width="0.0266%" height="15" fill="rgb(228,27,24)" fg:x="139591" fg:w="40"/><text x="93.0114%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (16 samples, 0.01%)</title><rect x="92.7773%" y="229" width="0.0106%" height="15" fill="rgb(253,19,12)" fg:x="139615" fg:w="16"/><text x="93.0273%" y="239.50"></text></g><g><title>core::cmp::min (35 samples, 0.02%)</title><rect x="92.7906%" y="245" width="0.0233%" height="15" fill="rgb(232,28,20)" fg:x="139635" fg:w="35"/><text x="93.0406%" y="255.50"></text></g><g><title>core::cmp::Ord::min (35 samples, 0.02%)</title><rect x="92.7906%" y="229" width="0.0233%" height="15" fill="rgb(218,35,51)" fg:x="139635" fg:w="35"/><text x="93.0406%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (35 samples, 0.02%)</title><rect x="92.7906%" y="213" width="0.0233%" height="15" fill="rgb(212,90,40)" fg:x="139635" fg:w="35"/><text x="93.0406%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (358 samples, 0.24%)</title><rect x="92.6863%" y="261" width="0.2379%" height="15" fill="rgb(220,172,12)" fg:x="139478" fg:w="358"/><text x="92.9363%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (166 samples, 0.11%)</title><rect x="92.8139%" y="245" width="0.1103%" height="15" fill="rgb(226,159,20)" fg:x="139670" fg:w="166"/><text x="93.0639%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,643 samples, 1.09%)</title><rect x="91.8437%" y="405" width="1.0918%" height="15" fill="rgb(234,205,16)" fg:x="138210" fg:w="1643"/><text x="92.0937%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,643 samples, 1.09%)</title><rect x="91.8437%" y="389" width="1.0918%" height="15" fill="rgb(207,9,39)" fg:x="138210" fg:w="1643"/><text x="92.0937%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (919 samples, 0.61%)</title><rect x="92.3248%" y="373" width="0.6107%" height="15" fill="rgb(249,143,15)" fg:x="138934" fg:w="919"/><text x="92.5748%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (886 samples, 0.59%)</title><rect x="92.3467%" y="357" width="0.5888%" height="15" fill="rgb(253,133,29)" fg:x="138967" fg:w="886"/><text x="92.5967%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (886 samples, 0.59%)</title><rect x="92.3467%" y="341" width="0.5888%" height="15" fill="rgb(221,187,0)" fg:x="138967" fg:w="886"/><text x="92.5967%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (886 samples, 0.59%)</title><rect x="92.3467%" y="325" width="0.5888%" height="15" fill="rgb(205,204,26)" fg:x="138967" fg:w="886"/><text x="92.5967%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (886 samples, 0.59%)</title><rect x="92.3467%" y="309" width="0.5888%" height="15" fill="rgb(224,68,54)" fg:x="138967" fg:w="886"/><text x="92.5967%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (886 samples, 0.59%)</title><rect x="92.3467%" y="293" width="0.5888%" height="15" fill="rgb(209,67,4)" fg:x="138967" fg:w="886"/><text x="92.5967%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (418 samples, 0.28%)</title><rect x="92.6577%" y="277" width="0.2778%" height="15" fill="rgb(228,229,18)" fg:x="139435" fg:w="418"/><text x="92.9077%" y="287.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (17 samples, 0.01%)</title><rect x="92.9242%" y="261" width="0.0113%" height="15" fill="rgb(231,89,13)" fg:x="139836" fg:w="17"/><text x="93.1742%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.03%)</title><rect x="92.9607%" y="373" width="0.0279%" height="15" fill="rgb(210,182,18)" fg:x="139891" fg:w="42"/><text x="93.2107%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (40 samples, 0.03%)</title><rect x="93.0072%" y="357" width="0.0266%" height="15" fill="rgb(240,105,2)" fg:x="139961" fg:w="40"/><text x="93.2572%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (40 samples, 0.03%)</title><rect x="93.0072%" y="341" width="0.0266%" height="15" fill="rgb(207,170,50)" fg:x="139961" fg:w="40"/><text x="93.2572%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (40 samples, 0.03%)</title><rect x="93.0072%" y="325" width="0.0266%" height="15" fill="rgb(232,133,24)" fg:x="139961" fg:w="40"/><text x="93.2572%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (863 samples, 0.57%)</title><rect x="92.9886%" y="373" width="0.5735%" height="15" fill="rgb(235,166,27)" fg:x="139933" fg:w="863"/><text x="93.2386%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (795 samples, 0.53%)</title><rect x="93.0338%" y="357" width="0.5283%" height="15" fill="rgb(209,19,13)" fg:x="140001" fg:w="795"/><text x="93.2838%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (795 samples, 0.53%)</title><rect x="93.0338%" y="341" width="0.5283%" height="15" fill="rgb(226,79,39)" fg:x="140001" fg:w="795"/><text x="93.2838%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (795 samples, 0.53%)</title><rect x="93.0338%" y="325" width="0.5283%" height="15" fill="rgb(222,163,10)" fg:x="140001" fg:w="795"/><text x="93.2838%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (795 samples, 0.53%)</title><rect x="93.0338%" y="309" width="0.5283%" height="15" fill="rgb(214,44,19)" fg:x="140001" fg:w="795"/><text x="93.2838%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (795 samples, 0.53%)</title><rect x="93.0338%" y="293" width="0.5283%" height="15" fill="rgb(210,217,13)" fg:x="140001" fg:w="795"/><text x="93.2838%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (795 samples, 0.53%)</title><rect x="93.0338%" y="277" width="0.5283%" height="15" fill="rgb(237,61,54)" fg:x="140001" fg:w="795"/><text x="93.2838%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (484 samples, 0.32%)</title><rect x="93.2405%" y="261" width="0.3216%" height="15" fill="rgb(226,184,24)" fg:x="140312" fg:w="484"/><text x="93.4905%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (73 samples, 0.05%)</title><rect x="93.5621%" y="373" width="0.0485%" height="15" fill="rgb(223,226,4)" fg:x="140796" fg:w="73"/><text x="93.8121%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.03%)</title><rect x="93.6106%" y="341" width="0.0332%" height="15" fill="rgb(210,26,41)" fg:x="140869" fg:w="50"/><text x="93.8606%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (57 samples, 0.04%)</title><rect x="93.6106%" y="373" width="0.0379%" height="15" fill="rgb(220,221,6)" fg:x="140869" fg:w="57"/><text x="93.8606%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (57 samples, 0.04%)</title><rect x="93.6106%" y="357" width="0.0379%" height="15" fill="rgb(225,89,49)" fg:x="140869" fg:w="57"/><text x="93.8606%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (24 samples, 0.02%)</title><rect x="93.6485%" y="373" width="0.0159%" height="15" fill="rgb(218,70,45)" fg:x="140926" fg:w="24"/><text x="93.8985%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="93.6485%" y="357" width="0.0159%" height="15" fill="rgb(238,166,21)" fg:x="140926" fg:w="24"/><text x="93.8985%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,879 samples, 1.91%)</title><rect x="91.7526%" y="421" width="1.9132%" height="15" fill="rgb(224,141,44)" fg:x="138073" fg:w="2879"/><text x="92.0026%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,099 samples, 0.73%)</title><rect x="92.9355%" y="405" width="0.7303%" height="15" fill="rgb(230,12,49)" fg:x="139853" fg:w="1099"/><text x="93.1855%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,070 samples, 0.71%)</title><rect x="92.9547%" y="389" width="0.7110%" height="15" fill="rgb(212,174,12)" fg:x="139882" fg:w="1070"/><text x="93.2047%" y="399.50"></text></g><g><title>std::panic::catch_unwind (8,088 samples, 5.37%)</title><rect x="88.3091%" y="629" width="5.3747%" height="15" fill="rgb(246,67,9)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="639.50">std::pa..</text></g><g><title>std::panicking::try (8,088 samples, 5.37%)</title><rect x="88.3091%" y="613" width="5.3747%" height="15" fill="rgb(239,35,23)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="623.50">std::pa..</text></g><g><title>std::panicking::try::do_call (8,088 samples, 5.37%)</title><rect x="88.3091%" y="597" width="5.3747%" height="15" fill="rgb(211,167,0)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="607.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,088 samples, 5.37%)</title><rect x="88.3091%" y="581" width="5.3747%" height="15" fill="rgb(225,119,45)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="591.50">&lt;core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (8,088 samples, 5.37%)</title><rect x="88.3091%" y="565" width="5.3747%" height="15" fill="rgb(210,162,6)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="575.50">std::th..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,088 samples, 5.37%)</title><rect x="88.3091%" y="549" width="5.3747%" height="15" fill="rgb(208,118,35)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="559.50">std::sy..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (8,088 samples, 5.37%)</title><rect x="88.3091%" y="533" width="5.3747%" height="15" fill="rgb(239,4,53)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="543.50">one_brc..</text></g><g><title>one_brc::process_lines (8,088 samples, 5.37%)</title><rect x="88.3091%" y="517" width="5.3747%" height="15" fill="rgb(213,130,21)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="527.50">one_brc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,088 samples, 5.37%)</title><rect x="88.3091%" y="501" width="5.3747%" height="15" fill="rgb(235,148,0)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="511.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,088 samples, 5.37%)</title><rect x="88.3091%" y="485" width="5.3747%" height="15" fill="rgb(244,224,18)" fg:x="132891" fg:w="8088"/><text x="88.5591%" y="495.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6,136 samples, 4.08%)</title><rect x="89.6062%" y="469" width="4.0775%" height="15" fill="rgb(211,214,4)" fg:x="134843" fg:w="6136"/><text x="89.8562%" y="479.50">core..</text></g><g><title>one_brc::process_lines::_{{closure}} (6,136 samples, 4.08%)</title><rect x="89.6062%" y="453" width="4.0775%" height="15" fill="rgb(206,119,25)" fg:x="134843" fg:w="6136"/><text x="89.8562%" y="463.50">one_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,937 samples, 1.95%)</title><rect x="91.7320%" y="437" width="1.9517%" height="15" fill="rgb(243,93,47)" fg:x="138042" fg:w="2937"/><text x="91.9820%" y="447.50">s..</text></g><g><title>std::collections::hash::map::map_entry (27 samples, 0.02%)</title><rect x="93.6658%" y="421" width="0.0179%" height="15" fill="rgb(224,194,6)" fg:x="140952" fg:w="27"/><text x="93.9158%" y="431.50"></text></g><g><title>worker-8 (10,273 samples, 6.83%)</title><rect x="86.8577%" y="725" width="6.8266%" height="15" fill="rgb(243,229,6)" fg:x="130707" fg:w="10273"/><text x="87.1077%" y="735.50">worker-8</text></g><g><title>__clone3 (8,089 samples, 5.38%)</title><rect x="88.3091%" y="709" width="5.3753%" height="15" fill="rgb(207,23,50)" fg:x="132891" fg:w="8089"/><text x="88.5591%" y="719.50">__clone3</text></g><g><title>start_thread (8,089 samples, 5.38%)</title><rect x="88.3091%" y="693" width="5.3753%" height="15" fill="rgb(253,192,32)" fg:x="132891" fg:w="8089"/><text x="88.5591%" y="703.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8,089 samples, 5.38%)</title><rect x="88.3091%" y="677" width="5.3753%" height="15" fill="rgb(213,21,6)" fg:x="132891" fg:w="8089"/><text x="88.5591%" y="687.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8,089 samples, 5.38%)</title><rect x="88.3091%" y="661" width="5.3753%" height="15" fill="rgb(243,151,13)" fg:x="132891" fg:w="8089"/><text x="88.5591%" y="671.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (8,089 samples, 5.38%)</title><rect x="88.3091%" y="645" width="5.3753%" height="15" fill="rgb(233,165,41)" fg:x="132891" fg:w="8089"/><text x="88.5591%" y="655.50">std::th..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (112 samples, 0.07%)</title><rect x="93.7701%" y="677" width="0.0744%" height="15" fill="rgb(246,176,45)" fg:x="141109" fg:w="112"/><text x="94.0201%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (112 samples, 0.07%)</title><rect x="93.7701%" y="661" width="0.0744%" height="15" fill="rgb(217,170,52)" fg:x="141109" fg:w="112"/><text x="94.0201%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (112 samples, 0.07%)</title><rect x="93.7701%" y="645" width="0.0744%" height="15" fill="rgb(214,203,54)" fg:x="141109" fg:w="112"/><text x="94.0201%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (337 samples, 0.22%)</title><rect x="93.6844%" y="693" width="0.2239%" height="15" fill="rgb(248,215,49)" fg:x="140980" fg:w="337"/><text x="93.9344%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (96 samples, 0.06%)</title><rect x="93.8445%" y="677" width="0.0638%" height="15" fill="rgb(208,46,10)" fg:x="141221" fg:w="96"/><text x="94.0945%" y="687.50"></text></g><g><title>__memcmp_evex_movbe (91 samples, 0.06%)</title><rect x="93.9083%" y="693" width="0.0605%" height="15" fill="rgb(254,5,31)" fg:x="141317" fg:w="91"/><text x="94.1583%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (164 samples, 0.11%)</title><rect x="93.9688%" y="693" width="0.1090%" height="15" fill="rgb(222,104,33)" fg:x="141408" fg:w="164"/><text x="94.2188%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (98 samples, 0.07%)</title><rect x="94.0127%" y="677" width="0.0651%" height="15" fill="rgb(248,49,16)" fg:x="141474" fg:w="98"/><text x="94.2627%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (98 samples, 0.07%)</title><rect x="94.0127%" y="661" width="0.0651%" height="15" fill="rgb(232,198,41)" fg:x="141474" fg:w="98"/><text x="94.2627%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (98 samples, 0.07%)</title><rect x="94.0127%" y="645" width="0.0651%" height="15" fill="rgb(214,125,3)" fg:x="141474" fg:w="98"/><text x="94.2627%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (98 samples, 0.07%)</title><rect x="94.0127%" y="629" width="0.0651%" height="15" fill="rgb(229,220,28)" fg:x="141474" fg:w="98"/><text x="94.2627%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (98 samples, 0.07%)</title><rect x="94.0127%" y="613" width="0.0651%" height="15" fill="rgb(222,64,37)" fg:x="141474" fg:w="98"/><text x="94.2627%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (98 samples, 0.07%)</title><rect x="94.0127%" y="597" width="0.0651%" height="15" fill="rgb(249,184,13)" fg:x="141474" fg:w="98"/><text x="94.2627%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (38 samples, 0.03%)</title><rect x="94.0525%" y="581" width="0.0253%" height="15" fill="rgb(252,176,6)" fg:x="141534" fg:w="38"/><text x="94.3025%" y="591.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (97 samples, 0.06%)</title><rect x="94.0778%" y="693" width="0.0645%" height="15" fill="rgb(228,153,7)" fg:x="141572" fg:w="97"/><text x="94.3278%" y="703.50"></text></g><g><title>core::num::dec2flt::dec2flt (68 samples, 0.05%)</title><rect x="94.0970%" y="677" width="0.0452%" height="15" fill="rgb(242,193,5)" fg:x="141601" fg:w="68"/><text x="94.3470%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (35 samples, 0.02%)</title><rect x="94.1422%" y="693" width="0.0233%" height="15" fill="rgb(232,140,9)" fg:x="141669" fg:w="35"/><text x="94.3922%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (35 samples, 0.02%)</title><rect x="94.1422%" y="677" width="0.0233%" height="15" fill="rgb(213,222,16)" fg:x="141669" fg:w="35"/><text x="94.3922%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (35 samples, 0.02%)</title><rect x="94.1422%" y="661" width="0.0233%" height="15" fill="rgb(222,75,50)" fg:x="141669" fg:w="35"/><text x="94.3922%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (102 samples, 0.07%)</title><rect x="94.1655%" y="693" width="0.0678%" height="15" fill="rgb(205,180,2)" fg:x="141704" fg:w="102"/><text x="94.4155%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.03%)</title><rect x="94.2791%" y="677" width="0.0272%" height="15" fill="rgb(216,34,7)" fg:x="141875" fg:w="41"/><text x="94.5291%" y="687.50"></text></g><g><title>[anon] (972 samples, 0.65%)</title><rect x="93.6844%" y="709" width="0.6459%" height="15" fill="rgb(253,16,32)" fg:x="140980" fg:w="972"/><text x="93.9344%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (146 samples, 0.10%)</title><rect x="94.2333%" y="693" width="0.0970%" height="15" fill="rgb(208,97,28)" fg:x="141806" fg:w="146"/><text x="94.4833%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (36 samples, 0.02%)</title><rect x="94.3064%" y="677" width="0.0239%" height="15" fill="rgb(225,92,11)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (36 samples, 0.02%)</title><rect x="94.3064%" y="661" width="0.0239%" height="15" fill="rgb(243,38,12)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (36 samples, 0.02%)</title><rect x="94.3064%" y="645" width="0.0239%" height="15" fill="rgb(208,139,16)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (36 samples, 0.02%)</title><rect x="94.3064%" y="629" width="0.0239%" height="15" fill="rgb(227,24,9)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (36 samples, 0.02%)</title><rect x="94.3064%" y="613" width="0.0239%" height="15" fill="rgb(206,62,11)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (36 samples, 0.02%)</title><rect x="94.3064%" y="597" width="0.0239%" height="15" fill="rgb(228,134,27)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (36 samples, 0.02%)</title><rect x="94.3064%" y="581" width="0.0239%" height="15" fill="rgb(205,55,33)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (36 samples, 0.02%)</title><rect x="94.3064%" y="565" width="0.0239%" height="15" fill="rgb(243,75,43)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (36 samples, 0.02%)</title><rect x="94.3064%" y="549" width="0.0239%" height="15" fill="rgb(223,27,42)" fg:x="141916" fg:w="36"/><text x="94.5564%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (138 samples, 0.09%)</title><rect x="94.3303%" y="693" width="0.0917%" height="15" fill="rgb(232,189,33)" fg:x="141952" fg:w="138"/><text x="94.5803%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (214 samples, 0.14%)</title><rect x="94.4220%" y="693" width="0.1422%" height="15" fill="rgb(210,9,39)" fg:x="142090" fg:w="214"/><text x="94.6720%" y="703.50"></text></g><g><title>__round (32 samples, 0.02%)</title><rect x="94.5642%" y="693" width="0.0213%" height="15" fill="rgb(242,85,26)" fg:x="142304" fg:w="32"/><text x="94.8142%" y="703.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (134 samples, 0.09%)</title><rect x="94.5855%" y="693" width="0.0890%" height="15" fill="rgb(248,44,4)" fg:x="142336" fg:w="134"/><text x="94.8355%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (121 samples, 0.08%)</title><rect x="94.6745%" y="693" width="0.0804%" height="15" fill="rgb(250,96,46)" fg:x="142470" fg:w="121"/><text x="94.9245%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (23 samples, 0.02%)</title><rect x="94.7396%" y="677" width="0.0153%" height="15" fill="rgb(229,116,26)" fg:x="142568" fg:w="23"/><text x="94.9896%" y="687.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (23 samples, 0.02%)</title><rect x="94.7396%" y="661" width="0.0153%" height="15" fill="rgb(246,94,34)" fg:x="142568" fg:w="23"/><text x="94.9896%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (103 samples, 0.07%)</title><rect x="94.7549%" y="693" width="0.0684%" height="15" fill="rgb(251,73,21)" fg:x="142591" fg:w="103"/><text x="95.0049%" y="703.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.03%)</title><rect x="94.8234%" y="645" width="0.0346%" height="15" fill="rgb(254,121,25)" fg:x="142694" fg:w="52"/><text x="95.0734%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.03%)</title><rect x="94.8234%" y="629" width="0.0346%" height="15" fill="rgb(215,161,49)" fg:x="142694" fg:w="52"/><text x="95.0734%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.03%)</title><rect x="94.8234%" y="613" width="0.0346%" height="15" fill="rgb(221,43,13)" fg:x="142694" fg:w="52"/><text x="95.0734%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (52 samples, 0.03%)</title><rect x="94.8234%" y="597" width="0.0346%" height="15" fill="rgb(249,5,37)" fg:x="142694" fg:w="52"/><text x="95.0734%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (71 samples, 0.05%)</title><rect x="94.8579%" y="613" width="0.0472%" height="15" fill="rgb(226,25,44)" fg:x="142746" fg:w="71"/><text x="95.1079%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (67 samples, 0.04%)</title><rect x="94.9051%" y="613" width="0.0445%" height="15" fill="rgb(238,189,16)" fg:x="142817" fg:w="67"/><text x="95.1551%" y="623.50"></text></g><g><title>one_brc::round_towards_positive (66 samples, 0.04%)</title><rect x="94.9496%" y="613" width="0.0439%" height="15" fill="rgb(251,186,8)" fg:x="142884" fg:w="66"/><text x="95.1996%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (66 samples, 0.04%)</title><rect x="94.9496%" y="597" width="0.0439%" height="15" fill="rgb(254,34,31)" fg:x="142884" fg:w="66"/><text x="95.1996%" y="607.50"></text></g><g><title>[unknown] (1,026 samples, 0.68%)</title><rect x="94.3303%" y="709" width="0.6818%" height="15" fill="rgb(225,215,27)" fg:x="141952" fg:w="1026"/><text x="94.5803%" y="719.50"></text></g><g><title>one_brc::process_lines (284 samples, 0.19%)</title><rect x="94.8234%" y="693" width="0.1887%" height="15" fill="rgb(221,192,48)" fg:x="142694" fg:w="284"/><text x="95.0734%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (284 samples, 0.19%)</title><rect x="94.8234%" y="677" width="0.1887%" height="15" fill="rgb(219,137,20)" fg:x="142694" fg:w="284"/><text x="95.0734%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (284 samples, 0.19%)</title><rect x="94.8234%" y="661" width="0.1887%" height="15" fill="rgb(219,84,11)" fg:x="142694" fg:w="284"/><text x="95.0734%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (232 samples, 0.15%)</title><rect x="94.8579%" y="645" width="0.1542%" height="15" fill="rgb(224,10,23)" fg:x="142746" fg:w="232"/><text x="95.1079%" y="655.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (232 samples, 0.15%)</title><rect x="94.8579%" y="629" width="0.1542%" height="15" fill="rgb(248,22,39)" fg:x="142746" fg:w="232"/><text x="95.1079%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (28 samples, 0.02%)</title><rect x="94.9935%" y="613" width="0.0186%" height="15" fill="rgb(212,154,20)" fg:x="142950" fg:w="28"/><text x="95.2435%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (36 samples, 0.02%)</title><rect x="95.2281%" y="389" width="0.0239%" height="15" fill="rgb(236,199,50)" fg:x="143303" fg:w="36"/><text x="95.4781%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (36 samples, 0.02%)</title><rect x="95.2281%" y="373" width="0.0239%" height="15" fill="rgb(211,9,17)" fg:x="143303" fg:w="36"/><text x="95.4781%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (36 samples, 0.02%)</title><rect x="95.2281%" y="357" width="0.0239%" height="15" fill="rgb(243,216,36)" fg:x="143303" fg:w="36"/><text x="95.4781%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (176 samples, 0.12%)</title><rect x="95.2520%" y="389" width="0.1170%" height="15" fill="rgb(250,2,10)" fg:x="143339" fg:w="176"/><text x="95.5020%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (176 samples, 0.12%)</title><rect x="95.2520%" y="373" width="0.1170%" height="15" fill="rgb(226,50,48)" fg:x="143339" fg:w="176"/><text x="95.5020%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (176 samples, 0.12%)</title><rect x="95.2520%" y="357" width="0.1170%" height="15" fill="rgb(243,81,16)" fg:x="143339" fg:w="176"/><text x="95.5020%" y="367.50"></text></g><g><title>__memcmp_evex_movbe (175 samples, 0.12%)</title><rect x="95.2527%" y="341" width="0.1163%" height="15" fill="rgb(250,14,2)" fg:x="143340" fg:w="175"/><text x="95.5027%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (114 samples, 0.08%)</title><rect x="95.3689%" y="389" width="0.0758%" height="15" fill="rgb(233,135,29)" fg:x="143515" fg:w="114"/><text x="95.6189%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (114 samples, 0.08%)</title><rect x="95.3689%" y="373" width="0.0758%" height="15" fill="rgb(224,64,43)" fg:x="143515" fg:w="114"/><text x="95.6189%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (33 samples, 0.02%)</title><rect x="95.5577%" y="357" width="0.0219%" height="15" fill="rgb(238,84,13)" fg:x="143799" fg:w="33"/><text x="95.8077%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (29 samples, 0.02%)</title><rect x="95.5796%" y="357" width="0.0193%" height="15" fill="rgb(253,48,26)" fg:x="143832" fg:w="29"/><text x="95.8296%" y="367.50"></text></g><g><title>core::ptr::align_offset (29 samples, 0.02%)</title><rect x="95.5796%" y="341" width="0.0193%" height="15" fill="rgb(205,223,31)" fg:x="143832" fg:w="29"/><text x="95.8296%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (86 samples, 0.06%)</title><rect x="95.5989%" y="357" width="0.0571%" height="15" fill="rgb(221,41,32)" fg:x="143861" fg:w="86"/><text x="95.8489%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,569 samples, 1.04%)</title><rect x="95.0639%" y="405" width="1.0426%" height="15" fill="rgb(213,158,31)" fg:x="143056" fg:w="1569"/><text x="95.3139%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (996 samples, 0.66%)</title><rect x="95.4447%" y="389" width="0.6619%" height="15" fill="rgb(245,126,43)" fg:x="143629" fg:w="996"/><text x="95.6947%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (963 samples, 0.64%)</title><rect x="95.4666%" y="373" width="0.6399%" height="15" fill="rgb(227,7,22)" fg:x="143662" fg:w="963"/><text x="95.7166%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_naive (678 samples, 0.45%)</title><rect x="95.6560%" y="357" width="0.4505%" height="15" fill="rgb(252,90,44)" fg:x="143947" fg:w="678"/><text x="95.9060%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,682 samples, 1.12%)</title><rect x="95.0134%" y="437" width="1.1177%" height="15" fill="rgb(253,91,0)" fg:x="142980" fg:w="1682"/><text x="95.2634%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,682 samples, 1.12%)</title><rect x="95.0134%" y="421" width="1.1177%" height="15" fill="rgb(252,175,49)" fg:x="142980" fg:w="1682"/><text x="95.2634%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (37 samples, 0.02%)</title><rect x="96.1066%" y="405" width="0.0246%" height="15" fill="rgb(246,150,1)" fg:x="144625" fg:w="37"/><text x="96.3566%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (37 samples, 0.02%)</title><rect x="96.1066%" y="389" width="0.0246%" height="15" fill="rgb(241,192,25)" fg:x="144625" fg:w="37"/><text x="96.3566%" y="399.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,801 samples, 1.20%)</title><rect x="95.0134%" y="469" width="1.1968%" height="15" fill="rgb(239,187,11)" fg:x="142980" fg:w="1801"/><text x="95.2634%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,801 samples, 1.20%)</title><rect x="95.0134%" y="453" width="1.1968%" height="15" fill="rgb(218,202,51)" fg:x="142980" fg:w="1801"/><text x="95.2634%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (119 samples, 0.08%)</title><rect x="96.1312%" y="437" width="0.0791%" height="15" fill="rgb(225,176,8)" fg:x="144662" fg:w="119"/><text x="96.3812%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (119 samples, 0.08%)</title><rect x="96.1312%" y="421" width="0.0791%" height="15" fill="rgb(219,122,41)" fg:x="144662" fg:w="119"/><text x="96.3812%" y="431.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (119 samples, 0.08%)</title><rect x="96.1312%" y="405" width="0.0791%" height="15" fill="rgb(248,140,20)" fg:x="144662" fg:w="119"/><text x="96.3812%" y="415.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (119 samples, 0.08%)</title><rect x="96.1312%" y="389" width="0.0791%" height="15" fill="rgb(245,41,37)" fg:x="144662" fg:w="119"/><text x="96.3812%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (56 samples, 0.04%)</title><rect x="96.1730%" y="373" width="0.0372%" height="15" fill="rgb(235,82,39)" fg:x="144725" fg:w="56"/><text x="96.4230%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (56 samples, 0.04%)</title><rect x="96.1730%" y="357" width="0.0372%" height="15" fill="rgb(230,108,42)" fg:x="144725" fg:w="56"/><text x="96.4230%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (56 samples, 0.04%)</title><rect x="96.1730%" y="341" width="0.0372%" height="15" fill="rgb(215,150,50)" fg:x="144725" fg:w="56"/><text x="96.4230%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (56 samples, 0.04%)</title><rect x="96.1730%" y="325" width="0.0372%" height="15" fill="rgb(233,212,5)" fg:x="144725" fg:w="56"/><text x="96.4230%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (56 samples, 0.04%)</title><rect x="96.1730%" y="309" width="0.0372%" height="15" fill="rgb(245,80,22)" fg:x="144725" fg:w="56"/><text x="96.4230%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (38 samples, 0.03%)</title><rect x="96.2348%" y="437" width="0.0253%" height="15" fill="rgb(238,129,16)" fg:x="144818" fg:w="38"/><text x="96.4848%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (36 samples, 0.02%)</title><rect x="96.2601%" y="405" width="0.0239%" height="15" fill="rgb(240,19,0)" fg:x="144856" fg:w="36"/><text x="96.5101%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (87 samples, 0.06%)</title><rect x="96.3910%" y="373" width="0.0578%" height="15" fill="rgb(232,42,35)" fg:x="145053" fg:w="87"/><text x="96.6410%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (127 samples, 0.08%)</title><rect x="96.4488%" y="373" width="0.0844%" height="15" fill="rgb(223,130,24)" fg:x="145140" fg:w="127"/><text x="96.6988%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (33 samples, 0.02%)</title><rect x="96.5332%" y="373" width="0.0219%" height="15" fill="rgb(237,16,22)" fg:x="145267" fg:w="33"/><text x="96.7832%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (313 samples, 0.21%)</title><rect x="96.3478%" y="389" width="0.2080%" height="15" fill="rgb(248,192,20)" fg:x="144988" fg:w="313"/><text x="96.5978%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (133 samples, 0.09%)</title><rect x="96.6023%" y="373" width="0.0884%" height="15" fill="rgb(233,167,2)" fg:x="145371" fg:w="133"/><text x="96.8523%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (29 samples, 0.02%)</title><rect x="96.9817%" y="325" width="0.0193%" height="15" fill="rgb(252,71,44)" fg:x="145942" fg:w="29"/><text x="97.2317%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (29 samples, 0.02%)</title><rect x="97.0017%" y="309" width="0.0193%" height="15" fill="rgb(238,37,47)" fg:x="145972" fg:w="29"/><text x="97.2517%" y="319.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (333 samples, 0.22%)</title><rect x="96.8183%" y="341" width="0.2213%" height="15" fill="rgb(214,202,54)" fg:x="145696" fg:w="333"/><text x="97.0683%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (58 samples, 0.04%)</title><rect x="97.0010%" y="325" width="0.0385%" height="15" fill="rgb(254,165,40)" fg:x="145971" fg:w="58"/><text x="97.2510%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (28 samples, 0.02%)</title><rect x="97.0209%" y="309" width="0.0186%" height="15" fill="rgb(246,173,38)" fg:x="146001" fg:w="28"/><text x="97.2709%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,177 samples, 0.78%)</title><rect x="96.2601%" y="437" width="0.7821%" height="15" fill="rgb(215,3,27)" fg:x="144856" fg:w="1177"/><text x="96.5101%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,177 samples, 0.78%)</title><rect x="96.2601%" y="421" width="0.7821%" height="15" fill="rgb(239,169,51)" fg:x="144856" fg:w="1177"/><text x="96.5101%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (1,141 samples, 0.76%)</title><rect x="96.2840%" y="405" width="0.7582%" height="15" fill="rgb(212,5,25)" fg:x="144892" fg:w="1141"/><text x="96.5340%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (732 samples, 0.49%)</title><rect x="96.5558%" y="389" width="0.4864%" height="15" fill="rgb(243,45,17)" fg:x="145301" fg:w="732"/><text x="96.8058%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (529 samples, 0.35%)</title><rect x="96.6907%" y="373" width="0.3515%" height="15" fill="rgb(242,97,9)" fg:x="145504" fg:w="529"/><text x="96.9407%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (417 samples, 0.28%)</title><rect x="96.7651%" y="357" width="0.2771%" height="15" fill="rgb(228,71,31)" fg:x="145616" fg:w="417"/><text x="97.0151%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (62 samples, 0.04%)</title><rect x="97.0635%" y="421" width="0.0412%" height="15" fill="rgb(252,184,16)" fg:x="146065" fg:w="62"/><text x="97.3135%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (31 samples, 0.02%)</title><rect x="97.2675%" y="405" width="0.0206%" height="15" fill="rgb(236,169,46)" fg:x="146372" fg:w="31"/><text x="97.5175%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (31 samples, 0.02%)</title><rect x="97.2675%" y="389" width="0.0206%" height="15" fill="rgb(207,17,47)" fg:x="146372" fg:w="31"/><text x="97.5175%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.02%)</title><rect x="97.2675%" y="373" width="0.0206%" height="15" fill="rgb(206,201,28)" fg:x="146372" fg:w="31"/><text x="97.5175%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (285 samples, 0.19%)</title><rect x="97.2881%" y="405" width="0.1894%" height="15" fill="rgb(224,184,23)" fg:x="146403" fg:w="285"/><text x="97.5381%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (285 samples, 0.19%)</title><rect x="97.2881%" y="389" width="0.1894%" height="15" fill="rgb(208,139,48)" fg:x="146403" fg:w="285"/><text x="97.5381%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (285 samples, 0.19%)</title><rect x="97.2881%" y="373" width="0.1894%" height="15" fill="rgb(208,130,10)" fg:x="146403" fg:w="285"/><text x="97.5381%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (263 samples, 0.17%)</title><rect x="97.3027%" y="357" width="0.1748%" height="15" fill="rgb(211,213,45)" fg:x="146425" fg:w="263"/><text x="97.5527%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (98 samples, 0.07%)</title><rect x="97.4775%" y="405" width="0.0651%" height="15" fill="rgb(235,100,30)" fg:x="146688" fg:w="98"/><text x="97.7275%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (98 samples, 0.07%)</title><rect x="97.4775%" y="389" width="0.0651%" height="15" fill="rgb(206,144,31)" fg:x="146688" fg:w="98"/><text x="97.7275%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (171 samples, 0.11%)</title><rect x="97.5453%" y="389" width="0.1136%" height="15" fill="rgb(224,200,26)" fg:x="146790" fg:w="171"/><text x="97.7953%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (124 samples, 0.08%)</title><rect x="97.5765%" y="373" width="0.0824%" height="15" fill="rgb(247,104,53)" fg:x="146837" fg:w="124"/><text x="97.8265%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1,255 samples, 0.83%)</title><rect x="97.0422%" y="437" width="0.8340%" height="15" fill="rgb(220,14,17)" fg:x="146033" fg:w="1255"/><text x="97.2922%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,156 samples, 0.77%)</title><rect x="97.1080%" y="421" width="0.7682%" height="15" fill="rgb(230,140,40)" fg:x="146132" fg:w="1156"/><text x="97.3580%" y="431.50"></text></g><g><title>core::slice::memchr::memchr (502 samples, 0.33%)</title><rect x="97.5426%" y="405" width="0.3336%" height="15" fill="rgb(229,2,41)" fg:x="146786" fg:w="502"/><text x="97.7926%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (327 samples, 0.22%)</title><rect x="97.6589%" y="389" width="0.2173%" height="15" fill="rgb(232,89,16)" fg:x="146961" fg:w="327"/><text x="97.9089%" y="399.50"></text></g><g><title>one_brc::round_towards_positive (222 samples, 0.15%)</title><rect x="97.8762%" y="437" width="0.1475%" height="15" fill="rgb(247,59,52)" fg:x="147288" fg:w="222"/><text x="98.1262%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::round (150 samples, 0.10%)</title><rect x="97.9240%" y="421" width="0.0997%" height="15" fill="rgb(226,110,21)" fg:x="147360" fg:w="150"/><text x="98.1740%" y="431.50"></text></g><g><title>__round (150 samples, 0.10%)</title><rect x="97.9240%" y="405" width="0.0997%" height="15" fill="rgb(224,176,43)" fg:x="147360" fg:w="150"/><text x="98.1740%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (49 samples, 0.03%)</title><rect x="98.1048%" y="389" width="0.0326%" height="15" fill="rgb(221,73,6)" fg:x="147632" fg:w="49"/><text x="98.3548%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (223 samples, 0.15%)</title><rect x="98.0237%" y="437" width="0.1482%" height="15" fill="rgb(232,78,19)" fg:x="147510" fg:w="223"/><text x="98.2737%" y="447.50"></text></g><g><title>one_brc::process_lines::_{{closure}}::_{{closure}} (223 samples, 0.15%)</title><rect x="98.0237%" y="421" width="0.1482%" height="15" fill="rgb(233,112,48)" fg:x="147510" fg:w="223"/><text x="98.2737%" y="431.50"></text></g><g><title>one_brc::Measurement::record (223 samples, 0.15%)</title><rect x="98.0237%" y="405" width="0.1482%" height="15" fill="rgb(243,131,47)" fg:x="147510" fg:w="223"/><text x="98.2737%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (52 samples, 0.03%)</title><rect x="98.1373%" y="389" width="0.0346%" height="15" fill="rgb(226,51,1)" fg:x="147681" fg:w="52"/><text x="98.3873%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (68 samples, 0.05%)</title><rect x="98.3952%" y="309" width="0.0452%" height="15" fill="rgb(247,58,7)" fg:x="148069" fg:w="68"/><text x="98.6452%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (141 samples, 0.09%)</title><rect x="98.3713%" y="325" width="0.0937%" height="15" fill="rgb(209,7,32)" fg:x="148033" fg:w="141"/><text x="98.6213%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (37 samples, 0.02%)</title><rect x="98.4404%" y="309" width="0.0246%" height="15" fill="rgb(209,39,41)" fg:x="148137" fg:w="37"/><text x="98.6904%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (149 samples, 0.10%)</title><rect x="98.5161%" y="309" width="0.0990%" height="15" fill="rgb(226,182,46)" fg:x="148251" fg:w="149"/><text x="98.7661%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (575 samples, 0.38%)</title><rect x="98.3021%" y="341" width="0.3821%" height="15" fill="rgb(230,219,10)" fg:x="147929" fg:w="575"/><text x="98.5521%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (330 samples, 0.22%)</title><rect x="98.4650%" y="325" width="0.2193%" height="15" fill="rgb(227,175,30)" fg:x="148174" fg:w="330"/><text x="98.7150%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (104 samples, 0.07%)</title><rect x="98.6151%" y="309" width="0.0691%" height="15" fill="rgb(217,2,50)" fg:x="148400" fg:w="104"/><text x="98.8651%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (577 samples, 0.38%)</title><rect x="98.3021%" y="373" width="0.3834%" height="15" fill="rgb(229,160,0)" fg:x="147929" fg:w="577"/><text x="98.5521%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (577 samples, 0.38%)</title><rect x="98.3021%" y="357" width="0.3834%" height="15" fill="rgb(207,78,37)" fg:x="147929" fg:w="577"/><text x="98.5521%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (64 samples, 0.04%)</title><rect x="98.6856%" y="373" width="0.0425%" height="15" fill="rgb(225,57,0)" fg:x="148506" fg:w="64"/><text x="98.9356%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (32 samples, 0.02%)</title><rect x="98.7068%" y="357" width="0.0213%" height="15" fill="rgb(232,154,2)" fg:x="148538" fg:w="32"/><text x="98.9568%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (32 samples, 0.02%)</title><rect x="98.7068%" y="341" width="0.0213%" height="15" fill="rgb(241,212,25)" fg:x="148538" fg:w="32"/><text x="98.9568%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (32 samples, 0.02%)</title><rect x="98.7068%" y="325" width="0.0213%" height="15" fill="rgb(226,69,20)" fg:x="148538" fg:w="32"/><text x="98.9568%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (57 samples, 0.04%)</title><rect x="98.8284%" y="261" width="0.0379%" height="15" fill="rgb(247,184,54)" fg:x="148721" fg:w="57"/><text x="99.0784%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (17 samples, 0.01%)</title><rect x="98.8550%" y="245" width="0.0113%" height="15" fill="rgb(210,145,0)" fg:x="148761" fg:w="17"/><text x="99.1050%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (32 samples, 0.02%)</title><rect x="98.8663%" y="261" width="0.0213%" height="15" fill="rgb(253,82,12)" fg:x="148778" fg:w="32"/><text x="99.1163%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (363 samples, 0.24%)</title><rect x="98.7494%" y="277" width="0.2412%" height="15" fill="rgb(245,42,11)" fg:x="148602" fg:w="363"/><text x="98.9994%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (155 samples, 0.10%)</title><rect x="98.8876%" y="261" width="0.1030%" height="15" fill="rgb(219,147,32)" fg:x="148810" fg:w="155"/><text x="99.1376%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (36 samples, 0.02%)</title><rect x="98.9906%" y="277" width="0.0239%" height="15" fill="rgb(246,12,7)" fg:x="148965" fg:w="36"/><text x="99.2406%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.02%)</title><rect x="99.1215%" y="245" width="0.0159%" height="15" fill="rgb(243,50,9)" fg:x="149162" fg:w="24"/><text x="99.3715%" y="255.50"></text></g><g><title>core::cmp::min (31 samples, 0.02%)</title><rect x="99.1428%" y="245" width="0.0206%" height="15" fill="rgb(219,149,6)" fg:x="149194" fg:w="31"/><text x="99.3928%" y="255.50"></text></g><g><title>core::cmp::Ord::min (31 samples, 0.02%)</title><rect x="99.1428%" y="229" width="0.0206%" height="15" fill="rgb(241,51,42)" fg:x="149194" fg:w="31"/><text x="99.3928%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.620444986131417454 (31 samples, 0.02%)</title><rect x="99.1428%" y="213" width="0.0206%" height="15" fill="rgb(226,128,27)" fg:x="149194" fg:w="31"/><text x="99.3928%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (335 samples, 0.22%)</title><rect x="99.0398%" y="261" width="0.2226%" height="15" fill="rgb(244,144,4)" fg:x="149039" fg:w="335"/><text x="99.2898%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (149 samples, 0.10%)</title><rect x="99.1634%" y="245" width="0.0990%" height="15" fill="rgb(221,4,13)" fg:x="149225" fg:w="149"/><text x="99.4134%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,492 samples, 0.99%)</title><rect x="98.2796%" y="405" width="0.9915%" height="15" fill="rgb(208,170,28)" fg:x="147895" fg:w="1492"/><text x="98.5296%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,492 samples, 0.99%)</title><rect x="98.2796%" y="389" width="0.9915%" height="15" fill="rgb(226,131,13)" fg:x="147895" fg:w="1492"/><text x="98.5296%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (817 samples, 0.54%)</title><rect x="98.7281%" y="373" width="0.5429%" height="15" fill="rgb(215,72,41)" fg:x="148570" fg:w="817"/><text x="98.9781%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (785 samples, 0.52%)</title><rect x="98.7494%" y="357" width="0.5217%" height="15" fill="rgb(243,108,20)" fg:x="148602" fg:w="785"/><text x="98.9994%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (785 samples, 0.52%)</title><rect x="98.7494%" y="341" width="0.5217%" height="15" fill="rgb(230,189,17)" fg:x="148602" fg:w="785"/><text x="98.9994%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (785 samples, 0.52%)</title><rect x="98.7494%" y="325" width="0.5217%" height="15" fill="rgb(220,50,17)" fg:x="148602" fg:w="785"/><text x="98.9994%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (785 samples, 0.52%)</title><rect x="98.7494%" y="309" width="0.5217%" height="15" fill="rgb(248,152,48)" fg:x="148602" fg:w="785"/><text x="98.9994%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (785 samples, 0.52%)</title><rect x="98.7494%" y="293" width="0.5217%" height="15" fill="rgb(244,91,11)" fg:x="148602" fg:w="785"/><text x="98.9994%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (386 samples, 0.26%)</title><rect x="99.0145%" y="277" width="0.2565%" height="15" fill="rgb(220,157,5)" fg:x="149001" fg:w="386"/><text x="99.2645%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="99.3049%" y="373" width="0.0259%" height="15" fill="rgb(253,137,8)" fg:x="149438" fg:w="39"/><text x="99.5549%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (37 samples, 0.02%)</title><rect x="99.3521%" y="357" width="0.0246%" height="15" fill="rgb(217,137,51)" fg:x="149509" fg:w="37"/><text x="99.6021%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (37 samples, 0.02%)</title><rect x="99.3521%" y="341" width="0.0246%" height="15" fill="rgb(218,209,53)" fg:x="149509" fg:w="37"/><text x="99.6021%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (37 samples, 0.02%)</title><rect x="99.3521%" y="325" width="0.0246%" height="15" fill="rgb(249,137,25)" fg:x="149509" fg:w="37"/><text x="99.6021%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (800 samples, 0.53%)</title><rect x="99.3308%" y="373" width="0.5316%" height="15" fill="rgb(239,155,26)" fg:x="149477" fg:w="800"/><text x="99.5808%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (731 samples, 0.49%)</title><rect x="99.3767%" y="357" width="0.4858%" height="15" fill="rgb(227,85,46)" fg:x="149546" fg:w="731"/><text x="99.6267%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (731 samples, 0.49%)</title><rect x="99.3767%" y="341" width="0.4858%" height="15" fill="rgb(251,107,43)" fg:x="149546" fg:w="731"/><text x="99.6267%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (731 samples, 0.49%)</title><rect x="99.3767%" y="325" width="0.4858%" height="15" fill="rgb(234,170,33)" fg:x="149546" fg:w="731"/><text x="99.6267%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (731 samples, 0.49%)</title><rect x="99.3767%" y="309" width="0.4858%" height="15" fill="rgb(206,29,35)" fg:x="149546" fg:w="731"/><text x="99.6267%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (731 samples, 0.49%)</title><rect x="99.3767%" y="293" width="0.4858%" height="15" fill="rgb(227,138,25)" fg:x="149546" fg:w="731"/><text x="99.6267%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (731 samples, 0.49%)</title><rect x="99.3767%" y="277" width="0.4858%" height="15" fill="rgb(249,131,35)" fg:x="149546" fg:w="731"/><text x="99.6267%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (457 samples, 0.30%)</title><rect x="99.5588%" y="261" width="0.3037%" height="15" fill="rgb(239,6,40)" fg:x="149820" fg:w="457"/><text x="99.8088%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (76 samples, 0.05%)</title><rect x="99.8624%" y="373" width="0.0505%" height="15" fill="rgb(246,136,47)" fg:x="150277" fg:w="76"/><text x="100.1124%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (62 samples, 0.04%)</title><rect x="99.9129%" y="341" width="0.0412%" height="15" fill="rgb(253,58,26)" fg:x="150353" fg:w="62"/><text x="100.1629%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (71 samples, 0.05%)</title><rect x="99.9129%" y="373" width="0.0472%" height="15" fill="rgb(237,141,10)" fg:x="150353" fg:w="71"/><text x="100.1629%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (71 samples, 0.05%)</title><rect x="99.9129%" y="357" width="0.0472%" height="15" fill="rgb(234,156,12)" fg:x="150353" fg:w="71"/><text x="100.1629%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,677 samples, 1.78%)</title><rect x="98.1918%" y="421" width="1.7789%" height="15" fill="rgb(243,224,36)" fg:x="147763" fg:w="2677"/><text x="98.4418%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,053 samples, 0.70%)</title><rect x="99.2710%" y="405" width="0.6997%" height="15" fill="rgb(205,229,51)" fg:x="149387" fg:w="1053"/><text x="99.5210%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,010 samples, 0.67%)</title><rect x="99.2996%" y="389" width="0.6712%" height="15" fill="rgb(223,189,4)" fg:x="149430" fg:w="1010"/><text x="99.5496%" y="399.50"></text></g><g><title>all (150,484 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(249,167,54)" fg:x="0" fg:w="150484"/><text x="0.2500%" y="751.50"></text></g><g><title>worker-9 (9,504 samples, 6.32%)</title><rect x="93.6844%" y="725" width="6.3156%" height="15" fill="rgb(218,34,28)" fg:x="140980" fg:w="9504"/><text x="93.9344%" y="735.50">worker-9</text></g><g><title>__clone3 (7,506 samples, 4.99%)</title><rect x="95.0121%" y="709" width="4.9879%" height="15" fill="rgb(232,109,42)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="719.50">__clon..</text></g><g><title>start_thread (7,506 samples, 4.99%)</title><rect x="95.0121%" y="693" width="4.9879%" height="15" fill="rgb(248,214,46)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="703.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (7,506 samples, 4.99%)</title><rect x="95.0121%" y="677" width="4.9879%" height="15" fill="rgb(244,216,40)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="687.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7,506 samples, 4.99%)</title><rect x="95.0121%" y="661" width="4.9879%" height="15" fill="rgb(231,226,31)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="671.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (7,506 samples, 4.99%)</title><rect x="95.0121%" y="645" width="4.9879%" height="15" fill="rgb(238,38,43)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="655.50">std::t..</text></g><g><title>std::panic::catch_unwind (7,506 samples, 4.99%)</title><rect x="95.0121%" y="629" width="4.9879%" height="15" fill="rgb(208,88,43)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="639.50">std::p..</text></g><g><title>std::panicking::try (7,506 samples, 4.99%)</title><rect x="95.0121%" y="613" width="4.9879%" height="15" fill="rgb(205,136,37)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="623.50">std::p..</text></g><g><title>std::panicking::try::do_call (7,506 samples, 4.99%)</title><rect x="95.0121%" y="597" width="4.9879%" height="15" fill="rgb(237,34,14)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="607.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,506 samples, 4.99%)</title><rect x="95.0121%" y="581" width="4.9879%" height="15" fill="rgb(236,193,44)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="591.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (7,506 samples, 4.99%)</title><rect x="95.0121%" y="565" width="4.9879%" height="15" fill="rgb(231,48,10)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="575.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7,506 samples, 4.99%)</title><rect x="95.0121%" y="549" width="4.9879%" height="15" fill="rgb(213,141,34)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="559.50">std::s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (7,506 samples, 4.99%)</title><rect x="95.0121%" y="533" width="4.9879%" height="15" fill="rgb(249,130,34)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="543.50">one_br..</text></g><g><title>one_brc::process_lines (7,506 samples, 4.99%)</title><rect x="95.0121%" y="517" width="4.9879%" height="15" fill="rgb(219,42,41)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="527.50">one_br..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7,506 samples, 4.99%)</title><rect x="95.0121%" y="501" width="4.9879%" height="15" fill="rgb(224,100,54)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="511.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7,506 samples, 4.99%)</title><rect x="95.0121%" y="485" width="4.9879%" height="15" fill="rgb(229,200,27)" fg:x="142978" fg:w="7506"/><text x="95.2621%" y="495.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,703 samples, 3.79%)</title><rect x="96.2102%" y="469" width="3.7898%" height="15" fill="rgb(217,118,10)" fg:x="144781" fg:w="5703"/><text x="96.4602%" y="479.50">core..</text></g><g><title>one_brc::process_lines::_{{closure}} (5,703 samples, 3.79%)</title><rect x="96.2102%" y="453" width="3.7898%" height="15" fill="rgb(206,22,3)" fg:x="144781" fg:w="5703"/><text x="96.4602%" y="463.50">one_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,751 samples, 1.83%)</title><rect x="98.1719%" y="437" width="1.8281%" height="15" fill="rgb(232,163,46)" fg:x="147733" fg:w="2751"/><text x="98.4219%" y="447.50">s..</text></g><g><title>std::collections::hash::map::map_entry (44 samples, 0.03%)</title><rect x="99.9708%" y="421" width="0.0292%" height="15" fill="rgb(206,95,13)" fg:x="150440" fg:w="44"/><text x="100.2208%" y="431.50"></text></g></svg></svg>