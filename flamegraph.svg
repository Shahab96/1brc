<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="174266"><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,457 samples, 0.84%)</title><rect x="0.0000%" y="821" width="0.8361%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1457"/><text x="0.2500%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (765 samples, 0.44%)</title><rect x="0.3971%" y="805" width="0.4390%" height="15" fill="rgb(217,0,24)" fg:x="692" fg:w="765"/><text x="0.6471%" y="815.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (765 samples, 0.44%)</title><rect x="0.3971%" y="789" width="0.4390%" height="15" fill="rgb(221,193,54)" fg:x="692" fg:w="765"/><text x="0.6471%" y="799.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (765 samples, 0.44%)</title><rect x="0.3971%" y="773" width="0.4390%" height="15" fill="rgb(248,212,6)" fg:x="692" fg:w="765"/><text x="0.6471%" y="783.50"></text></g><g><title>[anon] (2,209 samples, 1.27%)</title><rect x="0.0000%" y="837" width="1.2676%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2209"/><text x="0.2500%" y="847.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (752 samples, 0.43%)</title><rect x="0.8361%" y="821" width="0.4315%" height="15" fill="rgb(232,128,0)" fg:x="1457" fg:w="752"/><text x="1.0861%" y="831.50"></text></g><g><title>core::num::dec2flt::dec2flt (752 samples, 0.43%)</title><rect x="0.8361%" y="805" width="0.4315%" height="15" fill="rgb(207,160,47)" fg:x="1457" fg:w="752"/><text x="1.0861%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (752 samples, 0.43%)</title><rect x="0.8361%" y="789" width="0.4315%" height="15" fill="rgb(228,23,34)" fg:x="1457" fg:w="752"/><text x="1.0861%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,559 samples, 0.89%)</title><rect x="1.2814%" y="821" width="0.8946%" height="15" fill="rgb(218,30,26)" fg:x="2233" fg:w="1559"/><text x="1.5314%" y="831.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3,065 samples, 1.76%)</title><rect x="2.1760%" y="821" width="1.7588%" height="15" fill="rgb(220,122,19)" fg:x="3792" fg:w="3065"/><text x="2.4260%" y="831.50"></text></g><g><title>[unknown] (759 samples, 0.44%)</title><rect x="3.9348%" y="821" width="0.4355%" height="15" fill="rgb(250,228,42)" fg:x="6857" fg:w="759"/><text x="4.1848%" y="831.50"></text></g><g><title>[unknown] (759 samples, 0.44%)</title><rect x="3.9348%" y="805" width="0.4355%" height="15" fill="rgb(240,193,28)" fg:x="6857" fg:w="759"/><text x="4.1848%" y="815.50"></text></g><g><title>[unknown] (759 samples, 0.44%)</title><rect x="3.9348%" y="789" width="0.4355%" height="15" fill="rgb(216,20,37)" fg:x="6857" fg:w="759"/><text x="4.1848%" y="799.50"></text></g><g><title>[unknown] (758 samples, 0.43%)</title><rect x="3.9354%" y="773" width="0.4350%" height="15" fill="rgb(206,188,39)" fg:x="6858" fg:w="758"/><text x="4.1854%" y="783.50"></text></g><g><title>[unknown] (758 samples, 0.43%)</title><rect x="3.9354%" y="757" width="0.4350%" height="15" fill="rgb(217,207,13)" fg:x="6858" fg:w="758"/><text x="4.1854%" y="767.50"></text></g><g><title>[unknown] (757 samples, 0.43%)</title><rect x="3.9359%" y="741" width="0.4344%" height="15" fill="rgb(231,73,38)" fg:x="6859" fg:w="757"/><text x="4.1859%" y="751.50"></text></g><g><title>[unknown] (757 samples, 0.43%)</title><rect x="3.9359%" y="725" width="0.4344%" height="15" fill="rgb(225,20,46)" fg:x="6859" fg:w="757"/><text x="4.1859%" y="735.50"></text></g><g><title>[unknown] (757 samples, 0.43%)</title><rect x="3.9359%" y="709" width="0.4344%" height="15" fill="rgb(210,31,41)" fg:x="6859" fg:w="757"/><text x="4.1859%" y="719.50"></text></g><g><title>[unknown] (678 samples, 0.39%)</title><rect x="3.9813%" y="693" width="0.3891%" height="15" fill="rgb(221,200,47)" fg:x="6938" fg:w="678"/><text x="4.2313%" y="703.50"></text></g><g><title>[unknown] (677 samples, 0.39%)</title><rect x="3.9818%" y="677" width="0.3885%" height="15" fill="rgb(226,26,5)" fg:x="6939" fg:w="677"/><text x="4.2318%" y="687.50"></text></g><g><title>[unknown] (676 samples, 0.39%)</title><rect x="3.9824%" y="661" width="0.3879%" height="15" fill="rgb(249,33,26)" fg:x="6940" fg:w="676"/><text x="4.2324%" y="671.50"></text></g><g><title>[unknown] (675 samples, 0.39%)</title><rect x="3.9830%" y="645" width="0.3873%" height="15" fill="rgb(235,183,28)" fg:x="6941" fg:w="675"/><text x="4.2330%" y="655.50"></text></g><g><title>[unknown] (675 samples, 0.39%)</title><rect x="3.9830%" y="629" width="0.3873%" height="15" fill="rgb(221,5,38)" fg:x="6941" fg:w="675"/><text x="4.2330%" y="639.50"></text></g><g><title>[unknown] (562 samples, 0.32%)</title><rect x="4.0478%" y="613" width="0.3225%" height="15" fill="rgb(247,18,42)" fg:x="7054" fg:w="562"/><text x="4.2978%" y="623.50"></text></g><g><title>[unknown] (512 samples, 0.29%)</title><rect x="4.0765%" y="597" width="0.2938%" height="15" fill="rgb(241,131,45)" fg:x="7104" fg:w="512"/><text x="4.3265%" y="607.50"></text></g><g><title>[unknown] (490 samples, 0.28%)</title><rect x="4.0892%" y="581" width="0.2812%" height="15" fill="rgb(249,31,29)" fg:x="7126" fg:w="490"/><text x="4.3392%" y="591.50"></text></g><g><title>[unknown] (463 samples, 0.27%)</title><rect x="4.1046%" y="565" width="0.2657%" height="15" fill="rgb(225,111,53)" fg:x="7153" fg:w="463"/><text x="4.3546%" y="575.50"></text></g><g><title>[unknown] (364 samples, 0.21%)</title><rect x="4.1615%" y="549" width="0.2089%" height="15" fill="rgb(238,160,17)" fg:x="7252" fg:w="364"/><text x="4.4115%" y="559.50"></text></g><g><title>[unknown] (259 samples, 0.15%)</title><rect x="4.2217%" y="533" width="0.1486%" height="15" fill="rgb(214,148,48)" fg:x="7357" fg:w="259"/><text x="4.4717%" y="543.50"></text></g><g><title>[unknown] (157 samples, 0.09%)</title><rect x="4.2802%" y="517" width="0.0901%" height="15" fill="rgb(232,36,49)" fg:x="7459" fg:w="157"/><text x="4.5302%" y="527.50"></text></g><g><title>[unknown] (114 samples, 0.07%)</title><rect x="4.3049%" y="501" width="0.0654%" height="15" fill="rgb(209,103,24)" fg:x="7502" fg:w="114"/><text x="4.5549%" y="511.50"></text></g><g><title>__memcmp_evex_movbe (534 samples, 0.31%)</title><rect x="4.3703%" y="821" width="0.3064%" height="15" fill="rgb(229,88,8)" fg:x="7616" fg:w="534"/><text x="4.6203%" y="831.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2,494 samples, 1.43%)</title><rect x="4.6768%" y="821" width="1.4311%" height="15" fill="rgb(213,181,19)" fg:x="8150" fg:w="2494"/><text x="4.9268%" y="831.50"></text></g><g><title>core::num::dec2flt::dec2flt (686 samples, 0.39%)</title><rect x="5.7143%" y="805" width="0.3937%" height="15" fill="rgb(254,191,54)" fg:x="9958" fg:w="686"/><text x="5.9643%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (686 samples, 0.39%)</title><rect x="5.7143%" y="789" width="0.3937%" height="15" fill="rgb(241,83,37)" fg:x="9958" fg:w="686"/><text x="5.9643%" y="799.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (812 samples, 0.47%)</title><rect x="6.1079%" y="757" width="0.4660%" height="15" fill="rgb(233,36,39)" fg:x="10644" fg:w="812"/><text x="6.3579%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (812 samples, 0.47%)</title><rect x="6.1079%" y="741" width="0.4660%" height="15" fill="rgb(226,3,54)" fg:x="10644" fg:w="812"/><text x="6.3579%" y="751.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (812 samples, 0.47%)</title><rect x="6.1079%" y="725" width="0.4660%" height="15" fill="rgb(245,192,40)" fg:x="10644" fg:w="812"/><text x="6.3579%" y="735.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (812 samples, 0.47%)</title><rect x="6.1079%" y="709" width="0.4660%" height="15" fill="rgb(238,167,29)" fg:x="10644" fg:w="812"/><text x="6.3579%" y="719.50"></text></g><g><title>one_brc::parse_line (739 samples, 0.42%)</title><rect x="6.5739%" y="757" width="0.4241%" height="15" fill="rgb(232,182,51)" fg:x="11456" fg:w="739"/><text x="6.8239%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (739 samples, 0.42%)</title><rect x="6.5739%" y="741" width="0.4241%" height="15" fill="rgb(231,60,39)" fg:x="11456" fg:w="739"/><text x="6.8239%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (1,304 samples, 0.75%)</title><rect x="6.9979%" y="709" width="0.7483%" height="15" fill="rgb(208,69,12)" fg:x="12195" fg:w="1304"/><text x="7.2479%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,304 samples, 0.75%)</title><rect x="6.9979%" y="693" width="0.7483%" height="15" fill="rgb(235,93,37)" fg:x="12195" fg:w="1304"/><text x="7.2479%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,304 samples, 0.75%)</title><rect x="6.9979%" y="677" width="0.7483%" height="15" fill="rgb(213,116,39)" fg:x="12195" fg:w="1304"/><text x="7.2479%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,304 samples, 0.75%)</title><rect x="6.9979%" y="661" width="0.7483%" height="15" fill="rgb(222,207,29)" fg:x="12195" fg:w="1304"/><text x="7.2479%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,304 samples, 0.75%)</title><rect x="6.9979%" y="645" width="0.7483%" height="15" fill="rgb(206,96,30)" fg:x="12195" fg:w="1304"/><text x="7.2479%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,304 samples, 0.75%)</title><rect x="6.9979%" y="629" width="0.7483%" height="15" fill="rgb(218,138,4)" fg:x="12195" fg:w="1304"/><text x="7.2479%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,304 samples, 0.75%)</title><rect x="6.9979%" y="613" width="0.7483%" height="15" fill="rgb(250,191,14)" fg:x="12195" fg:w="1304"/><text x="7.2479%" y="623.50"></text></g><g><title>core::hash::Hasher::write_u8 (743 samples, 0.43%)</title><rect x="7.3198%" y="597" width="0.4264%" height="15" fill="rgb(239,60,40)" fg:x="12756" fg:w="743"/><text x="7.5698%" y="607.50"></text></g><g><title>[unknown] (12,172 samples, 6.98%)</title><rect x="1.2676%" y="837" width="6.9847%" height="15" fill="rgb(206,27,48)" fg:x="2209" fg:w="12172"/><text x="1.5176%" y="847.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,737 samples, 2.14%)</title><rect x="6.1079%" y="821" width="2.1444%" height="15" fill="rgb(225,35,8)" fg:x="10644" fg:w="3737"/><text x="6.3579%" y="831.50">s..</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (3,737 samples, 2.14%)</title><rect x="6.1079%" y="805" width="2.1444%" height="15" fill="rgb(250,213,24)" fg:x="10644" fg:w="3737"/><text x="6.3579%" y="815.50">o..</text></g><g><title>one_brc::process_mapped_lines (3,737 samples, 2.14%)</title><rect x="6.1079%" y="789" width="2.1444%" height="15" fill="rgb(247,123,22)" fg:x="10644" fg:w="3737"/><text x="6.3579%" y="799.50">o..</text></g><g><title>one_brc::process_lines (3,737 samples, 2.14%)</title><rect x="6.1079%" y="773" width="2.1444%" height="15" fill="rgb(231,138,38)" fg:x="10644" fg:w="3737"/><text x="6.3579%" y="783.50">o..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,186 samples, 1.25%)</title><rect x="6.9979%" y="757" width="1.2544%" height="15" fill="rgb(231,145,46)" fg:x="12195" fg:w="2186"/><text x="7.2479%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,186 samples, 1.25%)</title><rect x="6.9979%" y="741" width="1.2544%" height="15" fill="rgb(251,118,11)" fg:x="12195" fg:w="2186"/><text x="7.2479%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,186 samples, 1.25%)</title><rect x="6.9979%" y="725" width="1.2544%" height="15" fill="rgb(217,147,25)" fg:x="12195" fg:w="2186"/><text x="7.2479%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (882 samples, 0.51%)</title><rect x="7.7462%" y="709" width="0.5061%" height="15" fill="rgb(247,81,37)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (882 samples, 0.51%)</title><rect x="7.7462%" y="693" width="0.5061%" height="15" fill="rgb(209,12,38)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (882 samples, 0.51%)</title><rect x="7.7462%" y="677" width="0.5061%" height="15" fill="rgb(227,1,9)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (882 samples, 0.51%)</title><rect x="7.7462%" y="661" width="0.5061%" height="15" fill="rgb(248,47,43)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (882 samples, 0.51%)</title><rect x="7.7462%" y="645" width="0.5061%" height="15" fill="rgb(221,10,30)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="655.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (882 samples, 0.51%)</title><rect x="7.7462%" y="629" width="0.5061%" height="15" fill="rgb(210,229,1)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (882 samples, 0.51%)</title><rect x="7.7462%" y="613" width="0.5061%" height="15" fill="rgb(222,148,37)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (882 samples, 0.51%)</title><rect x="7.7462%" y="597" width="0.5061%" height="15" fill="rgb(234,67,33)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (882 samples, 0.51%)</title><rect x="7.7462%" y="581" width="0.5061%" height="15" fill="rgb(247,98,35)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (882 samples, 0.51%)</title><rect x="7.7462%" y="565" width="0.5061%" height="15" fill="rgb(247,138,52)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (882 samples, 0.51%)</title><rect x="7.7462%" y="549" width="0.5061%" height="15" fill="rgb(213,79,30)" fg:x="13499" fg:w="882"/><text x="7.9962%" y="559.50"></text></g><g><title>__GI___libc_read (16,173 samples, 9.28%)</title><rect x="8.2535%" y="661" width="9.2806%" height="15" fill="rgb(246,177,23)" fg:x="14383" fg:w="16173"/><text x="8.5035%" y="671.50">__GI___libc_r..</text></g><g><title>__GI___libc_read (16,173 samples, 9.28%)</title><rect x="8.2535%" y="645" width="9.2806%" height="15" fill="rgb(230,62,27)" fg:x="14383" fg:w="16173"/><text x="8.5035%" y="655.50">__GI___libc_r..</text></g><g><title>[unknown] (16,173 samples, 9.28%)</title><rect x="8.2535%" y="629" width="9.2806%" height="15" fill="rgb(216,154,8)" fg:x="14383" fg:w="16173"/><text x="8.5035%" y="639.50">[unknown]</text></g><g><title>[unknown] (16,171 samples, 9.28%)</title><rect x="8.2546%" y="613" width="9.2795%" height="15" fill="rgb(244,35,45)" fg:x="14385" fg:w="16171"/><text x="8.5046%" y="623.50">[unknown]</text></g><g><title>[unknown] (16,171 samples, 9.28%)</title><rect x="8.2546%" y="597" width="9.2795%" height="15" fill="rgb(251,115,12)" fg:x="14385" fg:w="16171"/><text x="8.5046%" y="607.50">[unknown]</text></g><g><title>[unknown] (16,171 samples, 9.28%)</title><rect x="8.2546%" y="581" width="9.2795%" height="15" fill="rgb(240,54,50)" fg:x="14385" fg:w="16171"/><text x="8.5046%" y="591.50">[unknown]</text></g><g><title>[unknown] (16,171 samples, 9.28%)</title><rect x="8.2546%" y="565" width="9.2795%" height="15" fill="rgb(233,84,52)" fg:x="14385" fg:w="16171"/><text x="8.5046%" y="575.50">[unknown]</text></g><g><title>[unknown] (16,171 samples, 9.28%)</title><rect x="8.2546%" y="549" width="9.2795%" height="15" fill="rgb(207,117,47)" fg:x="14385" fg:w="16171"/><text x="8.5046%" y="559.50">[unknown]</text></g><g><title>[unknown] (16,171 samples, 9.28%)</title><rect x="8.2546%" y="533" width="9.2795%" height="15" fill="rgb(249,43,39)" fg:x="14385" fg:w="16171"/><text x="8.5046%" y="543.50">[unknown]</text></g><g><title>[unknown] (16,171 samples, 9.28%)</title><rect x="8.2546%" y="517" width="9.2795%" height="15" fill="rgb(209,38,44)" fg:x="14385" fg:w="16171"/><text x="8.5046%" y="527.50">[unknown]</text></g><g><title>[unknown] (16,071 samples, 9.22%)</title><rect x="8.3120%" y="501" width="9.2221%" height="15" fill="rgb(236,212,23)" fg:x="14485" fg:w="16071"/><text x="8.5620%" y="511.50">[unknown]</text></g><g><title>[unknown] (16,048 samples, 9.21%)</title><rect x="8.3252%" y="485" width="9.2089%" height="15" fill="rgb(242,79,21)" fg:x="14508" fg:w="16048"/><text x="8.5752%" y="495.50">[unknown]</text></g><g><title>[unknown] (15,724 samples, 9.02%)</title><rect x="8.5111%" y="469" width="9.0230%" height="15" fill="rgb(211,96,35)" fg:x="14832" fg:w="15724"/><text x="8.7611%" y="479.50">[unknown]</text></g><g><title>[unknown] (7,500 samples, 4.30%)</title><rect x="13.2303%" y="453" width="4.3038%" height="15" fill="rgb(253,215,40)" fg:x="23056" fg:w="7500"/><text x="13.4803%" y="463.50">[unkn..</text></g><g><title>[unknown] (7,490 samples, 4.30%)</title><rect x="13.2361%" y="437" width="4.2980%" height="15" fill="rgb(211,81,21)" fg:x="23066" fg:w="7490"/><text x="13.4861%" y="447.50">[unkn..</text></g><g><title>[unknown] (7,359 samples, 4.22%)</title><rect x="13.3113%" y="421" width="4.2229%" height="15" fill="rgb(208,190,38)" fg:x="23197" fg:w="7359"/><text x="13.5613%" y="431.50">[unkn..</text></g><g><title>[unknown] (7,288 samples, 4.18%)</title><rect x="13.3520%" y="405" width="4.1821%" height="15" fill="rgb(235,213,38)" fg:x="23268" fg:w="7288"/><text x="13.6020%" y="415.50">[unkn..</text></g><g><title>[unknown] (6,813 samples, 3.91%)</title><rect x="13.6246%" y="389" width="3.9095%" height="15" fill="rgb(237,122,38)" fg:x="23743" fg:w="6813"/><text x="13.8746%" y="399.50">[unk..</text></g><g><title>[unknown] (6,548 samples, 3.76%)</title><rect x="13.7766%" y="373" width="3.7575%" height="15" fill="rgb(244,218,35)" fg:x="24008" fg:w="6548"/><text x="14.0266%" y="383.50">[unk..</text></g><g><title>[unknown] (6,437 samples, 3.69%)</title><rect x="13.8403%" y="357" width="3.6938%" height="15" fill="rgb(240,68,47)" fg:x="24119" fg:w="6437"/><text x="14.0903%" y="367.50">[unk..</text></g><g><title>[unknown] (6,150 samples, 3.53%)</title><rect x="14.0050%" y="341" width="3.5291%" height="15" fill="rgb(210,16,53)" fg:x="24406" fg:w="6150"/><text x="14.2550%" y="351.50">[un..</text></g><g><title>[unknown] (5,764 samples, 3.31%)</title><rect x="14.2265%" y="325" width="3.3076%" height="15" fill="rgb(235,124,12)" fg:x="24792" fg:w="5764"/><text x="14.4765%" y="335.50">[un..</text></g><g><title>[unknown] (4,981 samples, 2.86%)</title><rect x="14.6758%" y="309" width="2.8583%" height="15" fill="rgb(224,169,11)" fg:x="25575" fg:w="4981"/><text x="14.9258%" y="319.50">[u..</text></g><g><title>[unknown] (3,636 samples, 2.09%)</title><rect x="15.4476%" y="293" width="2.0865%" height="15" fill="rgb(250,166,2)" fg:x="26920" fg:w="3636"/><text x="15.6976%" y="303.50">[..</text></g><g><title>[unknown] (3,258 samples, 1.87%)</title><rect x="15.6646%" y="277" width="1.8696%" height="15" fill="rgb(242,216,29)" fg:x="27298" fg:w="3258"/><text x="15.9146%" y="287.50">[..</text></g><g><title>[unknown] (893 samples, 0.51%)</title><rect x="17.0217%" y="261" width="0.5124%" height="15" fill="rgb(230,116,27)" fg:x="29663" fg:w="893"/><text x="17.2717%" y="271.50"></text></g><g><title>[unknown] (814 samples, 0.47%)</title><rect x="17.0670%" y="245" width="0.4671%" height="15" fill="rgb(228,99,48)" fg:x="29742" fg:w="814"/><text x="17.3170%" y="255.50"></text></g><g><title>[unknown] (362 samples, 0.21%)</title><rect x="17.3264%" y="229" width="0.2077%" height="15" fill="rgb(253,11,6)" fg:x="30194" fg:w="362"/><text x="17.5764%" y="239.50"></text></g><g><title>[unknown] (235 samples, 0.13%)</title><rect x="17.3993%" y="213" width="0.1349%" height="15" fill="rgb(247,143,39)" fg:x="30321" fg:w="235"/><text x="17.6493%" y="223.50"></text></g><g><title>[unknown] (231 samples, 0.13%)</title><rect x="17.4016%" y="197" width="0.1326%" height="15" fill="rgb(236,97,10)" fg:x="30325" fg:w="231"/><text x="17.6516%" y="207.50"></text></g><g><title>[unknown] (43 samples, 0.02%)</title><rect x="17.5094%" y="181" width="0.0247%" height="15" fill="rgb(233,208,19)" fg:x="30513" fg:w="43"/><text x="17.7594%" y="191.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="21.3995%" y="533" width="0.0189%" height="15" fill="rgb(216,164,2)" fg:x="37292" fg:w="33"/><text x="21.6495%" y="543.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="21.3995%" y="517" width="0.0189%" height="15" fill="rgb(220,129,5)" fg:x="37292" fg:w="33"/><text x="21.6495%" y="527.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="21.3995%" y="501" width="0.0189%" height="15" fill="rgb(242,17,10)" fg:x="37292" fg:w="33"/><text x="21.6495%" y="511.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="21.3995%" y="485" width="0.0189%" height="15" fill="rgb(242,107,0)" fg:x="37292" fg:w="33"/><text x="21.6495%" y="495.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="21.3995%" y="469" width="0.0189%" height="15" fill="rgb(251,28,31)" fg:x="37292" fg:w="33"/><text x="21.6495%" y="479.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="21.3995%" y="453" width="0.0189%" height="15" fill="rgb(233,223,10)" fg:x="37292" fg:w="33"/><text x="21.6495%" y="463.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="21.4000%" y="437" width="0.0184%" height="15" fill="rgb(215,21,27)" fg:x="37293" fg:w="32"/><text x="21.6500%" y="447.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="21.4023%" y="421" width="0.0161%" height="15" fill="rgb(232,23,21)" fg:x="37297" fg:w="28"/><text x="21.6523%" y="431.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="21.4029%" y="405" width="0.0155%" height="15" fill="rgb(244,5,23)" fg:x="37298" fg:w="27"/><text x="21.6529%" y="415.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="21.4035%" y="389" width="0.0149%" height="15" fill="rgb(226,81,46)" fg:x="37299" fg:w="26"/><text x="21.6535%" y="399.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="21.4041%" y="373" width="0.0143%" height="15" fill="rgb(247,70,30)" fg:x="37300" fg:w="25"/><text x="21.6541%" y="383.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="21.4052%" y="357" width="0.0132%" height="15" fill="rgb(212,68,19)" fg:x="37302" fg:w="23"/><text x="21.6552%" y="367.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="21.4052%" y="341" width="0.0132%" height="15" fill="rgb(240,187,13)" fg:x="37302" fg:w="23"/><text x="21.6552%" y="351.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="21.4052%" y="325" width="0.0132%" height="15" fill="rgb(223,113,26)" fg:x="37302" fg:w="23"/><text x="21.6552%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (776 samples, 0.45%)</title><rect x="21.4184%" y="533" width="0.4453%" height="15" fill="rgb(206,192,2)" fg:x="37325" fg:w="776"/><text x="21.6684%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (776 samples, 0.45%)</title><rect x="21.4184%" y="517" width="0.4453%" height="15" fill="rgb(241,108,4)" fg:x="37325" fg:w="776"/><text x="21.6684%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (776 samples, 0.45%)</title><rect x="21.4184%" y="501" width="0.4453%" height="15" fill="rgb(247,173,49)" fg:x="37325" fg:w="776"/><text x="21.6684%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,654 samples, 3.82%)</title><rect x="21.8637%" y="533" width="3.8183%" height="15" fill="rgb(224,114,35)" fg:x="38101" fg:w="6654"/><text x="22.1137%" y="543.50">core..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,654 samples, 3.82%)</title><rect x="21.8637%" y="517" width="3.8183%" height="15" fill="rgb(245,159,27)" fg:x="38101" fg:w="6654"/><text x="22.1137%" y="527.50">core..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,654 samples, 3.82%)</title><rect x="21.8637%" y="501" width="3.8183%" height="15" fill="rgb(245,172,44)" fg:x="38101" fg:w="6654"/><text x="22.1137%" y="511.50">&lt;[A]..</text></g><g><title>__memcmp_evex_movbe (3,071 samples, 1.76%)</title><rect x="23.9198%" y="485" width="1.7622%" height="15" fill="rgb(236,23,11)" fg:x="41684" fg:w="3071"/><text x="24.1698%" y="495.50"></text></g><g><title>[unknown] (46 samples, 0.03%)</title><rect x="25.6556%" y="469" width="0.0264%" height="15" fill="rgb(205,117,38)" fg:x="44709" fg:w="46"/><text x="25.9056%" y="479.50"></text></g><g><title>[unknown] (44 samples, 0.03%)</title><rect x="25.6568%" y="453" width="0.0252%" height="15" fill="rgb(237,72,25)" fg:x="44711" fg:w="44"/><text x="25.9068%" y="463.50"></text></g><g><title>[unknown] (42 samples, 0.02%)</title><rect x="25.6579%" y="437" width="0.0241%" height="15" fill="rgb(244,70,9)" fg:x="44713" fg:w="42"/><text x="25.9079%" y="447.50"></text></g><g><title>[unknown] (42 samples, 0.02%)</title><rect x="25.6579%" y="421" width="0.0241%" height="15" fill="rgb(217,125,39)" fg:x="44713" fg:w="42"/><text x="25.9079%" y="431.50"></text></g><g><title>[unknown] (41 samples, 0.02%)</title><rect x="25.6585%" y="405" width="0.0235%" height="15" fill="rgb(235,36,10)" fg:x="44714" fg:w="41"/><text x="25.9085%" y="415.50"></text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="25.6590%" y="389" width="0.0230%" height="15" fill="rgb(251,123,47)" fg:x="44715" fg:w="40"/><text x="25.9090%" y="399.50"></text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="25.6590%" y="373" width="0.0230%" height="15" fill="rgb(221,13,13)" fg:x="44715" fg:w="40"/><text x="25.9090%" y="383.50"></text></g><g><title>[unknown] (38 samples, 0.02%)</title><rect x="25.6602%" y="357" width="0.0218%" height="15" fill="rgb(238,131,9)" fg:x="44717" fg:w="38"/><text x="25.9102%" y="367.50"></text></g><g><title>[unknown] (37 samples, 0.02%)</title><rect x="25.6608%" y="341" width="0.0212%" height="15" fill="rgb(211,50,8)" fg:x="44718" fg:w="37"/><text x="25.9108%" y="351.50"></text></g><g><title>[unknown] (36 samples, 0.02%)</title><rect x="25.6613%" y="325" width="0.0207%" height="15" fill="rgb(245,182,24)" fg:x="44719" fg:w="36"/><text x="25.9113%" y="335.50"></text></g><g><title>[unknown] (35 samples, 0.02%)</title><rect x="25.6619%" y="309" width="0.0201%" height="15" fill="rgb(242,14,37)" fg:x="44720" fg:w="35"/><text x="25.9119%" y="319.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="25.6665%" y="293" width="0.0155%" height="15" fill="rgb(246,228,12)" fg:x="44728" fg:w="27"/><text x="25.9165%" y="303.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="25.6665%" y="277" width="0.0155%" height="15" fill="rgb(213,55,15)" fg:x="44728" fg:w="27"/><text x="25.9165%" y="287.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="25.6665%" y="261" width="0.0155%" height="15" fill="rgb(209,9,3)" fg:x="44728" fg:w="27"/><text x="25.9165%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,544 samples, 0.89%)</title><rect x="25.6820%" y="533" width="0.8860%" height="15" fill="rgb(230,59,30)" fg:x="44755" fg:w="1544"/><text x="25.9320%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,544 samples, 0.89%)</title><rect x="25.6820%" y="517" width="0.8860%" height="15" fill="rgb(209,121,21)" fg:x="44755" fg:w="1544"/><text x="25.9320%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (887 samples, 0.51%)</title><rect x="26.0590%" y="501" width="0.5090%" height="15" fill="rgb(220,109,13)" fg:x="45412" fg:w="887"/><text x="26.3090%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (179 samples, 0.10%)</title><rect x="26.4653%" y="485" width="0.1027%" height="15" fill="rgb(232,18,1)" fg:x="46120" fg:w="179"/><text x="26.7153%" y="495.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="29.2599%" y="501" width="0.0138%" height="15" fill="rgb(215,41,42)" fg:x="50990" fg:w="24"/><text x="29.5099%" y="511.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="29.2599%" y="485" width="0.0138%" height="15" fill="rgb(224,123,36)" fg:x="50990" fg:w="24"/><text x="29.5099%" y="495.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="29.2599%" y="469" width="0.0138%" height="15" fill="rgb(240,125,3)" fg:x="50990" fg:w="24"/><text x="29.5099%" y="479.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="29.2599%" y="453" width="0.0138%" height="15" fill="rgb(205,98,50)" fg:x="50990" fg:w="24"/><text x="29.5099%" y="463.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="29.2610%" y="437" width="0.0126%" height="15" fill="rgb(205,185,37)" fg:x="50992" fg:w="22"/><text x="29.5110%" y="447.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="29.2610%" y="421" width="0.0126%" height="15" fill="rgb(238,207,15)" fg:x="50992" fg:w="22"/><text x="29.5110%" y="431.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="29.2616%" y="405" width="0.0121%" height="15" fill="rgb(213,199,42)" fg:x="50993" fg:w="21"/><text x="29.5116%" y="415.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (265 samples, 0.15%)</title><rect x="29.2736%" y="501" width="0.1521%" height="15" fill="rgb(235,201,11)" fg:x="51014" fg:w="265"/><text x="29.5236%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (37 samples, 0.02%)</title><rect x="29.4045%" y="485" width="0.0212%" height="15" fill="rgb(207,46,11)" fg:x="51242" fg:w="37"/><text x="29.6545%" y="495.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (30,523 samples, 17.52%)</title><rect x="18.8562%" y="549" width="17.5152%" height="15" fill="rgb(241,35,35)" fg:x="32860" fg:w="30523"/><text x="19.1062%" y="559.50">&lt;core::str::pattern::CharSe..</text></g><g><title>core::slice::memchr::memchr (17,084 samples, 9.80%)</title><rect x="26.5680%" y="533" width="9.8034%" height="15" fill="rgb(243,32,47)" fg:x="46299" fg:w="17084"/><text x="26.8180%" y="543.50">core::slice::m..</text></g><g><title>core::slice::memchr::memchr_aligned (16,318 samples, 9.36%)</title><rect x="27.0076%" y="517" width="9.3638%" height="15" fill="rgb(247,202,23)" fg:x="47065" fg:w="16318"/><text x="27.2576%" y="527.50">core::slice::..</text></g><g><title>core::slice::memchr::memchr_naive (12,104 samples, 6.95%)</title><rect x="29.4257%" y="501" width="6.9457%" height="15" fill="rgb(219,102,11)" fg:x="51279" fg:w="12104"/><text x="29.6757%" y="511.50">core::sli..</text></g><g><title>[unknown] (39 samples, 0.02%)</title><rect x="36.3490%" y="485" width="0.0224%" height="15" fill="rgb(243,110,44)" fg:x="63344" fg:w="39"/><text x="36.5990%" y="495.50"></text></g><g><title>[unknown] (38 samples, 0.02%)</title><rect x="36.3496%" y="469" width="0.0218%" height="15" fill="rgb(222,74,54)" fg:x="63345" fg:w="38"/><text x="36.5996%" y="479.50"></text></g><g><title>[unknown] (38 samples, 0.02%)</title><rect x="36.3496%" y="453" width="0.0218%" height="15" fill="rgb(216,99,12)" fg:x="63345" fg:w="38"/><text x="36.5996%" y="463.50"></text></g><g><title>[unknown] (38 samples, 0.02%)</title><rect x="36.3496%" y="437" width="0.0218%" height="15" fill="rgb(226,22,26)" fg:x="63345" fg:w="38"/><text x="36.5996%" y="447.50"></text></g><g><title>[unknown] (37 samples, 0.02%)</title><rect x="36.3502%" y="421" width="0.0212%" height="15" fill="rgb(217,163,10)" fg:x="63346" fg:w="37"/><text x="36.6002%" y="431.50"></text></g><g><title>[unknown] (35 samples, 0.02%)</title><rect x="36.3513%" y="405" width="0.0201%" height="15" fill="rgb(213,25,53)" fg:x="63348" fg:w="35"/><text x="36.6013%" y="415.50"></text></g><g><title>[unknown] (35 samples, 0.02%)</title><rect x="36.3513%" y="389" width="0.0201%" height="15" fill="rgb(252,105,26)" fg:x="63348" fg:w="35"/><text x="36.6013%" y="399.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="36.3525%" y="373" width="0.0189%" height="15" fill="rgb(220,39,43)" fg:x="63350" fg:w="33"/><text x="36.6025%" y="383.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="36.3525%" y="357" width="0.0189%" height="15" fill="rgb(229,68,48)" fg:x="63350" fg:w="33"/><text x="36.6025%" y="367.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="36.3530%" y="341" width="0.0184%" height="15" fill="rgb(252,8,32)" fg:x="63351" fg:w="32"/><text x="36.6030%" y="351.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="36.3559%" y="325" width="0.0155%" height="15" fill="rgb(223,20,43)" fg:x="63356" fg:w="27"/><text x="36.6059%" y="335.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="36.3599%" y="309" width="0.0115%" height="15" fill="rgb(229,81,49)" fg:x="63363" fg:w="20"/><text x="36.6099%" y="319.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="36.3611%" y="293" width="0.0103%" height="15" fill="rgb(236,28,36)" fg:x="63365" fg:w="18"/><text x="36.6111%" y="303.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="36.3611%" y="277" width="0.0103%" height="15" fill="rgb(249,185,26)" fg:x="63365" fg:w="18"/><text x="36.6111%" y="287.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (32,707 samples, 18.77%)</title><rect x="18.0230%" y="581" width="18.7684%" height="15" fill="rgb(249,174,33)" fg:x="31408" fg:w="32707"/><text x="18.2730%" y="591.50">&lt;core::str::iter::SplitInclus..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (32,707 samples, 18.77%)</title><rect x="18.0230%" y="565" width="18.7684%" height="15" fill="rgb(233,201,37)" fg:x="31408" fg:w="32707"/><text x="18.2730%" y="575.50">core::str::iter::SplitInterna..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (729 samples, 0.42%)</title><rect x="36.3731%" y="549" width="0.4183%" height="15" fill="rgb(221,78,26)" fg:x="63386" fg:w="729"/><text x="36.6231%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (729 samples, 0.42%)</title><rect x="36.3731%" y="533" width="0.4183%" height="15" fill="rgb(250,127,30)" fg:x="63386" fg:w="729"/><text x="36.6231%" y="543.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,458 samples, 0.84%)</title><rect x="37.2528%" y="469" width="0.8367%" height="15" fill="rgb(230,49,44)" fg:x="64919" fg:w="1458"/><text x="37.5028%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,458 samples, 0.84%)</title><rect x="37.2528%" y="453" width="0.8367%" height="15" fill="rgb(229,67,23)" fg:x="64919" fg:w="1458"/><text x="37.5028%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (758 samples, 0.43%)</title><rect x="37.6545%" y="437" width="0.4350%" height="15" fill="rgb(249,83,47)" fg:x="65619" fg:w="758"/><text x="37.9045%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (758 samples, 0.43%)</title><rect x="37.6545%" y="421" width="0.4350%" height="15" fill="rgb(215,43,3)" fg:x="65619" fg:w="758"/><text x="37.9045%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (758 samples, 0.43%)</title><rect x="37.6545%" y="405" width="0.4350%" height="15" fill="rgb(238,154,13)" fg:x="65619" fg:w="758"/><text x="37.9045%" y="415.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (34,979 samples, 20.07%)</title><rect x="18.0230%" y="613" width="20.0722%" height="15" fill="rgb(219,56,2)" fg:x="31408" fg:w="34979"/><text x="18.2730%" y="623.50">&lt;core::str::iter::Lines as core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34,979 samples, 20.07%)</title><rect x="18.0230%" y="597" width="20.0722%" height="15" fill="rgb(233,0,4)" fg:x="31408" fg:w="34979"/><text x="18.2730%" y="607.50">&lt;core::iter::adapters::map::Map&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,272 samples, 1.30%)</title><rect x="36.7915%" y="581" width="1.3038%" height="15" fill="rgb(235,30,7)" fg:x="64115" fg:w="2272"/><text x="37.0415%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,272 samples, 1.30%)</title><rect x="36.7915%" y="565" width="1.3038%" height="15" fill="rgb(250,79,13)" fg:x="64115" fg:w="2272"/><text x="37.0415%" y="575.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (2,272 samples, 1.30%)</title><rect x="36.7915%" y="549" width="1.3038%" height="15" fill="rgb(211,146,34)" fg:x="64115" fg:w="2272"/><text x="37.0415%" y="559.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (2,272 samples, 1.30%)</title><rect x="36.7915%" y="533" width="1.3038%" height="15" fill="rgb(228,22,38)" fg:x="64115" fg:w="2272"/><text x="37.0415%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1,484 samples, 0.85%)</title><rect x="37.2436%" y="517" width="0.8516%" height="15" fill="rgb(235,168,5)" fg:x="64903" fg:w="1484"/><text x="37.4936%" y="527.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (1,484 samples, 0.85%)</title><rect x="37.2436%" y="501" width="0.8516%" height="15" fill="rgb(221,155,16)" fg:x="64903" fg:w="1484"/><text x="37.4936%" y="511.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1,484 samples, 0.85%)</title><rect x="37.2436%" y="485" width="0.8516%" height="15" fill="rgb(215,215,53)" fg:x="64903" fg:w="1484"/><text x="37.4936%" y="495.50"></text></g><g><title>one_brc::Measurement::record (3,169 samples, 1.82%)</title><rect x="38.0952%" y="613" width="1.8185%" height="15" fill="rgb(223,4,10)" fg:x="66387" fg:w="3169"/><text x="38.3452%" y="623.50">o..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (19 samples, 0.01%)</title><rect x="40.3796%" y="597" width="0.0109%" height="15" fill="rgb(234,103,6)" fg:x="70368" fg:w="19"/><text x="40.6296%" y="607.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,908 samples, 1.09%)</title><rect x="40.3957%" y="565" width="1.0949%" height="15" fill="rgb(227,97,0)" fg:x="70396" fg:w="1908"/><text x="40.6457%" y="575.50"></text></g><g><title>[unknown] (62 samples, 0.04%)</title><rect x="41.4550%" y="549" width="0.0356%" height="15" fill="rgb(234,150,53)" fg:x="72242" fg:w="62"/><text x="41.7050%" y="559.50"></text></g><g><title>[unknown] (62 samples, 0.04%)</title><rect x="41.4550%" y="533" width="0.0356%" height="15" fill="rgb(228,201,54)" fg:x="72242" fg:w="62"/><text x="41.7050%" y="543.50"></text></g><g><title>[unknown] (62 samples, 0.04%)</title><rect x="41.4550%" y="517" width="0.0356%" height="15" fill="rgb(222,22,37)" fg:x="72242" fg:w="62"/><text x="41.7050%" y="527.50"></text></g><g><title>[unknown] (62 samples, 0.04%)</title><rect x="41.4550%" y="501" width="0.0356%" height="15" fill="rgb(237,53,32)" fg:x="72242" fg:w="62"/><text x="41.7050%" y="511.50"></text></g><g><title>[unknown] (61 samples, 0.04%)</title><rect x="41.4556%" y="485" width="0.0350%" height="15" fill="rgb(233,25,53)" fg:x="72243" fg:w="61"/><text x="41.7056%" y="495.50"></text></g><g><title>[unknown] (60 samples, 0.03%)</title><rect x="41.4562%" y="469" width="0.0344%" height="15" fill="rgb(210,40,34)" fg:x="72244" fg:w="60"/><text x="41.7062%" y="479.50"></text></g><g><title>[unknown] (58 samples, 0.03%)</title><rect x="41.4573%" y="453" width="0.0333%" height="15" fill="rgb(241,220,44)" fg:x="72246" fg:w="58"/><text x="41.7073%" y="463.50"></text></g><g><title>[unknown] (56 samples, 0.03%)</title><rect x="41.4585%" y="437" width="0.0321%" height="15" fill="rgb(235,28,35)" fg:x="72248" fg:w="56"/><text x="41.7085%" y="447.50"></text></g><g><title>[unknown] (55 samples, 0.03%)</title><rect x="41.4590%" y="421" width="0.0316%" height="15" fill="rgb(210,56,17)" fg:x="72249" fg:w="55"/><text x="41.7090%" y="431.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="41.4602%" y="405" width="0.0304%" height="15" fill="rgb(224,130,29)" fg:x="72251" fg:w="53"/><text x="41.7102%" y="415.50"></text></g><g><title>[unknown] (50 samples, 0.03%)</title><rect x="41.4619%" y="389" width="0.0287%" height="15" fill="rgb(235,212,8)" fg:x="72254" fg:w="50"/><text x="41.7119%" y="399.50"></text></g><g><title>[unknown] (43 samples, 0.02%)</title><rect x="41.4659%" y="373" width="0.0247%" height="15" fill="rgb(223,33,50)" fg:x="72261" fg:w="43"/><text x="41.7159%" y="383.50"></text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="41.4676%" y="357" width="0.0230%" height="15" fill="rgb(219,149,13)" fg:x="72264" fg:w="40"/><text x="41.7176%" y="367.50"></text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="41.4676%" y="341" width="0.0230%" height="15" fill="rgb(250,156,29)" fg:x="72264" fg:w="40"/><text x="41.7176%" y="351.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (33 samples, 0.02%)</title><rect x="43.5897%" y="533" width="0.0189%" height="15" fill="rgb(216,193,19)" fg:x="75962" fg:w="33"/><text x="43.8397%" y="543.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (1,809 samples, 1.04%)</title><rect x="43.6132%" y="533" width="1.0381%" height="15" fill="rgb(216,135,14)" fg:x="76003" fg:w="1809"/><text x="43.8632%" y="543.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (565 samples, 0.32%)</title><rect x="44.6587%" y="533" width="0.3242%" height="15" fill="rgb(241,47,5)" fg:x="77825" fg:w="565"/><text x="44.9087%" y="543.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (4,165 samples, 2.39%)</title><rect x="42.6061%" y="549" width="2.3900%" height="15" fill="rgb(233,42,35)" fg:x="74248" fg:w="4165"/><text x="42.8561%" y="559.50">co..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (23 samples, 0.01%)</title><rect x="44.9830%" y="533" width="0.0132%" height="15" fill="rgb(231,13,6)" fg:x="78390" fg:w="23"/><text x="45.2330%" y="543.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,682 samples, 0.97%)</title><rect x="45.3301%" y="533" width="0.9652%" height="15" fill="rgb(207,181,40)" fg:x="78995" fg:w="1682"/><text x="45.5801%" y="543.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (30 samples, 0.02%)</title><rect x="49.6041%" y="485" width="0.0172%" height="15" fill="rgb(254,173,49)" fg:x="86443" fg:w="30"/><text x="49.8541%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (628 samples, 0.36%)</title><rect x="49.6310%" y="469" width="0.3604%" height="15" fill="rgb(221,1,38)" fg:x="86490" fg:w="628"/><text x="49.8810%" y="479.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (4,512 samples, 2.59%)</title><rect x="47.7058%" y="501" width="2.5891%" height="15" fill="rgb(206,124,46)" fg:x="83135" fg:w="4512"/><text x="47.9558%" y="511.50">&lt;[..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (1,174 samples, 0.67%)</title><rect x="49.6213%" y="485" width="0.6737%" height="15" fill="rgb(249,21,11)" fg:x="86473" fg:w="1174"/><text x="49.8713%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (529 samples, 0.30%)</title><rect x="49.9914%" y="469" width="0.3036%" height="15" fill="rgb(222,201,40)" fg:x="87118" fg:w="529"/><text x="50.2414%" y="479.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (6,412 samples, 3.68%)</title><rect x="46.9633%" y="517" width="3.6794%" height="15" fill="rgb(235,61,29)" fg:x="81841" fg:w="6412"/><text x="47.2133%" y="527.50">core..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (606 samples, 0.35%)</title><rect x="50.2950%" y="501" width="0.3477%" height="15" fill="rgb(219,207,3)" fg:x="87647" fg:w="606"/><text x="50.5450%" y="511.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (10,466 samples, 6.01%)</title><rect x="44.9962%" y="549" width="6.0058%" height="15" fill="rgb(222,56,46)" fg:x="78413" fg:w="10466"/><text x="45.2462%" y="559.50">core::nu..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (8,202 samples, 4.71%)</title><rect x="46.2953%" y="533" width="4.7066%" height="15" fill="rgb(239,76,54)" fg:x="80677" fg:w="8202"/><text x="46.5453%" y="543.50">core:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (626 samples, 0.36%)</title><rect x="50.6427%" y="517" width="0.3592%" height="15" fill="rgb(231,124,27)" fg:x="88253" fg:w="626"/><text x="50.8927%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (18,514 samples, 10.62%)</title><rect x="40.3906%" y="597" width="10.6240%" height="15" fill="rgb(249,195,6)" fg:x="70387" fg:w="18514"/><text x="40.6406%" y="607.50">core::str::&lt;impl..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (18,508 samples, 10.62%)</title><rect x="40.3940%" y="581" width="10.6205%" height="15" fill="rgb(237,174,47)" fg:x="70393" fg:w="18508"/><text x="40.6440%" y="591.50">core::num::dec2f..</text></g><g><title>core::num::dec2flt::dec2flt (16,597 samples, 9.52%)</title><rect x="41.4906%" y="565" width="9.5239%" height="15" fill="rgb(206,201,31)" fg:x="72304" fg:w="16597"/><text x="41.7406%" y="575.50">core::num::dec..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (22 samples, 0.01%)</title><rect x="51.0019%" y="549" width="0.0126%" height="15" fill="rgb(231,57,52)" fg:x="88879" fg:w="22"/><text x="51.2519%" y="559.50"></text></g><g><title>one_brc::round_towards_positive (10,254 samples, 5.88%)</title><rect x="51.0145%" y="597" width="5.8841%" height="15" fill="rgb(248,177,22)" fg:x="88901" fg:w="10254"/><text x="51.2645%" y="607.50">one_brc..</text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="56.8682%" y="581" width="0.0304%" height="15" fill="rgb(215,211,37)" fg:x="99102" fg:w="53"/><text x="57.1182%" y="591.50"></text></g><g><title>[unknown] (51 samples, 0.03%)</title><rect x="56.8694%" y="565" width="0.0293%" height="15" fill="rgb(241,128,51)" fg:x="99104" fg:w="51"/><text x="57.1194%" y="575.50"></text></g><g><title>[unknown] (50 samples, 0.03%)</title><rect x="56.8700%" y="549" width="0.0287%" height="15" fill="rgb(227,165,31)" fg:x="99105" fg:w="50"/><text x="57.1200%" y="559.50"></text></g><g><title>[unknown] (49 samples, 0.03%)</title><rect x="56.8705%" y="533" width="0.0281%" height="15" fill="rgb(228,167,24)" fg:x="99106" fg:w="49"/><text x="57.1205%" y="543.50"></text></g><g><title>[unknown] (49 samples, 0.03%)</title><rect x="56.8705%" y="517" width="0.0281%" height="15" fill="rgb(228,143,12)" fg:x="99106" fg:w="49"/><text x="57.1205%" y="527.50"></text></g><g><title>[unknown] (47 samples, 0.03%)</title><rect x="56.8717%" y="501" width="0.0270%" height="15" fill="rgb(249,149,8)" fg:x="99108" fg:w="47"/><text x="57.1217%" y="511.50"></text></g><g><title>[unknown] (46 samples, 0.03%)</title><rect x="56.8723%" y="485" width="0.0264%" height="15" fill="rgb(243,35,44)" fg:x="99109" fg:w="46"/><text x="57.1223%" y="495.50"></text></g><g><title>[unknown] (43 samples, 0.02%)</title><rect x="56.8740%" y="469" width="0.0247%" height="15" fill="rgb(246,89,9)" fg:x="99112" fg:w="43"/><text x="57.1240%" y="479.50"></text></g><g><title>[unknown] (41 samples, 0.02%)</title><rect x="56.8751%" y="453" width="0.0235%" height="15" fill="rgb(233,213,13)" fg:x="99114" fg:w="41"/><text x="57.1251%" y="463.50"></text></g><g><title>[unknown] (39 samples, 0.02%)</title><rect x="56.8763%" y="437" width="0.0224%" height="15" fill="rgb(233,141,41)" fg:x="99116" fg:w="39"/><text x="57.1263%" y="447.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="56.8826%" y="421" width="0.0161%" height="15" fill="rgb(239,167,4)" fg:x="99127" fg:w="28"/><text x="57.1326%" y="431.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="59.5406%" y="581" width="0.0166%" height="15" fill="rgb(209,217,16)" fg:x="103759" fg:w="29"/><text x="59.7906%" y="591.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="59.5406%" y="565" width="0.0166%" height="15" fill="rgb(219,88,35)" fg:x="103759" fg:w="29"/><text x="59.7906%" y="575.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="59.5406%" y="549" width="0.0166%" height="15" fill="rgb(220,193,23)" fg:x="103759" fg:w="29"/><text x="59.7906%" y="559.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="59.5412%" y="533" width="0.0161%" height="15" fill="rgb(230,90,52)" fg:x="103760" fg:w="28"/><text x="59.7912%" y="543.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="59.5417%" y="517" width="0.0155%" height="15" fill="rgb(252,106,19)" fg:x="103761" fg:w="27"/><text x="59.7917%" y="527.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="59.5423%" y="501" width="0.0149%" height="15" fill="rgb(206,74,20)" fg:x="103762" fg:w="26"/><text x="59.7923%" y="511.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="59.5435%" y="485" width="0.0138%" height="15" fill="rgb(230,138,44)" fg:x="103764" fg:w="24"/><text x="59.7935%" y="495.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="59.5446%" y="469" width="0.0126%" height="15" fill="rgb(235,182,43)" fg:x="103766" fg:w="22"/><text x="59.7946%" y="479.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="59.5458%" y="453" width="0.0115%" height="15" fill="rgb(242,16,51)" fg:x="103768" fg:w="20"/><text x="59.7958%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (71 samples, 0.04%)</title><rect x="59.5767%" y="517" width="0.0407%" height="15" fill="rgb(248,9,4)" fg:x="103822" fg:w="71"/><text x="59.8267%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (801 samples, 0.46%)</title><rect x="59.5767%" y="533" width="0.4596%" height="15" fill="rgb(210,31,22)" fg:x="103822" fg:w="801"/><text x="59.8267%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (730 samples, 0.42%)</title><rect x="59.6175%" y="517" width="0.4189%" height="15" fill="rgb(239,54,39)" fg:x="103893" fg:w="730"/><text x="59.8675%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (730 samples, 0.42%)</title><rect x="59.6175%" y="501" width="0.4189%" height="15" fill="rgb(230,99,41)" fg:x="103893" fg:w="730"/><text x="59.8675%" y="511.50"></text></g><g><title>one_brc::parse_line (35,670 samples, 20.47%)</title><rect x="39.9137%" y="613" width="20.4687%" height="15" fill="rgb(253,106,12)" fg:x="69556" fg:w="35670"/><text x="40.1637%" y="623.50">one_brc::parse_line</text></g><g><title>one_brc::split_line (6,071 samples, 3.48%)</title><rect x="56.8986%" y="597" width="3.4838%" height="15" fill="rgb(213,46,41)" fg:x="99155" fg:w="6071"/><text x="57.1486%" y="607.50">one..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1,438 samples, 0.83%)</title><rect x="59.5572%" y="581" width="0.8252%" height="15" fill="rgb(215,133,35)" fg:x="103788" fg:w="1438"/><text x="59.8072%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (1,438 samples, 0.83%)</title><rect x="59.5572%" y="565" width="0.8252%" height="15" fill="rgb(213,28,5)" fg:x="103788" fg:w="1438"/><text x="59.8072%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (1,438 samples, 0.83%)</title><rect x="59.5572%" y="549" width="0.8252%" height="15" fill="rgb(215,77,49)" fg:x="103788" fg:w="1438"/><text x="59.8072%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (603 samples, 0.35%)</title><rect x="60.0364%" y="533" width="0.3460%" height="15" fill="rgb(248,100,22)" fg:x="104623" fg:w="603"/><text x="60.2864%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (603 samples, 0.35%)</title><rect x="60.0364%" y="517" width="0.3460%" height="15" fill="rgb(208,67,9)" fg:x="104623" fg:w="603"/><text x="60.2864%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (603 samples, 0.35%)</title><rect x="60.0364%" y="501" width="0.3460%" height="15" fill="rgb(219,133,21)" fg:x="104623" fg:w="603"/><text x="60.2864%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,775 samples, 1.02%)</title><rect x="62.5199%" y="469" width="1.0186%" height="15" fill="rgb(246,46,29)" fg:x="108951" fg:w="1775"/><text x="62.7699%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,656 samples, 1.52%)</title><rect x="62.2652%" y="485" width="1.5241%" height="15" fill="rgb(246,185,52)" fg:x="108507" fg:w="2656"/><text x="62.5152%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (437 samples, 0.25%)</title><rect x="63.5385%" y="469" width="0.2508%" height="15" fill="rgb(252,136,11)" fg:x="110726" fg:w="437"/><text x="63.7885%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,063 samples, 1.76%)</title><rect x="64.7137%" y="469" width="1.7577%" height="15" fill="rgb(219,138,53)" fg:x="112774" fg:w="3063"/><text x="64.9637%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7,198 samples, 4.13%)</title><rect x="63.7893%" y="485" width="4.1305%" height="15" fill="rgb(211,51,23)" fg:x="111163" fg:w="7198"/><text x="64.0393%" y="495.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,524 samples, 1.45%)</title><rect x="66.4714%" y="469" width="1.4484%" height="15" fill="rgb(247,221,28)" fg:x="115837" fg:w="2524"/><text x="66.7214%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12,566 samples, 7.21%)</title><rect x="60.7124%" y="533" width="7.2108%" height="15" fill="rgb(251,222,45)" fg:x="105801" fg:w="12566"/><text x="60.9624%" y="543.50">&lt;std::hash..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12,566 samples, 7.21%)</title><rect x="60.7124%" y="517" width="7.2108%" height="15" fill="rgb(217,162,53)" fg:x="105801" fg:w="12566"/><text x="60.9624%" y="527.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12,566 samples, 7.21%)</title><rect x="60.7124%" y="501" width="7.2108%" height="15" fill="rgb(229,93,14)" fg:x="105801" fg:w="12566"/><text x="60.9624%" y="511.50">&lt;core::has..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (976 samples, 0.56%)</title><rect x="67.9232%" y="533" width="0.5601%" height="15" fill="rgb(209,67,49)" fg:x="118367" fg:w="976"/><text x="68.1732%" y="543.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (341 samples, 0.20%)</title><rect x="68.2876%" y="517" width="0.1957%" height="15" fill="rgb(213,87,29)" fg:x="119002" fg:w="341"/><text x="68.5376%" y="527.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (341 samples, 0.20%)</title><rect x="68.2876%" y="501" width="0.1957%" height="15" fill="rgb(205,151,52)" fg:x="119002" fg:w="341"/><text x="68.5376%" y="511.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (341 samples, 0.20%)</title><rect x="68.2876%" y="485" width="0.1957%" height="15" fill="rgb(253,215,39)" fg:x="119002" fg:w="341"/><text x="68.5376%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (664 samples, 0.38%)</title><rect x="72.3543%" y="421" width="0.3810%" height="15" fill="rgb(221,220,41)" fg:x="126089" fg:w="664"/><text x="72.6043%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,285 samples, 0.74%)</title><rect x="72.1690%" y="437" width="0.7374%" height="15" fill="rgb(218,133,21)" fg:x="125766" fg:w="1285"/><text x="72.4190%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (298 samples, 0.17%)</title><rect x="72.7354%" y="421" width="0.1710%" height="15" fill="rgb(221,193,43)" fg:x="126753" fg:w="298"/><text x="72.9854%" y="431.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="72.9064%" y="437" width="0.0109%" height="15" fill="rgb(240,128,52)" fg:x="127051" fg:w="19"/><text x="73.1564%" y="447.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="72.9064%" y="421" width="0.0109%" height="15" fill="rgb(253,114,12)" fg:x="127051" fg:w="19"/><text x="73.1564%" y="431.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="72.9064%" y="405" width="0.0109%" height="15" fill="rgb(215,223,47)" fg:x="127051" fg:w="19"/><text x="73.1564%" y="415.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="72.9064%" y="389" width="0.0109%" height="15" fill="rgb(248,225,23)" fg:x="127051" fg:w="19"/><text x="73.1564%" y="399.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="72.9064%" y="373" width="0.0109%" height="15" fill="rgb(250,108,0)" fg:x="127051" fg:w="19"/><text x="73.1564%" y="383.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="72.9064%" y="357" width="0.0109%" height="15" fill="rgb(228,208,7)" fg:x="127051" fg:w="19"/><text x="73.1564%" y="367.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="72.9064%" y="341" width="0.0109%" height="15" fill="rgb(244,45,10)" fg:x="127051" fg:w="19"/><text x="73.1564%" y="351.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="72.9069%" y="325" width="0.0103%" height="15" fill="rgb(207,125,25)" fg:x="127052" fg:w="18"/><text x="73.1569%" y="335.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="72.9069%" y="309" width="0.0103%" height="15" fill="rgb(210,195,18)" fg:x="127052" fg:w="18"/><text x="73.1569%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (79 samples, 0.05%)</title><rect x="75.1449%" y="421" width="0.0453%" height="15" fill="rgb(249,80,12)" fg:x="130952" fg:w="79"/><text x="75.3949%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (3,985 samples, 2.29%)</title><rect x="72.9173%" y="437" width="2.2867%" height="15" fill="rgb(221,65,9)" fg:x="127070" fg:w="3985"/><text x="73.1673%" y="447.50">c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (24 samples, 0.01%)</title><rect x="75.1902%" y="421" width="0.0138%" height="15" fill="rgb(235,49,36)" fg:x="131031" fg:w="24"/><text x="75.4402%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,805 samples, 5.63%)</title><rect x="69.5867%" y="453" width="5.6265%" height="15" fill="rgb(225,32,20)" fg:x="121266" fg:w="9805"/><text x="69.8367%" y="463.50">&lt;core::..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (242 samples, 0.14%)</title><rect x="77.2618%" y="405" width="0.1389%" height="15" fill="rgb(215,141,46)" fg:x="134641" fg:w="242"/><text x="77.5118%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (615 samples, 0.35%)</title><rect x="77.1596%" y="421" width="0.3529%" height="15" fill="rgb(250,160,47)" fg:x="134463" fg:w="615"/><text x="77.4096%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (195 samples, 0.11%)</title><rect x="77.4006%" y="405" width="0.1119%" height="15" fill="rgb(216,222,40)" fg:x="134883" fg:w="195"/><text x="77.6506%" y="415.50"></text></g><g><title>core::cmp::min (678 samples, 0.39%)</title><rect x="77.5200%" y="421" width="0.3891%" height="15" fill="rgb(234,217,39)" fg:x="135091" fg:w="678"/><text x="77.7700%" y="431.50"></text></g><g><title>core::cmp::Ord::min (678 samples, 0.39%)</title><rect x="77.5200%" y="405" width="0.3891%" height="15" fill="rgb(207,178,40)" fg:x="135091" fg:w="678"/><text x="77.7700%" y="415.50"></text></g><g><title>core::cmp::min_by (678 samples, 0.39%)</title><rect x="77.5200%" y="389" width="0.3891%" height="15" fill="rgb(221,136,13)" fg:x="135091" fg:w="678"/><text x="77.7700%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,535 samples, 4.32%)</title><rect x="75.6183%" y="437" width="4.3238%" height="15" fill="rgb(249,199,10)" fg:x="131777" fg:w="7535"/><text x="75.8683%" y="447.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (3,543 samples, 2.03%)</title><rect x="77.9091%" y="421" width="2.0331%" height="15" fill="rgb(249,222,13)" fg:x="135769" fg:w="3543"/><text x="78.1591%" y="431.50">c..</text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="79.9301%" y="405" width="0.0121%" height="15" fill="rgb(244,185,38)" fg:x="139291" fg:w="21"/><text x="80.1801%" y="415.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="79.9301%" y="389" width="0.0121%" height="15" fill="rgb(236,202,9)" fg:x="139291" fg:w="21"/><text x="80.1801%" y="399.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="79.9301%" y="373" width="0.0121%" height="15" fill="rgb(250,229,37)" fg:x="139291" fg:w="21"/><text x="80.1801%" y="383.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="79.9301%" y="357" width="0.0121%" height="15" fill="rgb(206,174,23)" fg:x="139291" fg:w="21"/><text x="80.1801%" y="367.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="79.9301%" y="341" width="0.0121%" height="15" fill="rgb(211,33,43)" fg:x="139291" fg:w="21"/><text x="80.1801%" y="351.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="79.9301%" y="325" width="0.0121%" height="15" fill="rgb(245,58,50)" fg:x="139291" fg:w="21"/><text x="80.1801%" y="335.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="79.9301%" y="309" width="0.0121%" height="15" fill="rgb(244,68,36)" fg:x="139291" fg:w="21"/><text x="80.1801%" y="319.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="79.9307%" y="293" width="0.0115%" height="15" fill="rgb(232,229,15)" fg:x="139292" fg:w="20"/><text x="80.1807%" y="303.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="79.9307%" y="277" width="0.0115%" height="15" fill="rgb(254,30,23)" fg:x="139292" fg:w="20"/><text x="80.1807%" y="287.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="79.9318%" y="261" width="0.0103%" height="15" fill="rgb(235,160,14)" fg:x="139294" fg:w="18"/><text x="80.1818%" y="271.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="79.9318%" y="245" width="0.0103%" height="15" fill="rgb(212,155,44)" fg:x="139294" fg:w="18"/><text x="80.1818%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (33,560 samples, 19.26%)</title><rect x="60.6871%" y="565" width="19.2579%" height="15" fill="rgb(226,2,50)" fg:x="105757" fg:w="33560"/><text x="60.9371%" y="575.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (33,516 samples, 19.23%)</title><rect x="60.7124%" y="549" width="19.2327%" height="15" fill="rgb(234,177,6)" fg:x="105801" fg:w="33516"/><text x="60.9624%" y="559.50">core::hash::BuildHasher::hash_..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19,974 samples, 11.46%)</title><rect x="68.4832%" y="533" width="11.4618%" height="15" fill="rgb(217,24,9)" fg:x="119343" fg:w="19974"/><text x="68.7332%" y="543.50">core::hash::impls..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (19,974 samples, 11.46%)</title><rect x="68.4832%" y="517" width="11.4618%" height="15" fill="rgb(220,13,46)" fg:x="119343" fg:w="19974"/><text x="68.7332%" y="527.50">core::hash::impls..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (19,974 samples, 11.46%)</title><rect x="68.4832%" y="501" width="11.4618%" height="15" fill="rgb(239,221,27)" fg:x="119343" fg:w="19974"/><text x="68.7332%" y="511.50">&lt;std::hash::rando..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (19,974 samples, 11.46%)</title><rect x="68.4832%" y="485" width="11.4618%" height="15" fill="rgb(222,198,25)" fg:x="119343" fg:w="19974"/><text x="68.7332%" y="495.50">&lt;core::hash::sip:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (19,974 samples, 11.46%)</title><rect x="68.4832%" y="469" width="11.4618%" height="15" fill="rgb(211,99,13)" fg:x="119343" fg:w="19974"/><text x="68.7332%" y="479.50">&lt;core::hash::sip:..</text></g><g><title>core::hash::Hasher::write_u8 (8,245 samples, 4.73%)</title><rect x="75.2138%" y="453" width="4.7313%" height="15" fill="rgb(232,111,31)" fg:x="131072" fg:w="8245"/><text x="75.4638%" y="463.50">core::..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,461 samples, 0.84%)</title><rect x="80.7335%" y="517" width="0.8384%" height="15" fill="rgb(245,82,37)" fg:x="140691" fg:w="1461"/><text x="80.9835%" y="527.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (795 samples, 0.46%)</title><rect x="81.1157%" y="501" width="0.4562%" height="15" fill="rgb(227,149,46)" fg:x="141357" fg:w="795"/><text x="81.3657%" y="511.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (146 samples, 0.08%)</title><rect x="81.4881%" y="485" width="0.0838%" height="15" fill="rgb(218,36,50)" fg:x="142006" fg:w="146"/><text x="81.7381%" y="495.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (146 samples, 0.08%)</title><rect x="81.4881%" y="469" width="0.0838%" height="15" fill="rgb(226,80,48)" fg:x="142006" fg:w="146"/><text x="81.7381%" y="479.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="81.8674%" y="501" width="0.0155%" height="15" fill="rgb(238,224,15)" fg:x="142667" fg:w="27"/><text x="82.1174%" y="511.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="81.8674%" y="485" width="0.0155%" height="15" fill="rgb(241,136,10)" fg:x="142667" fg:w="27"/><text x="82.1174%" y="495.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="81.8674%" y="469" width="0.0155%" height="15" fill="rgb(208,32,45)" fg:x="142667" fg:w="27"/><text x="82.1174%" y="479.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="81.8674%" y="453" width="0.0155%" height="15" fill="rgb(207,135,9)" fg:x="142667" fg:w="27"/><text x="82.1174%" y="463.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="81.8674%" y="437" width="0.0155%" height="15" fill="rgb(206,86,44)" fg:x="142667" fg:w="27"/><text x="82.1174%" y="447.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="81.8679%" y="421" width="0.0149%" height="15" fill="rgb(245,177,15)" fg:x="142668" fg:w="26"/><text x="82.1179%" y="431.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="81.8685%" y="405" width="0.0143%" height="15" fill="rgb(206,64,50)" fg:x="142669" fg:w="25"/><text x="82.1185%" y="415.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="81.8691%" y="389" width="0.0138%" height="15" fill="rgb(234,36,40)" fg:x="142670" fg:w="24"/><text x="82.1191%" y="399.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="81.8702%" y="373" width="0.0126%" height="15" fill="rgb(213,64,8)" fg:x="142672" fg:w="22"/><text x="82.1202%" y="383.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="81.8708%" y="357" width="0.0121%" height="15" fill="rgb(210,75,36)" fg:x="142673" fg:w="21"/><text x="82.1208%" y="367.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="81.8720%" y="341" width="0.0109%" height="15" fill="rgb(229,88,21)" fg:x="142675" fg:w="19"/><text x="82.1220%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (17,058 samples, 9.79%)</title><rect x="81.8829%" y="501" width="9.7885%" height="15" fill="rgb(252,204,47)" fg:x="142694" fg:w="17058"/><text x="82.1329%" y="511.50">hashbrown::map..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (17,058 samples, 9.79%)</title><rect x="81.8829%" y="485" width="9.7885%" height="15" fill="rgb(208,77,27)" fg:x="142694" fg:w="17058"/><text x="82.1329%" y="495.50">&lt;Q as hashbrow..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17,058 samples, 9.79%)</title><rect x="81.8829%" y="469" width="9.7885%" height="15" fill="rgb(221,76,26)" fg:x="142694" fg:w="17058"/><text x="82.1329%" y="479.50">core::cmp::imp..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (17,058 samples, 9.79%)</title><rect x="81.8829%" y="453" width="9.7885%" height="15" fill="rgb(225,139,18)" fg:x="142694" fg:w="17058"/><text x="82.1329%" y="463.50">core::str::tra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17,058 samples, 9.79%)</title><rect x="81.8829%" y="437" width="9.7885%" height="15" fill="rgb(230,137,11)" fg:x="142694" fg:w="17058"/><text x="82.1329%" y="447.50">core::cmp::imp..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (17,058 samples, 9.79%)</title><rect x="81.8829%" y="421" width="9.7885%" height="15" fill="rgb(212,28,1)" fg:x="142694" fg:w="17058"/><text x="82.1329%" y="431.50">core::slice::c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (17,058 samples, 9.79%)</title><rect x="81.8829%" y="405" width="9.7885%" height="15" fill="rgb(248,164,17)" fg:x="142694" fg:w="17058"/><text x="82.1329%" y="415.50">&lt;[A] as core::..</text></g><g><title>__memcmp_evex_movbe (10,049 samples, 5.77%)</title><rect x="85.9049%" y="389" width="5.7665%" height="15" fill="rgb(222,171,42)" fg:x="149703" fg:w="10049"/><text x="86.1549%" y="399.50">__memcm..</text></g><g><title>[unknown] (70 samples, 0.04%)</title><rect x="91.6312%" y="373" width="0.0402%" height="15" fill="rgb(243,84,45)" fg:x="159682" fg:w="70"/><text x="91.8812%" y="383.50"></text></g><g><title>[unknown] (70 samples, 0.04%)</title><rect x="91.6312%" y="357" width="0.0402%" height="15" fill="rgb(252,49,23)" fg:x="159682" fg:w="70"/><text x="91.8812%" y="367.50"></text></g><g><title>[unknown] (70 samples, 0.04%)</title><rect x="91.6312%" y="341" width="0.0402%" height="15" fill="rgb(215,19,7)" fg:x="159682" fg:w="70"/><text x="91.8812%" y="351.50"></text></g><g><title>[unknown] (69 samples, 0.04%)</title><rect x="91.6318%" y="325" width="0.0396%" height="15" fill="rgb(238,81,41)" fg:x="159683" fg:w="69"/><text x="91.8818%" y="335.50"></text></g><g><title>[unknown] (69 samples, 0.04%)</title><rect x="91.6318%" y="309" width="0.0396%" height="15" fill="rgb(210,199,37)" fg:x="159683" fg:w="69"/><text x="91.8818%" y="319.50"></text></g><g><title>[unknown] (67 samples, 0.04%)</title><rect x="91.6329%" y="293" width="0.0384%" height="15" fill="rgb(244,192,49)" fg:x="159685" fg:w="67"/><text x="91.8829%" y="303.50"></text></g><g><title>[unknown] (66 samples, 0.04%)</title><rect x="91.6335%" y="277" width="0.0379%" height="15" fill="rgb(226,211,11)" fg:x="159686" fg:w="66"/><text x="91.8835%" y="287.50"></text></g><g><title>[unknown] (62 samples, 0.04%)</title><rect x="91.6358%" y="261" width="0.0356%" height="15" fill="rgb(236,162,54)" fg:x="159690" fg:w="62"/><text x="91.8858%" y="271.50"></text></g><g><title>[unknown] (59 samples, 0.03%)</title><rect x="91.6375%" y="245" width="0.0339%" height="15" fill="rgb(220,229,9)" fg:x="159693" fg:w="59"/><text x="91.8875%" y="255.50"></text></g><g><title>[unknown] (57 samples, 0.03%)</title><rect x="91.6386%" y="229" width="0.0327%" height="15" fill="rgb(250,87,22)" fg:x="159695" fg:w="57"/><text x="91.8886%" y="239.50"></text></g><g><title>[unknown] (54 samples, 0.03%)</title><rect x="91.6404%" y="213" width="0.0310%" height="15" fill="rgb(239,43,17)" fg:x="159698" fg:w="54"/><text x="91.8904%" y="223.50"></text></g><g><title>[unknown] (45 samples, 0.03%)</title><rect x="91.6455%" y="197" width="0.0258%" height="15" fill="rgb(231,177,25)" fg:x="159707" fg:w="45"/><text x="91.8955%" y="207.50"></text></g><g><title>[unknown] (41 samples, 0.02%)</title><rect x="91.6478%" y="181" width="0.0235%" height="15" fill="rgb(219,179,1)" fg:x="159711" fg:w="41"/><text x="91.8978%" y="191.50"></text></g><g><title>[unknown] (41 samples, 0.02%)</title><rect x="91.6478%" y="165" width="0.0235%" height="15" fill="rgb(238,219,53)" fg:x="159711" fg:w="41"/><text x="91.8978%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (18,529 samples, 10.63%)</title><rect x="81.5753%" y="517" width="10.6326%" height="15" fill="rgb(232,167,36)" fg:x="142158" fg:w="18529"/><text x="81.8253%" y="527.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (935 samples, 0.54%)</title><rect x="91.6714%" y="501" width="0.5365%" height="15" fill="rgb(244,19,51)" fg:x="159752" fg:w="935"/><text x="91.9214%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (935 samples, 0.54%)</title><rect x="91.6714%" y="485" width="0.5365%" height="15" fill="rgb(224,6,22)" fg:x="159752" fg:w="935"/><text x="91.9214%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (935 samples, 0.54%)</title><rect x="91.6714%" y="469" width="0.5365%" height="15" fill="rgb(224,145,5)" fg:x="159752" fg:w="935"/><text x="91.9214%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (329 samples, 0.19%)</title><rect x="92.0191%" y="453" width="0.1888%" height="15" fill="rgb(234,130,49)" fg:x="160358" fg:w="329"/><text x="92.2691%" y="463.50"></text></g><g><title>hashbrown::raw::h2 (1,002 samples, 0.57%)</title><rect x="92.2079%" y="517" width="0.5750%" height="15" fill="rgb(254,6,2)" fg:x="160687" fg:w="1002"/><text x="92.4579%" y="527.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,551 samples, 0.89%)</title><rect x="92.7829%" y="517" width="0.8900%" height="15" fill="rgb(208,96,46)" fg:x="161689" fg:w="1551"/><text x="93.0329%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,551 samples, 0.89%)</title><rect x="92.7829%" y="501" width="0.8900%" height="15" fill="rgb(239,3,39)" fg:x="161689" fg:w="1551"/><text x="93.0329%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,551 samples, 0.89%)</title><rect x="92.7829%" y="485" width="0.8900%" height="15" fill="rgb(233,210,1)" fg:x="161689" fg:w="1551"/><text x="93.0329%" y="495.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="93.6603%" y="469" width="0.0126%" height="15" fill="rgb(244,137,37)" fg:x="163218" fg:w="22"/><text x="93.9103%" y="479.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="93.6608%" y="453" width="0.0121%" height="15" fill="rgb(240,136,2)" fg:x="163219" fg:w="21"/><text x="93.9108%" y="463.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="93.6608%" y="437" width="0.0121%" height="15" fill="rgb(239,18,37)" fg:x="163219" fg:w="21"/><text x="93.9108%" y="447.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="93.6608%" y="421" width="0.0121%" height="15" fill="rgb(218,185,22)" fg:x="163219" fg:w="21"/><text x="93.9108%" y="431.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="93.6608%" y="405" width="0.0121%" height="15" fill="rgb(225,218,4)" fg:x="163219" fg:w="21"/><text x="93.9108%" y="415.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="93.6614%" y="389" width="0.0115%" height="15" fill="rgb(230,182,32)" fg:x="163220" fg:w="20"/><text x="93.9114%" y="399.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="93.6614%" y="373" width="0.0115%" height="15" fill="rgb(242,56,43)" fg:x="163220" fg:w="20"/><text x="93.9114%" y="383.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="93.6614%" y="357" width="0.0115%" height="15" fill="rgb(233,99,24)" fg:x="163220" fg:w="20"/><text x="93.9114%" y="367.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="93.6614%" y="341" width="0.0115%" height="15" fill="rgb(234,209,42)" fg:x="163220" fg:w="20"/><text x="93.9114%" y="351.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="93.6626%" y="325" width="0.0103%" height="15" fill="rgb(227,7,12)" fg:x="163222" fg:w="18"/><text x="93.9126%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (58,948 samples, 33.83%)</title><rect x="60.3824%" y="613" width="33.8264%" height="15" fill="rgb(245,203,43)" fg:x="105226" fg:w="58948"/><text x="60.6324%" y="623.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (58,948 samples, 33.83%)</title><rect x="60.3824%" y="597" width="33.8264%" height="15" fill="rgb(238,205,33)" fg:x="105226" fg:w="58948"/><text x="60.6324%" y="607.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (58,948 samples, 33.83%)</title><rect x="60.3824%" y="581" width="33.8264%" height="15" fill="rgb(231,56,7)" fg:x="105226" fg:w="58948"/><text x="60.6324%" y="591.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (24,857 samples, 14.26%)</title><rect x="79.9450%" y="565" width="14.2638%" height="15" fill="rgb(244,186,29)" fg:x="139317" fg:w="24857"/><text x="80.1950%" y="575.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24,857 samples, 14.26%)</title><rect x="79.9450%" y="549" width="14.2638%" height="15" fill="rgb(234,111,31)" fg:x="139317" fg:w="24857"/><text x="80.1950%" y="559.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (24,857 samples, 14.26%)</title><rect x="79.9450%" y="533" width="14.2638%" height="15" fill="rgb(241,149,10)" fg:x="139317" fg:w="24857"/><text x="80.1950%" y="543.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (934 samples, 0.54%)</title><rect x="93.6729%" y="517" width="0.5360%" height="15" fill="rgb(249,206,44)" fg:x="163240" fg:w="934"/><text x="93.9229%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (934 samples, 0.54%)</title><rect x="93.6729%" y="501" width="0.5360%" height="15" fill="rgb(251,153,30)" fg:x="163240" fg:w="934"/><text x="93.9229%" y="511.50"></text></g><g><title>one_brc::process_lines (133,647 samples, 76.69%)</title><rect x="17.5376%" y="629" width="76.6914%" height="15" fill="rgb(239,152,38)" fg:x="30562" fg:w="133647"/><text x="17.7876%" y="639.50">one_brc::process_lines</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (22 samples, 0.01%)</title><rect x="94.2163%" y="613" width="0.0126%" height="15" fill="rgb(249,139,47)" fg:x="164187" fg:w="22"/><text x="94.4663%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (22 samples, 0.01%)</title><rect x="94.2163%" y="597" width="0.0126%" height="15" fill="rgb(244,64,35)" fg:x="164187" fg:w="22"/><text x="94.4663%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (22 samples, 0.01%)</title><rect x="94.2163%" y="581" width="0.0126%" height="15" fill="rgb(216,46,15)" fg:x="164187" fg:w="22"/><text x="94.4663%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (22 samples, 0.01%)</title><rect x="94.2163%" y="565" width="0.0126%" height="15" fill="rgb(250,74,19)" fg:x="164187" fg:w="22"/><text x="94.4663%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (22 samples, 0.01%)</title><rect x="94.2163%" y="549" width="0.0126%" height="15" fill="rgb(249,42,33)" fg:x="164187" fg:w="22"/><text x="94.4663%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (22 samples, 0.01%)</title><rect x="94.2163%" y="533" width="0.0126%" height="15" fill="rgb(242,149,17)" fg:x="164187" fg:w="22"/><text x="94.4663%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (22 samples, 0.01%)</title><rect x="94.2163%" y="517" width="0.0126%" height="15" fill="rgb(244,29,21)" fg:x="164187" fg:w="22"/><text x="94.4663%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (20 samples, 0.01%)</title><rect x="94.2175%" y="501" width="0.0115%" height="15" fill="rgb(220,130,37)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="511.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (20 samples, 0.01%)</title><rect x="94.2175%" y="485" width="0.0115%" height="15" fill="rgb(211,67,2)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.01%)</title><rect x="94.2175%" y="469" width="0.0115%" height="15" fill="rgb(235,68,52)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.01%)</title><rect x="94.2175%" y="453" width="0.0115%" height="15" fill="rgb(246,142,3)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="463.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.01%)</title><rect x="94.2175%" y="437" width="0.0115%" height="15" fill="rgb(241,25,7)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="447.50"></text></g><g><title>__rdl_alloc (20 samples, 0.01%)</title><rect x="94.2175%" y="421" width="0.0115%" height="15" fill="rgb(242,119,39)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="431.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.01%)</title><rect x="94.2175%" y="405" width="0.0115%" height="15" fill="rgb(241,98,45)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="415.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.01%)</title><rect x="94.2175%" y="389" width="0.0115%" height="15" fill="rgb(254,28,30)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="399.50"></text></g><g><title>_int_malloc (20 samples, 0.01%)</title><rect x="94.2175%" y="373" width="0.0115%" height="15" fill="rgb(241,142,54)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="383.50"></text></g><g><title>sysmalloc (20 samples, 0.01%)</title><rect x="94.2175%" y="357" width="0.0115%" height="15" fill="rgb(222,85,15)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="367.50"></text></g><g><title>sysmalloc_mmap (20 samples, 0.01%)</title><rect x="94.2175%" y="341" width="0.0115%" height="15" fill="rgb(210,85,47)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="351.50"></text></g><g><title>__GI___mmap64 (20 samples, 0.01%)</title><rect x="94.2175%" y="325" width="0.0115%" height="15" fill="rgb(224,206,25)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="335.50"></text></g><g><title>__GI___mmap64 (20 samples, 0.01%)</title><rect x="94.2175%" y="309" width="0.0115%" height="15" fill="rgb(243,201,19)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="319.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="293" width="0.0115%" height="15" fill="rgb(236,59,4)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="303.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="277" width="0.0115%" height="15" fill="rgb(254,179,45)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="287.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="261" width="0.0115%" height="15" fill="rgb(226,14,10)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="271.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="245" width="0.0115%" height="15" fill="rgb(244,27,41)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="255.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="229" width="0.0115%" height="15" fill="rgb(235,35,32)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="239.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="213" width="0.0115%" height="15" fill="rgb(218,68,31)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="223.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="197" width="0.0115%" height="15" fill="rgb(207,120,37)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="207.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="181" width="0.0115%" height="15" fill="rgb(227,98,0)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="191.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="165" width="0.0115%" height="15" fill="rgb(207,7,3)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="175.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="149" width="0.0115%" height="15" fill="rgb(206,98,19)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="159.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="94.2175%" y="133" width="0.0115%" height="15" fill="rgb(217,5,26)" fg:x="164189" fg:w="20"/><text x="94.4675%" y="143.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="94.2180%" y="117" width="0.0109%" height="15" fill="rgb(235,190,38)" fg:x="164190" fg:w="19"/><text x="94.4680%" y="127.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="94.2180%" y="101" width="0.0109%" height="15" fill="rgb(247,86,24)" fg:x="164190" fg:w="19"/><text x="94.4680%" y="111.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="94.2180%" y="85" width="0.0109%" height="15" fill="rgb(205,101,16)" fg:x="164190" fg:w="19"/><text x="94.4680%" y="95.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="94.2186%" y="69" width="0.0103%" height="15" fill="rgb(246,168,33)" fg:x="164191" fg:w="18"/><text x="94.4686%" y="79.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="94.2186%" y="53" width="0.0103%" height="15" fill="rgb(231,114,1)" fg:x="164191" fg:w="18"/><text x="94.4686%" y="63.50"></text></g><g><title>std::panic::catch_unwind (159,172 samples, 91.34%)</title><rect x="8.2535%" y="757" width="91.3385%" height="15" fill="rgb(207,184,53)" fg:x="14383" fg:w="159172"/><text x="8.5035%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (159,172 samples, 91.34%)</title><rect x="8.2535%" y="741" width="91.3385%" height="15" fill="rgb(224,95,51)" fg:x="14383" fg:w="159172"/><text x="8.5035%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (159,172 samples, 91.34%)</title><rect x="8.2535%" y="725" width="91.3385%" height="15" fill="rgb(212,188,45)" fg:x="14383" fg:w="159172"/><text x="8.5035%" y="735.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (159,172 samples, 91.34%)</title><rect x="8.2535%" y="709" width="91.3385%" height="15" fill="rgb(223,154,38)" fg:x="14383" fg:w="159172"/><text x="8.5035%" y="719.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (159,172 samples, 91.34%)</title><rect x="8.2535%" y="693" width="91.3385%" height="15" fill="rgb(251,22,52)" fg:x="14383" fg:w="159172"/><text x="8.5035%" y="703.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (159,172 samples, 91.34%)</title><rect x="8.2535%" y="677" width="91.3385%" height="15" fill="rgb(229,209,22)" fg:x="14383" fg:w="159172"/><text x="8.5035%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (142,999 samples, 82.06%)</title><rect x="17.5341%" y="661" width="82.0579%" height="15" fill="rgb(234,138,34)" fg:x="30556" fg:w="142999"/><text x="17.7841%" y="671.50">one_brc::main::_{{closure}}::_{{closure}}</text></g><g><title>one_brc::process_mapped_lines (142,999 samples, 82.06%)</title><rect x="17.5341%" y="645" width="82.0579%" height="15" fill="rgb(212,95,11)" fg:x="30556" fg:w="142999"/><text x="17.7841%" y="655.50">one_brc::process_mapped_lines</text></g><g><title>std::io::Read::read_to_end (9,345 samples, 5.36%)</title><rect x="94.2295%" y="629" width="5.3625%" height="15" fill="rgb(240,179,47)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="639.50">std::io..</text></g><g><title>std::io::default_read_to_end (9,345 samples, 5.36%)</title><rect x="94.2295%" y="613" width="5.3625%" height="15" fill="rgb(240,163,11)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="623.50">std::io..</text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (9,345 samples, 5.36%)</title><rect x="94.2295%" y="597" width="5.3625%" height="15" fill="rgb(236,37,12)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="607.50">&lt;std::i..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (9,345 samples, 5.36%)</title><rect x="94.2295%" y="581" width="5.3625%" height="15" fill="rgb(232,164,16)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="591.50">&lt;std::f..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (9,345 samples, 5.36%)</title><rect x="94.2295%" y="565" width="5.3625%" height="15" fill="rgb(244,205,15)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="575.50">&lt;&amp;std::..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (9,345 samples, 5.36%)</title><rect x="94.2295%" y="549" width="5.3625%" height="15" fill="rgb(223,117,47)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="559.50">std::sy..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (9,345 samples, 5.36%)</title><rect x="94.2295%" y="533" width="5.3625%" height="15" fill="rgb(244,107,35)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="543.50">std::sy..</text></g><g><title>__GI___libc_read (9,345 samples, 5.36%)</title><rect x="94.2295%" y="517" width="5.3625%" height="15" fill="rgb(205,140,8)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="527.50">__GI___..</text></g><g><title>__GI___libc_read (9,345 samples, 5.36%)</title><rect x="94.2295%" y="501" width="5.3625%" height="15" fill="rgb(228,84,46)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="511.50">__GI___..</text></g><g><title>[unknown] (9,345 samples, 5.36%)</title><rect x="94.2295%" y="485" width="5.3625%" height="15" fill="rgb(254,188,9)" fg:x="164210" fg:w="9345"/><text x="94.4795%" y="495.50">[unknow..</text></g><g><title>[unknown] (9,344 samples, 5.36%)</title><rect x="94.2301%" y="469" width="5.3619%" height="15" fill="rgb(206,112,54)" fg:x="164211" fg:w="9344"/><text x="94.4801%" y="479.50">[unknow..</text></g><g><title>[unknown] (9,343 samples, 5.36%)</title><rect x="94.2307%" y="453" width="5.3613%" height="15" fill="rgb(216,84,49)" fg:x="164212" fg:w="9343"/><text x="94.4807%" y="463.50">[unknow..</text></g><g><title>[unknown] (9,343 samples, 5.36%)</title><rect x="94.2307%" y="437" width="5.3613%" height="15" fill="rgb(214,194,35)" fg:x="164212" fg:w="9343"/><text x="94.4807%" y="447.50">[unknow..</text></g><g><title>[unknown] (9,343 samples, 5.36%)</title><rect x="94.2307%" y="421" width="5.3613%" height="15" fill="rgb(249,28,3)" fg:x="164212" fg:w="9343"/><text x="94.4807%" y="431.50">[unknow..</text></g><g><title>[unknown] (9,343 samples, 5.36%)</title><rect x="94.2307%" y="405" width="5.3613%" height="15" fill="rgb(222,56,52)" fg:x="164212" fg:w="9343"/><text x="94.4807%" y="415.50">[unknow..</text></g><g><title>[unknown] (9,343 samples, 5.36%)</title><rect x="94.2307%" y="389" width="5.3613%" height="15" fill="rgb(245,217,50)" fg:x="164212" fg:w="9343"/><text x="94.4807%" y="399.50">[unknow..</text></g><g><title>[unknown] (9,343 samples, 5.36%)</title><rect x="94.2307%" y="373" width="5.3613%" height="15" fill="rgb(213,201,24)" fg:x="164212" fg:w="9343"/><text x="94.4807%" y="383.50">[unknow..</text></g><g><title>[unknown] (9,286 samples, 5.33%)</title><rect x="94.2634%" y="357" width="5.3286%" height="15" fill="rgb(248,116,28)" fg:x="164269" fg:w="9286"/><text x="94.5134%" y="367.50">[unknow..</text></g><g><title>[unknown] (9,264 samples, 5.32%)</title><rect x="94.2760%" y="341" width="5.3160%" height="15" fill="rgb(219,72,43)" fg:x="164291" fg:w="9264"/><text x="94.5260%" y="351.50">[unknow..</text></g><g><title>[unknown] (9,102 samples, 5.22%)</title><rect x="94.3690%" y="325" width="5.2230%" height="15" fill="rgb(209,138,14)" fg:x="164453" fg:w="9102"/><text x="94.6190%" y="335.50">[unkno..</text></g><g><title>[unknown] (4,514 samples, 2.59%)</title><rect x="97.0017%" y="309" width="2.5903%" height="15" fill="rgb(222,18,33)" fg:x="169041" fg:w="4514"/><text x="97.2517%" y="319.50">[u..</text></g><g><title>[unknown] (4,506 samples, 2.59%)</title><rect x="97.0063%" y="293" width="2.5857%" height="15" fill="rgb(213,199,7)" fg:x="169049" fg:w="4506"/><text x="97.2563%" y="303.50">[u..</text></g><g><title>[unknown] (4,427 samples, 2.54%)</title><rect x="97.0516%" y="277" width="2.5404%" height="15" fill="rgb(250,110,10)" fg:x="169128" fg:w="4427"/><text x="97.3016%" y="287.50">[u..</text></g><g><title>[unknown] (4,375 samples, 2.51%)</title><rect x="97.0815%" y="261" width="2.5105%" height="15" fill="rgb(248,123,6)" fg:x="169180" fg:w="4375"/><text x="97.3315%" y="271.50">[u..</text></g><g><title>[unknown] (4,139 samples, 2.38%)</title><rect x="97.2169%" y="245" width="2.3751%" height="15" fill="rgb(206,91,31)" fg:x="169416" fg:w="4139"/><text x="97.4669%" y="255.50">[u..</text></g><g><title>[unknown] (3,999 samples, 2.29%)</title><rect x="97.2972%" y="229" width="2.2948%" height="15" fill="rgb(211,154,13)" fg:x="169556" fg:w="3999"/><text x="97.5472%" y="239.50">[..</text></g><g><title>[unknown] (3,918 samples, 2.25%)</title><rect x="97.3437%" y="213" width="2.2483%" height="15" fill="rgb(225,148,7)" fg:x="169637" fg:w="3918"/><text x="97.5937%" y="223.50">[..</text></g><g><title>[unknown] (3,764 samples, 2.16%)</title><rect x="97.4321%" y="197" width="2.1599%" height="15" fill="rgb(220,160,43)" fg:x="169791" fg:w="3764"/><text x="97.6821%" y="207.50">[..</text></g><g><title>[unknown] (3,553 samples, 2.04%)</title><rect x="97.5532%" y="181" width="2.0388%" height="15" fill="rgb(213,52,39)" fg:x="170002" fg:w="3553"/><text x="97.8032%" y="191.50">[..</text></g><g><title>[unknown] (3,147 samples, 1.81%)</title><rect x="97.7861%" y="165" width="1.8059%" height="15" fill="rgb(243,137,7)" fg:x="170408" fg:w="3147"/><text x="98.0361%" y="175.50">[..</text></g><g><title>[unknown] (2,502 samples, 1.44%)</title><rect x="98.1563%" y="149" width="1.4357%" height="15" fill="rgb(230,79,13)" fg:x="171053" fg:w="2502"/><text x="98.4063%" y="159.50"></text></g><g><title>[unknown] (2,270 samples, 1.30%)</title><rect x="98.2894%" y="133" width="1.3026%" height="15" fill="rgb(247,105,23)" fg:x="171285" fg:w="2270"/><text x="98.5394%" y="143.50"></text></g><g><title>[unknown] (1,001 samples, 0.57%)</title><rect x="99.0176%" y="117" width="0.5744%" height="15" fill="rgb(223,179,41)" fg:x="172554" fg:w="1001"/><text x="99.2676%" y="127.50"></text></g><g><title>[unknown] (962 samples, 0.55%)</title><rect x="99.0400%" y="101" width="0.5520%" height="15" fill="rgb(218,9,34)" fg:x="172593" fg:w="962"/><text x="99.2900%" y="111.50"></text></g><g><title>[unknown] (750 samples, 0.43%)</title><rect x="99.1616%" y="85" width="0.4304%" height="15" fill="rgb(222,106,8)" fg:x="172805" fg:w="750"/><text x="99.4116%" y="95.50"></text></g><g><title>[unknown] (388 samples, 0.22%)</title><rect x="99.3694%" y="69" width="0.2226%" height="15" fill="rgb(211,220,0)" fg:x="173167" fg:w="388"/><text x="99.6194%" y="79.50"></text></g><g><title>[unknown] (361 samples, 0.21%)</title><rect x="99.3848%" y="53" width="0.2072%" height="15" fill="rgb(229,52,16)" fg:x="173194" fg:w="361"/><text x="99.6348%" y="63.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="99.5616%" y="37" width="0.0304%" height="15" fill="rgb(212,155,18)" fg:x="173502" fg:w="53"/><text x="99.8116%" y="47.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (159,191 samples, 91.35%)</title><rect x="8.2529%" y="789" width="91.3494%" height="15" fill="rgb(242,21,14)" fg:x="14382" fg:w="159191"/><text x="8.5029%" y="799.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (159,190 samples, 91.35%)</title><rect x="8.2535%" y="773" width="91.3489%" height="15" fill="rgb(222,19,48)" fg:x="14383" fg:w="159190"/><text x="8.5035%" y="783.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::sys::pal::unix::thread::guard::current (18 samples, 0.01%)</title><rect x="99.5920%" y="757" width="0.0103%" height="15" fill="rgb(232,45,27)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="767.50"></text></g><g><title>__pthread_getattr_np (18 samples, 0.01%)</title><rect x="99.5920%" y="741" width="0.0103%" height="15" fill="rgb(249,103,42)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="751.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.01%)</title><rect x="99.5920%" y="725" width="0.0103%" height="15" fill="rgb(246,81,33)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="735.50"></text></g><g><title>tcache_init (18 samples, 0.01%)</title><rect x="99.5920%" y="709" width="0.0103%" height="15" fill="rgb(252,33,42)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="719.50"></text></g><g><title>tcache_init (18 samples, 0.01%)</title><rect x="99.5920%" y="693" width="0.0103%" height="15" fill="rgb(209,212,41)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="703.50"></text></g><g><title>arena_get2 (18 samples, 0.01%)</title><rect x="99.5920%" y="677" width="0.0103%" height="15" fill="rgb(207,154,6)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="687.50"></text></g><g><title>arena_get2 (18 samples, 0.01%)</title><rect x="99.5920%" y="661" width="0.0103%" height="15" fill="rgb(223,64,47)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="671.50"></text></g><g><title>_int_new_arena (18 samples, 0.01%)</title><rect x="99.5920%" y="645" width="0.0103%" height="15" fill="rgb(211,161,38)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="655.50"></text></g><g><title>new_heap (18 samples, 0.01%)</title><rect x="99.5920%" y="629" width="0.0103%" height="15" fill="rgb(219,138,40)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="639.50"></text></g><g><title>alloc_new_heap (18 samples, 0.01%)</title><rect x="99.5920%" y="613" width="0.0103%" height="15" fill="rgb(241,228,46)" fg:x="173555" fg:w="18"/><text x="99.8420%" y="623.50"></text></g><g><title>__clone3 (159,198 samples, 91.35%)</title><rect x="8.2523%" y="837" width="91.3534%" height="15" fill="rgb(223,209,38)" fg:x="14381" fg:w="159198"/><text x="8.5023%" y="847.50">__clone3</text></g><g><title>start_thread (159,198 samples, 91.35%)</title><rect x="8.2523%" y="821" width="91.3534%" height="15" fill="rgb(236,164,45)" fg:x="14381" fg:w="159198"/><text x="8.5023%" y="831.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (159,197 samples, 91.35%)</title><rect x="8.2529%" y="805" width="91.3529%" height="15" fill="rgb(231,15,5)" fg:x="14382" fg:w="159197"/><text x="8.5029%" y="815.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>__memcmp_evex_movbe (675 samples, 0.39%)</title><rect x="99.6058%" y="837" width="0.3873%" height="15" fill="rgb(252,35,15)" fg:x="173579" fg:w="675"/><text x="99.8558%" y="847.50"></text></g><g><title>one-brc (174,260 samples, 100.00%)</title><rect x="0.0000%" y="853" width="99.9966%" height="15" fill="rgb(248,181,18)" fg:x="0" fg:w="174260"/><text x="0.2500%" y="863.50">one-brc</text></g><g><title>all (174,266 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(233,39,42)" fg:x="0" fg:w="174266"/><text x="0.2500%" y="879.50"></text></g></svg></svg>