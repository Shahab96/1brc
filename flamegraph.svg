<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="385508"><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (77 samples, 0.02%)</title><rect x="0.0119%" y="693" width="0.0200%" height="15" fill="rgb(227,0,7)" fg:x="46" fg:w="77"/><text x="0.2619%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (77 samples, 0.02%)</title><rect x="0.0119%" y="677" width="0.0200%" height="15" fill="rgb(217,0,24)" fg:x="46" fg:w="77"/><text x="0.2619%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (168 samples, 0.04%)</title><rect x="0.0000%" y="773" width="0.0436%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="168"/><text x="0.2500%" y="783.50"></text></g><g><title>alloc::string::String::push_str (122 samples, 0.03%)</title><rect x="0.0119%" y="757" width="0.0316%" height="15" fill="rgb(248,212,6)" fg:x="46" fg:w="122"/><text x="0.2619%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (122 samples, 0.03%)</title><rect x="0.0119%" y="741" width="0.0316%" height="15" fill="rgb(208,68,35)" fg:x="46" fg:w="122"/><text x="0.2619%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (122 samples, 0.03%)</title><rect x="0.0119%" y="725" width="0.0316%" height="15" fill="rgb(232,128,0)" fg:x="46" fg:w="122"/><text x="0.2619%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (122 samples, 0.03%)</title><rect x="0.0119%" y="709" width="0.0316%" height="15" fill="rgb(207,160,47)" fg:x="46" fg:w="122"/><text x="0.2619%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.01%)</title><rect x="0.0319%" y="693" width="0.0117%" height="15" fill="rgb(228,23,34)" fg:x="123" fg:w="45"/><text x="0.2819%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (258 samples, 0.07%)</title><rect x="0.0436%" y="773" width="0.0669%" height="15" fill="rgb(218,30,26)" fg:x="168" fg:w="258"/><text x="0.2936%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,324 samples, 0.34%)</title><rect x="0.5261%" y="757" width="0.3434%" height="15" fill="rgb(220,122,19)" fg:x="2028" fg:w="1324"/><text x="0.7761%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,324 samples, 0.34%)</title><rect x="0.5261%" y="741" width="0.3434%" height="15" fill="rgb(250,228,42)" fg:x="2028" fg:w="1324"/><text x="0.7761%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,324 samples, 0.34%)</title><rect x="0.5261%" y="725" width="0.3434%" height="15" fill="rgb(240,193,28)" fg:x="2028" fg:w="1324"/><text x="0.7761%" y="735.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3,964 samples, 1.03%)</title><rect x="0.1105%" y="773" width="1.0283%" height="15" fill="rgb(216,20,37)" fg:x="426" fg:w="3964"/><text x="0.3605%" y="783.50"></text></g><g><title>core::slice::memchr::memchr (1,038 samples, 0.27%)</title><rect x="0.8695%" y="757" width="0.2693%" height="15" fill="rgb(206,188,39)" fg:x="3352" fg:w="1038"/><text x="1.1195%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (797 samples, 0.21%)</title><rect x="1.3867%" y="677" width="0.2067%" height="15" fill="rgb(217,207,13)" fg:x="5346" fg:w="797"/><text x="1.6367%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (797 samples, 0.21%)</title><rect x="1.3867%" y="661" width="0.2067%" height="15" fill="rgb(231,73,38)" fg:x="5346" fg:w="797"/><text x="1.6367%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,780 samples, 0.72%)</title><rect x="1.1388%" y="757" width="0.7211%" height="15" fill="rgb(225,20,46)" fg:x="4390" fg:w="2780"/><text x="1.3888%" y="767.50"></text></g><g><title>alloc::string::String::push_str (1,824 samples, 0.47%)</title><rect x="1.3867%" y="741" width="0.4731%" height="15" fill="rgb(210,31,41)" fg:x="5346" fg:w="1824"/><text x="1.6367%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,824 samples, 0.47%)</title><rect x="1.3867%" y="725" width="0.4731%" height="15" fill="rgb(221,200,47)" fg:x="5346" fg:w="1824"/><text x="1.6367%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,824 samples, 0.47%)</title><rect x="1.3867%" y="709" width="0.4731%" height="15" fill="rgb(226,26,5)" fg:x="5346" fg:w="1824"/><text x="1.6367%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,824 samples, 0.47%)</title><rect x="1.3867%" y="693" width="0.4731%" height="15" fill="rgb(249,33,26)" fg:x="5346" fg:w="1824"/><text x="1.6367%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,027 samples, 0.27%)</title><rect x="1.5935%" y="677" width="0.2664%" height="15" fill="rgb(235,183,28)" fg:x="6143" fg:w="1027"/><text x="1.8435%" y="687.50"></text></g><g><title>__memcpy_evex_unaligned_erms (871 samples, 0.23%)</title><rect x="1.8599%" y="757" width="0.2259%" height="15" fill="rgb(221,5,38)" fg:x="7170" fg:w="871"/><text x="2.1099%" y="767.50"></text></g><g><title>[one-brc] (4,555 samples, 1.18%)</title><rect x="1.1388%" y="773" width="1.1816%" height="15" fill="rgb(247,18,42)" fg:x="4390" fg:w="4555"/><text x="1.3888%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (904 samples, 0.23%)</title><rect x="2.0858%" y="757" width="0.2345%" height="15" fill="rgb(241,131,45)" fg:x="8041" fg:w="904"/><text x="2.3358%" y="767.50"></text></g><g><title>__GI___libc_free (472 samples, 0.12%)</title><rect x="2.3203%" y="773" width="0.1224%" height="15" fill="rgb(249,31,29)" fg:x="8945" fg:w="472"/><text x="2.5703%" y="783.50"></text></g><g><title>__GI___libc_malloc (132 samples, 0.03%)</title><rect x="2.4428%" y="773" width="0.0342%" height="15" fill="rgb(225,111,53)" fg:x="9417" fg:w="132"/><text x="2.6928%" y="783.50"></text></g><g><title>__memcmp_evex_movbe (632 samples, 0.16%)</title><rect x="2.4770%" y="773" width="0.1639%" height="15" fill="rgb(238,160,17)" fg:x="9549" fg:w="632"/><text x="2.7270%" y="783.50"></text></g><g><title>__memcpy_evex_unaligned_erms (340 samples, 0.09%)</title><rect x="2.6409%" y="773" width="0.0882%" height="15" fill="rgb(214,148,48)" fg:x="10181" fg:w="340"/><text x="2.8909%" y="783.50"></text></g><g><title>__memset_evex_unaligned_erms (52 samples, 0.01%)</title><rect x="2.7291%" y="773" width="0.0135%" height="15" fill="rgb(232,36,49)" fg:x="10521" fg:w="52"/><text x="2.9791%" y="783.50"></text></g><g><title>_int_free (570 samples, 0.15%)</title><rect x="2.7426%" y="773" width="0.1479%" height="15" fill="rgb(209,103,24)" fg:x="10573" fg:w="570"/><text x="2.9926%" y="783.50"></text></g><g><title>alloc::fmt::format::format_inner (1,085 samples, 0.28%)</title><rect x="2.8905%" y="773" width="0.2814%" height="15" fill="rgb(229,88,8)" fg:x="11143" fg:w="1085"/><text x="3.1405%" y="783.50"></text></g><g><title>core::fmt::Write::write_fmt (520 samples, 0.13%)</title><rect x="3.0370%" y="757" width="0.1349%" height="15" fill="rgb(213,181,19)" fg:x="11708" fg:w="520"/><text x="3.2870%" y="767.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (520 samples, 0.13%)</title><rect x="3.0370%" y="741" width="0.1349%" height="15" fill="rgb(254,191,54)" fg:x="11708" fg:w="520"/><text x="3.2870%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (800 samples, 0.21%)</title><rect x="3.1719%" y="773" width="0.2075%" height="15" fill="rgb(241,83,37)" fg:x="12228" fg:w="800"/><text x="3.4219%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (729 samples, 0.19%)</title><rect x="3.1903%" y="757" width="0.1891%" height="15" fill="rgb(233,36,39)" fg:x="12299" fg:w="729"/><text x="3.4403%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (228 samples, 0.06%)</title><rect x="3.3203%" y="741" width="0.0591%" height="15" fill="rgb(226,3,54)" fg:x="12800" fg:w="228"/><text x="3.5703%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (228 samples, 0.06%)</title><rect x="3.3203%" y="725" width="0.0591%" height="15" fill="rgb(245,192,40)" fg:x="12800" fg:w="228"/><text x="3.5703%" y="735.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (4,029 samples, 1.05%)</title><rect x="3.3825%" y="773" width="1.0451%" height="15" fill="rgb(238,167,29)" fg:x="13040" fg:w="4029"/><text x="3.6325%" y="783.50"></text></g><g><title>core::num::flt2dec::to_exact_fixed_str (1,453 samples, 0.38%)</title><rect x="4.0508%" y="757" width="0.3769%" height="15" fill="rgb(232,182,51)" fg:x="15616" fg:w="1453"/><text x="4.3008%" y="767.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,042 samples, 0.27%)</title><rect x="4.1574%" y="741" width="0.2703%" height="15" fill="rgb(231,60,39)" fg:x="16027" fg:w="1042"/><text x="4.4074%" y="751.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (1,042 samples, 0.27%)</title><rect x="4.1574%" y="725" width="0.2703%" height="15" fill="rgb(208,69,12)" fg:x="16027" fg:w="1042"/><text x="4.4074%" y="735.50"></text></g><g><title>core::fmt::Formatter::new (392 samples, 0.10%)</title><rect x="4.7804%" y="757" width="0.1017%" height="15" fill="rgb(235,93,37)" fg:x="18429" fg:w="392"/><text x="5.0304%" y="767.50"></text></g><g><title>core::fmt::write (2,430 samples, 0.63%)</title><rect x="4.4277%" y="773" width="0.6303%" height="15" fill="rgb(213,116,39)" fg:x="17069" fg:w="2430"/><text x="4.6777%" y="783.50"></text></g><g><title>core::fmt::run (678 samples, 0.18%)</title><rect x="4.8821%" y="757" width="0.1759%" height="15" fill="rgb(222,207,29)" fg:x="18821" fg:w="678"/><text x="5.1321%" y="767.50"></text></g><g><title>core::fmt::rt::Argument::fmt (678 samples, 0.18%)</title><rect x="4.8821%" y="741" width="0.1759%" height="15" fill="rgb(206,96,30)" fg:x="18821" fg:w="678"/><text x="5.1321%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,568 samples, 0.41%)</title><rect x="5.0580%" y="773" width="0.4067%" height="15" fill="rgb(218,138,4)" fg:x="19499" fg:w="1568"/><text x="5.3080%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,446 samples, 0.38%)</title><rect x="5.0896%" y="757" width="0.3751%" height="15" fill="rgb(250,191,14)" fg:x="19621" fg:w="1446"/><text x="5.3396%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,446 samples, 0.38%)</title><rect x="5.0896%" y="741" width="0.3751%" height="15" fill="rgb(239,60,40)" fg:x="19621" fg:w="1446"/><text x="5.3396%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,446 samples, 0.38%)</title><rect x="5.0896%" y="725" width="0.3751%" height="15" fill="rgb(206,27,48)" fg:x="19621" fg:w="1446"/><text x="5.3396%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,446 samples, 0.38%)</title><rect x="5.0896%" y="709" width="0.3751%" height="15" fill="rgb(225,35,8)" fg:x="19621" fg:w="1446"/><text x="5.3396%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,446 samples, 0.38%)</title><rect x="5.0896%" y="693" width="0.3751%" height="15" fill="rgb(250,213,24)" fg:x="19621" fg:w="1446"/><text x="5.3396%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,446 samples, 0.38%)</title><rect x="5.0896%" y="677" width="0.3751%" height="15" fill="rgb(247,123,22)" fg:x="19621" fg:w="1446"/><text x="5.3396%" y="687.50"></text></g><g><title>core::hash::Hasher::write_u8 (579 samples, 0.15%)</title><rect x="5.3145%" y="661" width="0.1502%" height="15" fill="rgb(231,138,38)" fg:x="20488" fg:w="579"/><text x="5.5645%" y="671.50"></text></g><g><title>core::num::bignum::Big32x40::mul_pow2 (924 samples, 0.24%)</title><rect x="5.4647%" y="773" width="0.2397%" height="15" fill="rgb(231,145,46)" fg:x="21067" fg:w="924"/><text x="5.7147%" y="783.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (3,854 samples, 1.00%)</title><rect x="5.7044%" y="773" width="0.9997%" height="15" fill="rgb(251,118,11)" fg:x="21991" fg:w="3854"/><text x="5.9544%" y="783.50"></text></g><g><title>core::num::dec2flt::dec2flt (3,854 samples, 1.00%)</title><rect x="5.7044%" y="757" width="0.9997%" height="15" fill="rgb(217,147,25)" fg:x="21991" fg:w="3854"/><text x="5.9544%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1,007 samples, 0.26%)</title><rect x="6.7041%" y="773" width="0.2612%" height="15" fill="rgb(247,81,37)" fg:x="25845" fg:w="1007"/><text x="6.9541%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (1,007 samples, 0.26%)</title><rect x="6.7041%" y="757" width="0.2612%" height="15" fill="rgb(209,12,38)" fg:x="25845" fg:w="1007"/><text x="6.9541%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (1,007 samples, 0.26%)</title><rect x="6.7041%" y="741" width="0.2612%" height="15" fill="rgb(227,1,9)" fg:x="25845" fg:w="1007"/><text x="6.9541%" y="751.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::mul_pow10 (429 samples, 0.11%)</title><rect x="6.9716%" y="773" width="0.1113%" height="15" fill="rgb(248,47,43)" fg:x="26876" fg:w="429"/><text x="7.2216%" y="783.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,528 samples, 0.40%)</title><rect x="7.0896%" y="773" width="0.3964%" height="15" fill="rgb(221,10,30)" fg:x="27331" fg:w="1528"/><text x="7.3396%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (417 samples, 0.11%)</title><rect x="7.6950%" y="757" width="0.1082%" height="15" fill="rgb(210,229,1)" fg:x="29665" fg:w="417"/><text x="7.9450%" y="767.50"></text></g><g><title>[anon] (30,710 samples, 7.97%)</title><rect x="0.0000%" y="789" width="7.9661%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="30710"/><text x="0.2500%" y="799.50">[anon]</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,851 samples, 0.48%)</title><rect x="7.4860%" y="773" width="0.4801%" height="15" fill="rgb(234,67,33)" fg:x="28859" fg:w="1851"/><text x="7.7360%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (628 samples, 0.16%)</title><rect x="7.8032%" y="757" width="0.1629%" height="15" fill="rgb(247,98,35)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (628 samples, 0.16%)</title><rect x="7.8032%" y="741" width="0.1629%" height="15" fill="rgb(247,138,52)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (628 samples, 0.16%)</title><rect x="7.8032%" y="725" width="0.1629%" height="15" fill="rgb(213,79,30)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="735.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (628 samples, 0.16%)</title><rect x="7.8032%" y="709" width="0.1629%" height="15" fill="rgb(246,177,23)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (628 samples, 0.16%)</title><rect x="7.8032%" y="693" width="0.1629%" height="15" fill="rgb(230,62,27)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="703.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (628 samples, 0.16%)</title><rect x="7.8032%" y="677" width="0.1629%" height="15" fill="rgb(216,154,8)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (628 samples, 0.16%)</title><rect x="7.8032%" y="661" width="0.1629%" height="15" fill="rgb(244,35,45)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (628 samples, 0.16%)</title><rect x="7.8032%" y="645" width="0.1629%" height="15" fill="rgb(251,115,12)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (628 samples, 0.16%)</title><rect x="7.8032%" y="629" width="0.1629%" height="15" fill="rgb(240,54,50)" fg:x="30082" fg:w="628"/><text x="8.0532%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,051 samples, 0.27%)</title><rect x="7.9664%" y="757" width="0.2726%" height="15" fill="rgb(233,84,52)" fg:x="30711" fg:w="1051"/><text x="8.2164%" y="767.50"></text></g><g><title>alloc::string::String::push_str (516 samples, 0.13%)</title><rect x="8.1051%" y="741" width="0.1338%" height="15" fill="rgb(207,117,47)" fg:x="31246" fg:w="516"/><text x="8.3551%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (516 samples, 0.13%)</title><rect x="8.1051%" y="725" width="0.1338%" height="15" fill="rgb(249,43,39)" fg:x="31246" fg:w="516"/><text x="8.3551%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (516 samples, 0.13%)</title><rect x="8.1051%" y="709" width="0.1338%" height="15" fill="rgb(209,38,44)" fg:x="31246" fg:w="516"/><text x="8.3551%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (516 samples, 0.13%)</title><rect x="8.1051%" y="693" width="0.1338%" height="15" fill="rgb(236,212,23)" fg:x="31246" fg:w="516"/><text x="8.3551%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (490 samples, 0.13%)</title><rect x="8.1119%" y="677" width="0.1271%" height="15" fill="rgb(242,79,21)" fg:x="31272" fg:w="490"/><text x="8.3619%" y="687.50"></text></g><g><title>__memcpy_evex_unaligned_erms (357 samples, 0.09%)</title><rect x="8.2390%" y="757" width="0.0926%" height="15" fill="rgb(211,96,35)" fg:x="31762" fg:w="357"/><text x="8.4890%" y="767.50"></text></g><g><title>[one-brc] (1,434 samples, 0.37%)</title><rect x="7.9661%" y="789" width="0.3720%" height="15" fill="rgb(253,215,40)" fg:x="30710" fg:w="1434"/><text x="8.2161%" y="799.50"></text></g><g><title>[one-brc] (1,433 samples, 0.37%)</title><rect x="7.9664%" y="773" width="0.3717%" height="15" fill="rgb(211,81,21)" fg:x="30711" fg:w="1433"/><text x="8.2164%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4,540 samples, 1.18%)</title><rect x="8.3433%" y="773" width="1.1777%" height="15" fill="rgb(208,190,38)" fg:x="32164" fg:w="4540"/><text x="8.5933%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,254 samples, 0.33%)</title><rect x="9.5209%" y="773" width="0.3253%" height="15" fill="rgb(235,213,38)" fg:x="36704" fg:w="1254"/><text x="9.7709%" y="783.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (2,679 samples, 0.69%)</title><rect x="9.8462%" y="773" width="0.6949%" height="15" fill="rgb(237,122,38)" fg:x="37958" fg:w="2679"/><text x="10.0962%" y="783.50"></text></g><g><title>[unknown] (385 samples, 0.10%)</title><rect x="10.5484%" y="773" width="0.0999%" height="15" fill="rgb(244,218,35)" fg:x="40665" fg:w="385"/><text x="10.7984%" y="783.50"></text></g><g><title>[unknown] (385 samples, 0.10%)</title><rect x="10.5484%" y="757" width="0.0999%" height="15" fill="rgb(240,68,47)" fg:x="40665" fg:w="385"/><text x="10.7984%" y="767.50"></text></g><g><title>[unknown] (385 samples, 0.10%)</title><rect x="10.5484%" y="741" width="0.0999%" height="15" fill="rgb(210,16,53)" fg:x="40665" fg:w="385"/><text x="10.7984%" y="751.50"></text></g><g><title>[unknown] (383 samples, 0.10%)</title><rect x="10.5489%" y="725" width="0.0993%" height="15" fill="rgb(235,124,12)" fg:x="40667" fg:w="383"/><text x="10.7989%" y="735.50"></text></g><g><title>[unknown] (380 samples, 0.10%)</title><rect x="10.5497%" y="709" width="0.0986%" height="15" fill="rgb(224,169,11)" fg:x="40670" fg:w="380"/><text x="10.7997%" y="719.50"></text></g><g><title>[unknown] (380 samples, 0.10%)</title><rect x="10.5497%" y="693" width="0.0986%" height="15" fill="rgb(250,166,2)" fg:x="40670" fg:w="380"/><text x="10.7997%" y="703.50"></text></g><g><title>[unknown] (380 samples, 0.10%)</title><rect x="10.5497%" y="677" width="0.0986%" height="15" fill="rgb(242,216,29)" fg:x="40670" fg:w="380"/><text x="10.7997%" y="687.50"></text></g><g><title>[unknown] (380 samples, 0.10%)</title><rect x="10.5497%" y="661" width="0.0986%" height="15" fill="rgb(230,116,27)" fg:x="40670" fg:w="380"/><text x="10.7997%" y="671.50"></text></g><g><title>[unknown] (319 samples, 0.08%)</title><rect x="10.5655%" y="645" width="0.0827%" height="15" fill="rgb(228,99,48)" fg:x="40731" fg:w="319"/><text x="10.8155%" y="655.50"></text></g><g><title>[unknown] (319 samples, 0.08%)</title><rect x="10.5655%" y="629" width="0.0827%" height="15" fill="rgb(253,11,6)" fg:x="40731" fg:w="319"/><text x="10.8155%" y="639.50"></text></g><g><title>[unknown] (318 samples, 0.08%)</title><rect x="10.5658%" y="613" width="0.0825%" height="15" fill="rgb(247,143,39)" fg:x="40732" fg:w="318"/><text x="10.8158%" y="623.50"></text></g><g><title>[unknown] (318 samples, 0.08%)</title><rect x="10.5658%" y="597" width="0.0825%" height="15" fill="rgb(236,97,10)" fg:x="40732" fg:w="318"/><text x="10.8158%" y="607.50"></text></g><g><title>[unknown] (317 samples, 0.08%)</title><rect x="10.5661%" y="581" width="0.0822%" height="15" fill="rgb(233,208,19)" fg:x="40733" fg:w="317"/><text x="10.8161%" y="591.50"></text></g><g><title>[unknown] (277 samples, 0.07%)</title><rect x="10.5764%" y="565" width="0.0719%" height="15" fill="rgb(216,164,2)" fg:x="40773" fg:w="277"/><text x="10.8264%" y="575.50"></text></g><g><title>[unknown] (247 samples, 0.06%)</title><rect x="10.5842%" y="549" width="0.0641%" height="15" fill="rgb(220,129,5)" fg:x="40803" fg:w="247"/><text x="10.8342%" y="559.50"></text></g><g><title>[unknown] (242 samples, 0.06%)</title><rect x="10.5855%" y="533" width="0.0628%" height="15" fill="rgb(242,17,10)" fg:x="40808" fg:w="242"/><text x="10.8355%" y="543.50"></text></g><g><title>[unknown] (222 samples, 0.06%)</title><rect x="10.5907%" y="517" width="0.0576%" height="15" fill="rgb(242,107,0)" fg:x="40828" fg:w="222"/><text x="10.8407%" y="527.50"></text></g><g><title>[unknown] (189 samples, 0.05%)</title><rect x="10.5993%" y="501" width="0.0490%" height="15" fill="rgb(251,28,31)" fg:x="40861" fg:w="189"/><text x="10.8493%" y="511.50"></text></g><g><title>[unknown] (131 samples, 0.03%)</title><rect x="10.6143%" y="485" width="0.0340%" height="15" fill="rgb(233,223,10)" fg:x="40919" fg:w="131"/><text x="10.8643%" y="495.50"></text></g><g><title>[unknown] (97 samples, 0.03%)</title><rect x="10.6231%" y="469" width="0.0252%" height="15" fill="rgb(215,21,27)" fg:x="40953" fg:w="97"/><text x="10.8731%" y="479.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="10.6317%" y="453" width="0.0166%" height="15" fill="rgb(232,23,21)" fg:x="40986" fg:w="64"/><text x="10.8817%" y="463.50"></text></g><g><title>__GI___libc_free (712 samples, 0.18%)</title><rect x="10.6483%" y="773" width="0.1847%" height="15" fill="rgb(244,5,23)" fg:x="41050" fg:w="712"/><text x="10.8983%" y="783.50"></text></g><g><title>__GI___libc_malloc (1,432 samples, 0.37%)</title><rect x="10.8330%" y="773" width="0.3715%" height="15" fill="rgb(226,81,46)" fg:x="41762" fg:w="1432"/><text x="11.0830%" y="783.50"></text></g><g><title>__memcmp_evex_movbe (252 samples, 0.07%)</title><rect x="11.2044%" y="773" width="0.0654%" height="15" fill="rgb(247,70,30)" fg:x="43194" fg:w="252"/><text x="11.4544%" y="783.50"></text></g><g><title>__roundf (313 samples, 0.08%)</title><rect x="11.2698%" y="773" width="0.0812%" height="15" fill="rgb(212,68,19)" fg:x="43446" fg:w="313"/><text x="11.5198%" y="783.50"></text></g><g><title>_int_free (1,420 samples, 0.37%)</title><rect x="11.3510%" y="773" width="0.3683%" height="15" fill="rgb(240,187,13)" fg:x="43759" fg:w="1420"/><text x="11.6010%" y="783.50"></text></g><g><title>alloc::fmt::format::format_inner (1,319 samples, 0.34%)</title><rect x="11.7193%" y="773" width="0.3421%" height="15" fill="rgb(223,113,26)" fg:x="45179" fg:w="1319"/><text x="11.9693%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (327 samples, 0.08%)</title><rect x="12.0615%" y="773" width="0.0848%" height="15" fill="rgb(206,192,2)" fg:x="46498" fg:w="327"/><text x="12.3115%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (326 samples, 0.08%)</title><rect x="12.0617%" y="757" width="0.0846%" height="15" fill="rgb(241,108,4)" fg:x="46499" fg:w="326"/><text x="12.3117%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (326 samples, 0.08%)</title><rect x="12.0617%" y="741" width="0.0846%" height="15" fill="rgb(247,173,49)" fg:x="46499" fg:w="326"/><text x="12.3117%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (326 samples, 0.08%)</title><rect x="12.0617%" y="725" width="0.0846%" height="15" fill="rgb(224,114,35)" fg:x="46499" fg:w="326"/><text x="12.3117%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,466 samples, 0.38%)</title><rect x="12.1463%" y="773" width="0.3803%" height="15" fill="rgb(245,159,27)" fg:x="46825" fg:w="1466"/><text x="12.3963%" y="783.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (2,281 samples, 0.59%)</title><rect x="12.5266%" y="773" width="0.5917%" height="15" fill="rgb(245,172,44)" fg:x="48291" fg:w="2281"/><text x="12.7766%" y="783.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (4,578 samples, 1.19%)</title><rect x="13.1183%" y="773" width="1.1875%" height="15" fill="rgb(236,23,11)" fg:x="50572" fg:w="4578"/><text x="13.3683%" y="783.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts::write_bytes (2,289 samples, 0.59%)</title><rect x="13.7120%" y="757" width="0.5938%" height="15" fill="rgb(205,117,38)" fg:x="52861" fg:w="2289"/><text x="13.9620%" y="767.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (445 samples, 0.12%)</title><rect x="14.3058%" y="773" width="0.1154%" height="15" fill="rgb(237,72,25)" fg:x="55150" fg:w="445"/><text x="14.5558%" y="783.50"></text></g><g><title>core::fmt::write (435 samples, 0.11%)</title><rect x="14.4212%" y="773" width="0.1128%" height="15" fill="rgb(244,70,9)" fg:x="55595" fg:w="435"/><text x="14.6712%" y="783.50"></text></g><g><title>core::fmt::Formatter::new (435 samples, 0.11%)</title><rect x="14.4212%" y="757" width="0.1128%" height="15" fill="rgb(217,125,39)" fg:x="55595" fg:w="435"/><text x="14.6712%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (940 samples, 0.24%)</title><rect x="14.5341%" y="773" width="0.2438%" height="15" fill="rgb(235,36,10)" fg:x="56030" fg:w="940"/><text x="14.7841%" y="783.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (1,816 samples, 0.47%)</title><rect x="14.9258%" y="757" width="0.4711%" height="15" fill="rgb(251,123,47)" fg:x="57540" fg:w="1816"/><text x="15.1758%" y="767.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (2,416 samples, 0.63%)</title><rect x="14.7779%" y="773" width="0.6267%" height="15" fill="rgb(221,13,13)" fg:x="56970" fg:w="2416"/><text x="15.0279%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (3,591 samples, 0.93%)</title><rect x="15.4046%" y="773" width="0.9315%" height="15" fill="rgb(238,131,9)" fg:x="59386" fg:w="3591"/><text x="15.6546%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (665 samples, 0.17%)</title><rect x="16.1636%" y="757" width="0.1725%" height="15" fill="rgb(211,50,8)" fg:x="62312" fg:w="665"/><text x="16.4136%" y="767.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (665 samples, 0.17%)</title><rect x="16.1636%" y="741" width="0.1725%" height="15" fill="rgb(245,182,24)" fg:x="62312" fg:w="665"/><text x="16.4136%" y="751.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (752 samples, 0.20%)</title><rect x="16.3361%" y="773" width="0.1951%" height="15" fill="rgb(242,14,37)" fg:x="62977" fg:w="752"/><text x="16.5861%" y="783.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (1,785 samples, 0.46%)</title><rect x="16.5312%" y="773" width="0.4630%" height="15" fill="rgb(246,228,12)" fg:x="63729" fg:w="1785"/><text x="16.7812%" y="783.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::clone::Clone&gt;::clone (444 samples, 0.12%)</title><rect x="16.8790%" y="757" width="0.1152%" height="15" fill="rgb(213,55,15)" fg:x="65070" fg:w="444"/><text x="17.1290%" y="767.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (3,500 samples, 0.91%)</title><rect x="16.9942%" y="773" width="0.9079%" height="15" fill="rgb(209,9,3)" fg:x="65514" fg:w="3500"/><text x="17.2442%" y="783.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (1,589 samples, 0.41%)</title><rect x="17.9021%" y="773" width="0.4122%" height="15" fill="rgb(230,59,30)" fg:x="69014" fg:w="1589"/><text x="18.1521%" y="783.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,409 samples, 0.37%)</title><rect x="18.3143%" y="773" width="0.3655%" height="15" fill="rgb(209,121,21)" fg:x="70603" fg:w="1409"/><text x="18.5643%" y="783.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (593 samples, 0.15%)</title><rect x="18.6798%" y="725" width="0.1538%" height="15" fill="rgb(220,109,13)" fg:x="72012" fg:w="593"/><text x="18.9298%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (593 samples, 0.15%)</title><rect x="18.6798%" y="709" width="0.1538%" height="15" fill="rgb(232,18,1)" fg:x="72012" fg:w="593"/><text x="18.9298%" y="719.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (593 samples, 0.15%)</title><rect x="18.6798%" y="693" width="0.1538%" height="15" fill="rgb(215,41,42)" fg:x="72012" fg:w="593"/><text x="18.9298%" y="703.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (593 samples, 0.15%)</title><rect x="18.6798%" y="677" width="0.1538%" height="15" fill="rgb(224,123,36)" fg:x="72012" fg:w="593"/><text x="18.9298%" y="687.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (781 samples, 0.20%)</title><rect x="18.8336%" y="693" width="0.2026%" height="15" fill="rgb(240,125,3)" fg:x="72605" fg:w="781"/><text x="19.0836%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (789 samples, 0.20%)</title><rect x="19.0362%" y="693" width="0.2047%" height="15" fill="rgb(205,98,50)" fg:x="73386" fg:w="789"/><text x="19.2862%" y="703.50"></text></g><g><title>alloc::fmt::format (610 samples, 0.16%)</title><rect x="19.2408%" y="677" width="0.1582%" height="15" fill="rgb(205,185,37)" fg:x="74175" fg:w="610"/><text x="19.4908%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (610 samples, 0.16%)</title><rect x="19.2408%" y="661" width="0.1582%" height="15" fill="rgb(238,207,15)" fg:x="74175" fg:w="610"/><text x="19.4908%" y="671.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (610 samples, 0.16%)</title><rect x="19.2408%" y="645" width="0.1582%" height="15" fill="rgb(213,199,42)" fg:x="74175" fg:w="610"/><text x="19.4908%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,175 samples, 0.30%)</title><rect x="19.3991%" y="677" width="0.3048%" height="15" fill="rgb(235,201,11)" fg:x="74785" fg:w="1175"/><text x="19.6491%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,175 samples, 0.30%)</title><rect x="19.3991%" y="661" width="0.3048%" height="15" fill="rgb(207,46,11)" fg:x="74785" fg:w="1175"/><text x="19.6491%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,175 samples, 0.30%)</title><rect x="19.3991%" y="645" width="0.3048%" height="15" fill="rgb(241,35,35)" fg:x="74785" fg:w="1175"/><text x="19.6491%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,175 samples, 0.30%)</title><rect x="19.3991%" y="629" width="0.3048%" height="15" fill="rgb(243,32,47)" fg:x="74785" fg:w="1175"/><text x="19.6491%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,175 samples, 0.30%)</title><rect x="19.3991%" y="613" width="0.3048%" height="15" fill="rgb(247,202,23)" fg:x="74785" fg:w="1175"/><text x="19.6491%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (1,175 samples, 0.30%)</title><rect x="19.3991%" y="597" width="0.3048%" height="15" fill="rgb(219,102,11)" fg:x="74785" fg:w="1175"/><text x="19.6491%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (372 samples, 0.10%)</title><rect x="19.7039%" y="677" width="0.0965%" height="15" fill="rgb(243,110,44)" fg:x="75960" fg:w="372"/><text x="19.9539%" y="687.50"></text></g><g><title>one_brc::round_towards_positive (2,880 samples, 0.75%)</title><rect x="19.2408%" y="693" width="0.7471%" height="15" fill="rgb(222,74,54)" fg:x="74175" fg:w="2880"/><text x="19.4908%" y="703.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::round (723 samples, 0.19%)</title><rect x="19.8004%" y="677" width="0.1875%" height="15" fill="rgb(216,99,12)" fg:x="76332" fg:w="723"/><text x="20.0504%" y="687.50"></text></g><g><title>[unknown] (45,620 samples, 11.83%)</title><rect x="8.3381%" y="789" width="11.8337%" height="15" fill="rgb(226,22,26)" fg:x="32144" fg:w="45620"/><text x="8.5881%" y="799.50">[unknown]</text></g><g><title>one_brc::process_lines (5,752 samples, 1.49%)</title><rect x="18.6798%" y="773" width="1.4921%" height="15" fill="rgb(217,163,10)" fg:x="72012" fg:w="5752"/><text x="18.9298%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,752 samples, 1.49%)</title><rect x="18.6798%" y="757" width="1.4921%" height="15" fill="rgb(213,25,53)" fg:x="72012" fg:w="5752"/><text x="18.9298%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5,752 samples, 1.49%)</title><rect x="18.6798%" y="741" width="1.4921%" height="15" fill="rgb(252,105,26)" fg:x="72012" fg:w="5752"/><text x="18.9298%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,159 samples, 1.34%)</title><rect x="18.8336%" y="725" width="1.3382%" height="15" fill="rgb(220,39,43)" fg:x="72605" fg:w="5159"/><text x="19.0836%" y="735.50"></text></g><g><title>one_brc::process_lines::_{{closure}} (5,159 samples, 1.34%)</title><rect x="18.8336%" y="709" width="1.3382%" height="15" fill="rgb(229,68,48)" fg:x="72605" fg:w="5159"/><text x="19.0836%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (709 samples, 0.18%)</title><rect x="19.9879%" y="693" width="0.1839%" height="15" fill="rgb(252,8,32)" fg:x="77055" fg:w="709"/><text x="20.2379%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (443 samples, 0.11%)</title><rect x="21.3630%" y="469" width="0.1149%" height="15" fill="rgb(223,20,43)" fg:x="82356" fg:w="443"/><text x="21.6130%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (443 samples, 0.11%)</title><rect x="21.3630%" y="453" width="0.1149%" height="15" fill="rgb(229,81,49)" fg:x="82356" fg:w="443"/><text x="21.6130%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (443 samples, 0.11%)</title><rect x="21.3630%" y="437" width="0.1149%" height="15" fill="rgb(236,28,36)" fg:x="82356" fg:w="443"/><text x="21.6130%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,155 samples, 0.82%)</title><rect x="21.4779%" y="469" width="0.8184%" height="15" fill="rgb(249,185,26)" fg:x="82799" fg:w="3155"/><text x="21.7279%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3,155 samples, 0.82%)</title><rect x="21.4779%" y="453" width="0.8184%" height="15" fill="rgb(249,174,33)" fg:x="82799" fg:w="3155"/><text x="21.7279%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,155 samples, 0.82%)</title><rect x="21.4779%" y="437" width="0.8184%" height="15" fill="rgb(233,201,37)" fg:x="82799" fg:w="3155"/><text x="21.7279%" y="447.50"></text></g><g><title>__memcmp_evex_movbe (3,079 samples, 0.80%)</title><rect x="21.4976%" y="421" width="0.7987%" height="15" fill="rgb(221,78,26)" fg:x="82875" fg:w="3079"/><text x="21.7476%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,076 samples, 0.28%)</title><rect x="22.2963%" y="469" width="0.2791%" height="15" fill="rgb(250,127,30)" fg:x="85954" fg:w="1076"/><text x="22.5463%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,076 samples, 0.28%)</title><rect x="22.2963%" y="453" width="0.2791%" height="15" fill="rgb(230,49,44)" fg:x="85954" fg:w="1076"/><text x="22.5463%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (477 samples, 0.12%)</title><rect x="23.5129%" y="437" width="0.1237%" height="15" fill="rgb(229,67,23)" fg:x="90644" fg:w="477"/><text x="23.7629%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (414 samples, 0.11%)</title><rect x="23.6366%" y="437" width="0.1074%" height="15" fill="rgb(249,83,47)" fg:x="91121" fg:w="414"/><text x="23.8866%" y="447.50"></text></g><g><title>core::ptr::align_offset (414 samples, 0.11%)</title><rect x="23.6366%" y="421" width="0.1074%" height="15" fill="rgb(215,43,3)" fg:x="91121" fg:w="414"/><text x="23.8866%" y="431.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (998 samples, 0.26%)</title><rect x="23.7440%" y="437" width="0.2589%" height="15" fill="rgb(238,154,13)" fg:x="91535" fg:w="998"/><text x="23.9940%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (98 samples, 0.03%)</title><rect x="23.9775%" y="421" width="0.0254%" height="15" fill="rgb(219,56,2)" fg:x="92435" fg:w="98"/><text x="24.2275%" y="431.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (22,211 samples, 5.76%)</title><rect x="20.4595%" y="485" width="5.7615%" height="15" fill="rgb(233,0,4)" fg:x="78873" fg:w="22211"/><text x="20.7095%" y="495.50">&lt;core::..</text></g><g><title>core::slice::memchr::memchr (14,054 samples, 3.65%)</title><rect x="22.5754%" y="469" width="3.6456%" height="15" fill="rgb(235,30,7)" fg:x="87030" fg:w="14054"/><text x="22.8254%" y="479.50">core..</text></g><g><title>core::slice::memchr::memchr_aligned (13,540 samples, 3.51%)</title><rect x="22.7087%" y="453" width="3.5122%" height="15" fill="rgb(250,79,13)" fg:x="87544" fg:w="13540"/><text x="22.9587%" y="463.50">cor..</text></g><g><title>core::slice::memchr::memchr_naive (8,551 samples, 2.22%)</title><rect x="24.0029%" y="437" width="2.2181%" height="15" fill="rgb(211,146,34)" fg:x="92533" fg:w="8551"/><text x="24.2529%" y="447.50">c..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (23,801 samples, 6.17%)</title><rect x="20.1762%" y="517" width="6.1739%" height="15" fill="rgb(228,22,38)" fg:x="77781" fg:w="23801"/><text x="20.4262%" y="527.50">&lt;core::s..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (23,801 samples, 6.17%)</title><rect x="20.1762%" y="501" width="6.1739%" height="15" fill="rgb(235,168,5)" fg:x="77781" fg:w="23801"/><text x="20.4262%" y="511.50">core::st..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (491 samples, 0.13%)</title><rect x="26.2228%" y="485" width="0.1274%" height="15" fill="rgb(221,155,16)" fg:x="101091" fg:w="491"/><text x="26.4728%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (491 samples, 0.13%)</title><rect x="26.2228%" y="469" width="0.1274%" height="15" fill="rgb(215,215,53)" fg:x="101091" fg:w="491"/><text x="26.4728%" y="479.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (25,418 samples, 6.59%)</title><rect x="20.1762%" y="549" width="6.5934%" height="15" fill="rgb(223,4,10)" fg:x="77781" fg:w="25418"/><text x="20.4262%" y="559.50">&lt;core::st..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,418 samples, 6.59%)</title><rect x="20.1762%" y="533" width="6.5934%" height="15" fill="rgb(234,103,6)" fg:x="77781" fg:w="25418"/><text x="20.4262%" y="543.50">&lt;core::it..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,617 samples, 0.42%)</title><rect x="26.3502%" y="517" width="0.4194%" height="15" fill="rgb(227,97,0)" fg:x="101582" fg:w="1617"/><text x="26.6002%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,617 samples, 0.42%)</title><rect x="26.3502%" y="501" width="0.4194%" height="15" fill="rgb(234,150,53)" fg:x="101582" fg:w="1617"/><text x="26.6002%" y="511.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (1,617 samples, 0.42%)</title><rect x="26.3502%" y="485" width="0.4194%" height="15" fill="rgb(228,201,54)" fg:x="101582" fg:w="1617"/><text x="26.6002%" y="495.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (1,617 samples, 0.42%)</title><rect x="26.3502%" y="469" width="0.4194%" height="15" fill="rgb(222,22,37)" fg:x="101582" fg:w="1617"/><text x="26.6002%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (721 samples, 0.19%)</title><rect x="26.5826%" y="453" width="0.1870%" height="15" fill="rgb(237,53,32)" fg:x="102478" fg:w="721"/><text x="26.8326%" y="463.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (721 samples, 0.19%)</title><rect x="26.5826%" y="437" width="0.1870%" height="15" fill="rgb(233,25,53)" fg:x="102478" fg:w="721"/><text x="26.8326%" y="447.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (721 samples, 0.19%)</title><rect x="26.5826%" y="421" width="0.1870%" height="15" fill="rgb(210,40,34)" fg:x="102478" fg:w="721"/><text x="26.8326%" y="431.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (721 samples, 0.19%)</title><rect x="26.5826%" y="405" width="0.1870%" height="15" fill="rgb(241,220,44)" fg:x="102478" fg:w="721"/><text x="26.8326%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (721 samples, 0.19%)</title><rect x="26.5826%" y="389" width="0.1870%" height="15" fill="rgb(235,28,35)" fg:x="102478" fg:w="721"/><text x="26.8326%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (60 samples, 0.02%)</title><rect x="26.7540%" y="373" width="0.0156%" height="15" fill="rgb(210,56,17)" fg:x="103139" fg:w="60"/><text x="27.0040%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (60 samples, 0.02%)</title><rect x="26.7540%" y="357" width="0.0156%" height="15" fill="rgb(224,130,29)" fg:x="103139" fg:w="60"/><text x="27.0040%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (60 samples, 0.02%)</title><rect x="26.7540%" y="341" width="0.0156%" height="15" fill="rgb(235,212,8)" fg:x="103139" fg:w="60"/><text x="27.0040%" y="351.50"></text></g><g><title>one_brc::process_lines (736 samples, 0.19%)</title><rect x="26.7699%" y="533" width="0.1909%" height="15" fill="rgb(223,33,50)" fg:x="103200" fg:w="736"/><text x="27.0199%" y="543.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (1,000 samples, 0.26%)</title><rect x="27.2197%" y="517" width="0.2594%" height="15" fill="rgb(219,149,13)" fg:x="104934" fg:w="1000"/><text x="27.4697%" y="527.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (756 samples, 0.20%)</title><rect x="27.4791%" y="517" width="0.1961%" height="15" fill="rgb(250,156,29)" fg:x="105934" fg:w="756"/><text x="27.7291%" y="527.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (560 samples, 0.15%)</title><rect x="27.7577%" y="485" width="0.1453%" height="15" fill="rgb(216,193,19)" fg:x="107008" fg:w="560"/><text x="28.0077%" y="495.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (583 samples, 0.15%)</title><rect x="28.4816%" y="469" width="0.1512%" height="15" fill="rgb(216,135,14)" fg:x="109799" fg:w="583"/><text x="28.7316%" y="479.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (361 samples, 0.09%)</title><rect x="28.7322%" y="453" width="0.0936%" height="15" fill="rgb(241,47,5)" fg:x="110765" fg:w="361"/><text x="28.9822%" y="463.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (4,090 samples, 1.06%)</title><rect x="28.8285%" y="453" width="1.0609%" height="15" fill="rgb(233,42,35)" fg:x="111136" fg:w="4090"/><text x="29.0785%" y="463.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (5,272 samples, 1.37%)</title><rect x="28.6329%" y="469" width="1.3675%" height="15" fill="rgb(231,13,6)" fg:x="110382" fg:w="5272"/><text x="28.8829%" y="479.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (428 samples, 0.11%)</title><rect x="29.8894%" y="453" width="0.1110%" height="15" fill="rgb(207,181,40)" fg:x="115226" fg:w="428"/><text x="30.1394%" y="463.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1,845 samples, 0.48%)</title><rect x="30.3153%" y="453" width="0.4786%" height="15" fill="rgb(254,173,49)" fg:x="116868" fg:w="1845"/><text x="30.5653%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (469 samples, 0.12%)</title><rect x="32.6105%" y="405" width="0.1217%" height="15" fill="rgb(221,1,38)" fg:x="125716" fg:w="469"/><text x="32.8605%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (440 samples, 0.11%)</title><rect x="32.7410%" y="389" width="0.1141%" height="15" fill="rgb(206,124,46)" fg:x="126219" fg:w="440"/><text x="32.9910%" y="399.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (5,220 samples, 1.35%)</title><rect x="31.6157%" y="421" width="1.3541%" height="15" fill="rgb(249,21,11)" fg:x="121881" fg:w="5220"/><text x="31.8657%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (916 samples, 0.24%)</title><rect x="32.7321%" y="405" width="0.2376%" height="15" fill="rgb(222,201,40)" fg:x="126185" fg:w="916"/><text x="32.9821%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (442 samples, 0.11%)</title><rect x="32.8551%" y="389" width="0.1147%" height="15" fill="rgb(235,61,29)" fg:x="126659" fg:w="442"/><text x="33.1051%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (6,617 samples, 1.72%)</title><rect x="31.2992%" y="437" width="1.7164%" height="15" fill="rgb(219,207,3)" fg:x="120661" fg:w="6617"/><text x="31.5492%" y="447.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (171 samples, 0.04%)</title><rect x="32.9713%" y="421" width="0.0444%" height="15" fill="rgb(222,56,46)" fg:x="127107" fg:w="171"/><text x="33.2213%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (11,675 samples, 3.03%)</title><rect x="30.0004%" y="469" width="3.0285%" height="15" fill="rgb(239,76,54)" fg:x="115654" fg:w="11675"/><text x="30.2504%" y="479.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (8,616 samples, 2.23%)</title><rect x="30.7939%" y="453" width="2.2350%" height="15" fill="rgb(231,124,27)" fg:x="118713" fg:w="8616"/><text x="31.0439%" y="463.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (51 samples, 0.01%)</title><rect x="33.0157%" y="437" width="0.0132%" height="15" fill="rgb(249,195,6)" fg:x="127278" fg:w="51"/><text x="33.2657%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (20,639 samples, 5.35%)</title><rect x="27.6754%" y="517" width="5.3537%" height="15" fill="rgb(237,174,47)" fg:x="106691" fg:w="20639"/><text x="27.9254%" y="527.50">core::s..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (20,327 samples, 5.27%)</title><rect x="27.7564%" y="501" width="5.2728%" height="15" fill="rgb(206,201,31)" fg:x="107003" fg:w="20327"/><text x="28.0064%" y="511.50">core::..</text></g><g><title>core::num::dec2flt::dec2flt (19,762 samples, 5.13%)</title><rect x="27.9029%" y="485" width="5.1262%" height="15" fill="rgb(231,57,52)" fg:x="107568" fg:w="19762"/><text x="28.1529%" y="495.50">core::..</text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (810 samples, 0.21%)</title><rect x="33.1394%" y="501" width="0.2101%" height="15" fill="rgb(248,177,22)" fg:x="127755" fg:w="810"/><text x="33.3894%" y="511.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (172 samples, 0.04%)</title><rect x="33.3495%" y="501" width="0.0446%" height="15" fill="rgb(215,211,37)" fg:x="128565" fg:w="172"/><text x="33.5995%" y="511.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (424 samples, 0.11%)</title><rect x="34.1744%" y="485" width="0.1100%" height="15" fill="rgb(241,128,51)" fg:x="131745" fg:w="424"/><text x="34.4244%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (424 samples, 0.11%)</title><rect x="34.1744%" y="469" width="0.1100%" height="15" fill="rgb(227,165,31)" fg:x="131745" fg:w="424"/><text x="34.4244%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (424 samples, 0.11%)</title><rect x="34.1744%" y="453" width="0.1100%" height="15" fill="rgb(228,167,24)" fg:x="131745" fg:w="424"/><text x="34.4244%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,620 samples, 0.68%)</title><rect x="34.2844%" y="485" width="0.6796%" height="15" fill="rgb(228,143,12)" fg:x="132169" fg:w="2620"/><text x="34.5344%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2,620 samples, 0.68%)</title><rect x="34.2844%" y="469" width="0.6796%" height="15" fill="rgb(249,149,8)" fg:x="132169" fg:w="2620"/><text x="34.5344%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,620 samples, 0.68%)</title><rect x="34.2844%" y="453" width="0.6796%" height="15" fill="rgb(243,35,44)" fg:x="132169" fg:w="2620"/><text x="34.5344%" y="463.50"></text></g><g><title>__memcmp_evex_movbe (2,301 samples, 0.60%)</title><rect x="34.3671%" y="437" width="0.5969%" height="15" fill="rgb(246,89,9)" fg:x="132488" fg:w="2301"/><text x="34.6171%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (863 samples, 0.22%)</title><rect x="34.9640%" y="485" width="0.2239%" height="15" fill="rgb(233,213,13)" fg:x="134789" fg:w="863"/><text x="35.2140%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (863 samples, 0.22%)</title><rect x="34.9640%" y="469" width="0.2239%" height="15" fill="rgb(233,141,41)" fg:x="134789" fg:w="863"/><text x="35.2140%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (59 samples, 0.02%)</title><rect x="35.3284%" y="453" width="0.0153%" height="15" fill="rgb(239,167,4)" fg:x="136194" fg:w="59"/><text x="35.5784%" y="463.50"></text></g><g><title>core::ptr::align_offset (59 samples, 0.02%)</title><rect x="35.3284%" y="437" width="0.0153%" height="15" fill="rgb(209,217,16)" fg:x="136194" fg:w="59"/><text x="35.5784%" y="447.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2,134 samples, 0.55%)</title><rect x="35.2130%" y="469" width="0.5536%" height="15" fill="rgb(219,88,35)" fg:x="135749" fg:w="2134"/><text x="35.4630%" y="479.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,595 samples, 0.41%)</title><rect x="35.3528%" y="453" width="0.4137%" height="15" fill="rgb(220,193,23)" fg:x="136288" fg:w="1595"/><text x="35.6028%" y="463.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (14,171 samples, 3.68%)</title><rect x="33.3941%" y="501" width="3.6759%" height="15" fill="rgb(230,90,52)" fg:x="128737" fg:w="14171"/><text x="33.6441%" y="511.50">&lt;cor..</text></g><g><title>core::slice::memchr::memchr (7,256 samples, 1.88%)</title><rect x="35.1879%" y="485" width="1.8822%" height="15" fill="rgb(252,106,19)" fg:x="135652" fg:w="7256"/><text x="35.4379%" y="495.50">c..</text></g><g><title>core::slice::memchr::memchr_naive (5,025 samples, 1.30%)</title><rect x="35.7666%" y="469" width="1.3035%" height="15" fill="rgb(206,74,20)" fg:x="137883" fg:w="5025"/><text x="36.0166%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (15,590 samples, 4.04%)</title><rect x="33.0291%" y="517" width="4.0440%" height="15" fill="rgb(230,138,44)" fg:x="127330" fg:w="15590"/><text x="33.2791%" y="527.50">core..</text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (117 samples, 0.03%)</title><rect x="38.1232%" y="501" width="0.0303%" height="15" fill="rgb(235,182,43)" fg:x="146968" fg:w="117"/><text x="38.3732%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (117 samples, 0.03%)</title><rect x="38.1232%" y="485" width="0.0303%" height="15" fill="rgb(242,16,51)" fg:x="146968" fg:w="117"/><text x="38.3732%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (114 samples, 0.03%)</title><rect x="38.1240%" y="469" width="0.0296%" height="15" fill="rgb(248,9,4)" fg:x="146971" fg:w="114"/><text x="38.3740%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (114 samples, 0.03%)</title><rect x="38.1240%" y="453" width="0.0296%" height="15" fill="rgb(210,31,22)" fg:x="146971" fg:w="114"/><text x="38.3740%" y="463.50"></text></g><g><title>alloc::string::String::with_capacity (463 samples, 0.12%)</title><rect x="38.4337%" y="437" width="0.1201%" height="15" fill="rgb(239,54,39)" fg:x="148165" fg:w="463"/><text x="38.6837%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,377 samples, 0.36%)</title><rect x="38.9011%" y="373" width="0.3572%" height="15" fill="rgb(230,99,41)" fg:x="149967" fg:w="1377"/><text x="39.1511%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (626 samples, 0.16%)</title><rect x="39.0959%" y="357" width="0.1624%" height="15" fill="rgb(253,106,12)" fg:x="150718" fg:w="626"/><text x="39.3459%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (626 samples, 0.16%)</title><rect x="39.0959%" y="341" width="0.1624%" height="15" fill="rgb(213,46,41)" fg:x="150718" fg:w="626"/><text x="39.3459%" y="351.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (3,657 samples, 0.95%)</title><rect x="38.5538%" y="437" width="0.9486%" height="15" fill="rgb(215,133,35)" fg:x="148628" fg:w="3657"/><text x="38.8038%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2,318 samples, 0.60%)</title><rect x="38.9011%" y="421" width="0.6013%" height="15" fill="rgb(213,28,5)" fg:x="149967" fg:w="2318"/><text x="39.1511%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2,318 samples, 0.60%)</title><rect x="38.9011%" y="405" width="0.6013%" height="15" fill="rgb(215,77,49)" fg:x="149967" fg:w="2318"/><text x="39.1511%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,318 samples, 0.60%)</title><rect x="38.9011%" y="389" width="0.6013%" height="15" fill="rgb(248,100,22)" fg:x="149967" fg:w="2318"/><text x="39.1511%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (941 samples, 0.24%)</title><rect x="39.2583%" y="373" width="0.2441%" height="15" fill="rgb(208,67,9)" fg:x="151344" fg:w="941"/><text x="39.5083%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,331 samples, 0.35%)</title><rect x="40.2723%" y="373" width="0.3453%" height="15" fill="rgb(219,133,21)" fg:x="155253" fg:w="1331"/><text x="40.5223%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (363 samples, 0.09%)</title><rect x="40.5234%" y="357" width="0.0942%" height="15" fill="rgb(246,46,29)" fg:x="156221" fg:w="363"/><text x="40.7734%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,379 samples, 0.36%)</title><rect x="40.2723%" y="389" width="0.3577%" height="15" fill="rgb(246,185,52)" fg:x="155253" fg:w="1379"/><text x="40.5223%" y="399.50"></text></g><g><title>core::fmt::write (48 samples, 0.01%)</title><rect x="40.6176%" y="373" width="0.0125%" height="15" fill="rgb(252,136,11)" fg:x="156584" fg:w="48"/><text x="40.8676%" y="383.50"></text></g><g><title>core::fmt::Formatter::new (493 samples, 0.13%)</title><rect x="40.6321%" y="389" width="0.1279%" height="15" fill="rgb(219,138,53)" fg:x="156640" fg:w="493"/><text x="40.8821%" y="399.50"></text></g><g><title>core::fmt::getcount (1,202 samples, 0.31%)</title><rect x="41.2720%" y="373" width="0.3118%" height="15" fill="rgb(211,51,23)" fg:x="159107" fg:w="1202"/><text x="41.5220%" y="383.50"></text></g><g><title>core::fmt::write (388 samples, 0.10%)</title><rect x="41.4832%" y="357" width="0.1006%" height="15" fill="rgb(247,221,28)" fg:x="159921" fg:w="388"/><text x="41.7332%" y="367.50"></text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f32&gt;::fmt (1,478 samples, 0.38%)</title><rect x="41.5844%" y="357" width="0.3834%" height="15" fill="rgb(251,222,45)" fg:x="160311" fg:w="1478"/><text x="41.8344%" y="367.50"></text></g><g><title>core::fmt::float::float_to_decimal_display (1,098 samples, 0.28%)</title><rect x="41.6829%" y="341" width="0.2848%" height="15" fill="rgb(217,162,53)" fg:x="160691" fg:w="1098"/><text x="41.9329%" y="351.50"></text></g><g><title>core::fmt::Formatter::sign_plus (213 samples, 0.06%)</title><rect x="41.9125%" y="325" width="0.0553%" height="15" fill="rgb(229,93,14)" fg:x="161576" fg:w="213"/><text x="42.1625%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (1,209 samples, 0.31%)</title><rect x="41.9763%" y="341" width="0.3136%" height="15" fill="rgb(209,67,49)" fg:x="161822" fg:w="1209"/><text x="42.2263%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (42 samples, 0.01%)</title><rect x="43.4984%" y="213" width="0.0109%" height="15" fill="rgb(213,87,29)" fg:x="167690" fg:w="42"/><text x="43.7484%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (59 samples, 0.02%)</title><rect x="43.5332%" y="181" width="0.0153%" height="15" fill="rgb(205,151,52)" fg:x="167824" fg:w="59"/><text x="43.7832%" y="191.50"></text></g><g><title>__GI___libc_malloc (479 samples, 0.12%)</title><rect x="43.5986%" y="165" width="0.1243%" height="15" fill="rgb(253,215,39)" fg:x="168076" fg:w="479"/><text x="43.8486%" y="175.50"></text></g><g><title>tcache_get (116 samples, 0.03%)</title><rect x="43.6927%" y="149" width="0.0301%" height="15" fill="rgb(221,220,41)" fg:x="168439" fg:w="116"/><text x="43.9427%" y="159.50"></text></g><g><title>__rdl_alloc (122 samples, 0.03%)</title><rect x="43.7228%" y="165" width="0.0316%" height="15" fill="rgb(218,133,21)" fg:x="168555" fg:w="122"/><text x="43.9728%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (858 samples, 0.22%)</title><rect x="43.5506%" y="181" width="0.2226%" height="15" fill="rgb(221,193,43)" fg:x="167891" fg:w="858"/><text x="43.8006%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array (39 samples, 0.01%)</title><rect x="43.7732%" y="181" width="0.0101%" height="15" fill="rgb(240,128,52)" fg:x="168749" fg:w="39"/><text x="44.0232%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (39 samples, 0.01%)</title><rect x="43.7732%" y="165" width="0.0101%" height="15" fill="rgb(253,114,12)" fg:x="168749" fg:w="39"/><text x="44.0232%" y="175.50"></text></g><g><title>core::cmp::max (56 samples, 0.01%)</title><rect x="43.7833%" y="181" width="0.0145%" height="15" fill="rgb(215,223,47)" fg:x="168788" fg:w="56"/><text x="44.0333%" y="191.50"></text></g><g><title>core::cmp::Ord::max (56 samples, 0.01%)</title><rect x="43.7833%" y="165" width="0.0145%" height="15" fill="rgb(248,225,23)" fg:x="168788" fg:w="56"/><text x="44.0333%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (56 samples, 0.01%)</title><rect x="43.7833%" y="149" width="0.0145%" height="15" fill="rgb(250,108,0)" fg:x="168788" fg:w="56"/><text x="44.0333%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,122 samples, 0.29%)</title><rect x="43.5093%" y="197" width="0.2910%" height="15" fill="rgb(228,208,7)" fg:x="167732" fg:w="1122"/><text x="43.7593%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,199 samples, 0.31%)</title><rect x="43.4896%" y="245" width="0.3110%" height="15" fill="rgb(244,45,10)" fg:x="167656" fg:w="1199"/><text x="43.7396%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,195 samples, 0.31%)</title><rect x="43.4907%" y="229" width="0.3100%" height="15" fill="rgb(207,125,25)" fg:x="167660" fg:w="1195"/><text x="43.7407%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,123 samples, 0.29%)</title><rect x="43.5093%" y="213" width="0.2913%" height="15" fill="rgb(210,195,18)" fg:x="167732" fg:w="1123"/><text x="43.7593%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (163 samples, 0.04%)</title><rect x="43.8006%" y="245" width="0.0423%" height="15" fill="rgb(249,80,12)" fg:x="168855" fg:w="163"/><text x="44.0506%" y="255.50"></text></g><g><title>__memcpy_evex_unaligned_erms (142 samples, 0.04%)</title><rect x="43.8061%" y="229" width="0.0368%" height="15" fill="rgb(221,65,9)" fg:x="168876" fg:w="142"/><text x="44.0561%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,431 samples, 0.37%)</title><rect x="43.4720%" y="325" width="0.3712%" height="15" fill="rgb(235,49,36)" fg:x="167588" fg:w="1431"/><text x="43.7220%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1,410 samples, 0.37%)</title><rect x="43.4774%" y="309" width="0.3658%" height="15" fill="rgb(225,32,20)" fg:x="167609" fg:w="1410"/><text x="43.7274%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,410 samples, 0.37%)</title><rect x="43.4774%" y="293" width="0.3658%" height="15" fill="rgb(215,141,46)" fg:x="167609" fg:w="1410"/><text x="43.7274%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,410 samples, 0.37%)</title><rect x="43.4774%" y="277" width="0.3658%" height="15" fill="rgb(250,160,47)" fg:x="167609" fg:w="1410"/><text x="43.7274%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,407 samples, 0.36%)</title><rect x="43.4782%" y="261" width="0.3650%" height="15" fill="rgb(216,222,40)" fg:x="167612" fg:w="1407"/><text x="43.7282%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,705 samples, 0.44%)</title><rect x="43.8432%" y="325" width="0.4423%" height="15" fill="rgb(234,217,39)" fg:x="169019" fg:w="1705"/><text x="44.0932%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,109 samples, 0.29%)</title><rect x="43.9978%" y="309" width="0.2877%" height="15" fill="rgb(207,178,40)" fg:x="169615" fg:w="1109"/><text x="44.2478%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (172 samples, 0.04%)</title><rect x="44.9046%" y="245" width="0.0446%" height="15" fill="rgb(221,136,13)" fg:x="173111" fg:w="172"/><text x="45.1546%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (397 samples, 0.10%)</title><rect x="45.1236%" y="229" width="0.1030%" height="15" fill="rgb(249,199,10)" fg:x="173955" fg:w="397"/><text x="45.3736%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (325 samples, 0.08%)</title><rect x="45.6242%" y="181" width="0.0843%" height="15" fill="rgb(249,222,13)" fg:x="175885" fg:w="325"/><text x="45.8742%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1,477 samples, 0.38%)</title><rect x="45.3630%" y="197" width="0.3831%" height="15" fill="rgb(244,185,38)" fg:x="174878" fg:w="1477"/><text x="45.6130%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (145 samples, 0.04%)</title><rect x="45.7085%" y="181" width="0.0376%" height="15" fill="rgb(236,202,9)" fg:x="176210" fg:w="145"/><text x="45.9585%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (154 samples, 0.04%)</title><rect x="46.0112%" y="165" width="0.0399%" height="15" fill="rgb(250,229,37)" fg:x="177377" fg:w="154"/><text x="46.2612%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (427 samples, 0.11%)</title><rect x="46.0512%" y="165" width="0.1108%" height="15" fill="rgb(206,174,23)" fg:x="177531" fg:w="427"/><text x="46.3012%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (80 samples, 0.02%)</title><rect x="46.1619%" y="165" width="0.0208%" height="15" fill="rgb(211,33,43)" fg:x="177958" fg:w="80"/><text x="46.4119%" y="175.50"></text></g><g><title>checked_request2size (318 samples, 0.08%)</title><rect x="47.7160%" y="133" width="0.0825%" height="15" fill="rgb(245,58,50)" fg:x="183949" fg:w="318"/><text x="47.9660%" y="143.50"></text></g><g><title>__GI___libc_malloc (5,833 samples, 1.51%)</title><rect x="46.7176%" y="149" width="1.5131%" height="15" fill="rgb(244,68,36)" fg:x="180100" fg:w="5833"/><text x="46.9676%" y="159.50"></text></g><g><title>tcache_get (1,666 samples, 0.43%)</title><rect x="47.7985%" y="133" width="0.4322%" height="15" fill="rgb(232,229,15)" fg:x="184267" fg:w="1666"/><text x="48.0485%" y="143.50"></text></g><g><title>__rdl_alloc (1,266 samples, 0.33%)</title><rect x="48.2306%" y="149" width="0.3284%" height="15" fill="rgb(254,30,23)" fg:x="185933" fg:w="1266"/><text x="48.4806%" y="159.50"></text></g><g><title>__rust_alloc (432 samples, 0.11%)</title><rect x="48.5590%" y="149" width="0.1121%" height="15" fill="rgb(235,160,14)" fg:x="187199" fg:w="432"/><text x="48.8090%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (9,935 samples, 2.58%)</title><rect x="46.1827%" y="165" width="2.5771%" height="15" fill="rgb(212,155,44)" fg:x="178038" fg:w="9935"/><text x="46.4327%" y="175.50">al..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (342 samples, 0.09%)</title><rect x="48.6711%" y="149" width="0.0887%" height="15" fill="rgb(226,2,50)" fg:x="187631" fg:w="342"/><text x="48.9211%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array (442 samples, 0.11%)</title><rect x="48.7598%" y="165" width="0.1147%" height="15" fill="rgb(234,177,6)" fg:x="187973" fg:w="442"/><text x="49.0098%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (442 samples, 0.11%)</title><rect x="48.7598%" y="149" width="0.1147%" height="15" fill="rgb(217,24,9)" fg:x="187973" fg:w="442"/><text x="49.0098%" y="159.50"></text></g><g><title>core::cmp::max (680 samples, 0.18%)</title><rect x="48.8745%" y="165" width="0.1764%" height="15" fill="rgb(220,13,46)" fg:x="188415" fg:w="680"/><text x="49.1245%" y="175.50"></text></g><g><title>core::cmp::Ord::max (680 samples, 0.18%)</title><rect x="48.8745%" y="149" width="0.1764%" height="15" fill="rgb(239,221,27)" fg:x="188415" fg:w="680"/><text x="49.1245%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (680 samples, 0.18%)</title><rect x="48.8745%" y="133" width="0.1764%" height="15" fill="rgb(222,198,25)" fg:x="188415" fg:w="680"/><text x="49.1245%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12,808 samples, 3.32%)</title><rect x="45.7461%" y="181" width="3.3224%" height="15" fill="rgb(211,99,13)" fg:x="176355" fg:w="12808"/><text x="45.9961%" y="191.50">all..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (68 samples, 0.02%)</title><rect x="49.0509%" y="165" width="0.0176%" height="15" fill="rgb(232,111,31)" fg:x="189095" fg:w="68"/><text x="49.3009%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (68 samples, 0.02%)</title><rect x="49.0509%" y="149" width="0.0176%" height="15" fill="rgb(245,82,37)" fg:x="189095" fg:w="68"/><text x="49.3009%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14,824 samples, 3.85%)</title><rect x="45.2266%" y="229" width="3.8453%" height="15" fill="rgb(227,149,46)" fg:x="174352" fg:w="14824"/><text x="45.4766%" y="239.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14,762 samples, 3.83%)</title><rect x="45.2426%" y="213" width="3.8292%" height="15" fill="rgb(218,36,50)" fg:x="174414" fg:w="14762"/><text x="45.4926%" y="223.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12,821 samples, 3.33%)</title><rect x="45.7461%" y="197" width="3.3257%" height="15" fill="rgb(226,80,48)" fg:x="176355" fg:w="12821"/><text x="45.9961%" y="207.50">all..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6,655 samples, 1.73%)</title><rect x="49.0719%" y="229" width="1.7263%" height="15" fill="rgb(238,224,15)" fg:x="189176" fg:w="6655"/><text x="49.3219%" y="239.50"></text></g><g><title>__memcpy_evex_unaligned_erms (5,672 samples, 1.47%)</title><rect x="49.3269%" y="213" width="1.4713%" height="15" fill="rgb(241,136,10)" fg:x="190159" fg:w="5672"/><text x="49.5769%" y="223.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (32,850 samples, 8.52%)</title><rect x="42.2899%" y="341" width="8.5212%" height="15" fill="rgb(208,32,45)" fg:x="163031" fg:w="32850"/><text x="42.5399%" y="351.50">core::fmt::F..</text></g><g><title>core::fmt::Formatter::write_formatted_parts::write_bytes (25,134 samples, 6.52%)</title><rect x="44.2914%" y="325" width="6.5197%" height="15" fill="rgb(207,135,9)" fg:x="170747" fg:w="25134"/><text x="44.5414%" y="335.50">core::fmt..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (23,939 samples, 6.21%)</title><rect x="44.6014%" y="309" width="6.2097%" height="15" fill="rgb(206,86,44)" fg:x="171942" fg:w="23939"/><text x="44.8514%" y="319.50">&lt;alloc::..</text></g><g><title>alloc::string::String::push_str (22,770 samples, 5.91%)</title><rect x="44.9046%" y="293" width="5.9065%" height="15" fill="rgb(245,177,15)" fg:x="173111" fg:w="22770"/><text x="45.1546%" y="303.50">alloc::s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (22,770 samples, 5.91%)</title><rect x="44.9046%" y="277" width="5.9065%" height="15" fill="rgb(206,64,50)" fg:x="173111" fg:w="22770"/><text x="45.1546%" y="287.50">alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (22,770 samples, 5.91%)</title><rect x="44.9046%" y="261" width="5.9065%" height="15" fill="rgb(234,36,40)" fg:x="173111" fg:w="22770"/><text x="45.1546%" y="271.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (22,598 samples, 5.86%)</title><rect x="44.9493%" y="245" width="5.8619%" height="15" fill="rgb(213,64,8)" fg:x="173283" fg:w="22598"/><text x="45.1993%" y="255.50">alloc::..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (50 samples, 0.01%)</title><rect x="50.7982%" y="229" width="0.0130%" height="15" fill="rgb(210,75,36)" fg:x="195831" fg:w="50"/><text x="51.0482%" y="239.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (3,362 samples, 0.87%)</title><rect x="50.8111%" y="341" width="0.8721%" height="15" fill="rgb(229,88,21)" fg:x="195881" fg:w="3362"/><text x="51.0611%" y="351.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (331 samples, 0.09%)</title><rect x="53.0020%" y="325" width="0.0859%" height="15" fill="rgb(252,204,47)" fg:x="204327" fg:w="331"/><text x="53.2520%" y="335.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::is_nan (39 samples, 0.01%)</title><rect x="53.7154%" y="277" width="0.0101%" height="15" fill="rgb(208,77,27)" fg:x="207077" fg:w="39"/><text x="53.9654%" y="287.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::classify (954 samples, 0.25%)</title><rect x="53.5831%" y="309" width="0.2475%" height="15" fill="rgb(221,76,26)" fg:x="206567" fg:w="954"/><text x="53.8331%" y="319.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::classify (954 samples, 0.25%)</title><rect x="53.5831%" y="293" width="0.2475%" height="15" fill="rgb(225,139,18)" fg:x="206567" fg:w="954"/><text x="53.8331%" y="303.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::partial_classify (405 samples, 0.11%)</title><rect x="53.7255%" y="277" width="0.1051%" height="15" fill="rgb(230,137,11)" fg:x="207116" fg:w="405"/><text x="53.9755%" y="287.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::integer_decode (1,316 samples, 0.34%)</title><rect x="53.8305%" y="309" width="0.3414%" height="15" fill="rgb(212,28,1)" fg:x="207521" fg:w="1316"/><text x="54.0805%" y="319.50"></text></g><g><title>core::num::flt2dec::decoder::decode (4,180 samples, 1.08%)</title><rect x="53.0879%" y="325" width="1.0843%" height="15" fill="rgb(248,164,17)" fg:x="204658" fg:w="4180"/><text x="53.3379%" y="335.50"></text></g><g><title>core::num::flt2dec::determine_sign (1,533 samples, 0.40%)</title><rect x="54.1722%" y="325" width="0.3977%" height="15" fill="rgb(222,171,42)" fg:x="208838" fg:w="1533"/><text x="54.4222%" y="335.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (4,466 samples, 1.16%)</title><rect x="54.5698%" y="325" width="1.1585%" height="15" fill="rgb(243,84,45)" fg:x="210371" fg:w="4466"/><text x="54.8198%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (244 samples, 0.06%)</title><rect x="55.6650%" y="309" width="0.0633%" height="15" fill="rgb(252,49,23)" fg:x="214593" fg:w="244"/><text x="55.9150%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (244 samples, 0.06%)</title><rect x="55.6650%" y="293" width="0.0633%" height="15" fill="rgb(215,19,7)" fg:x="214593" fg:w="244"/><text x="55.9150%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (244 samples, 0.06%)</title><rect x="55.6650%" y="277" width="0.0633%" height="15" fill="rgb(238,81,41)" fg:x="214593" fg:w="244"/><text x="55.9150%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (244 samples, 0.06%)</title><rect x="55.6650%" y="261" width="0.0633%" height="15" fill="rgb(210,199,37)" fg:x="214593" fg:w="244"/><text x="55.9150%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (200 samples, 0.05%)</title><rect x="55.6764%" y="245" width="0.0519%" height="15" fill="rgb(244,192,49)" fg:x="214637" fg:w="200"/><text x="55.9264%" y="255.50"></text></g><g><title>core::num::flt2dec::estimate_max_buf_len (411 samples, 0.11%)</title><rect x="55.7283%" y="325" width="0.1066%" height="15" fill="rgb(226,211,11)" fg:x="214837" fg:w="411"/><text x="55.9783%" y="335.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::clone::Clone&gt;::clone (4,601 samples, 1.19%)</title><rect x="57.2152%" y="277" width="1.1935%" height="15" fill="rgb(236,162,54)" fg:x="220569" fg:w="4601"/><text x="57.4652%" y="287.50"></text></g><g><title>__memcpy_evex_unaligned_erms (4,032 samples, 1.05%)</title><rect x="57.3628%" y="261" width="1.0459%" height="15" fill="rgb(220,229,9)" fg:x="221138" fg:w="4032"/><text x="57.6128%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.02%)</title><rect x="58.4574%" y="101" width="0.0156%" height="15" fill="rgb(250,87,22)" fg:x="225358" fg:w="60"/><text x="58.7074%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (60 samples, 0.02%)</title><rect x="58.4574%" y="85" width="0.0156%" height="15" fill="rgb(239,43,17)" fg:x="225358" fg:w="60"/><text x="58.7074%" y="95.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (60 samples, 0.02%)</title><rect x="58.4574%" y="69" width="0.0156%" height="15" fill="rgb(231,177,25)" fg:x="225358" fg:w="60"/><text x="58.7074%" y="79.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::cmp::Ord&gt;::cmp (351 samples, 0.09%)</title><rect x="58.4086%" y="277" width="0.0910%" height="15" fill="rgb(219,179,1)" fg:x="225170" fg:w="351"/><text x="58.6586%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (300 samples, 0.08%)</title><rect x="58.4219%" y="261" width="0.0778%" height="15" fill="rgb(238,219,53)" fg:x="225221" fg:w="300"/><text x="58.6719%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (300 samples, 0.08%)</title><rect x="58.4219%" y="245" width="0.0778%" height="15" fill="rgb(232,167,36)" fg:x="225221" fg:w="300"/><text x="58.6719%" y="255.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (300 samples, 0.08%)</title><rect x="58.4219%" y="229" width="0.0778%" height="15" fill="rgb(244,19,51)" fg:x="225221" fg:w="300"/><text x="58.6719%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (300 samples, 0.08%)</title><rect x="58.4219%" y="213" width="0.0778%" height="15" fill="rgb(224,6,22)" fg:x="225221" fg:w="300"/><text x="58.6719%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (300 samples, 0.08%)</title><rect x="58.4219%" y="197" width="0.0778%" height="15" fill="rgb(224,145,5)" fg:x="225221" fg:w="300"/><text x="58.6719%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::try_rfold (300 samples, 0.08%)</title><rect x="58.4219%" y="181" width="0.0778%" height="15" fill="rgb(234,130,49)" fg:x="225221" fg:w="300"/><text x="58.6719%" y="191.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (300 samples, 0.08%)</title><rect x="58.4219%" y="165" width="0.0778%" height="15" fill="rgb(254,6,2)" fg:x="225221" fg:w="300"/><text x="58.6719%" y="175.50"></text></g><g><title>core::iter::adapters::cloned::clone_try_fold::_{{closure}} (250 samples, 0.06%)</title><rect x="58.4348%" y="149" width="0.0648%" height="15" fill="rgb(208,96,46)" fg:x="225271" fg:w="250"/><text x="58.6848%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (250 samples, 0.06%)</title><rect x="58.4348%" y="133" width="0.0648%" height="15" fill="rgb(239,3,39)" fg:x="225271" fg:w="250"/><text x="58.6848%" y="143.50"></text></g><g><title>core::iter::traits::iterator::iter_compare::compare::_{{closure}} (250 samples, 0.06%)</title><rect x="58.4348%" y="117" width="0.0648%" height="15" fill="rgb(233,210,1)" fg:x="225271" fg:w="250"/><text x="58.6848%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by::compare::_{{closure}} (103 samples, 0.03%)</title><rect x="58.4730%" y="101" width="0.0267%" height="15" fill="rgb(244,137,37)" fg:x="225418" fg:w="103"/><text x="58.7230%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::_{{closure}} (103 samples, 0.03%)</title><rect x="58.4730%" y="85" width="0.0267%" height="15" fill="rgb(240,136,2)" fg:x="225418" fg:w="103"/><text x="58.7230%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (103 samples, 0.03%)</title><rect x="58.4730%" y="69" width="0.0267%" height="15" fill="rgb(239,18,37)" fg:x="225418" fg:w="103"/><text x="58.7230%" y="79.50"></text></g><g><title>__memset_evex_unaligned_erms (139 samples, 0.04%)</title><rect x="58.5018%" y="277" width="0.0361%" height="15" fill="rgb(218,185,22)" fg:x="225529" fg:w="139"/><text x="58.7518%" y="287.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (229 samples, 0.06%)</title><rect x="58.7516%" y="229" width="0.0594%" height="15" fill="rgb(225,218,4)" fg:x="226492" fg:w="229"/><text x="59.0016%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (229 samples, 0.06%)</title><rect x="58.7516%" y="213" width="0.0594%" height="15" fill="rgb(230,182,32)" fg:x="226492" fg:w="229"/><text x="59.0016%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (229 samples, 0.06%)</title><rect x="58.7516%" y="197" width="0.0594%" height="15" fill="rgb(242,56,43)" fg:x="226492" fg:w="229"/><text x="59.0016%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (229 samples, 0.06%)</title><rect x="58.7516%" y="181" width="0.0594%" height="15" fill="rgb(233,99,24)" fg:x="226492" fg:w="229"/><text x="59.0016%" y="191.50"></text></g><g><title>core::cmp::max (1,183 samples, 0.31%)</title><rect x="58.8110%" y="229" width="0.3069%" height="15" fill="rgb(234,209,42)" fg:x="226721" fg:w="1183"/><text x="59.0610%" y="239.50"></text></g><g><title>core::cmp::Ord::max (1,183 samples, 0.31%)</title><rect x="58.8110%" y="213" width="0.3069%" height="15" fill="rgb(227,7,12)" fg:x="226721" fg:w="1183"/><text x="59.0610%" y="223.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (1,183 samples, 0.31%)</title><rect x="58.8110%" y="197" width="0.3069%" height="15" fill="rgb(245,203,43)" fg:x="226721" fg:w="1183"/><text x="59.0610%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.02%)</title><rect x="59.1178%" y="181" width="0.0189%" height="15" fill="rgb(238,205,33)" fg:x="227904" fg:w="73"/><text x="59.3678%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (73 samples, 0.02%)</title><rect x="59.1178%" y="165" width="0.0189%" height="15" fill="rgb(231,56,7)" fg:x="227904" fg:w="73"/><text x="59.3678%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (73 samples, 0.02%)</title><rect x="59.1178%" y="149" width="0.0189%" height="15" fill="rgb(244,186,29)" fg:x="227904" fg:w="73"/><text x="59.3678%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1,225 samples, 0.32%)</title><rect x="59.2079%" y="117" width="0.3178%" height="15" fill="rgb(234,111,31)" fg:x="228251" fg:w="1225"/><text x="59.4579%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (656 samples, 0.17%)</title><rect x="59.3554%" y="101" width="0.1702%" height="15" fill="rgb(241,149,10)" fg:x="228820" fg:w="656"/><text x="59.6054%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,097 samples, 0.28%)</title><rect x="59.5982%" y="69" width="0.2846%" height="15" fill="rgb(249,206,44)" fg:x="229756" fg:w="1097"/><text x="59.8482%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1,097 samples, 0.28%)</title><rect x="59.5982%" y="53" width="0.2846%" height="15" fill="rgb(251,153,30)" fg:x="229756" fg:w="1097"/><text x="59.8482%" y="63.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (1,097 samples, 0.28%)</title><rect x="59.5982%" y="37" width="0.2846%" height="15" fill="rgb(239,152,38)" fg:x="229756" fg:w="1097"/><text x="59.8482%" y="47.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::cmp::PartialOrd&gt;::partial_cmp (7,016 samples, 1.82%)</title><rect x="58.7516%" y="261" width="1.8199%" height="15" fill="rgb(249,139,47)" fg:x="226492" fg:w="7016"/><text x="59.0016%" y="271.50">&lt;..</text></g><g><title>&lt;core::num::bignum::Big32x40 as core::cmp::Ord&gt;::cmp (7,016 samples, 1.82%)</title><rect x="58.7516%" y="245" width="1.8199%" height="15" fill="rgb(244,64,35)" fg:x="226492" fg:w="7016"/><text x="59.0016%" y="255.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::cmp (5,604 samples, 1.45%)</title><rect x="59.1178%" y="229" width="1.4537%" height="15" fill="rgb(216,46,15)" fg:x="227904" fg:w="5604"/><text x="59.3678%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (5,604 samples, 1.45%)</title><rect x="59.1178%" y="213" width="1.4537%" height="15" fill="rgb(250,74,19)" fg:x="227904" fg:w="5604"/><text x="59.3678%" y="223.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (5,604 samples, 1.45%)</title><rect x="59.1178%" y="197" width="1.4537%" height="15" fill="rgb(249,42,33)" fg:x="227904" fg:w="5604"/><text x="59.3678%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (5,531 samples, 1.43%)</title><rect x="59.1368%" y="181" width="1.4347%" height="15" fill="rgb(242,149,17)" fg:x="227977" fg:w="5531"/><text x="59.3868%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5,531 samples, 1.43%)</title><rect x="59.1368%" y="165" width="1.4347%" height="15" fill="rgb(244,29,21)" fg:x="227977" fg:w="5531"/><text x="59.3868%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::try_rfold (5,531 samples, 1.43%)</title><rect x="59.1368%" y="149" width="1.4347%" height="15" fill="rgb(220,130,37)" fg:x="227977" fg:w="5531"/><text x="59.3868%" y="159.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (5,531 samples, 1.43%)</title><rect x="59.1368%" y="133" width="1.4347%" height="15" fill="rgb(211,67,2)" fg:x="227977" fg:w="5531"/><text x="59.3868%" y="143.50"></text></g><g><title>core::iter::adapters::cloned::clone_try_fold::_{{closure}} (4,032 samples, 1.05%)</title><rect x="59.5256%" y="117" width="1.0459%" height="15" fill="rgb(235,68,52)" fg:x="229476" fg:w="4032"/><text x="59.7756%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (4,032 samples, 1.05%)</title><rect x="59.5256%" y="101" width="1.0459%" height="15" fill="rgb(246,142,3)" fg:x="229476" fg:w="4032"/><text x="59.7756%" y="111.50"></text></g><g><title>core::iter::traits::iterator::iter_compare::compare::_{{closure}} (4,032 samples, 1.05%)</title><rect x="59.5256%" y="85" width="1.0459%" height="15" fill="rgb(241,25,7)" fg:x="229476" fg:w="4032"/><text x="59.7756%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by::compare::_{{closure}} (2,654 samples, 0.69%)</title><rect x="59.8831%" y="69" width="0.6884%" height="15" fill="rgb(242,119,39)" fg:x="230854" fg:w="2654"/><text x="60.1331%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::_{{closure}} (2,185 samples, 0.57%)</title><rect x="60.0047%" y="53" width="0.5668%" height="15" fill="rgb(241,98,45)" fg:x="231323" fg:w="2185"/><text x="60.2547%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (2,185 samples, 0.57%)</title><rect x="60.0047%" y="37" width="0.5668%" height="15" fill="rgb(254,28,30)" fg:x="231323" fg:w="2185"/><text x="60.2547%" y="47.50"></text></g><g><title>core::cmp::PartialOrd::ge (7,842 samples, 2.03%)</title><rect x="58.5378%" y="277" width="2.0342%" height="15" fill="rgb(241,142,54)" fg:x="225668" fg:w="7842"/><text x="58.7878%" y="287.50">c..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (171 samples, 0.04%)</title><rect x="60.5720%" y="277" width="0.0444%" height="15" fill="rgb(222,85,15)" fg:x="233510" fg:w="171"/><text x="60.8220%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (171 samples, 0.04%)</title><rect x="60.5720%" y="261" width="0.0444%" height="15" fill="rgb(210,85,47)" fg:x="233510" fg:w="171"/><text x="60.8220%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (81 samples, 0.02%)</title><rect x="60.6164%" y="277" width="0.0210%" height="15" fill="rgb(224,206,25)" fg:x="233681" fg:w="81"/><text x="60.8664%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (81 samples, 0.02%)</title><rect x="60.6164%" y="261" width="0.0210%" height="15" fill="rgb(243,201,19)" fg:x="233681" fg:w="81"/><text x="60.8664%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 0.04%)</title><rect x="60.6994%" y="261" width="0.0389%" height="15" fill="rgb(236,59,4)" fg:x="234001" fg:w="150"/><text x="60.9494%" y="271.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (144 samples, 0.04%)</title><rect x="60.7009%" y="245" width="0.0374%" height="15" fill="rgb(254,179,45)" fg:x="234007" fg:w="144"/><text x="60.9509%" y="255.50"></text></g><g><title>core::cmp::max (70 samples, 0.02%)</title><rect x="60.7388%" y="261" width="0.0182%" height="15" fill="rgb(226,14,10)" fg:x="234153" fg:w="70"/><text x="60.9888%" y="271.50"></text></g><g><title>core::cmp::Ord::max (70 samples, 0.02%)</title><rect x="60.7388%" y="245" width="0.0182%" height="15" fill="rgb(244,27,41)" fg:x="234153" fg:w="70"/><text x="60.9888%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (70 samples, 0.02%)</title><rect x="60.7388%" y="229" width="0.0182%" height="15" fill="rgb(235,35,32)" fg:x="234153" fg:w="70"/><text x="60.9888%" y="239.50"></text></g><g><title>core::num::bignum::Big32x40::add (620 samples, 0.16%)</title><rect x="60.6428%" y="277" width="0.1608%" height="15" fill="rgb(218,68,31)" fg:x="233783" fg:w="620"/><text x="60.8928%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::carrying_add (180 samples, 0.05%)</title><rect x="60.7570%" y="261" width="0.0467%" height="15" fill="rgb(207,120,37)" fg:x="234223" fg:w="180"/><text x="61.0070%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::overflowing_add (119 samples, 0.03%)</title><rect x="60.7728%" y="245" width="0.0309%" height="15" fill="rgb(227,98,0)" fg:x="234284" fg:w="119"/><text x="61.0228%" y="255.50"></text></g><g><title>core::num::bignum::Big32x40::from_small (610 samples, 0.16%)</title><rect x="60.8037%" y="277" width="0.1582%" height="15" fill="rgb(207,7,3)" fg:x="234403" fg:w="610"/><text x="61.0537%" y="287.50"></text></g><g><title>core::num::bignum::Big32x40::from_u64 (637 samples, 0.17%)</title><rect x="60.9619%" y="277" width="0.1652%" height="15" fill="rgb(206,98,19)" fg:x="235013" fg:w="637"/><text x="61.2119%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.04%)</title><rect x="61.2672%" y="245" width="0.0379%" height="15" fill="rgb(217,5,26)" fg:x="236190" fg:w="146"/><text x="61.5172%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (106 samples, 0.03%)</title><rect x="61.2776%" y="229" width="0.0275%" height="15" fill="rgb(235,190,38)" fg:x="236230" fg:w="106"/><text x="61.5276%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (937 samples, 0.24%)</title><rect x="61.1271%" y="261" width="0.2431%" height="15" fill="rgb(247,86,24)" fg:x="235650" fg:w="937"/><text x="61.3771%" y="271.50"></text></g><g><title>core::num::bignum::Big32x40::is_zero::_{{closure}} (251 samples, 0.07%)</title><rect x="61.3051%" y="245" width="0.0651%" height="15" fill="rgb(205,101,16)" fg:x="236336" fg:w="251"/><text x="61.5551%" y="255.50"></text></g><g><title>core::num::bignum::Big32x40::is_zero (1,035 samples, 0.27%)</title><rect x="61.1271%" y="277" width="0.2685%" height="15" fill="rgb(246,168,33)" fg:x="235650" fg:w="1035"/><text x="61.3771%" y="287.50"></text></g><g><title>core::num::bignum::Big32x40::digits (98 samples, 0.03%)</title><rect x="61.3702%" y="261" width="0.0254%" height="15" fill="rgb(231,114,1)" fg:x="236587" fg:w="98"/><text x="61.6202%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (486 samples, 0.13%)</title><rect x="62.6656%" y="261" width="0.1261%" height="15" fill="rgb(207,184,53)" fg:x="241581" fg:w="486"/><text x="62.9156%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (486 samples, 0.13%)</title><rect x="62.6656%" y="245" width="0.1261%" height="15" fill="rgb(224,95,51)" fg:x="241581" fg:w="486"/><text x="62.9156%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (486 samples, 0.13%)</title><rect x="62.6656%" y="229" width="0.1261%" height="15" fill="rgb(212,188,45)" fg:x="241581" fg:w="486"/><text x="62.9156%" y="239.50"></text></g><g><title>core::num::bignum::Big32x40::mul_pow2 (5,706 samples, 1.48%)</title><rect x="61.3956%" y="277" width="1.4801%" height="15" fill="rgb(223,154,38)" fg:x="236685" fg:w="5706"/><text x="61.6456%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (320 samples, 0.08%)</title><rect x="62.7927%" y="261" width="0.0830%" height="15" fill="rgb(251,22,52)" fg:x="242071" fg:w="320"/><text x="63.0427%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (320 samples, 0.08%)</title><rect x="62.7927%" y="245" width="0.0830%" height="15" fill="rgb(229,209,22)" fg:x="242071" fg:w="320"/><text x="63.0427%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (278 samples, 0.07%)</title><rect x="63.0999%" y="261" width="0.0721%" height="15" fill="rgb(234,138,34)" fg:x="243255" fg:w="278"/><text x="63.3499%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (78 samples, 0.02%)</title><rect x="63.1517%" y="245" width="0.0202%" height="15" fill="rgb(212,95,11)" fg:x="243455" fg:w="78"/><text x="63.4017%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (39 samples, 0.01%)</title><rect x="63.1720%" y="261" width="0.0101%" height="15" fill="rgb(240,179,47)" fg:x="243533" fg:w="39"/><text x="63.4220%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (39 samples, 0.01%)</title><rect x="63.1720%" y="245" width="0.0101%" height="15" fill="rgb(240,163,11)" fg:x="243533" fg:w="39"/><text x="63.4220%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (39 samples, 0.01%)</title><rect x="63.1720%" y="229" width="0.0101%" height="15" fill="rgb(236,37,12)" fg:x="243533" fg:w="39"/><text x="63.4220%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (39 samples, 0.01%)</title><rect x="63.1720%" y="213" width="0.0101%" height="15" fill="rgb(232,164,16)" fg:x="243533" fg:w="39"/><text x="63.4220%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_add (81 samples, 0.02%)</title><rect x="63.1922%" y="245" width="0.0210%" height="15" fill="rgb(244,205,15)" fg:x="243611" fg:w="81"/><text x="63.4422%" y="255.50"></text></g><g><title>core::num::bignum::Big32x40::mul_small (1,429 samples, 0.37%)</title><rect x="62.8757%" y="277" width="0.3707%" height="15" fill="rgb(223,117,47)" fg:x="242391" fg:w="1429"/><text x="63.1257%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::carrying_mul (248 samples, 0.06%)</title><rect x="63.1821%" y="261" width="0.0643%" height="15" fill="rgb(244,107,35)" fg:x="243572" fg:w="248"/><text x="63.4321%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_mul (128 samples, 0.03%)</title><rect x="63.2132%" y="245" width="0.0332%" height="15" fill="rgb(205,140,8)" fg:x="243692" fg:w="128"/><text x="63.4632%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,357 samples, 0.35%)</title><rect x="63.5058%" y="261" width="0.3520%" height="15" fill="rgb(228,84,46)" fg:x="244820" fg:w="1357"/><text x="63.7558%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1,357 samples, 0.35%)</title><rect x="63.5058%" y="245" width="0.3520%" height="15" fill="rgb(254,188,9)" fg:x="244820" fg:w="1357"/><text x="63.7558%" y="255.50"></text></g><g><title>core::num::bignum::Big32x40::sub (3,222 samples, 0.84%)</title><rect x="63.2464%" y="277" width="0.8358%" height="15" fill="rgb(206,112,54)" fg:x="243820" fg:w="3222"/><text x="63.4964%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::carrying_add (865 samples, 0.22%)</title><rect x="63.8578%" y="261" width="0.2244%" height="15" fill="rgb(216,84,49)" fg:x="246177" fg:w="865"/><text x="64.1078%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::overflowing_add (701 samples, 0.18%)</title><rect x="63.9004%" y="245" width="0.1818%" height="15" fill="rgb(214,194,35)" fg:x="246341" fg:w="701"/><text x="64.1504%" y="255.50"></text></g><g><title>core::num::flt2dec::estimator::estimate_scaling_factor (488 samples, 0.13%)</title><rect x="64.0822%" y="277" width="0.1266%" height="15" fill="rgb(249,28,3)" fg:x="247042" fg:w="488"/><text x="64.3322%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (228 samples, 0.06%)</title><rect x="64.1496%" y="261" width="0.0591%" height="15" fill="rgb(222,56,52)" fg:x="247302" fg:w="228"/><text x="64.3996%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (536 samples, 0.14%)</title><rect x="64.3857%" y="245" width="0.1390%" height="15" fill="rgb(245,217,50)" fg:x="248212" fg:w="536"/><text x="64.6357%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (536 samples, 0.14%)</title><rect x="64.3857%" y="229" width="0.1390%" height="15" fill="rgb(213,201,24)" fg:x="248212" fg:w="536"/><text x="64.6357%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (62 samples, 0.02%)</title><rect x="64.5086%" y="213" width="0.0161%" height="15" fill="rgb(248,116,28)" fg:x="248686" fg:w="62"/><text x="64.7586%" y="223.50"></text></g><g><title>&lt;u32 as core::num::bignum::FullOps&gt;::full_div_rem (1,980 samples, 0.51%)</title><rect x="64.5247%" y="245" width="0.5136%" height="15" fill="rgb(219,72,43)" fg:x="248748" fg:w="1980"/><text x="64.7747%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::div_2pow10 (3,369 samples, 0.87%)</title><rect x="64.2088%" y="277" width="0.8739%" height="15" fill="rgb(209,138,14)" fg:x="247530" fg:w="3369"/><text x="64.4588%" y="287.50"></text></g><g><title>core::num::bignum::Big32x40::div_rem_small (3,206 samples, 0.83%)</title><rect x="64.2511%" y="261" width="0.8316%" height="15" fill="rgb(222,18,33)" fg:x="247693" fg:w="3206"/><text x="64.5011%" y="271.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (171 samples, 0.04%)</title><rect x="65.0383%" y="245" width="0.0444%" height="15" fill="rgb(213,199,7)" fg:x="250728" fg:w="171"/><text x="65.2883%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (171 samples, 0.04%)</title><rect x="65.0383%" y="229" width="0.0444%" height="15" fill="rgb(250,110,10)" fg:x="250728" fg:w="171"/><text x="65.2883%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (171 samples, 0.04%)</title><rect x="65.0383%" y="213" width="0.0444%" height="15" fill="rgb(248,123,6)" fg:x="250728" fg:w="171"/><text x="65.2883%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (171 samples, 0.04%)</title><rect x="65.0383%" y="197" width="0.0444%" height="15" fill="rgb(206,91,31)" fg:x="250728" fg:w="171"/><text x="65.2883%" y="207.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (93 samples, 0.02%)</title><rect x="65.0827%" y="277" width="0.0241%" height="15" fill="rgb(211,154,13)" fg:x="250899" fg:w="93"/><text x="65.3327%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.01%)</title><rect x="65.2977%" y="245" width="0.0106%" height="15" fill="rgb(225,148,7)" fg:x="251728" fg:w="41"/><text x="65.5477%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::carrying_mul (168 samples, 0.04%)</title><rect x="65.3162%" y="245" width="0.0436%" height="15" fill="rgb(220,160,43)" fg:x="251799" fg:w="168"/><text x="65.5662%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_mul (79 samples, 0.02%)</title><rect x="65.3392%" y="229" width="0.0205%" height="15" fill="rgb(213,52,39)" fg:x="251888" fg:w="79"/><text x="65.5892%" y="239.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::mul_pow10 (1,120 samples, 0.29%)</title><rect x="65.1068%" y="277" width="0.2905%" height="15" fill="rgb(243,137,7)" fg:x="250992" fg:w="1120"/><text x="65.3568%" y="287.50"></text></g><g><title>core::num::bignum::Big32x40::mul_small (743 samples, 0.19%)</title><rect x="65.2046%" y="261" width="0.1927%" height="15" fill="rgb(230,79,13)" fg:x="251369" fg:w="743"/><text x="65.4546%" y="271.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::mul_pow10 (145 samples, 0.04%)</title><rect x="65.3597%" y="245" width="0.0376%" height="15" fill="rgb(247,105,23)" fg:x="251967" fg:w="145"/><text x="65.6097%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (35,115 samples, 9.11%)</title><rect x="56.3041%" y="293" width="9.1088%" height="15" fill="rgb(223,179,41)" fg:x="217057" fg:w="35115"/><text x="56.5541%" y="303.50">core::num::fl..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (59 samples, 0.02%)</title><rect x="65.3976%" y="277" width="0.0153%" height="15" fill="rgb(218,9,34)" fg:x="252113" fg:w="59"/><text x="65.6476%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (59 samples, 0.02%)</title><rect x="65.3976%" y="261" width="0.0153%" height="15" fill="rgb(222,106,8)" fg:x="252113" fg:w="59"/><text x="65.6476%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (54 samples, 0.01%)</title><rect x="65.3989%" y="245" width="0.0140%" height="15" fill="rgb(211,220,0)" fg:x="252118" fg:w="54"/><text x="65.6489%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (54 samples, 0.01%)</title><rect x="65.3989%" y="229" width="0.0140%" height="15" fill="rgb(229,52,16)" fg:x="252118" fg:w="54"/><text x="65.6489%" y="239.50"></text></g><g><title>core::num::diy_float::Fp::mul (3,531 samples, 0.92%)</title><rect x="69.7825%" y="277" width="0.9159%" height="15" fill="rgb(212,155,18)" fg:x="269017" fg:w="3531"/><text x="70.0325%" y="287.50"></text></g><g><title>core::num::diy_float::Fp::normalize (7,411 samples, 1.92%)</title><rect x="70.6984%" y="277" width="1.9224%" height="15" fill="rgb(242,21,14)" fg:x="272548" fg:w="7411"/><text x="70.9484%" y="287.50">c..</text></g><g><title>core::num::flt2dec::strategy::grisu::cached_power (4,163 samples, 1.08%)</title><rect x="72.6208%" y="277" width="1.0799%" height="15" fill="rgb(222,19,48)" fg:x="279959" fg:w="4163"/><text x="72.8708%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (66 samples, 0.02%)</title><rect x="74.9621%" y="229" width="0.0171%" height="15" fill="rgb(232,45,27)" fg:x="288985" fg:w="66"/><text x="75.2121%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (66 samples, 0.02%)</title><rect x="74.9621%" y="213" width="0.0171%" height="15" fill="rgb(249,103,42)" fg:x="288985" fg:w="66"/><text x="75.2121%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (634 samples, 0.16%)</title><rect x="74.9079%" y="245" width="0.1645%" height="15" fill="rgb(246,81,33)" fg:x="288776" fg:w="634"/><text x="75.1579%" y="255.50"></text></g><g><title>core::num::flt2dec::round_up::_{{closure}} (359 samples, 0.09%)</title><rect x="74.9792%" y="229" width="0.0931%" height="15" fill="rgb(252,33,42)" fg:x="289051" fg:w="359"/><text x="75.2292%" y="239.50"></text></g><g><title>core::num::flt2dec::round_up (1,095 samples, 0.28%)</title><rect x="74.8335%" y="261" width="0.2840%" height="15" fill="rgb(209,212,41)" fg:x="288489" fg:w="1095"/><text x="75.0835%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (174 samples, 0.05%)</title><rect x="75.0724%" y="245" width="0.0451%" height="15" fill="rgb(207,154,6)" fg:x="289410" fg:w="174"/><text x="75.3224%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (174 samples, 0.05%)</title><rect x="75.0724%" y="229" width="0.0451%" height="15" fill="rgb(223,64,47)" fg:x="289410" fg:w="174"/><text x="75.3224%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (174 samples, 0.05%)</title><rect x="75.0724%" y="213" width="0.0451%" height="15" fill="rgb(211,161,38)" fg:x="289410" fg:w="174"/><text x="75.3224%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (322 samples, 0.08%)</title><rect x="75.1175%" y="261" width="0.0835%" height="15" fill="rgb(219,138,40)" fg:x="289584" fg:w="322"/><text x="75.3675%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (322 samples, 0.08%)</title><rect x="75.1175%" y="245" width="0.0835%" height="15" fill="rgb(241,228,46)" fg:x="289584" fg:w="322"/><text x="75.3675%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (322 samples, 0.08%)</title><rect x="75.1175%" y="229" width="0.0835%" height="15" fill="rgb(223,209,38)" fg:x="289584" fg:w="322"/><text x="75.3675%" y="239.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (5,928 samples, 1.54%)</title><rect x="73.7007%" y="277" width="1.5377%" height="15" fill="rgb(236,164,45)" fg:x="284122" fg:w="5928"/><text x="73.9507%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (144 samples, 0.04%)</title><rect x="75.2010%" y="261" width="0.0374%" height="15" fill="rgb(231,15,5)" fg:x="289906" fg:w="144"/><text x="75.4510%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (144 samples, 0.04%)</title><rect x="75.2010%" y="245" width="0.0374%" height="15" fill="rgb(252,35,15)" fg:x="289906" fg:w="144"/><text x="75.4510%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (144 samples, 0.04%)</title><rect x="75.2010%" y="229" width="0.0374%" height="15" fill="rgb(248,181,18)" fg:x="289906" fg:w="144"/><text x="75.4510%" y="239.50"></text></g><g><title>core::fmt::rt::Argument::fmt (131,204 samples, 34.03%)</title><rect x="41.5838%" y="373" width="34.0341%" height="15" fill="rgb(233,39,42)" fg:x="160309" fg:w="131204"/><text x="41.8338%" y="383.50">core::fmt::rt::Argument::fmt</text></g><g><title>core::fmt::float::float_to_decimal_common_exact (129,724 samples, 33.65%)</title><rect x="41.9677%" y="357" width="33.6501%" height="15" fill="rgb(238,110,33)" fg:x="161789" fg:w="129724"/><text x="42.2177%" y="367.50">core::fmt::float::float_to_decimal_common_exact</text></g><g><title>core::num::flt2dec::to_exact_fixed_str (92,270 samples, 23.93%)</title><rect x="51.6832%" y="341" width="23.9347%" height="15" fill="rgb(233,195,10)" fg:x="199243" fg:w="92270"/><text x="51.9332%" y="351.50">core::num::flt2dec::to_exact_fixed_str</text></g><g><title>core::ops::function::FnMut::call_mut (76,265 samples, 19.78%)</title><rect x="55.8349%" y="325" width="19.7830%" height="15" fill="rgb(254,105,3)" fg:x="215248" fg:w="76265"/><text x="56.0849%" y="335.50">core::ops::function::FnMut::cal..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (76,265 samples, 19.78%)</title><rect x="55.8349%" y="309" width="19.7830%" height="15" fill="rgb(221,225,9)" fg:x="215248" fg:w="76265"/><text x="56.0849%" y="319.50">core::num::flt2dec::strategy::g..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (39,341 samples, 10.20%)</title><rect x="65.4129%" y="293" width="10.2050%" height="15" fill="rgb(224,227,45)" fg:x="252172" fg:w="39341"/><text x="65.6629%" y="303.50">core::num::flt2..</text></g><g><title>core::num::flt2dec::strategy::grisu::max_pow10_no_more_than (1,463 samples, 0.38%)</title><rect x="75.2384%" y="277" width="0.3795%" height="15" fill="rgb(229,198,43)" fg:x="290050" fg:w="1463"/><text x="75.4884%" y="287.50"></text></g><g><title>core::fmt::run (134,408 samples, 34.87%)</title><rect x="40.7600%" y="389" width="34.8652%" height="15" fill="rgb(206,209,35)" fg:x="157133" fg:w="134408"/><text x="41.0100%" y="399.50">core::fmt::run</text></g><g><title>core::fmt::Write::write_fmt (140,523 samples, 36.45%)</title><rect x="39.5024%" y="437" width="36.4514%" height="15" fill="rgb(245,195,53)" fg:x="152285" fg:w="140523"/><text x="39.7524%" y="447.50">core::fmt::Write::write_fmt</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (140,523 samples, 36.45%)</title><rect x="39.5024%" y="421" width="36.4514%" height="15" fill="rgb(240,92,26)" fg:x="152285" fg:w="140523"/><text x="39.7524%" y="431.50">&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec..</text></g><g><title>core::fmt::write (140,148 samples, 36.35%)</title><rect x="39.5997%" y="405" width="36.3541%" height="15" fill="rgb(207,40,23)" fg:x="152660" fg:w="140148"/><text x="39.8497%" y="415.50">core::fmt::write</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,259 samples, 0.33%)</title><rect x="75.6272%" y="389" width="0.3266%" height="15" fill="rgb(223,111,35)" fg:x="291549" fg:w="1259"/><text x="75.8772%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,259 samples, 0.33%)</title><rect x="75.6272%" y="373" width="0.3266%" height="15" fill="rgb(229,147,28)" fg:x="291549" fg:w="1259"/><text x="75.8772%" y="383.50"></text></g><g><title>alloc::fmt::format (145,723 samples, 37.80%)</title><rect x="38.1543%" y="501" width="37.8003%" height="15" fill="rgb(211,29,28)" fg:x="147088" fg:w="145723"/><text x="38.4043%" y="511.50">alloc::fmt::format</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (145,723 samples, 37.80%)</title><rect x="38.1543%" y="485" width="37.8003%" height="15" fill="rgb(228,72,33)" fg:x="147088" fg:w="145723"/><text x="38.4043%" y="495.50">core::option::Option&lt;T&gt;::map_or_else</text></g><g><title>alloc::fmt::format::_{{closure}} (145,723 samples, 37.80%)</title><rect x="38.1543%" y="469" width="37.8003%" height="15" fill="rgb(205,214,31)" fg:x="147088" fg:w="145723"/><text x="38.4043%" y="479.50">alloc::fmt::format::_{{closure}}</text></g><g><title>alloc::fmt::format::format_inner (145,529 samples, 37.75%)</title><rect x="38.2047%" y="453" width="37.7499%" height="15" fill="rgb(224,111,15)" fg:x="147282" fg:w="145529"/><text x="38.4547%" y="463.50">alloc::fmt::format::format_inner</text></g><g><title>core::fmt::Arguments::new_v1_formatted (955 samples, 0.25%)</title><rect x="75.9546%" y="501" width="0.2477%" height="15" fill="rgb(253,21,26)" fg:x="292811" fg:w="955"/><text x="76.2046%" y="511.50"></text></g><g><title>_int_free (6,631 samples, 1.72%)</title><rect x="77.0272%" y="389" width="1.7201%" height="15" fill="rgb(245,139,43)" fg:x="296946" fg:w="6631"/><text x="77.2772%" y="399.50"></text></g><g><title>tcache_put (1,077 samples, 0.28%)</title><rect x="78.4679%" y="373" width="0.2794%" height="15" fill="rgb(252,170,7)" fg:x="302500" fg:w="1077"/><text x="78.7179%" y="383.50"></text></g><g><title>__GI___libc_free (11,031 samples, 2.86%)</title><rect x="76.2788%" y="405" width="2.8614%" height="15" fill="rgb(231,118,14)" fg:x="294061" fg:w="11031"/><text x="76.5288%" y="415.50">__..</text></g><g><title>arena_for_chunk (1,515 samples, 0.39%)</title><rect x="78.7473%" y="389" width="0.3930%" height="15" fill="rgb(238,83,0)" fg:x="303577" fg:w="1515"/><text x="78.9973%" y="399.50"></text></g><g><title>arena_for_chunk (1,309 samples, 0.34%)</title><rect x="78.8007%" y="373" width="0.3396%" height="15" fill="rgb(221,39,39)" fg:x="303783" fg:w="1309"/><text x="79.0507%" y="383.50"></text></g><g><title>heap_for_ptr (788 samples, 0.20%)</title><rect x="78.9358%" y="357" width="0.2044%" height="15" fill="rgb(222,119,46)" fg:x="304304" fg:w="788"/><text x="79.1858%" y="367.50"></text></g><g><title>heap_max_size (57 samples, 0.01%)</title><rect x="79.1255%" y="341" width="0.0148%" height="15" fill="rgb(222,165,49)" fg:x="305035" fg:w="57"/><text x="79.3755%" y="351.50"></text></g><g><title>__rdl_dealloc (317 samples, 0.08%)</title><rect x="79.1403%" y="405" width="0.0822%" height="15" fill="rgb(219,113,52)" fg:x="305092" fg:w="317"/><text x="79.3903%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,654 samples, 3.02%)</title><rect x="76.2783%" y="437" width="3.0230%" height="15" fill="rgb(214,7,15)" fg:x="294059" fg:w="11654"/><text x="76.5283%" y="447.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (11,654 samples, 3.02%)</title><rect x="76.2783%" y="421" width="3.0230%" height="15" fill="rgb(235,32,4)" fg:x="294059" fg:w="11654"/><text x="76.5283%" y="431.50">all..</text></g><g><title>__rust_dealloc (304 samples, 0.08%)</title><rect x="79.2225%" y="405" width="0.0789%" height="15" fill="rgb(238,90,54)" fg:x="305409" fg:w="304"/><text x="79.4725%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11,953 samples, 3.10%)</title><rect x="76.2023%" y="501" width="3.1006%" height="15" fill="rgb(213,208,19)" fg:x="293766" fg:w="11953"/><text x="76.4523%" y="511.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11,953 samples, 3.10%)</title><rect x="76.2023%" y="485" width="3.1006%" height="15" fill="rgb(233,156,4)" fg:x="293766" fg:w="11953"/><text x="76.4523%" y="495.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11,953 samples, 3.10%)</title><rect x="76.2023%" y="469" width="3.1006%" height="15" fill="rgb(207,194,5)" fg:x="293766" fg:w="11953"/><text x="76.4523%" y="479.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,953 samples, 3.10%)</title><rect x="76.2023%" y="453" width="3.1006%" height="15" fill="rgb(206,111,30)" fg:x="293766" fg:w="11953"/><text x="76.4523%" y="463.50">&lt;al..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (538 samples, 0.14%)</title><rect x="79.3919%" y="469" width="0.1396%" height="15" fill="rgb(243,70,54)" fg:x="306062" fg:w="538"/><text x="79.6419%" y="479.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (636 samples, 0.16%)</title><rect x="80.0321%" y="453" width="0.1650%" height="15" fill="rgb(242,28,8)" fg:x="308530" fg:w="636"/><text x="80.2821%" y="463.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (357 samples, 0.09%)</title><rect x="80.3003%" y="437" width="0.0926%" height="15" fill="rgb(219,106,18)" fg:x="309564" fg:w="357"/><text x="80.5503%" y="447.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,248 samples, 0.84%)</title><rect x="80.3968%" y="437" width="0.8425%" height="15" fill="rgb(244,222,10)" fg:x="309936" fg:w="3248"/><text x="80.6468%" y="447.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (4,430 samples, 1.15%)</title><rect x="80.1970%" y="453" width="1.1491%" height="15" fill="rgb(236,179,52)" fg:x="309166" fg:w="4430"/><text x="80.4470%" y="463.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (411 samples, 0.11%)</title><rect x="81.2396%" y="437" width="0.1066%" height="15" fill="rgb(213,23,39)" fg:x="313185" fg:w="411"/><text x="81.4896%" y="447.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1,829 samples, 0.47%)</title><rect x="81.6663%" y="437" width="0.4744%" height="15" fill="rgb(238,48,10)" fg:x="314830" fg:w="1829"/><text x="81.9163%" y="447.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (488 samples, 0.13%)</title><rect x="83.8265%" y="389" width="0.1266%" height="15" fill="rgb(251,196,23)" fg:x="323158" fg:w="488"/><text x="84.0765%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (414 samples, 0.11%)</title><rect x="83.9609%" y="373" width="0.1074%" height="15" fill="rgb(250,152,24)" fg:x="323676" fg:w="414"/><text x="84.2109%" y="383.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (5,093 samples, 1.32%)</title><rect x="82.8299%" y="405" width="1.3211%" height="15" fill="rgb(209,150,17)" fg:x="319316" fg:w="5093"/><text x="83.0799%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (763 samples, 0.20%)</title><rect x="83.9531%" y="389" width="0.1979%" height="15" fill="rgb(234,202,34)" fg:x="323646" fg:w="763"/><text x="84.2031%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (319 samples, 0.08%)</title><rect x="84.0683%" y="373" width="0.0827%" height="15" fill="rgb(253,148,53)" fg:x="324090" fg:w="319"/><text x="84.3183%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (6,428 samples, 1.67%)</title><rect x="82.5225%" y="421" width="1.6674%" height="15" fill="rgb(218,129,16)" fg:x="318131" fg:w="6428"/><text x="82.7725%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (149 samples, 0.04%)</title><rect x="84.1513%" y="405" width="0.0387%" height="15" fill="rgb(216,85,19)" fg:x="324410" fg:w="149"/><text x="84.4013%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (11,010 samples, 2.86%)</title><rect x="81.3462%" y="453" width="2.8560%" height="15" fill="rgb(235,228,7)" fg:x="313596" fg:w="11010"/><text x="81.5962%" y="463.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (7,947 samples, 2.06%)</title><rect x="82.1407%" y="437" width="2.0614%" height="15" fill="rgb(245,175,0)" fg:x="316659" fg:w="7947"/><text x="82.3907%" y="447.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (47 samples, 0.01%)</title><rect x="84.1900%" y="421" width="0.0122%" height="15" fill="rgb(208,168,36)" fg:x="324559" fg:w="47"/><text x="84.4400%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (18,885 samples, 4.90%)</title><rect x="79.3037%" y="501" width="4.8987%" height="15" fill="rgb(246,171,24)" fg:x="305722" fg:w="18885"/><text x="79.5537%" y="511.50">core::..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (18,546 samples, 4.81%)</title><rect x="79.3916%" y="485" width="4.8108%" height="15" fill="rgb(215,142,24)" fg:x="306061" fg:w="18546"/><text x="79.6416%" y="495.50">core::..</text></g><g><title>core::num::dec2flt::dec2flt (18,007 samples, 4.67%)</title><rect x="79.5314%" y="469" width="4.6710%" height="15" fill="rgb(250,187,7)" fg:x="306600" fg:w="18007"/><text x="79.7814%" y="479.50">core:..</text></g><g><title>one_brc::round_towards_positive (183,835 samples, 47.69%)</title><rect x="37.0732%" y="517" width="47.6864%" height="15" fill="rgb(228,66,33)" fg:x="142920" fg:w="183835"/><text x="37.3232%" y="527.50">one_brc::round_towards_positive</text></g><g><title>std::f32::&lt;impl f32&gt;::round (2,148 samples, 0.56%)</title><rect x="84.2024%" y="501" width="0.5572%" height="15" fill="rgb(234,215,21)" fg:x="324607" fg:w="2148"/><text x="84.4524%" y="511.50"></text></g><g><title>__roundf (2,148 samples, 0.56%)</title><rect x="84.2024%" y="485" width="0.5572%" height="15" fill="rgb(222,191,20)" fg:x="324607" fg:w="2148"/><text x="84.4524%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (107 samples, 0.03%)</title><rect x="85.2903%" y="485" width="0.0278%" height="15" fill="rgb(245,79,54)" fg:x="328801" fg:w="107"/><text x="85.5403%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (250 samples, 0.06%)</title><rect x="86.0467%" y="389" width="0.0648%" height="15" fill="rgb(240,10,37)" fg:x="331717" fg:w="250"/><text x="86.2967%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (577 samples, 0.15%)</title><rect x="86.1116%" y="389" width="0.1497%" height="15" fill="rgb(214,192,32)" fg:x="331967" fg:w="577"/><text x="86.3616%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,026 samples, 0.53%)</title><rect x="85.8807%" y="405" width="0.5255%" height="15" fill="rgb(209,36,54)" fg:x="331077" fg:w="2026"/><text x="86.1307%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (559 samples, 0.15%)</title><rect x="86.2612%" y="389" width="0.1450%" height="15" fill="rgb(220,10,11)" fg:x="332544" fg:w="559"/><text x="86.5112%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,142 samples, 0.56%)</title><rect x="86.7707%" y="389" width="0.5556%" height="15" fill="rgb(221,106,17)" fg:x="334508" fg:w="2142"/><text x="87.0207%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8,819 samples, 2.29%)</title><rect x="85.4112%" y="421" width="2.2876%" height="15" fill="rgb(251,142,44)" fg:x="329267" fg:w="8819"/><text x="85.6612%" y="431.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,983 samples, 1.29%)</title><rect x="86.4062%" y="405" width="1.2926%" height="15" fill="rgb(238,13,15)" fg:x="333103" fg:w="4983"/><text x="86.6562%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,436 samples, 0.37%)</title><rect x="87.3263%" y="389" width="0.3725%" height="15" fill="rgb(208,107,27)" fg:x="336650" fg:w="1436"/><text x="87.5763%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8,952 samples, 2.32%)</title><rect x="85.4112%" y="453" width="2.3221%" height="15" fill="rgb(205,136,37)" fg:x="329267" fg:w="8952"/><text x="85.6612%" y="463.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8,952 samples, 2.32%)</title><rect x="85.4112%" y="437" width="2.3221%" height="15" fill="rgb(250,205,27)" fg:x="329267" fg:w="8952"/><text x="85.6612%" y="447.50">&lt;..</text></g><g><title>core::hash::BuildHasher::hash_one (133 samples, 0.03%)</title><rect x="87.6988%" y="421" width="0.0345%" height="15" fill="rgb(210,80,43)" fg:x="338086" fg:w="133"/><text x="87.9488%" y="431.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,526 samples, 0.40%)</title><rect x="87.7333%" y="453" width="0.3958%" height="15" fill="rgb(247,160,36)" fg:x="338219" fg:w="1526"/><text x="87.9833%" y="463.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (898 samples, 0.23%)</title><rect x="87.8962%" y="437" width="0.2329%" height="15" fill="rgb(234,13,49)" fg:x="338847" fg:w="898"/><text x="88.1462%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (898 samples, 0.23%)</title><rect x="87.8962%" y="421" width="0.2329%" height="15" fill="rgb(234,122,0)" fg:x="338847" fg:w="898"/><text x="88.1462%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (898 samples, 0.23%)</title><rect x="87.8962%" y="405" width="0.2329%" height="15" fill="rgb(207,146,38)" fg:x="338847" fg:w="898"/><text x="88.1462%" y="415.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.1187462462027531043 (51 samples, 0.01%)</title><rect x="89.0244%" y="325" width="0.0132%" height="15" fill="rgb(207,177,25)" fg:x="343196" fg:w="51"/><text x="89.2744%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (311 samples, 0.08%)</title><rect x="89.0376%" y="325" width="0.0807%" height="15" fill="rgb(211,178,42)" fg:x="343247" fg:w="311"/><text x="89.2876%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,217 samples, 0.32%)</title><rect x="88.9175%" y="341" width="0.3157%" height="15" fill="rgb(230,69,54)" fg:x="342784" fg:w="1217"/><text x="89.1675%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (443 samples, 0.11%)</title><rect x="89.1183%" y="325" width="0.1149%" height="15" fill="rgb(214,135,41)" fg:x="343558" fg:w="443"/><text x="89.3683%" y="335.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.1187462462027531043 (412 samples, 0.11%)</title><rect x="89.2368%" y="341" width="0.1069%" height="15" fill="rgb(237,67,25)" fg:x="344015" fg:w="412"/><text x="89.4868%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (6,153 samples, 1.60%)</title><rect x="89.3437%" y="341" width="1.5961%" height="15" fill="rgb(222,189,50)" fg:x="344427" fg:w="6153"/><text x="89.5937%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,112 samples, 0.29%)</title><rect x="90.6513%" y="325" width="0.2885%" height="15" fill="rgb(245,148,34)" fg:x="349468" fg:w="1112"/><text x="90.9013%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10,612 samples, 2.75%)</title><rect x="88.2469%" y="357" width="2.7527%" height="15" fill="rgb(222,29,6)" fg:x="340199" fg:w="10612"/><text x="88.4969%" y="367.50">&lt;c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (231 samples, 0.06%)</title><rect x="90.9397%" y="341" width="0.0599%" height="15" fill="rgb(221,189,43)" fg:x="350580" fg:w="231"/><text x="91.1897%" y="351.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.1187462462027531043 (2,185 samples, 0.57%)</title><rect x="90.9997%" y="357" width="0.5668%" height="15" fill="rgb(207,36,27)" fg:x="350811" fg:w="2185"/><text x="91.2497%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (100 samples, 0.03%)</title><rect x="92.4012%" y="309" width="0.0259%" height="15" fill="rgb(217,90,24)" fg:x="356214" fg:w="100"/><text x="92.6512%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (425 samples, 0.11%)</title><rect x="92.3517%" y="325" width="0.1102%" height="15" fill="rgb(224,66,35)" fg:x="356023" fg:w="425"/><text x="92.6017%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (134 samples, 0.03%)</title><rect x="92.4271%" y="309" width="0.0348%" height="15" fill="rgb(221,13,50)" fg:x="356314" fg:w="134"/><text x="92.6771%" y="319.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.1187462462027531043 (69 samples, 0.02%)</title><rect x="92.4624%" y="325" width="0.0179%" height="15" fill="rgb(236,68,49)" fg:x="356450" fg:w="69"/><text x="92.7124%" y="335.50"></text></g><g><title>core::cmp::min (166 samples, 0.04%)</title><rect x="92.4803%" y="325" width="0.0431%" height="15" fill="rgb(229,146,28)" fg:x="356519" fg:w="166"/><text x="92.7303%" y="335.50"></text></g><g><title>core::cmp::Ord::min (166 samples, 0.04%)</title><rect x="92.4803%" y="309" width="0.0431%" height="15" fill="rgb(225,31,38)" fg:x="356519" fg:w="166"/><text x="92.7303%" y="319.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.1187462462027531043 (166 samples, 0.04%)</title><rect x="92.4803%" y="293" width="0.0431%" height="15" fill="rgb(250,208,3)" fg:x="356519" fg:w="166"/><text x="92.7303%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,446 samples, 1.41%)</title><rect x="91.7579%" y="341" width="1.4127%" height="15" fill="rgb(246,54,23)" fg:x="353734" fg:w="5446"/><text x="92.0079%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (2,495 samples, 0.65%)</title><rect x="92.5234%" y="325" width="0.6472%" height="15" fill="rgb(243,76,11)" fg:x="356685" fg:w="2495"/><text x="92.7734%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (30,511 samples, 7.91%)</title><rect x="85.3181%" y="485" width="7.9145%" height="15" fill="rgb(245,21,50)" fg:x="328908" fg:w="30511"/><text x="85.5681%" y="495.50">hashbrown::..</text></g><g><title>core::hash::BuildHasher::hash_one (30,510 samples, 7.91%)</title><rect x="85.3183%" y="469" width="7.9142%" height="15" fill="rgb(228,9,43)" fg:x="328909" fg:w="30510"/><text x="85.5683%" y="479.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19,642 samples, 5.10%)</title><rect x="88.1375%" y="453" width="5.0951%" height="15" fill="rgb(208,100,47)" fg:x="339777" fg:w="19642"/><text x="88.3875%" y="463.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19,302 samples, 5.01%)</title><rect x="88.2257%" y="437" width="5.0069%" height="15" fill="rgb(232,26,8)" fg:x="340117" fg:w="19302"/><text x="88.4757%" y="447.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (19,302 samples, 5.01%)</title><rect x="88.2257%" y="421" width="5.0069%" height="15" fill="rgb(216,166,38)" fg:x="340117" fg:w="19302"/><text x="88.4757%" y="431.50">core::..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (19,302 samples, 5.01%)</title><rect x="88.2257%" y="405" width="5.0069%" height="15" fill="rgb(251,202,51)" fg:x="340117" fg:w="19302"/><text x="88.4757%" y="415.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (19,302 samples, 5.01%)</title><rect x="88.2257%" y="389" width="5.0069%" height="15" fill="rgb(254,216,34)" fg:x="340117" fg:w="19302"/><text x="88.4757%" y="399.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (19,302 samples, 5.01%)</title><rect x="88.2257%" y="373" width="5.0069%" height="15" fill="rgb(251,32,27)" fg:x="340117" fg:w="19302"/><text x="88.4757%" y="383.50">&lt;core:..</text></g><g><title>core::hash::Hasher::write_u8 (6,423 samples, 1.67%)</title><rect x="91.5665%" y="357" width="1.6661%" height="15" fill="rgb(208,127,28)" fg:x="352996" fg:w="6423"/><text x="91.8165%" y="367.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h94c345de0644c4b1E.llvm.1187462462027531043 (238 samples, 0.06%)</title><rect x="93.1708%" y="341" width="0.0617%" height="15" fill="rgb(224,137,22)" fg:x="359181" fg:w="238"/><text x="93.4208%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (464 samples, 0.12%)</title><rect x="93.4855%" y="453" width="0.1204%" height="15" fill="rgb(254,70,32)" fg:x="360394" fg:w="464"/><text x="93.7355%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (125 samples, 0.03%)</title><rect x="93.5734%" y="437" width="0.0324%" height="15" fill="rgb(229,75,37)" fg:x="360733" fg:w="125"/><text x="93.8234%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (437 samples, 0.11%)</title><rect x="93.8567%" y="437" width="0.1134%" height="15" fill="rgb(252,64,23)" fg:x="361825" fg:w="437"/><text x="94.1067%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (437 samples, 0.11%)</title><rect x="93.8567%" y="421" width="0.1134%" height="15" fill="rgb(232,162,48)" fg:x="361825" fg:w="437"/><text x="94.1067%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (437 samples, 0.11%)</title><rect x="93.8567%" y="405" width="0.1134%" height="15" fill="rgb(246,160,12)" fg:x="361825" fg:w="437"/><text x="94.1067%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (437 samples, 0.11%)</title><rect x="93.8567%" y="389" width="0.1134%" height="15" fill="rgb(247,166,0)" fg:x="361825" fg:w="437"/><text x="94.1067%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (12,404 samples, 3.22%)</title><rect x="93.6061%" y="453" width="3.2176%" height="15" fill="rgb(249,219,21)" fg:x="360859" fg:w="12404"/><text x="93.8561%" y="463.50">has..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (11,001 samples, 2.85%)</title><rect x="93.9700%" y="437" width="2.8536%" height="15" fill="rgb(205,209,3)" fg:x="362262" fg:w="11001"/><text x="94.2200%" y="447.50">ha..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11,001 samples, 2.85%)</title><rect x="93.9700%" y="421" width="2.8536%" height="15" fill="rgb(243,44,1)" fg:x="362262" fg:w="11001"/><text x="94.2200%" y="431.50">co..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (11,001 samples, 2.85%)</title><rect x="93.9700%" y="405" width="2.8536%" height="15" fill="rgb(206,159,16)" fg:x="362262" fg:w="11001"/><text x="94.2200%" y="415.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11,001 samples, 2.85%)</title><rect x="93.9700%" y="389" width="2.8536%" height="15" fill="rgb(244,77,30)" fg:x="362262" fg:w="11001"/><text x="94.2200%" y="399.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (11,001 samples, 2.85%)</title><rect x="93.9700%" y="373" width="2.8536%" height="15" fill="rgb(218,69,12)" fg:x="362262" fg:w="11001"/><text x="94.2200%" y="383.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (11,001 samples, 2.85%)</title><rect x="93.9700%" y="357" width="2.8536%" height="15" fill="rgb(212,87,7)" fg:x="362262" fg:w="11001"/><text x="94.2200%" y="367.50">&lt;[..</text></g><g><title>__memcmp_evex_movbe (5,417 samples, 1.41%)</title><rect x="95.4185%" y="341" width="1.4052%" height="15" fill="rgb(245,114,25)" fg:x="367846" fg:w="5417"/><text x="95.6685%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (1,184 samples, 0.31%)</title><rect x="96.8237%" y="453" width="0.3071%" height="15" fill="rgb(210,61,42)" fg:x="373263" fg:w="1184"/><text x="97.0737%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,258 samples, 0.85%)</title><rect x="97.1308%" y="421" width="0.8451%" height="15" fill="rgb(211,52,33)" fg:x="374447" fg:w="3258"/><text x="97.3808%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3,382 samples, 0.88%)</title><rect x="97.1308%" y="453" width="0.8773%" height="15" fill="rgb(234,58,33)" fg:x="374447" fg:w="3382"/><text x="97.3808%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3,382 samples, 0.88%)</title><rect x="97.1308%" y="437" width="0.8773%" height="15" fill="rgb(220,115,36)" fg:x="374447" fg:w="3382"/><text x="97.3808%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (124 samples, 0.03%)</title><rect x="97.9759%" y="421" width="0.0322%" height="15" fill="rgb(243,153,54)" fg:x="377705" fg:w="124"/><text x="98.2259%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,290 samples, 0.33%)</title><rect x="98.0081%" y="453" width="0.3346%" height="15" fill="rgb(251,47,18)" fg:x="377829" fg:w="1290"/><text x="98.2581%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,290 samples, 0.33%)</title><rect x="98.0081%" y="437" width="0.3346%" height="15" fill="rgb(242,102,42)" fg:x="377829" fg:w="1290"/><text x="98.2581%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (18,929 samples, 4.91%)</title><rect x="93.4331%" y="469" width="4.9101%" height="15" fill="rgb(234,31,38)" fg:x="360192" fg:w="18929"/><text x="93.6831%" y="479.50">hashbr..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (51,986 samples, 13.49%)</title><rect x="84.8636%" y="501" width="13.4851%" height="15" fill="rgb(221,117,51)" fg:x="327156" fg:w="51986"/><text x="85.1136%" y="511.50">hashbrown::rustc_ent..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (19,723 samples, 5.12%)</title><rect x="93.2326%" y="485" width="5.1161%" height="15" fill="rgb(212,20,18)" fg:x="359419" fg:w="19723"/><text x="93.4826%" y="495.50">hashbr..</text></g><g><title>one_brc::process_lines::_{{closure}} (275,601 samples, 71.49%)</title><rect x="26.9608%" y="533" width="71.4903%" height="15" fill="rgb(245,133,36)" fg:x="103936" fg:w="275601"/><text x="27.2108%" y="543.50">one_brc::process_lines::_{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (52,756 samples, 13.68%)</title><rect x="84.7663%" y="517" width="13.6848%" height="15" fill="rgb(212,6,19)" fg:x="326781" fg:w="52756"/><text x="85.0163%" y="527.50">std::collections::has..</text></g><g><title>std::collections::hash::map::map_entry (395 samples, 0.10%)</title><rect x="98.3487%" y="501" width="0.1025%" height="15" fill="rgb(218,1,36)" fg:x="379142" fg:w="395"/><text x="98.5987%" y="511.50"></text></g><g><title>std::panic::catch_unwind (301,774 samples, 78.28%)</title><rect x="20.1718%" y="709" width="78.2796%" height="15" fill="rgb(246,84,54)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (301,774 samples, 78.28%)</title><rect x="20.1718%" y="693" width="78.2796%" height="15" fill="rgb(242,110,6)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (301,774 samples, 78.28%)</title><rect x="20.1718%" y="677" width="78.2796%" height="15" fill="rgb(214,47,5)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (301,774 samples, 78.28%)</title><rect x="20.1718%" y="661" width="78.2796%" height="15" fill="rgb(218,159,25)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="671.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (301,774 samples, 78.28%)</title><rect x="20.1718%" y="645" width="78.2796%" height="15" fill="rgb(215,211,28)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="655.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (301,774 samples, 78.28%)</title><rect x="20.1718%" y="629" width="78.2796%" height="15" fill="rgb(238,59,32)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_brc::main::_{{closure}}::_{{closure}} (301,774 samples, 78.28%)</title><rect x="20.1718%" y="613" width="78.2796%" height="15" fill="rgb(226,82,3)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="623.50">one_brc::main::_{{closure}}::_{{closure}}</text></g><g><title>one_brc::process_lines (301,774 samples, 78.28%)</title><rect x="20.1718%" y="597" width="78.2796%" height="15" fill="rgb(240,164,32)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="607.50">one_brc::process_lines</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (301,774 samples, 78.28%)</title><rect x="20.1718%" y="581" width="78.2796%" height="15" fill="rgb(232,46,7)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="591.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (301,774 samples, 78.28%)</title><rect x="20.1718%" y="565" width="78.2796%" height="15" fill="rgb(229,129,53)" fg:x="77764" fg:w="301774"/><text x="20.4218%" y="575.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (276,338 samples, 71.68%)</title><rect x="26.7699%" y="549" width="71.6815%" height="15" fill="rgb(234,188,29)" fg:x="103200" fg:w="276338"/><text x="27.0199%" y="559.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (301,781 samples, 78.28%)</title><rect x="20.1718%" y="741" width="78.2814%" height="15" fill="rgb(246,141,4)" fg:x="77764" fg:w="301781"/><text x="20.4218%" y="751.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (301,781 samples, 78.28%)</title><rect x="20.1718%" y="725" width="78.2814%" height="15" fill="rgb(229,23,39)" fg:x="77764" fg:w="301781"/><text x="20.4218%" y="735.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>__clone3 (301,796 samples, 78.29%)</title><rect x="20.1718%" y="789" width="78.2853%" height="15" fill="rgb(206,12,3)" fg:x="77764" fg:w="301796"/><text x="20.4218%" y="799.50">__clone3</text></g><g><title>start_thread (301,796 samples, 78.29%)</title><rect x="20.1718%" y="773" width="78.2853%" height="15" fill="rgb(252,226,20)" fg:x="77764" fg:w="301796"/><text x="20.4218%" y="783.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (301,796 samples, 78.29%)</title><rect x="20.1718%" y="757" width="78.2853%" height="15" fill="rgb(216,123,35)" fg:x="77764" fg:w="301796"/><text x="20.4218%" y="767.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string::_{{closure}} (3,882 samples, 1.01%)</title><rect x="98.4571%" y="613" width="1.0070%" height="15" fill="rgb(212,68,40)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="623.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (3,882 samples, 1.01%)</title><rect x="98.4571%" y="597" width="1.0070%" height="15" fill="rgb(254,125,32)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="607.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (3,882 samples, 1.01%)</title><rect x="98.4571%" y="581" width="1.0070%" height="15" fill="rgb(253,97,22)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="591.50"></text></g><g><title>std::io::default_read_to_end (3,882 samples, 1.01%)</title><rect x="98.4571%" y="565" width="1.0070%" height="15" fill="rgb(241,101,14)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="575.50"></text></g><g><title>__GI___libc_read (3,882 samples, 1.01%)</title><rect x="98.4571%" y="549" width="1.0070%" height="15" fill="rgb(238,103,29)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="559.50"></text></g><g><title>[unknown] (3,882 samples, 1.01%)</title><rect x="98.4571%" y="533" width="1.0070%" height="15" fill="rgb(233,195,47)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="543.50"></text></g><g><title>[unknown] (3,882 samples, 1.01%)</title><rect x="98.4571%" y="517" width="1.0070%" height="15" fill="rgb(246,218,30)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="527.50"></text></g><g><title>[unknown] (3,882 samples, 1.01%)</title><rect x="98.4571%" y="501" width="1.0070%" height="15" fill="rgb(219,145,47)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="511.50"></text></g><g><title>[unknown] (3,882 samples, 1.01%)</title><rect x="98.4571%" y="485" width="1.0070%" height="15" fill="rgb(243,12,26)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="495.50"></text></g><g><title>[unknown] (3,882 samples, 1.01%)</title><rect x="98.4571%" y="469" width="1.0070%" height="15" fill="rgb(214,87,16)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="479.50"></text></g><g><title>[unknown] (3,882 samples, 1.01%)</title><rect x="98.4571%" y="453" width="1.0070%" height="15" fill="rgb(208,99,42)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="463.50"></text></g><g><title>[unknown] (3,882 samples, 1.01%)</title><rect x="98.4571%" y="437" width="1.0070%" height="15" fill="rgb(253,99,2)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="447.50"></text></g><g><title>[unknown] (3,882 samples, 1.01%)</title><rect x="98.4571%" y="421" width="1.0070%" height="15" fill="rgb(220,168,23)" fg:x="379560" fg:w="3882"/><text x="98.7071%" y="431.50"></text></g><g><title>[unknown] (3,847 samples, 1.00%)</title><rect x="98.4662%" y="405" width="0.9979%" height="15" fill="rgb(242,38,24)" fg:x="379595" fg:w="3847"/><text x="98.7162%" y="415.50"></text></g><g><title>[unknown] (3,807 samples, 0.99%)</title><rect x="98.4766%" y="389" width="0.9875%" height="15" fill="rgb(225,182,9)" fg:x="379635" fg:w="3807"/><text x="98.7266%" y="399.50"></text></g><g><title>[unknown] (3,740 samples, 0.97%)</title><rect x="98.4939%" y="373" width="0.9701%" height="15" fill="rgb(243,178,37)" fg:x="379702" fg:w="3740"/><text x="98.7439%" y="383.50"></text></g><g><title>[unknown] (1,784 samples, 0.46%)</title><rect x="99.0013%" y="357" width="0.4628%" height="15" fill="rgb(232,139,19)" fg:x="381658" fg:w="1784"/><text x="99.2513%" y="367.50"></text></g><g><title>[unknown] (1,782 samples, 0.46%)</title><rect x="99.0018%" y="341" width="0.4622%" height="15" fill="rgb(225,201,24)" fg:x="381660" fg:w="1782"/><text x="99.2518%" y="351.50"></text></g><g><title>[unknown] (1,768 samples, 0.46%)</title><rect x="99.0055%" y="325" width="0.4586%" height="15" fill="rgb(221,47,46)" fg:x="381674" fg:w="1768"/><text x="99.2555%" y="335.50"></text></g><g><title>[unknown] (1,733 samples, 0.45%)</title><rect x="99.0145%" y="309" width="0.4495%" height="15" fill="rgb(249,23,13)" fg:x="381709" fg:w="1733"/><text x="99.2645%" y="319.50"></text></g><g><title>[unknown] (1,654 samples, 0.43%)</title><rect x="99.0350%" y="293" width="0.4290%" height="15" fill="rgb(219,9,5)" fg:x="381788" fg:w="1654"/><text x="99.2850%" y="303.50"></text></g><g><title>[unknown] (1,578 samples, 0.41%)</title><rect x="99.0548%" y="277" width="0.4093%" height="15" fill="rgb(254,171,16)" fg:x="381864" fg:w="1578"/><text x="99.3048%" y="287.50"></text></g><g><title>[unknown] (1,531 samples, 0.40%)</title><rect x="99.0669%" y="261" width="0.3971%" height="15" fill="rgb(230,171,20)" fg:x="381911" fg:w="1531"/><text x="99.3169%" y="271.50"></text></g><g><title>[unknown] (1,439 samples, 0.37%)</title><rect x="99.0908%" y="245" width="0.3733%" height="15" fill="rgb(210,71,41)" fg:x="382003" fg:w="1439"/><text x="99.3408%" y="255.50"></text></g><g><title>[unknown] (1,221 samples, 0.32%)</title><rect x="99.1474%" y="229" width="0.3167%" height="15" fill="rgb(206,173,20)" fg:x="382221" fg:w="1221"/><text x="99.3974%" y="239.50"></text></g><g><title>[unknown] (623 samples, 0.16%)</title><rect x="99.3025%" y="213" width="0.1616%" height="15" fill="rgb(233,88,34)" fg:x="382819" fg:w="623"/><text x="99.5525%" y="223.50"></text></g><g><title>[unknown] (411 samples, 0.11%)</title><rect x="99.3575%" y="197" width="0.1066%" height="15" fill="rgb(223,209,46)" fg:x="383031" fg:w="411"/><text x="99.6075%" y="207.50"></text></g><g><title>[unknown] (262 samples, 0.07%)</title><rect x="99.3961%" y="181" width="0.0680%" height="15" fill="rgb(250,43,18)" fg:x="383180" fg:w="262"/><text x="99.6461%" y="191.50"></text></g><g><title>[unknown] (114 samples, 0.03%)</title><rect x="99.4345%" y="165" width="0.0296%" height="15" fill="rgb(208,13,10)" fg:x="383328" fg:w="114"/><text x="99.6845%" y="175.50"></text></g><g><title>[unknown] (78 samples, 0.02%)</title><rect x="99.4439%" y="149" width="0.0202%" height="15" fill="rgb(212,200,36)" fg:x="383364" fg:w="78"/><text x="99.6939%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (41 samples, 0.01%)</title><rect x="99.8716%" y="581" width="0.0106%" height="15" fill="rgb(225,90,30)" fg:x="385013" fg:w="41"/><text x="100.1216%" y="591.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string (5,571 samples, 1.45%)</title><rect x="98.4571%" y="645" width="1.4451%" height="15" fill="rgb(236,182,39)" fg:x="379560" fg:w="5571"/><text x="98.7071%" y="655.50"></text></g><g><title>std::io::append_to_string (5,571 samples, 1.45%)</title><rect x="98.4571%" y="629" width="1.4451%" height="15" fill="rgb(212,144,35)" fg:x="379560" fg:w="5571"/><text x="98.7071%" y="639.50"></text></g><g><title>core::str::converts::from_utf8 (1,689 samples, 0.44%)</title><rect x="99.4641%" y="613" width="0.4381%" height="15" fill="rgb(228,63,44)" fg:x="383442" fg:w="1689"/><text x="99.7141%" y="623.50"></text></g><g><title>core::str::validations::run_utf8_validation (1,689 samples, 0.44%)</title><rect x="99.4641%" y="597" width="0.4381%" height="15" fill="rgb(228,109,6)" fg:x="383442" fg:w="1689"/><text x="99.7141%" y="607.50"></text></g><g><title>core::str::validations::utf8_char_width (77 samples, 0.02%)</title><rect x="99.8822%" y="581" width="0.0200%" height="15" fill="rgb(238,117,24)" fg:x="385054" fg:w="77"/><text x="100.1322%" y="591.50"></text></g><g><title>_start (5,573 samples, 1.45%)</title><rect x="98.4571%" y="789" width="1.4456%" height="15" fill="rgb(242,26,26)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="799.50"></text></g><g><title>__libc_start_main_impl (5,573 samples, 1.45%)</title><rect x="98.4571%" y="773" width="1.4456%" height="15" fill="rgb(221,92,48)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="783.50"></text></g><g><title>__libc_start_call_main (5,573 samples, 1.45%)</title><rect x="98.4571%" y="757" width="1.4456%" height="15" fill="rgb(209,209,32)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="767.50"></text></g><g><title>main (5,573 samples, 1.45%)</title><rect x="98.4571%" y="741" width="1.4456%" height="15" fill="rgb(221,70,22)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="751.50"></text></g><g><title>std::rt::lang_start_internal (5,573 samples, 1.45%)</title><rect x="98.4571%" y="725" width="1.4456%" height="15" fill="rgb(248,145,5)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="735.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (5,573 samples, 1.45%)</title><rect x="98.4571%" y="709" width="1.4456%" height="15" fill="rgb(226,116,26)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,573 samples, 1.45%)</title><rect x="98.4571%" y="693" width="1.4456%" height="15" fill="rgb(244,5,17)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5,573 samples, 1.45%)</title><rect x="98.4571%" y="677" width="1.4456%" height="15" fill="rgb(252,159,33)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="687.50"></text></g><g><title>one_brc::main (5,573 samples, 1.45%)</title><rect x="98.4571%" y="661" width="1.4456%" height="15" fill="rgb(206,71,0)" fg:x="379560" fg:w="5573"/><text x="98.7071%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (284 samples, 0.07%)</title><rect x="99.9097%" y="789" width="0.0737%" height="15" fill="rgb(233,118,54)" fg:x="385160" fg:w="284"/><text x="100.1597%" y="799.50"></text></g><g><title>one-brc (385,503 samples, 100.00%)</title><rect x="0.0000%" y="805" width="99.9987%" height="15" fill="rgb(234,83,48)" fg:x="0" fg:w="385503"/><text x="0.2500%" y="815.50">one-brc</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (57 samples, 0.01%)</title><rect x="99.9839%" y="789" width="0.0148%" height="15" fill="rgb(228,3,54)" fg:x="385446" fg:w="57"/><text x="100.2339%" y="799.50"></text></g><g><title>all (385,508 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(226,155,13)" fg:x="0" fg:w="385508"/><text x="0.2500%" y="831.50"></text></g></svg></svg>